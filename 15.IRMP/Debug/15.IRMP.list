
15.IRMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006130  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  08006318  08006318  00016318  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067ec  080067ec  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  080067ec  080067ec  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080067ec  080067ec  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067ec  080067ec  000167ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067f0  080067f0  000167f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080067f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  200001e4  080069d8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  080069d8  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010952  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002563  00000000  00000000  00030b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  000330c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b58  00000000  00000000  00033d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dff5  00000000  00000000  00034890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e823  00000000  00000000  00052885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad335  00000000  00000000  000610a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010e3dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004354  00000000  00000000  0010e430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e4 	.word	0x200001e4
 8000204:	00000000 	.word	0x00000000
 8000208:	08006300 	.word	0x08006300

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e8 	.word	0x200001e8
 8000224:	08006300 	.word	0x08006300

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	f107 0308 	add.w	r3, r7, #8
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b74:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <MX_GPIO_Init+0x78>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a17      	ldr	r2, [pc, #92]	; (8000bd8 <MX_GPIO_Init+0x78>)
 8000b7a:	f043 0304 	orr.w	r3, r3, #4
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <MX_GPIO_Init+0x78>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f003 0304 	and.w	r3, r3, #4
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <MX_GPIO_Init+0x78>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a11      	ldr	r2, [pc, #68]	; (8000bd8 <MX_GPIO_Init+0x78>)
 8000b92:	f043 0308 	orr.w	r3, r3, #8
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <MX_GPIO_Init+0x78>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f003 0308 	and.w	r3, r3, #8
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000baa:	480c      	ldr	r0, [pc, #48]	; (8000bdc <MX_GPIO_Init+0x7c>)
 8000bac:	f000 fe8f 	bl	80018ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 8000bb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BEEP_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 0308 	add.w	r3, r7, #8
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4804      	ldr	r0, [pc, #16]	; (8000bdc <MX_GPIO_Init+0x7c>)
 8000bca:	f000 fcd5 	bl	8001578 <HAL_GPIO_Init>

}
 8000bce:	bf00      	nop
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40010c00 	.word	0x40010c00

08000be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be6:	f000 fb33 	bl	8001250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bea:	f000 f827 	bl	8000c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bee:	f7ff ffb7 	bl	8000b60 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000bf2:	f000 f9b1 	bl	8000f58 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000bf6:	f000 fa8f 	bl	8001118 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	irmp_init();
 8000bfa:	f002 fa83 	bl	8003104 <irmp_init>
	printf("初始化完成.....\r\n");
 8000bfe:	480c      	ldr	r0, [pc, #48]	; (8000c30 <main+0x50>)
 8000c00:	f003 fb10 	bl	8004224 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (irmp_get_data(&irmp_data)) {
 8000c04:	463b      	mov	r3, r7
 8000c06:	4618      	mov	r0, r3
 8000c08:	f002 fa82 	bl	8003110 <irmp_get_data>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d0f8      	beq.n	8000c04 <main+0x24>
			HAL_Delay(50);
 8000c12:	2032      	movs	r0, #50	; 0x32
 8000c14:	f000 fb7e 	bl	8001314 <HAL_Delay>
			printf("按键被按下了......\r\n");
 8000c18:	4806      	ldr	r0, [pc, #24]	; (8000c34 <main+0x54>)
 8000c1a:	f003 fb03 	bl	8004224 <puts>

			printf("指令:0x%02x\r\n", irmp_data.command);
 8000c1e:	f8b7 3003 	ldrh.w	r3, [r7, #3]
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	4619      	mov	r1, r3
 8000c26:	4804      	ldr	r0, [pc, #16]	; (8000c38 <main+0x58>)
 8000c28:	f003 fa76 	bl	8004118 <iprintf>
		if (irmp_get_data(&irmp_data)) {
 8000c2c:	e7ea      	b.n	8000c04 <main+0x24>
 8000c2e:	bf00      	nop
 8000c30:	08006318 	.word	0x08006318
 8000c34:	08006330 	.word	0x08006330
 8000c38:	0800634c 	.word	0x0800634c

08000c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b090      	sub	sp, #64	; 0x40
 8000c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c42:	f107 0318 	add.w	r3, r7, #24
 8000c46:	2228      	movs	r2, #40	; 0x28
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f002 fdfc 	bl	8003848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c70:	2302      	movs	r3, #2
 8000c72:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c7a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c80:	f107 0318 	add.w	r3, r7, #24
 8000c84:	4618      	mov	r0, r3
 8000c86:	f000 fe3b 	bl	8001900 <HAL_RCC_OscConfig>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c90:	f000 f832 	bl	8000cf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c94:	230f      	movs	r3, #15
 8000c96:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ca4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	2102      	movs	r1, #2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f001 f8a6 	bl	8001e00 <HAL_RCC_ClockConfig>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000cba:	f000 f81d 	bl	8000cf8 <Error_Handler>
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	3740      	adds	r7, #64	; 0x40
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <__io_putchar>:
//定义_sys_exit()以避免使用半主机模式
void _sys_exit(int x) {
	x = x;
}
//重定义fputc函数
PUTCHAR_PROTOTYPE {
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	// 具体哪个串口可以更改huart2为其它串口
	// HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1 , 0xffff);
	while ((USART1->SR & 0X40) == 0) {
 8000cd0:	bf00      	nop
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <__io_putchar+0x2c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d0f9      	beq.n	8000cd2 <__io_putchar+0xa>
	}; //循环发送,直到发送完毕
	USART1->DR = (uint8_t) ch;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <__io_putchar+0x2c>)
 8000ce4:	605a      	str	r2, [r3, #4]

//  while ((USART2->SR & 0X40) == 0) {
//  }; //循环发送,直到发送完毕
//  USART2->DR = (uint8_t) ch;

	return ch;
 8000ce6:	687b      	ldr	r3, [r7, #4]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40013800 	.word	0x40013800

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfc:	b672      	cpsid	i
}
 8000cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d00:	e7fe      	b.n	8000d00 <Error_Handler+0x8>
	...

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <HAL_MspInit+0x5c>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <HAL_MspInit+0x5c>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6193      	str	r3, [r2, #24]
 8000d16:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <HAL_MspInit+0x5c>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <HAL_MspInit+0x5c>)
 8000d24:	69db      	ldr	r3, [r3, #28]
 8000d26:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <HAL_MspInit+0x5c>)
 8000d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d2c:	61d3      	str	r3, [r2, #28]
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <HAL_MspInit+0x5c>)
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <HAL_MspInit+0x60>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <HAL_MspInit+0x60>)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d56:	bf00      	nop
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr
 8000d60:	40021000 	.word	0x40021000
 8000d64:	40010000 	.word	0x40010000

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <NMI_Handler+0x4>

08000d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr

08000d92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr

08000d9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr

08000daa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dae:	f000 fa95 	bl	80012dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <TIM4_IRQHandler+0x10>)
 8000dbe:	f001 fb75 	bl	80024ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	2000028c 	.word	0x2000028c

08000dcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
	return 1;
 8000dd0:	2301      	movs	r3, #1
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr

08000dda <_kill>:

int _kill(int pid, int sig)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
 8000de2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000de4:	f002 fcf8 	bl	80037d8 <__errno>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2216      	movs	r2, #22
 8000dec:	601a      	str	r2, [r3, #0]
	return -1;
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <_exit>:

void _exit (int status)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e02:	f04f 31ff 	mov.w	r1, #4294967295
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff ffe7 	bl	8000dda <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e0c:	e7fe      	b.n	8000e0c <_exit+0x12>

08000e0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	60f8      	str	r0, [r7, #12]
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	e00a      	b.n	8000e36 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e20:	f3af 8000 	nop.w
 8000e24:	4601      	mov	r1, r0
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	1c5a      	adds	r2, r3, #1
 8000e2a:	60ba      	str	r2, [r7, #8]
 8000e2c:	b2ca      	uxtb	r2, r1
 8000e2e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	3301      	adds	r3, #1
 8000e34:	617b      	str	r3, [r7, #20]
 8000e36:	697a      	ldr	r2, [r7, #20]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	dbf0      	blt.n	8000e20 <_read+0x12>
	}

return len;
 8000e3e:	687b      	ldr	r3, [r7, #4]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	e009      	b.n	8000e6e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	1c5a      	adds	r2, r3, #1
 8000e5e:	60ba      	str	r2, [r7, #8]
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ff30 	bl	8000cc8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	dbf1      	blt.n	8000e5a <_write+0x12>
	}
	return len;
 8000e76:	687b      	ldr	r3, [r7, #4]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <_close>:

int _close(int file)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	return -1;
 8000e88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr

08000e96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ea6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <_isatty>:

int _isatty(int file)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	return 1;
 8000ebc:	2301      	movs	r3, #1
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3714      	adds	r7, #20
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr

08000ee0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee8:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <_sbrk+0x5c>)
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <_sbrk+0x60>)
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d102      	bne.n	8000f02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <_sbrk+0x64>)
 8000efe:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <_sbrk+0x68>)
 8000f00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d207      	bcs.n	8000f20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f10:	f002 fc62 	bl	80037d8 <__errno>
 8000f14:	4603      	mov	r3, r0
 8000f16:	220c      	movs	r2, #12
 8000f18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1e:	e009      	b.n	8000f34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <_sbrk+0x64>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f26:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	4a05      	ldr	r2, [pc, #20]	; (8000f44 <_sbrk+0x64>)
 8000f30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f32:	68fb      	ldr	r3, [r7, #12]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20010000 	.word	0x20010000
 8000f40:	00000400 	.word	0x00000400
 8000f44:	20000200 	.word	0x20000200
 8000f48:	20000328 	.word	0x20000328

08000f4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr

08000f58 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5e:	f107 0318 	add.w	r3, r7, #24
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f76:	463b      	mov	r3, r7
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f82:	4b34      	ldr	r3, [pc, #208]	; (8001054 <MX_TIM4_Init+0xfc>)
 8000f84:	4a34      	ldr	r2, [pc, #208]	; (8001058 <MX_TIM4_Init+0x100>)
 8000f86:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = ((F_CPU / F_INTERRUPTS)/8) - 1;
 8000f88:	4b34      	ldr	r3, [pc, #208]	; (800105c <MX_TIM4_Init+0x104>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a34      	ldr	r2, [pc, #208]	; (8001060 <MX_TIM4_Init+0x108>)
 8000f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f92:	0bdb      	lsrs	r3, r3, #15
 8000f94:	3b01      	subs	r3, #1
 8000f96:	4a2f      	ldr	r2, [pc, #188]	; (8001054 <MX_TIM4_Init+0xfc>)
 8000f98:	6053      	str	r3, [r2, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9a:	4b2e      	ldr	r3, [pc, #184]	; (8001054 <MX_TIM4_Init+0xfc>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8-1;
 8000fa0:	4b2c      	ldr	r3, [pc, #176]	; (8001054 <MX_TIM4_Init+0xfc>)
 8000fa2:	2207      	movs	r2, #7
 8000fa4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa6:	4b2b      	ldr	r3, [pc, #172]	; (8001054 <MX_TIM4_Init+0xfc>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fac:	4b29      	ldr	r3, [pc, #164]	; (8001054 <MX_TIM4_Init+0xfc>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000fb2:	4828      	ldr	r0, [pc, #160]	; (8001054 <MX_TIM4_Init+0xfc>)
 8000fb4:	f001 f8be 	bl	8002134 <HAL_TIM_Base_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8000fbe:	f7ff fe9b 	bl	8000cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000fc8:	f107 0318 	add.w	r3, r7, #24
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4821      	ldr	r0, [pc, #132]	; (8001054 <MX_TIM4_Init+0xfc>)
 8000fd0:	f001 fc08 	bl	80027e4 <HAL_TIM_ConfigClockSource>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 8000fda:	f7ff fe8d 	bl	8000cf8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000fde:	481d      	ldr	r0, [pc, #116]	; (8001054 <MX_TIM4_Init+0xfc>)
 8000fe0:	f001 f8f7 	bl	80021d2 <HAL_TIM_IC_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000fea:	f7ff fe85 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ff6:	f107 0310 	add.w	r3, r7, #16
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4815      	ldr	r0, [pc, #84]	; (8001054 <MX_TIM4_Init+0xfc>)
 8000ffe:	f001 ff27 	bl	8002e50 <HAL_TIMEx_MasterConfigSynchronization>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001008:	f7ff fe76 	bl	8000cf8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800100c:	2300      	movs	r3, #0
 800100e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001010:	2301      	movs	r3, #1
 8001012:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800101c:	463b      	mov	r3, r7
 800101e:	220c      	movs	r2, #12
 8001020:	4619      	mov	r1, r3
 8001022:	480c      	ldr	r0, [pc, #48]	; (8001054 <MX_TIM4_Init+0xfc>)
 8001024:	f001 fb4a 	bl	80026bc <HAL_TIM_IC_ConfigChannel>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800102e:	f7ff fe63 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 8001032:	210c      	movs	r1, #12
 8001034:	4807      	ldr	r0, [pc, #28]	; (8001054 <MX_TIM4_Init+0xfc>)
 8001036:	f001 f925 	bl	8002284 <HAL_TIM_IC_Start_IT>
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);   //使能更新中断
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_TIM4_Init+0xfc>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	68da      	ldr	r2, [r3, #12]
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <MX_TIM4_Init+0xfc>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f042 0201 	orr.w	r2, r2, #1
 8001048:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM4_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	3728      	adds	r7, #40	; 0x28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2000028c 	.word	0x2000028c
 8001058:	40000800 	.word	0x40000800
 800105c:	20000000 	.word	0x20000000
 8001060:	45e7b273 	.word	0x45e7b273

08001064 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM4)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a1a      	ldr	r2, [pc, #104]	; (80010e8 <HAL_TIM_Base_MspInit+0x84>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d12c      	bne.n	80010de <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001084:	4b19      	ldr	r3, [pc, #100]	; (80010ec <HAL_TIM_Base_MspInit+0x88>)
 8001086:	69db      	ldr	r3, [r3, #28]
 8001088:	4a18      	ldr	r2, [pc, #96]	; (80010ec <HAL_TIM_Base_MspInit+0x88>)
 800108a:	f043 0304 	orr.w	r3, r3, #4
 800108e:	61d3      	str	r3, [r2, #28]
 8001090:	4b16      	ldr	r3, [pc, #88]	; (80010ec <HAL_TIM_Base_MspInit+0x88>)
 8001092:	69db      	ldr	r3, [r3, #28]
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109c:	4b13      	ldr	r3, [pc, #76]	; (80010ec <HAL_TIM_Base_MspInit+0x88>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4a12      	ldr	r2, [pc, #72]	; (80010ec <HAL_TIM_Base_MspInit+0x88>)
 80010a2:	f043 0308 	orr.w	r3, r3, #8
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b10      	ldr	r3, [pc, #64]	; (80010ec <HAL_TIM_Base_MspInit+0x88>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f003 0308 	and.w	r3, r3, #8
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = IRMP_Receive_Pin;
 80010b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010be:	2301      	movs	r3, #1
 80010c0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(IRMP_Receive_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 0310 	add.w	r3, r7, #16
 80010c6:	4619      	mov	r1, r3
 80010c8:	4809      	ldr	r0, [pc, #36]	; (80010f0 <HAL_TIM_Base_MspInit+0x8c>)
 80010ca:	f000 fa55 	bl	8001578 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	201e      	movs	r0, #30
 80010d4:	f000 fa19 	bl	800150a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80010d8:	201e      	movs	r0, #30
 80010da:	f000 fa32 	bl	8001542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80010de:	bf00      	nop
 80010e0:	3720      	adds	r7, #32
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40000800 	.word	0x40000800
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40010c00 	.word	0x40010c00

080010f4 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END TIM4_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim4.Instance) {
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	429a      	cmp	r2, r3
 8001106:	d101      	bne.n	800110c <HAL_TIM_PeriodElapsedCallback+0x18>
		irmp_ISR();
 8001108:	f002 f8f6 	bl	80032f8 <irmp_ISR>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	2000028c 	.word	0x2000028c

08001118 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <MX_USART1_UART_Init+0x4c>)
 800111e:	4a12      	ldr	r2, [pc, #72]	; (8001168 <MX_USART1_UART_Init+0x50>)
 8001120:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <MX_USART1_UART_Init+0x4c>)
 8001124:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001128:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <MX_USART1_UART_Init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <MX_USART1_UART_Init+0x4c>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001136:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <MX_USART1_UART_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800113c:	4b09      	ldr	r3, [pc, #36]	; (8001164 <MX_USART1_UART_Init+0x4c>)
 800113e:	220c      	movs	r2, #12
 8001140:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001142:	4b08      	ldr	r3, [pc, #32]	; (8001164 <MX_USART1_UART_Init+0x4c>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <MX_USART1_UART_Init+0x4c>)
 800114a:	2200      	movs	r2, #0
 800114c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800114e:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_USART1_UART_Init+0x4c>)
 8001150:	f001 fefc 	bl	8002f4c <HAL_UART_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800115a:	f7ff fdcd 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200002d4 	.word	0x200002d4
 8001168:	40013800 	.word	0x40013800

0800116c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a1c      	ldr	r2, [pc, #112]	; (80011f8 <HAL_UART_MspInit+0x8c>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d131      	bne.n	80011f0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800118c:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <HAL_UART_MspInit+0x90>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a1a      	ldr	r2, [pc, #104]	; (80011fc <HAL_UART_MspInit+0x90>)
 8001192:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	4b18      	ldr	r3, [pc, #96]	; (80011fc <HAL_UART_MspInit+0x90>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a4:	4b15      	ldr	r3, [pc, #84]	; (80011fc <HAL_UART_MspInit+0x90>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	4a14      	ldr	r2, [pc, #80]	; (80011fc <HAL_UART_MspInit+0x90>)
 80011aa:	f043 0304 	orr.w	r3, r3, #4
 80011ae:	6193      	str	r3, [r2, #24]
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_UART_MspInit+0x90>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ca:	f107 0310 	add.w	r3, r7, #16
 80011ce:	4619      	mov	r1, r3
 80011d0:	480b      	ldr	r0, [pc, #44]	; (8001200 <HAL_UART_MspInit+0x94>)
 80011d2:	f000 f9d1 	bl	8001578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	4619      	mov	r1, r3
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <HAL_UART_MspInit+0x94>)
 80011ec:	f000 f9c4 	bl	8001578 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80011f0:	bf00      	nop
 80011f2:	3720      	adds	r7, #32
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40013800 	.word	0x40013800
 80011fc:	40021000 	.word	0x40021000
 8001200:	40010800 	.word	0x40010800

08001204 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001204:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001206:	e003      	b.n	8001210 <LoopCopyDataInit>

08001208 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001208:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800120a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800120c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800120e:	3104      	adds	r1, #4

08001210 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001210:	480a      	ldr	r0, [pc, #40]	; (800123c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001214:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001216:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001218:	d3f6      	bcc.n	8001208 <CopyDataInit>
  ldr r2, =_sbss
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800121c:	e002      	b.n	8001224 <LoopFillZerobss>

0800121e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001220:	f842 3b04 	str.w	r3, [r2], #4

08001224 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001224:	4b08      	ldr	r3, [pc, #32]	; (8001248 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001226:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001228:	d3f9      	bcc.n	800121e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800122a:	f7ff fe8f 	bl	8000f4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800122e:	f002 fad9 	bl	80037e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001232:	f7ff fcd5 	bl	8000be0 <main>
  bx lr
 8001236:	4770      	bx	lr
  ldr r3, =_sidata
 8001238:	080067f4 	.word	0x080067f4
  ldr r0, =_sdata
 800123c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001240:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 8001244:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 8001248:	20000328 	.word	0x20000328

0800124c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC1_2_IRQHandler>
	...

08001250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <HAL_Init+0x28>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a07      	ldr	r2, [pc, #28]	; (8001278 <HAL_Init+0x28>)
 800125a:	f043 0310 	orr.w	r3, r3, #16
 800125e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001260:	2003      	movs	r0, #3
 8001262:	f000 f947 	bl	80014f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001266:	2000      	movs	r0, #0
 8001268:	f000 f808 	bl	800127c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800126c:	f7ff fd4a 	bl	8000d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40022000 	.word	0x40022000

0800127c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_InitTick+0x54>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_InitTick+0x58>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	4619      	mov	r1, r3
 800128e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001292:	fbb3 f3f1 	udiv	r3, r3, r1
 8001296:	fbb2 f3f3 	udiv	r3, r2, r3
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f95f 	bl	800155e <HAL_SYSTICK_Config>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00e      	b.n	80012c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b0f      	cmp	r3, #15
 80012ae:	d80a      	bhi.n	80012c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b0:	2200      	movs	r2, #0
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	f000 f927 	bl	800150a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012bc:	4a06      	ldr	r2, [pc, #24]	; (80012d8 <HAL_InitTick+0x5c>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	e000      	b.n	80012c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000000 	.word	0x20000000
 80012d4:	20000008 	.word	0x20000008
 80012d8:	20000004 	.word	0x20000004

080012dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <HAL_IncTick+0x1c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b05      	ldr	r3, [pc, #20]	; (80012fc <HAL_IncTick+0x20>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	4a03      	ldr	r2, [pc, #12]	; (80012fc <HAL_IncTick+0x20>)
 80012ee:	6013      	str	r3, [r2, #0]
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	20000008 	.word	0x20000008
 80012fc:	20000314 	.word	0x20000314

08001300 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return uwTick;
 8001304:	4b02      	ldr	r3, [pc, #8]	; (8001310 <HAL_GetTick+0x10>)
 8001306:	681b      	ldr	r3, [r3, #0]
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	20000314 	.word	0x20000314

08001314 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800131c:	f7ff fff0 	bl	8001300 <HAL_GetTick>
 8001320:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800132c:	d005      	beq.n	800133a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <HAL_Delay+0x44>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4413      	add	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800133a:	bf00      	nop
 800133c:	f7ff ffe0 	bl	8001300 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	429a      	cmp	r2, r3
 800134a:	d8f7      	bhi.n	800133c <HAL_Delay+0x28>
  {
  }
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000008 	.word	0x20000008

0800135c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <__NVIC_SetPriorityGrouping+0x44>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001378:	4013      	ands	r3, r2
 800137a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001384:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800138c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800138e:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	60d3      	str	r3, [r2, #12]
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <__NVIC_GetPriorityGrouping+0x18>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	0a1b      	lsrs	r3, r3, #8
 80013ae:	f003 0307 	and.w	r3, r3, #7
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	db0b      	blt.n	80013ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	f003 021f 	and.w	r2, r3, #31
 80013d8:	4906      	ldr	r1, [pc, #24]	; (80013f4 <__NVIC_EnableIRQ+0x34>)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	095b      	lsrs	r3, r3, #5
 80013e0:	2001      	movs	r0, #1
 80013e2:	fa00 f202 	lsl.w	r2, r0, r2
 80013e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	e000e100 	.word	0xe000e100

080013f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	6039      	str	r1, [r7, #0]
 8001402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001408:	2b00      	cmp	r3, #0
 800140a:	db0a      	blt.n	8001422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	b2da      	uxtb	r2, r3
 8001410:	490c      	ldr	r1, [pc, #48]	; (8001444 <__NVIC_SetPriority+0x4c>)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	0112      	lsls	r2, r2, #4
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	440b      	add	r3, r1
 800141c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001420:	e00a      	b.n	8001438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4908      	ldr	r1, [pc, #32]	; (8001448 <__NVIC_SetPriority+0x50>)
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	3b04      	subs	r3, #4
 8001430:	0112      	lsls	r2, r2, #4
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	440b      	add	r3, r1
 8001436:	761a      	strb	r2, [r3, #24]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000e100 	.word	0xe000e100
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800144c:	b480      	push	{r7}
 800144e:	b089      	sub	sp, #36	; 0x24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f1c3 0307 	rsb	r3, r3, #7
 8001466:	2b04      	cmp	r3, #4
 8001468:	bf28      	it	cs
 800146a:	2304      	movcs	r3, #4
 800146c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3304      	adds	r3, #4
 8001472:	2b06      	cmp	r3, #6
 8001474:	d902      	bls.n	800147c <NVIC_EncodePriority+0x30>
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3b03      	subs	r3, #3
 800147a:	e000      	b.n	800147e <NVIC_EncodePriority+0x32>
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001480:	f04f 32ff 	mov.w	r2, #4294967295
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43da      	mvns	r2, r3
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	401a      	ands	r2, r3
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001494:	f04f 31ff 	mov.w	r1, #4294967295
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	fa01 f303 	lsl.w	r3, r1, r3
 800149e:	43d9      	mvns	r1, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	4313      	orrs	r3, r2
         );
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3724      	adds	r7, #36	; 0x24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr

080014b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014c0:	d301      	bcc.n	80014c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c2:	2301      	movs	r3, #1
 80014c4:	e00f      	b.n	80014e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c6:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <SysTick_Config+0x40>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ce:	210f      	movs	r1, #15
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295
 80014d4:	f7ff ff90 	bl	80013f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <SysTick_Config+0x40>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014de:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <SysTick_Config+0x40>)
 80014e0:	2207      	movs	r2, #7
 80014e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	e000e010 	.word	0xe000e010

080014f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ff2d 	bl	800135c <__NVIC_SetPriorityGrouping>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800151c:	f7ff ff42 	bl	80013a4 <__NVIC_GetPriorityGrouping>
 8001520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	68b9      	ldr	r1, [r7, #8]
 8001526:	6978      	ldr	r0, [r7, #20]
 8001528:	f7ff ff90 	bl	800144c <NVIC_EncodePriority>
 800152c:	4602      	mov	r2, r0
 800152e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001532:	4611      	mov	r1, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff5f 	bl	80013f8 <__NVIC_SetPriority>
}
 800153a:	bf00      	nop
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff35 	bl	80013c0 <__NVIC_EnableIRQ>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff ffa2 	bl	80014b0 <SysTick_Config>
 800156c:	4603      	mov	r3, r0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001578:	b480      	push	{r7}
 800157a:	b08b      	sub	sp, #44	; 0x2c
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001586:	2300      	movs	r3, #0
 8001588:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800158a:	e179      	b.n	8001880 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800158c:	2201      	movs	r2, #1
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	69fa      	ldr	r2, [r7, #28]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	f040 8168 	bne.w	800187a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	4aa0      	ldr	r2, [pc, #640]	; (8001830 <HAL_GPIO_Init+0x2b8>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d05e      	beq.n	8001672 <HAL_GPIO_Init+0xfa>
 80015b4:	4a9e      	ldr	r2, [pc, #632]	; (8001830 <HAL_GPIO_Init+0x2b8>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d875      	bhi.n	80016a6 <HAL_GPIO_Init+0x12e>
 80015ba:	4a9e      	ldr	r2, [pc, #632]	; (8001834 <HAL_GPIO_Init+0x2bc>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d058      	beq.n	8001672 <HAL_GPIO_Init+0xfa>
 80015c0:	4a9c      	ldr	r2, [pc, #624]	; (8001834 <HAL_GPIO_Init+0x2bc>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d86f      	bhi.n	80016a6 <HAL_GPIO_Init+0x12e>
 80015c6:	4a9c      	ldr	r2, [pc, #624]	; (8001838 <HAL_GPIO_Init+0x2c0>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d052      	beq.n	8001672 <HAL_GPIO_Init+0xfa>
 80015cc:	4a9a      	ldr	r2, [pc, #616]	; (8001838 <HAL_GPIO_Init+0x2c0>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d869      	bhi.n	80016a6 <HAL_GPIO_Init+0x12e>
 80015d2:	4a9a      	ldr	r2, [pc, #616]	; (800183c <HAL_GPIO_Init+0x2c4>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d04c      	beq.n	8001672 <HAL_GPIO_Init+0xfa>
 80015d8:	4a98      	ldr	r2, [pc, #608]	; (800183c <HAL_GPIO_Init+0x2c4>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d863      	bhi.n	80016a6 <HAL_GPIO_Init+0x12e>
 80015de:	4a98      	ldr	r2, [pc, #608]	; (8001840 <HAL_GPIO_Init+0x2c8>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d046      	beq.n	8001672 <HAL_GPIO_Init+0xfa>
 80015e4:	4a96      	ldr	r2, [pc, #600]	; (8001840 <HAL_GPIO_Init+0x2c8>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d85d      	bhi.n	80016a6 <HAL_GPIO_Init+0x12e>
 80015ea:	2b12      	cmp	r3, #18
 80015ec:	d82a      	bhi.n	8001644 <HAL_GPIO_Init+0xcc>
 80015ee:	2b12      	cmp	r3, #18
 80015f0:	d859      	bhi.n	80016a6 <HAL_GPIO_Init+0x12e>
 80015f2:	a201      	add	r2, pc, #4	; (adr r2, 80015f8 <HAL_GPIO_Init+0x80>)
 80015f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f8:	08001673 	.word	0x08001673
 80015fc:	0800164d 	.word	0x0800164d
 8001600:	0800165f 	.word	0x0800165f
 8001604:	080016a1 	.word	0x080016a1
 8001608:	080016a7 	.word	0x080016a7
 800160c:	080016a7 	.word	0x080016a7
 8001610:	080016a7 	.word	0x080016a7
 8001614:	080016a7 	.word	0x080016a7
 8001618:	080016a7 	.word	0x080016a7
 800161c:	080016a7 	.word	0x080016a7
 8001620:	080016a7 	.word	0x080016a7
 8001624:	080016a7 	.word	0x080016a7
 8001628:	080016a7 	.word	0x080016a7
 800162c:	080016a7 	.word	0x080016a7
 8001630:	080016a7 	.word	0x080016a7
 8001634:	080016a7 	.word	0x080016a7
 8001638:	080016a7 	.word	0x080016a7
 800163c:	08001655 	.word	0x08001655
 8001640:	08001669 	.word	0x08001669
 8001644:	4a7f      	ldr	r2, [pc, #508]	; (8001844 <HAL_GPIO_Init+0x2cc>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d013      	beq.n	8001672 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800164a:	e02c      	b.n	80016a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	623b      	str	r3, [r7, #32]
          break;
 8001652:	e029      	b.n	80016a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	3304      	adds	r3, #4
 800165a:	623b      	str	r3, [r7, #32]
          break;
 800165c:	e024      	b.n	80016a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	3308      	adds	r3, #8
 8001664:	623b      	str	r3, [r7, #32]
          break;
 8001666:	e01f      	b.n	80016a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	330c      	adds	r3, #12
 800166e:	623b      	str	r3, [r7, #32]
          break;
 8001670:	e01a      	b.n	80016a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d102      	bne.n	8001680 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800167a:	2304      	movs	r3, #4
 800167c:	623b      	str	r3, [r7, #32]
          break;
 800167e:	e013      	b.n	80016a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d105      	bne.n	8001694 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001688:	2308      	movs	r3, #8
 800168a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69fa      	ldr	r2, [r7, #28]
 8001690:	611a      	str	r2, [r3, #16]
          break;
 8001692:	e009      	b.n	80016a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001694:	2308      	movs	r3, #8
 8001696:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	615a      	str	r2, [r3, #20]
          break;
 800169e:	e003      	b.n	80016a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016a0:	2300      	movs	r3, #0
 80016a2:	623b      	str	r3, [r7, #32]
          break;
 80016a4:	e000      	b.n	80016a8 <HAL_GPIO_Init+0x130>
          break;
 80016a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	2bff      	cmp	r3, #255	; 0xff
 80016ac:	d801      	bhi.n	80016b2 <HAL_GPIO_Init+0x13a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	e001      	b.n	80016b6 <HAL_GPIO_Init+0x13e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3304      	adds	r3, #4
 80016b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	2bff      	cmp	r3, #255	; 0xff
 80016bc:	d802      	bhi.n	80016c4 <HAL_GPIO_Init+0x14c>
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	e002      	b.n	80016ca <HAL_GPIO_Init+0x152>
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	3b08      	subs	r3, #8
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	210f      	movs	r1, #15
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	fa01 f303 	lsl.w	r3, r1, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	401a      	ands	r2, r3
 80016dc:	6a39      	ldr	r1, [r7, #32]
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	fa01 f303 	lsl.w	r3, r1, r3
 80016e4:	431a      	orrs	r2, r3
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 80c1 	beq.w	800187a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016f8:	4b53      	ldr	r3, [pc, #332]	; (8001848 <HAL_GPIO_Init+0x2d0>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	4a52      	ldr	r2, [pc, #328]	; (8001848 <HAL_GPIO_Init+0x2d0>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6193      	str	r3, [r2, #24]
 8001704:	4b50      	ldr	r3, [pc, #320]	; (8001848 <HAL_GPIO_Init+0x2d0>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001710:	4a4e      	ldr	r2, [pc, #312]	; (800184c <HAL_GPIO_Init+0x2d4>)
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	089b      	lsrs	r3, r3, #2
 8001716:	3302      	adds	r3, #2
 8001718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	220f      	movs	r2, #15
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	4013      	ands	r3, r2
 8001732:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a46      	ldr	r2, [pc, #280]	; (8001850 <HAL_GPIO_Init+0x2d8>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d01f      	beq.n	800177c <HAL_GPIO_Init+0x204>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a45      	ldr	r2, [pc, #276]	; (8001854 <HAL_GPIO_Init+0x2dc>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d019      	beq.n	8001778 <HAL_GPIO_Init+0x200>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a44      	ldr	r2, [pc, #272]	; (8001858 <HAL_GPIO_Init+0x2e0>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d013      	beq.n	8001774 <HAL_GPIO_Init+0x1fc>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a43      	ldr	r2, [pc, #268]	; (800185c <HAL_GPIO_Init+0x2e4>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d00d      	beq.n	8001770 <HAL_GPIO_Init+0x1f8>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a42      	ldr	r2, [pc, #264]	; (8001860 <HAL_GPIO_Init+0x2e8>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d007      	beq.n	800176c <HAL_GPIO_Init+0x1f4>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a41      	ldr	r2, [pc, #260]	; (8001864 <HAL_GPIO_Init+0x2ec>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d101      	bne.n	8001768 <HAL_GPIO_Init+0x1f0>
 8001764:	2305      	movs	r3, #5
 8001766:	e00a      	b.n	800177e <HAL_GPIO_Init+0x206>
 8001768:	2306      	movs	r3, #6
 800176a:	e008      	b.n	800177e <HAL_GPIO_Init+0x206>
 800176c:	2304      	movs	r3, #4
 800176e:	e006      	b.n	800177e <HAL_GPIO_Init+0x206>
 8001770:	2303      	movs	r3, #3
 8001772:	e004      	b.n	800177e <HAL_GPIO_Init+0x206>
 8001774:	2302      	movs	r3, #2
 8001776:	e002      	b.n	800177e <HAL_GPIO_Init+0x206>
 8001778:	2301      	movs	r3, #1
 800177a:	e000      	b.n	800177e <HAL_GPIO_Init+0x206>
 800177c:	2300      	movs	r3, #0
 800177e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001780:	f002 0203 	and.w	r2, r2, #3
 8001784:	0092      	lsls	r2, r2, #2
 8001786:	4093      	lsls	r3, r2
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	4313      	orrs	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800178e:	492f      	ldr	r1, [pc, #188]	; (800184c <HAL_GPIO_Init+0x2d4>)
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	089b      	lsrs	r3, r3, #2
 8001794:	3302      	adds	r3, #2
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d006      	beq.n	80017b6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017a8:	4b2f      	ldr	r3, [pc, #188]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	492e      	ldr	r1, [pc, #184]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	600b      	str	r3, [r1, #0]
 80017b4:	e006      	b.n	80017c4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017b6:	4b2c      	ldr	r3, [pc, #176]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	43db      	mvns	r3, r3
 80017be:	492a      	ldr	r1, [pc, #168]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 80017c0:	4013      	ands	r3, r2
 80017c2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d006      	beq.n	80017de <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017d0:	4b25      	ldr	r3, [pc, #148]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	4924      	ldr	r1, [pc, #144]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	4313      	orrs	r3, r2
 80017da:	604b      	str	r3, [r1, #4]
 80017dc:	e006      	b.n	80017ec <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017de:	4b22      	ldr	r3, [pc, #136]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	4920      	ldr	r1, [pc, #128]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 80017e8:	4013      	ands	r3, r2
 80017ea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d006      	beq.n	8001806 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017f8:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	491a      	ldr	r1, [pc, #104]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	4313      	orrs	r3, r2
 8001802:	608b      	str	r3, [r1, #8]
 8001804:	e006      	b.n	8001814 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001806:	4b18      	ldr	r3, [pc, #96]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 8001808:	689a      	ldr	r2, [r3, #8]
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	43db      	mvns	r3, r3
 800180e:	4916      	ldr	r1, [pc, #88]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 8001810:	4013      	ands	r3, r2
 8001812:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d025      	beq.n	800186c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 8001822:	68da      	ldr	r2, [r3, #12]
 8001824:	4910      	ldr	r1, [pc, #64]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	4313      	orrs	r3, r2
 800182a:	60cb      	str	r3, [r1, #12]
 800182c:	e025      	b.n	800187a <HAL_GPIO_Init+0x302>
 800182e:	bf00      	nop
 8001830:	10320000 	.word	0x10320000
 8001834:	10310000 	.word	0x10310000
 8001838:	10220000 	.word	0x10220000
 800183c:	10210000 	.word	0x10210000
 8001840:	10120000 	.word	0x10120000
 8001844:	10110000 	.word	0x10110000
 8001848:	40021000 	.word	0x40021000
 800184c:	40010000 	.word	0x40010000
 8001850:	40010800 	.word	0x40010800
 8001854:	40010c00 	.word	0x40010c00
 8001858:	40011000 	.word	0x40011000
 800185c:	40011400 	.word	0x40011400
 8001860:	40011800 	.word	0x40011800
 8001864:	40011c00 	.word	0x40011c00
 8001868:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <HAL_GPIO_Init+0x324>)
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	43db      	mvns	r3, r3
 8001874:	4909      	ldr	r1, [pc, #36]	; (800189c <HAL_GPIO_Init+0x324>)
 8001876:	4013      	ands	r3, r2
 8001878:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	3301      	adds	r3, #1
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	fa22 f303 	lsr.w	r3, r2, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	f47f ae7e 	bne.w	800158c <HAL_GPIO_Init+0x14>
  }
}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	372c      	adds	r7, #44	; 0x2c
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	40010400 	.word	0x40010400

080018a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	887b      	ldrh	r3, [r7, #2]
 80018b2:	4013      	ands	r3, r2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d002      	beq.n	80018be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018b8:	2301      	movs	r3, #1
 80018ba:	73fb      	strb	r3, [r7, #15]
 80018bc:	e001      	b.n	80018c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018be:	2300      	movs	r3, #0
 80018c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr

080018ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
 80018d6:	460b      	mov	r3, r1
 80018d8:	807b      	strh	r3, [r7, #2]
 80018da:	4613      	mov	r3, r2
 80018dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018de:	787b      	ldrb	r3, [r7, #1]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018e4:	887a      	ldrh	r2, [r7, #2]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018ea:	e003      	b.n	80018f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018ec:	887b      	ldrh	r3, [r7, #2]
 80018ee:	041a      	lsls	r2, r3, #16
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	611a      	str	r2, [r3, #16]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr
	...

08001900 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e26c      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 8087 	beq.w	8001a2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001920:	4b92      	ldr	r3, [pc, #584]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 030c 	and.w	r3, r3, #12
 8001928:	2b04      	cmp	r3, #4
 800192a:	d00c      	beq.n	8001946 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800192c:	4b8f      	ldr	r3, [pc, #572]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 030c 	and.w	r3, r3, #12
 8001934:	2b08      	cmp	r3, #8
 8001936:	d112      	bne.n	800195e <HAL_RCC_OscConfig+0x5e>
 8001938:	4b8c      	ldr	r3, [pc, #560]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001944:	d10b      	bne.n	800195e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001946:	4b89      	ldr	r3, [pc, #548]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d06c      	beq.n	8001a2c <HAL_RCC_OscConfig+0x12c>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d168      	bne.n	8001a2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e246      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001966:	d106      	bne.n	8001976 <HAL_RCC_OscConfig+0x76>
 8001968:	4b80      	ldr	r3, [pc, #512]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a7f      	ldr	r2, [pc, #508]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 800196e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001972:	6013      	str	r3, [r2, #0]
 8001974:	e02e      	b.n	80019d4 <HAL_RCC_OscConfig+0xd4>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10c      	bne.n	8001998 <HAL_RCC_OscConfig+0x98>
 800197e:	4b7b      	ldr	r3, [pc, #492]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a7a      	ldr	r2, [pc, #488]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	4b78      	ldr	r3, [pc, #480]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a77      	ldr	r2, [pc, #476]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001990:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	e01d      	b.n	80019d4 <HAL_RCC_OscConfig+0xd4>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019a0:	d10c      	bne.n	80019bc <HAL_RCC_OscConfig+0xbc>
 80019a2:	4b72      	ldr	r3, [pc, #456]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a71      	ldr	r2, [pc, #452]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 80019a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	4b6f      	ldr	r3, [pc, #444]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a6e      	ldr	r2, [pc, #440]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 80019b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	e00b      	b.n	80019d4 <HAL_RCC_OscConfig+0xd4>
 80019bc:	4b6b      	ldr	r3, [pc, #428]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a6a      	ldr	r2, [pc, #424]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 80019c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	4b68      	ldr	r3, [pc, #416]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a67      	ldr	r2, [pc, #412]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 80019ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d013      	beq.n	8001a04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019dc:	f7ff fc90 	bl	8001300 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e4:	f7ff fc8c 	bl	8001300 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b64      	cmp	r3, #100	; 0x64
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e1fa      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f6:	4b5d      	ldr	r3, [pc, #372]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0xe4>
 8001a02:	e014      	b.n	8001a2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a04:	f7ff fc7c 	bl	8001300 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fc78 	bl	8001300 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e1e6      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a1e:	4b53      	ldr	r3, [pc, #332]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x10c>
 8001a2a:	e000      	b.n	8001a2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d063      	beq.n	8001b02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a3a:	4b4c      	ldr	r3, [pc, #304]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 030c 	and.w	r3, r3, #12
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00b      	beq.n	8001a5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a46:	4b49      	ldr	r3, [pc, #292]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 030c 	and.w	r3, r3, #12
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d11c      	bne.n	8001a8c <HAL_RCC_OscConfig+0x18c>
 8001a52:	4b46      	ldr	r3, [pc, #280]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d116      	bne.n	8001a8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a5e:	4b43      	ldr	r3, [pc, #268]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d005      	beq.n	8001a76 <HAL_RCC_OscConfig+0x176>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d001      	beq.n	8001a76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e1ba      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a76:	4b3d      	ldr	r3, [pc, #244]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	4939      	ldr	r1, [pc, #228]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a8a:	e03a      	b.n	8001b02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d020      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a94:	4b36      	ldr	r3, [pc, #216]	; (8001b70 <HAL_RCC_OscConfig+0x270>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9a:	f7ff fc31 	bl	8001300 <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa2:	f7ff fc2d 	bl	8001300 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e19b      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab4:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0f0      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac0:	4b2a      	ldr	r3, [pc, #168]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	4927      	ldr	r1, [pc, #156]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	600b      	str	r3, [r1, #0]
 8001ad4:	e015      	b.n	8001b02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ad6:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <HAL_RCC_OscConfig+0x270>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7ff fc10 	bl	8001300 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae4:	f7ff fc0c 	bl	8001300 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e17a      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af6:	4b1d      	ldr	r3, [pc, #116]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d03a      	beq.n	8001b84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d019      	beq.n	8001b4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b16:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1c:	f7ff fbf0 	bl	8001300 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b24:	f7ff fbec 	bl	8001300 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e15a      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b36:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <HAL_RCC_OscConfig+0x26c>)
 8001b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b42:	2001      	movs	r0, #1
 8001b44:	f000 fad8 	bl	80020f8 <RCC_Delay>
 8001b48:	e01c      	b.n	8001b84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <HAL_RCC_OscConfig+0x274>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b50:	f7ff fbd6 	bl	8001300 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b56:	e00f      	b.n	8001b78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b58:	f7ff fbd2 	bl	8001300 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d908      	bls.n	8001b78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e140      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>
 8001b6a:	bf00      	nop
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	42420000 	.word	0x42420000
 8001b74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b78:	4b9e      	ldr	r3, [pc, #632]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1e9      	bne.n	8001b58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 80a6 	beq.w	8001cde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b92:	2300      	movs	r3, #0
 8001b94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b96:	4b97      	ldr	r3, [pc, #604]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10d      	bne.n	8001bbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba2:	4b94      	ldr	r3, [pc, #592]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	4a93      	ldr	r2, [pc, #588]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bac:	61d3      	str	r3, [r2, #28]
 8001bae:	4b91      	ldr	r3, [pc, #580]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bbe:	4b8e      	ldr	r3, [pc, #568]	; (8001df8 <HAL_RCC_OscConfig+0x4f8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d118      	bne.n	8001bfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bca:	4b8b      	ldr	r3, [pc, #556]	; (8001df8 <HAL_RCC_OscConfig+0x4f8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a8a      	ldr	r2, [pc, #552]	; (8001df8 <HAL_RCC_OscConfig+0x4f8>)
 8001bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bd6:	f7ff fb93 	bl	8001300 <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bde:	f7ff fb8f 	bl	8001300 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b64      	cmp	r3, #100	; 0x64
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e0fd      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf0:	4b81      	ldr	r3, [pc, #516]	; (8001df8 <HAL_RCC_OscConfig+0x4f8>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0f0      	beq.n	8001bde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d106      	bne.n	8001c12 <HAL_RCC_OscConfig+0x312>
 8001c04:	4b7b      	ldr	r3, [pc, #492]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	4a7a      	ldr	r2, [pc, #488]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	6213      	str	r3, [r2, #32]
 8001c10:	e02d      	b.n	8001c6e <HAL_RCC_OscConfig+0x36e>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10c      	bne.n	8001c34 <HAL_RCC_OscConfig+0x334>
 8001c1a:	4b76      	ldr	r3, [pc, #472]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	4a75      	ldr	r2, [pc, #468]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001c20:	f023 0301 	bic.w	r3, r3, #1
 8001c24:	6213      	str	r3, [r2, #32]
 8001c26:	4b73      	ldr	r3, [pc, #460]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	4a72      	ldr	r2, [pc, #456]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	f023 0304 	bic.w	r3, r3, #4
 8001c30:	6213      	str	r3, [r2, #32]
 8001c32:	e01c      	b.n	8001c6e <HAL_RCC_OscConfig+0x36e>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	2b05      	cmp	r3, #5
 8001c3a:	d10c      	bne.n	8001c56 <HAL_RCC_OscConfig+0x356>
 8001c3c:	4b6d      	ldr	r3, [pc, #436]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	4a6c      	ldr	r2, [pc, #432]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001c42:	f043 0304 	orr.w	r3, r3, #4
 8001c46:	6213      	str	r3, [r2, #32]
 8001c48:	4b6a      	ldr	r3, [pc, #424]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	4a69      	ldr	r2, [pc, #420]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6213      	str	r3, [r2, #32]
 8001c54:	e00b      	b.n	8001c6e <HAL_RCC_OscConfig+0x36e>
 8001c56:	4b67      	ldr	r3, [pc, #412]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	4a66      	ldr	r2, [pc, #408]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001c5c:	f023 0301 	bic.w	r3, r3, #1
 8001c60:	6213      	str	r3, [r2, #32]
 8001c62:	4b64      	ldr	r3, [pc, #400]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	4a63      	ldr	r2, [pc, #396]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001c68:	f023 0304 	bic.w	r3, r3, #4
 8001c6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d015      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c76:	f7ff fb43 	bl	8001300 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c7c:	e00a      	b.n	8001c94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c7e:	f7ff fb3f 	bl	8001300 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e0ab      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c94:	4b57      	ldr	r3, [pc, #348]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0ee      	beq.n	8001c7e <HAL_RCC_OscConfig+0x37e>
 8001ca0:	e014      	b.n	8001ccc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca2:	f7ff fb2d 	bl	8001300 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca8:	e00a      	b.n	8001cc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001caa:	f7ff fb29 	bl	8001300 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e095      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc0:	4b4c      	ldr	r3, [pc, #304]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1ee      	bne.n	8001caa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ccc:	7dfb      	ldrb	r3, [r7, #23]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d105      	bne.n	8001cde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cd2:	4b48      	ldr	r3, [pc, #288]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	4a47      	ldr	r2, [pc, #284]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001cd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 8081 	beq.w	8001dea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ce8:	4b42      	ldr	r3, [pc, #264]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 030c 	and.w	r3, r3, #12
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d061      	beq.n	8001db8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d146      	bne.n	8001d8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfc:	4b3f      	ldr	r3, [pc, #252]	; (8001dfc <HAL_RCC_OscConfig+0x4fc>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d02:	f7ff fafd 	bl	8001300 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0a:	f7ff faf9 	bl	8001300 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e067      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d1c:	4b35      	ldr	r3, [pc, #212]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1f0      	bne.n	8001d0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d30:	d108      	bne.n	8001d44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d32:	4b30      	ldr	r3, [pc, #192]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	492d      	ldr	r1, [pc, #180]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d44:	4b2b      	ldr	r3, [pc, #172]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a19      	ldr	r1, [r3, #32]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	430b      	orrs	r3, r1
 8001d56:	4927      	ldr	r1, [pc, #156]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d5c:	4b27      	ldr	r3, [pc, #156]	; (8001dfc <HAL_RCC_OscConfig+0x4fc>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d62:	f7ff facd 	bl	8001300 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6a:	f7ff fac9 	bl	8001300 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e037      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d7c:	4b1d      	ldr	r3, [pc, #116]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0f0      	beq.n	8001d6a <HAL_RCC_OscConfig+0x46a>
 8001d88:	e02f      	b.n	8001dea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	; (8001dfc <HAL_RCC_OscConfig+0x4fc>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7ff fab6 	bl	8001300 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d98:	f7ff fab2 	bl	8001300 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e020      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001daa:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x498>
 8001db6:	e018      	b.n	8001dea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d101      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e013      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_RCC_OscConfig+0x4f4>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d106      	bne.n	8001de6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d001      	beq.n	8001dea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e000      	b.n	8001dec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40007000 	.word	0x40007000
 8001dfc:	42420060 	.word	0x42420060

08001e00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e0d0      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e14:	4b6a      	ldr	r3, [pc, #424]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d910      	bls.n	8001e44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e22:	4b67      	ldr	r3, [pc, #412]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f023 0207 	bic.w	r2, r3, #7
 8001e2a:	4965      	ldr	r1, [pc, #404]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e32:	4b63      	ldr	r3, [pc, #396]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d001      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e0b8      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d020      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d005      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e5c:	4b59      	ldr	r3, [pc, #356]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	4a58      	ldr	r2, [pc, #352]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e74:	4b53      	ldr	r3, [pc, #332]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	4a52      	ldr	r2, [pc, #328]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e80:	4b50      	ldr	r3, [pc, #320]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	494d      	ldr	r1, [pc, #308]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d040      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d107      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea6:	4b47      	ldr	r3, [pc, #284]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d115      	bne.n	8001ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e07f      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d107      	bne.n	8001ece <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ebe:	4b41      	ldr	r3, [pc, #260]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d109      	bne.n	8001ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e073      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ece:	4b3d      	ldr	r3, [pc, #244]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e06b      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ede:	4b39      	ldr	r3, [pc, #228]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f023 0203 	bic.w	r2, r3, #3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	4936      	ldr	r1, [pc, #216]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ef0:	f7ff fa06 	bl	8001300 <HAL_GetTick>
 8001ef4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef6:	e00a      	b.n	8001f0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef8:	f7ff fa02 	bl	8001300 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e053      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0e:	4b2d      	ldr	r3, [pc, #180]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 020c 	and.w	r2, r3, #12
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d1eb      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f20:	4b27      	ldr	r3, [pc, #156]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d210      	bcs.n	8001f50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2e:	4b24      	ldr	r3, [pc, #144]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 0207 	bic.w	r2, r3, #7
 8001f36:	4922      	ldr	r1, [pc, #136]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3e:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e032      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d008      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f5c:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	4916      	ldr	r1, [pc, #88]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d009      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f7a:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	490e      	ldr	r1, [pc, #56]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f8e:	f000 f821 	bl	8001fd4 <HAL_RCC_GetSysClockFreq>
 8001f92:	4602      	mov	r2, r0
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	091b      	lsrs	r3, r3, #4
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	490a      	ldr	r1, [pc, #40]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fa0:	5ccb      	ldrb	r3, [r1, r3]
 8001fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa6:	4a09      	ldr	r2, [pc, #36]	; (8001fcc <HAL_RCC_ClockConfig+0x1cc>)
 8001fa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <HAL_RCC_ClockConfig+0x1d0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff f964 	bl	800127c <HAL_InitTick>

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40022000 	.word	0x40022000
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	0800636c 	.word	0x0800636c
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	20000004 	.word	0x20000004

08001fd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd4:	b490      	push	{r4, r7}
 8001fd6:	b08a      	sub	sp, #40	; 0x28
 8001fd8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fda:	4b2a      	ldr	r3, [pc, #168]	; (8002084 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001fdc:	1d3c      	adds	r4, r7, #4
 8001fde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fe0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fe4:	f240 2301 	movw	r3, #513	; 0x201
 8001fe8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61bb      	str	r3, [r7, #24]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ffe:	4b22      	ldr	r3, [pc, #136]	; (8002088 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	2b04      	cmp	r3, #4
 800200c:	d002      	beq.n	8002014 <HAL_RCC_GetSysClockFreq+0x40>
 800200e:	2b08      	cmp	r3, #8
 8002010:	d003      	beq.n	800201a <HAL_RCC_GetSysClockFreq+0x46>
 8002012:	e02d      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002014:	4b1d      	ldr	r3, [pc, #116]	; (800208c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002016:	623b      	str	r3, [r7, #32]
      break;
 8002018:	e02d      	b.n	8002076 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	0c9b      	lsrs	r3, r3, #18
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002026:	4413      	add	r3, r2
 8002028:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800202c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d013      	beq.n	8002060 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002038:	4b13      	ldr	r3, [pc, #76]	; (8002088 <HAL_RCC_GetSysClockFreq+0xb4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	0c5b      	lsrs	r3, r3, #17
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002046:	4413      	add	r3, r2
 8002048:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800204c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	4a0e      	ldr	r2, [pc, #56]	; (800208c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002052:	fb02 f203 	mul.w	r2, r2, r3
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	fbb2 f3f3 	udiv	r3, r2, r3
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
 800205e:	e004      	b.n	800206a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	4a0b      	ldr	r2, [pc, #44]	; (8002090 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002064:	fb02 f303 	mul.w	r3, r2, r3
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	623b      	str	r3, [r7, #32]
      break;
 800206e:	e002      	b.n	8002076 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002072:	623b      	str	r3, [r7, #32]
      break;
 8002074:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002076:	6a3b      	ldr	r3, [r7, #32]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3728      	adds	r7, #40	; 0x28
 800207c:	46bd      	mov	sp, r7
 800207e:	bc90      	pop	{r4, r7}
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	0800635c 	.word	0x0800635c
 8002088:	40021000 	.word	0x40021000
 800208c:	007a1200 	.word	0x007a1200
 8002090:	003d0900 	.word	0x003d0900

08002094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002098:	4b02      	ldr	r3, [pc, #8]	; (80020a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800209a:	681b      	ldr	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr
 80020a4:	20000000 	.word	0x20000000

080020a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020ac:	f7ff fff2 	bl	8002094 <HAL_RCC_GetHCLKFreq>
 80020b0:	4602      	mov	r2, r0
 80020b2:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	0a1b      	lsrs	r3, r3, #8
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	4903      	ldr	r1, [pc, #12]	; (80020cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020be:	5ccb      	ldrb	r3, [r1, r3]
 80020c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40021000 	.word	0x40021000
 80020cc:	0800637c 	.word	0x0800637c

080020d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020d4:	f7ff ffde 	bl	8002094 <HAL_RCC_GetHCLKFreq>
 80020d8:	4602      	mov	r2, r0
 80020da:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	0adb      	lsrs	r3, r3, #11
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	4903      	ldr	r1, [pc, #12]	; (80020f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020e6:	5ccb      	ldrb	r3, [r1, r3]
 80020e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40021000 	.word	0x40021000
 80020f4:	0800637c 	.word	0x0800637c

080020f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002100:	4b0a      	ldr	r3, [pc, #40]	; (800212c <RCC_Delay+0x34>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a0a      	ldr	r2, [pc, #40]	; (8002130 <RCC_Delay+0x38>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	0a5b      	lsrs	r3, r3, #9
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	fb02 f303 	mul.w	r3, r2, r3
 8002112:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002114:	bf00      	nop
  }
  while (Delay --);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1e5a      	subs	r2, r3, #1
 800211a:	60fa      	str	r2, [r7, #12]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1f9      	bne.n	8002114 <RCC_Delay+0x1c>
}
 8002120:	bf00      	nop
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr
 800212c:	20000000 	.word	0x20000000
 8002130:	10624dd3 	.word	0x10624dd3

08002134 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e041      	b.n	80021ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7fe ff82 	bl	8001064 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3304      	adds	r3, #4
 8002170:	4619      	mov	r1, r3
 8002172:	4610      	mov	r0, r2
 8002174:	f000 fc1e 	bl	80029b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e041      	b.n	8002268 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d106      	bne.n	80021fe <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f839 	bl	8002270 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2202      	movs	r2, #2
 8002202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3304      	adds	r3, #4
 800220e:	4619      	mov	r1, r3
 8002210:	4610      	mov	r0, r2
 8002212:	f000 fbcf 	bl	80029b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr
	...

08002284 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d104      	bne.n	800229e <HAL_TIM_IC_Start_IT+0x1a>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800229a:	b2db      	uxtb	r3, r3
 800229c:	e013      	b.n	80022c6 <HAL_TIM_IC_Start_IT+0x42>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	d104      	bne.n	80022ae <HAL_TIM_IC_Start_IT+0x2a>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	e00b      	b.n	80022c6 <HAL_TIM_IC_Start_IT+0x42>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	d104      	bne.n	80022be <HAL_TIM_IC_Start_IT+0x3a>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	e003      	b.n	80022c6 <HAL_TIM_IC_Start_IT+0x42>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d104      	bne.n	80022d8 <HAL_TIM_IC_Start_IT+0x54>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	e013      	b.n	8002300 <HAL_TIM_IC_Start_IT+0x7c>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d104      	bne.n	80022e8 <HAL_TIM_IC_Start_IT+0x64>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	e00b      	b.n	8002300 <HAL_TIM_IC_Start_IT+0x7c>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d104      	bne.n	80022f8 <HAL_TIM_IC_Start_IT+0x74>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	e003      	b.n	8002300 <HAL_TIM_IC_Start_IT+0x7c>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d102      	bne.n	800230e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002308:	7bbb      	ldrb	r3, [r7, #14]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d001      	beq.n	8002312 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e0bd      	b.n	800248e <HAL_TIM_IC_Start_IT+0x20a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d104      	bne.n	8002322 <HAL_TIM_IC_Start_IT+0x9e>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002320:	e013      	b.n	800234a <HAL_TIM_IC_Start_IT+0xc6>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b04      	cmp	r3, #4
 8002326:	d104      	bne.n	8002332 <HAL_TIM_IC_Start_IT+0xae>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2202      	movs	r2, #2
 800232c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002330:	e00b      	b.n	800234a <HAL_TIM_IC_Start_IT+0xc6>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b08      	cmp	r3, #8
 8002336:	d104      	bne.n	8002342 <HAL_TIM_IC_Start_IT+0xbe>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2202      	movs	r2, #2
 800233c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002340:	e003      	b.n	800234a <HAL_TIM_IC_Start_IT+0xc6>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2202      	movs	r2, #2
 8002346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d104      	bne.n	800235a <HAL_TIM_IC_Start_IT+0xd6>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2202      	movs	r2, #2
 8002354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002358:	e013      	b.n	8002382 <HAL_TIM_IC_Start_IT+0xfe>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	2b04      	cmp	r3, #4
 800235e:	d104      	bne.n	800236a <HAL_TIM_IC_Start_IT+0xe6>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2202      	movs	r2, #2
 8002364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002368:	e00b      	b.n	8002382 <HAL_TIM_IC_Start_IT+0xfe>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	2b08      	cmp	r3, #8
 800236e:	d104      	bne.n	800237a <HAL_TIM_IC_Start_IT+0xf6>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002378:	e003      	b.n	8002382 <HAL_TIM_IC_Start_IT+0xfe>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2202      	movs	r2, #2
 800237e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b0c      	cmp	r3, #12
 8002386:	d841      	bhi.n	800240c <HAL_TIM_IC_Start_IT+0x188>
 8002388:	a201      	add	r2, pc, #4	; (adr r2, 8002390 <HAL_TIM_IC_Start_IT+0x10c>)
 800238a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800238e:	bf00      	nop
 8002390:	080023c5 	.word	0x080023c5
 8002394:	0800240d 	.word	0x0800240d
 8002398:	0800240d 	.word	0x0800240d
 800239c:	0800240d 	.word	0x0800240d
 80023a0:	080023d7 	.word	0x080023d7
 80023a4:	0800240d 	.word	0x0800240d
 80023a8:	0800240d 	.word	0x0800240d
 80023ac:	0800240d 	.word	0x0800240d
 80023b0:	080023e9 	.word	0x080023e9
 80023b4:	0800240d 	.word	0x0800240d
 80023b8:	0800240d 	.word	0x0800240d
 80023bc:	0800240d 	.word	0x0800240d
 80023c0:	080023fb 	.word	0x080023fb
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0202 	orr.w	r2, r2, #2
 80023d2:	60da      	str	r2, [r3, #12]
      break;
 80023d4:	e01b      	b.n	800240e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f042 0204 	orr.w	r2, r2, #4
 80023e4:	60da      	str	r2, [r3, #12]
      break;
 80023e6:	e012      	b.n	800240e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0208 	orr.w	r2, r2, #8
 80023f6:	60da      	str	r2, [r3, #12]
      break;
 80023f8:	e009      	b.n	800240e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f042 0210 	orr.w	r2, r2, #16
 8002408:	60da      	str	r2, [r3, #12]
      break;
 800240a:	e000      	b.n	800240e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 800240c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2201      	movs	r2, #1
 8002414:	6839      	ldr	r1, [r7, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f000 fcf5 	bl	8002e06 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a1d      	ldr	r2, [pc, #116]	; (8002498 <HAL_TIM_IC_Start_IT+0x214>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d018      	beq.n	8002458 <HAL_TIM_IC_Start_IT+0x1d4>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a1c      	ldr	r2, [pc, #112]	; (800249c <HAL_TIM_IC_Start_IT+0x218>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d013      	beq.n	8002458 <HAL_TIM_IC_Start_IT+0x1d4>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002438:	d00e      	beq.n	8002458 <HAL_TIM_IC_Start_IT+0x1d4>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a18      	ldr	r2, [pc, #96]	; (80024a0 <HAL_TIM_IC_Start_IT+0x21c>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d009      	beq.n	8002458 <HAL_TIM_IC_Start_IT+0x1d4>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a16      	ldr	r2, [pc, #88]	; (80024a4 <HAL_TIM_IC_Start_IT+0x220>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d004      	beq.n	8002458 <HAL_TIM_IC_Start_IT+0x1d4>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a15      	ldr	r2, [pc, #84]	; (80024a8 <HAL_TIM_IC_Start_IT+0x224>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d111      	bne.n	800247c <HAL_TIM_IC_Start_IT+0x1f8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2b06      	cmp	r3, #6
 8002468:	d010      	beq.n	800248c <HAL_TIM_IC_Start_IT+0x208>
    {
      __HAL_TIM_ENABLE(htim);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f042 0201 	orr.w	r2, r2, #1
 8002478:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800247a:	e007      	b.n	800248c <HAL_TIM_IC_Start_IT+0x208>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40012c00 	.word	0x40012c00
 800249c:	40013400 	.word	0x40013400
 80024a0:	40000400 	.word	0x40000400
 80024a4:	40000800 	.word	0x40000800
 80024a8:	40000c00 	.word	0x40000c00

080024ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d122      	bne.n	8002508 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d11b      	bne.n	8002508 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f06f 0202 	mvn.w	r2, #2
 80024d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 fa45 	bl	800297e <HAL_TIM_IC_CaptureCallback>
 80024f4:	e005      	b.n	8002502 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 fa38 	bl	800296c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 fa47 	bl	8002990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	2b04      	cmp	r3, #4
 8002514:	d122      	bne.n	800255c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b04      	cmp	r3, #4
 8002522:	d11b      	bne.n	800255c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0204 	mvn.w	r2, #4
 800252c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2202      	movs	r2, #2
 8002532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 fa1b 	bl	800297e <HAL_TIM_IC_CaptureCallback>
 8002548:	e005      	b.n	8002556 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 fa0e 	bl	800296c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 fa1d 	bl	8002990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b08      	cmp	r3, #8
 8002568:	d122      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b08      	cmp	r3, #8
 8002576:	d11b      	bne.n	80025b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f06f 0208 	mvn.w	r2, #8
 8002580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2204      	movs	r2, #4
 8002586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f9f1 	bl	800297e <HAL_TIM_IC_CaptureCallback>
 800259c:	e005      	b.n	80025aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f9e4 	bl	800296c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f9f3 	bl	8002990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f003 0310 	and.w	r3, r3, #16
 80025ba:	2b10      	cmp	r3, #16
 80025bc:	d122      	bne.n	8002604 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	2b10      	cmp	r3, #16
 80025ca:	d11b      	bne.n	8002604 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0210 	mvn.w	r2, #16
 80025d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2208      	movs	r2, #8
 80025da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f9c7 	bl	800297e <HAL_TIM_IC_CaptureCallback>
 80025f0:	e005      	b.n	80025fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f9ba 	bl	800296c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f9c9 	bl	8002990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b01      	cmp	r3, #1
 8002610:	d10e      	bne.n	8002630 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b01      	cmp	r3, #1
 800261e:	d107      	bne.n	8002630 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0201 	mvn.w	r2, #1
 8002628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7fe fd62 	bl	80010f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263a:	2b80      	cmp	r3, #128	; 0x80
 800263c:	d10e      	bne.n	800265c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002648:	2b80      	cmp	r3, #128	; 0x80
 800264a:	d107      	bne.n	800265c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 fc6f 	bl	8002f3a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002666:	2b40      	cmp	r3, #64	; 0x40
 8002668:	d10e      	bne.n	8002688 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002674:	2b40      	cmp	r3, #64	; 0x40
 8002676:	d107      	bne.n	8002688 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f98d 	bl	80029a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	f003 0320 	and.w	r3, r3, #32
 8002692:	2b20      	cmp	r3, #32
 8002694:	d10e      	bne.n	80026b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f003 0320 	and.w	r3, r3, #32
 80026a0:	2b20      	cmp	r3, #32
 80026a2:	d107      	bne.n	80026b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f06f 0220 	mvn.w	r2, #32
 80026ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 fc3a 	bl	8002f28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026b4:	bf00      	nop
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d101      	bne.n	80026d6 <HAL_TIM_IC_ConfigChannel+0x1a>
 80026d2:	2302      	movs	r3, #2
 80026d4:	e082      	b.n	80027dc <HAL_TIM_IC_ConfigChannel+0x120>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d11b      	bne.n	800271c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	6819      	ldr	r1, [r3, #0]
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f000 f9d8 	bl	8002aa8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699a      	ldr	r2, [r3, #24]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 020c 	bic.w	r2, r2, #12
 8002706:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6999      	ldr	r1, [r3, #24]
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	619a      	str	r2, [r3, #24]
 800271a:	e05a      	b.n	80027d2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b04      	cmp	r3, #4
 8002720:	d11c      	bne.n	800275c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	6819      	ldr	r1, [r3, #0]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f000 fa4d 	bl	8002bd0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	699a      	ldr	r2, [r3, #24]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002744:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6999      	ldr	r1, [r3, #24]
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	021a      	lsls	r2, r3, #8
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	619a      	str	r2, [r3, #24]
 800275a:	e03a      	b.n	80027d2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b08      	cmp	r3, #8
 8002760:	d11b      	bne.n	800279a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6818      	ldr	r0, [r3, #0]
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	6819      	ldr	r1, [r3, #0]
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f000 fa98 	bl	8002ca6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	69da      	ldr	r2, [r3, #28]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 020c 	bic.w	r2, r2, #12
 8002784:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	69d9      	ldr	r1, [r3, #28]
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	61da      	str	r2, [r3, #28]
 8002798:	e01b      	b.n	80027d2 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6818      	ldr	r0, [r3, #0]
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	6819      	ldr	r1, [r3, #0]
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f000 fab7 	bl	8002d1c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	69da      	ldr	r2, [r3, #28]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80027bc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	69d9      	ldr	r1, [r3, #28]
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	021a      	lsls	r2, r3, #8
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <HAL_TIM_ConfigClockSource+0x18>
 80027f8:	2302      	movs	r3, #2
 80027fa:	e0b3      	b.n	8002964 <HAL_TIM_ConfigClockSource+0x180>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2202      	movs	r2, #2
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800281a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002822:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002834:	d03e      	beq.n	80028b4 <HAL_TIM_ConfigClockSource+0xd0>
 8002836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800283a:	f200 8087 	bhi.w	800294c <HAL_TIM_ConfigClockSource+0x168>
 800283e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002842:	f000 8085 	beq.w	8002950 <HAL_TIM_ConfigClockSource+0x16c>
 8002846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800284a:	d87f      	bhi.n	800294c <HAL_TIM_ConfigClockSource+0x168>
 800284c:	2b70      	cmp	r3, #112	; 0x70
 800284e:	d01a      	beq.n	8002886 <HAL_TIM_ConfigClockSource+0xa2>
 8002850:	2b70      	cmp	r3, #112	; 0x70
 8002852:	d87b      	bhi.n	800294c <HAL_TIM_ConfigClockSource+0x168>
 8002854:	2b60      	cmp	r3, #96	; 0x60
 8002856:	d050      	beq.n	80028fa <HAL_TIM_ConfigClockSource+0x116>
 8002858:	2b60      	cmp	r3, #96	; 0x60
 800285a:	d877      	bhi.n	800294c <HAL_TIM_ConfigClockSource+0x168>
 800285c:	2b50      	cmp	r3, #80	; 0x50
 800285e:	d03c      	beq.n	80028da <HAL_TIM_ConfigClockSource+0xf6>
 8002860:	2b50      	cmp	r3, #80	; 0x50
 8002862:	d873      	bhi.n	800294c <HAL_TIM_ConfigClockSource+0x168>
 8002864:	2b40      	cmp	r3, #64	; 0x40
 8002866:	d058      	beq.n	800291a <HAL_TIM_ConfigClockSource+0x136>
 8002868:	2b40      	cmp	r3, #64	; 0x40
 800286a:	d86f      	bhi.n	800294c <HAL_TIM_ConfigClockSource+0x168>
 800286c:	2b30      	cmp	r3, #48	; 0x30
 800286e:	d064      	beq.n	800293a <HAL_TIM_ConfigClockSource+0x156>
 8002870:	2b30      	cmp	r3, #48	; 0x30
 8002872:	d86b      	bhi.n	800294c <HAL_TIM_ConfigClockSource+0x168>
 8002874:	2b20      	cmp	r3, #32
 8002876:	d060      	beq.n	800293a <HAL_TIM_ConfigClockSource+0x156>
 8002878:	2b20      	cmp	r3, #32
 800287a:	d867      	bhi.n	800294c <HAL_TIM_ConfigClockSource+0x168>
 800287c:	2b00      	cmp	r3, #0
 800287e:	d05c      	beq.n	800293a <HAL_TIM_ConfigClockSource+0x156>
 8002880:	2b10      	cmp	r3, #16
 8002882:	d05a      	beq.n	800293a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002884:	e062      	b.n	800294c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6818      	ldr	r0, [r3, #0]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	6899      	ldr	r1, [r3, #8]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	f000 fa97 	bl	8002dc8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	609a      	str	r2, [r3, #8]
      break;
 80028b2:	e04e      	b.n	8002952 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6818      	ldr	r0, [r3, #0]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	6899      	ldr	r1, [r3, #8]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f000 fa80 	bl	8002dc8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028d6:	609a      	str	r2, [r3, #8]
      break;
 80028d8:	e03b      	b.n	8002952 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6818      	ldr	r0, [r3, #0]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	6859      	ldr	r1, [r3, #4]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	461a      	mov	r2, r3
 80028e8:	f000 f944 	bl	8002b74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2150      	movs	r1, #80	; 0x50
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 fa4e 	bl	8002d94 <TIM_ITRx_SetConfig>
      break;
 80028f8:	e02b      	b.n	8002952 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6818      	ldr	r0, [r3, #0]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	6859      	ldr	r1, [r3, #4]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	461a      	mov	r2, r3
 8002908:	f000 f99e 	bl	8002c48 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2160      	movs	r1, #96	; 0x60
 8002912:	4618      	mov	r0, r3
 8002914:	f000 fa3e 	bl	8002d94 <TIM_ITRx_SetConfig>
      break;
 8002918:	e01b      	b.n	8002952 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6818      	ldr	r0, [r3, #0]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	6859      	ldr	r1, [r3, #4]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	461a      	mov	r2, r3
 8002928:	f000 f924 	bl	8002b74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2140      	movs	r1, #64	; 0x40
 8002932:	4618      	mov	r0, r3
 8002934:	f000 fa2e 	bl	8002d94 <TIM_ITRx_SetConfig>
      break;
 8002938:	e00b      	b.n	8002952 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4619      	mov	r1, r3
 8002944:	4610      	mov	r0, r2
 8002946:	f000 fa25 	bl	8002d94 <TIM_ITRx_SetConfig>
        break;
 800294a:	e002      	b.n	8002952 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800294c:	bf00      	nop
 800294e:	e000      	b.n	8002952 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002950:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr

0800297e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr

080029a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr

080029b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a33      	ldr	r2, [pc, #204]	; (8002a94 <TIM_Base_SetConfig+0xe0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d013      	beq.n	80029f4 <TIM_Base_SetConfig+0x40>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a32      	ldr	r2, [pc, #200]	; (8002a98 <TIM_Base_SetConfig+0xe4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d00f      	beq.n	80029f4 <TIM_Base_SetConfig+0x40>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029da:	d00b      	beq.n	80029f4 <TIM_Base_SetConfig+0x40>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a2f      	ldr	r2, [pc, #188]	; (8002a9c <TIM_Base_SetConfig+0xe8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d007      	beq.n	80029f4 <TIM_Base_SetConfig+0x40>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a2e      	ldr	r2, [pc, #184]	; (8002aa0 <TIM_Base_SetConfig+0xec>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d003      	beq.n	80029f4 <TIM_Base_SetConfig+0x40>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a2d      	ldr	r2, [pc, #180]	; (8002aa4 <TIM_Base_SetConfig+0xf0>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d108      	bne.n	8002a06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a22      	ldr	r2, [pc, #136]	; (8002a94 <TIM_Base_SetConfig+0xe0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d013      	beq.n	8002a36 <TIM_Base_SetConfig+0x82>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a21      	ldr	r2, [pc, #132]	; (8002a98 <TIM_Base_SetConfig+0xe4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d00f      	beq.n	8002a36 <TIM_Base_SetConfig+0x82>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1c:	d00b      	beq.n	8002a36 <TIM_Base_SetConfig+0x82>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a1e      	ldr	r2, [pc, #120]	; (8002a9c <TIM_Base_SetConfig+0xe8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d007      	beq.n	8002a36 <TIM_Base_SetConfig+0x82>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a1d      	ldr	r2, [pc, #116]	; (8002aa0 <TIM_Base_SetConfig+0xec>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d003      	beq.n	8002a36 <TIM_Base_SetConfig+0x82>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a1c      	ldr	r2, [pc, #112]	; (8002aa4 <TIM_Base_SetConfig+0xf0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d108      	bne.n	8002a48 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a09      	ldr	r2, [pc, #36]	; (8002a94 <TIM_Base_SetConfig+0xe0>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d003      	beq.n	8002a7c <TIM_Base_SetConfig+0xc8>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a08      	ldr	r2, [pc, #32]	; (8002a98 <TIM_Base_SetConfig+0xe4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d103      	bne.n	8002a84 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	615a      	str	r2, [r3, #20]
}
 8002a8a:	bf00      	nop
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr
 8002a94:	40012c00 	.word	0x40012c00
 8002a98:	40013400 	.word	0x40013400
 8002a9c:	40000400 	.word	0x40000400
 8002aa0:	40000800 	.word	0x40000800
 8002aa4:	40000c00 	.word	0x40000c00

08002aa8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	f023 0201 	bic.w	r2, r3, #1
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4a23      	ldr	r2, [pc, #140]	; (8002b60 <TIM_TI1_SetConfig+0xb8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d013      	beq.n	8002afe <TIM_TI1_SetConfig+0x56>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4a22      	ldr	r2, [pc, #136]	; (8002b64 <TIM_TI1_SetConfig+0xbc>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d00f      	beq.n	8002afe <TIM_TI1_SetConfig+0x56>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae4:	d00b      	beq.n	8002afe <TIM_TI1_SetConfig+0x56>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4a1f      	ldr	r2, [pc, #124]	; (8002b68 <TIM_TI1_SetConfig+0xc0>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d007      	beq.n	8002afe <TIM_TI1_SetConfig+0x56>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4a1e      	ldr	r2, [pc, #120]	; (8002b6c <TIM_TI1_SetConfig+0xc4>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d003      	beq.n	8002afe <TIM_TI1_SetConfig+0x56>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	4a1d      	ldr	r2, [pc, #116]	; (8002b70 <TIM_TI1_SetConfig+0xc8>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d101      	bne.n	8002b02 <TIM_TI1_SetConfig+0x5a>
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <TIM_TI1_SetConfig+0x5c>
 8002b02:	2300      	movs	r3, #0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f023 0303 	bic.w	r3, r3, #3
 8002b0e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	e003      	b.n	8002b22 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	f023 030a 	bic.w	r3, r3, #10
 8002b3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	f003 030a 	and.w	r3, r3, #10
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	621a      	str	r2, [r3, #32]
}
 8002b56:	bf00      	nop
 8002b58:	371c      	adds	r7, #28
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr
 8002b60:	40012c00 	.word	0x40012c00
 8002b64:	40013400 	.word	0x40013400
 8002b68:	40000400 	.word	0x40000400
 8002b6c:	40000800 	.word	0x40000800
 8002b70:	40000c00 	.word	0x40000c00

08002b74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	f023 0201 	bic.w	r2, r3, #1
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	011b      	lsls	r3, r3, #4
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f023 030a 	bic.w	r3, r3, #10
 8002bb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	621a      	str	r2, [r3, #32]
}
 8002bc6:	bf00      	nop
 8002bc8:	371c      	adds	r7, #28
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b087      	sub	sp, #28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
 8002bdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	f023 0210 	bic.w	r2, r3, #16
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	021b      	lsls	r3, r3, #8
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	031b      	lsls	r3, r3, #12
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c22:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	621a      	str	r2, [r3, #32]
}
 8002c3e:	bf00      	nop
 8002c40:	371c      	adds	r7, #28
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr

08002c48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	f023 0210 	bic.w	r2, r3, #16
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c72:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	031b      	lsls	r3, r3, #12
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	621a      	str	r2, [r3, #32]
}
 8002c9c:	bf00      	nop
 8002c9e:	371c      	adds	r7, #28
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr

08002ca6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b087      	sub	sp, #28
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	607a      	str	r2, [r7, #4]
 8002cb2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	f023 0303 	bic.w	r3, r3, #3
 8002cd2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ce2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	011b      	lsls	r3, r3, #4
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002cf6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	021b      	lsls	r3, r3, #8
 8002cfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	621a      	str	r2, [r3, #32]
}
 8002d12:	bf00      	nop
 8002d14:	371c      	adds	r7, #28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d48:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	021b      	lsls	r3, r3, #8
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d5a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	031b      	lsls	r3, r3, #12
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d6e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	031b      	lsls	r3, r3, #12
 8002d74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	621a      	str	r2, [r3, #32]
}
 8002d8a:	bf00      	nop
 8002d8c:	371c      	adds	r7, #28
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002daa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f043 0307 	orr.w	r3, r3, #7
 8002db6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	609a      	str	r2, [r3, #8]
}
 8002dbe:	bf00      	nop
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002de2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	021a      	lsls	r2, r3, #8
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	609a      	str	r2, [r3, #8]
}
 8002dfc:	bf00      	nop
 8002dfe:	371c      	adds	r7, #28
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr

08002e06 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b087      	sub	sp, #28
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	60f8      	str	r0, [r7, #12]
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	f003 031f 	and.w	r3, r3, #31
 8002e18:	2201      	movs	r2, #1
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6a1a      	ldr	r2, [r3, #32]
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	43db      	mvns	r3, r3
 8002e28:	401a      	ands	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6a1a      	ldr	r2, [r3, #32]
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	f003 031f 	and.w	r3, r3, #31
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	621a      	str	r2, [r3, #32]
}
 8002e44:	bf00      	nop
 8002e46:	371c      	adds	r7, #28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr
	...

08002e50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e050      	b.n	8002f0a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a1b      	ldr	r2, [pc, #108]	; (8002f14 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d018      	beq.n	8002ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a19      	ldr	r2, [pc, #100]	; (8002f18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d013      	beq.n	8002ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ebe:	d00e      	beq.n	8002ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a15      	ldr	r2, [pc, #84]	; (8002f1c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d009      	beq.n	8002ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a14      	ldr	r2, [pc, #80]	; (8002f20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d004      	beq.n	8002ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a12      	ldr	r2, [pc, #72]	; (8002f24 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d10c      	bne.n	8002ef8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ee4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr
 8002f14:	40012c00 	.word	0x40012c00
 8002f18:	40013400 	.word	0x40013400
 8002f1c:	40000400 	.word	0x40000400
 8002f20:	40000800 	.word	0x40000800
 8002f24:	40000c00 	.word	0x40000c00

08002f28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr

08002f3a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr

08002f4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e03f      	b.n	8002fde <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7fe f8fa 	bl	800116c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2224      	movs	r2, #36	; 0x24
 8002f7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f829 	bl	8002fe8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	691a      	ldr	r2, [r3, #16]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695a      	ldr	r2, [r3, #20]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	4313      	orrs	r3, r2
 8003016:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003022:	f023 030c 	bic.w	r3, r3, #12
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	430b      	orrs	r3, r1
 800302e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	699a      	ldr	r2, [r3, #24]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a2c      	ldr	r2, [pc, #176]	; (80030fc <UART_SetConfig+0x114>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d103      	bne.n	8003058 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003050:	f7ff f83e 	bl	80020d0 <HAL_RCC_GetPCLK2Freq>
 8003054:	60f8      	str	r0, [r7, #12]
 8003056:	e002      	b.n	800305e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003058:	f7ff f826 	bl	80020a8 <HAL_RCC_GetPCLK1Freq>
 800305c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	009a      	lsls	r2, r3, #2
 8003068:	441a      	add	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	fbb2 f3f3 	udiv	r3, r2, r3
 8003074:	4a22      	ldr	r2, [pc, #136]	; (8003100 <UART_SetConfig+0x118>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	0119      	lsls	r1, r3, #4
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	009a      	lsls	r2, r3, #2
 8003088:	441a      	add	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	fbb2 f2f3 	udiv	r2, r2, r3
 8003094:	4b1a      	ldr	r3, [pc, #104]	; (8003100 <UART_SetConfig+0x118>)
 8003096:	fba3 0302 	umull	r0, r3, r3, r2
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	2064      	movs	r0, #100	; 0x64
 800309e:	fb00 f303 	mul.w	r3, r0, r3
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	3332      	adds	r3, #50	; 0x32
 80030a8:	4a15      	ldr	r2, [pc, #84]	; (8003100 <UART_SetConfig+0x118>)
 80030aa:	fba2 2303 	umull	r2, r3, r2, r3
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030b4:	4419      	add	r1, r3
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	009a      	lsls	r2, r3, #2
 80030c0:	441a      	add	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <UART_SetConfig+0x118>)
 80030ce:	fba3 0302 	umull	r0, r3, r3, r2
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	2064      	movs	r0, #100	; 0x64
 80030d6:	fb00 f303 	mul.w	r3, r0, r3
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	3332      	adds	r3, #50	; 0x32
 80030e0:	4a07      	ldr	r2, [pc, #28]	; (8003100 <UART_SetConfig+0x118>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	095b      	lsrs	r3, r3, #5
 80030e8:	f003 020f 	and.w	r2, r3, #15
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	440a      	add	r2, r1
 80030f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80030f4:	bf00      	nop
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40013800 	.word	0x40013800
 8003100:	51eb851f 	.word	0x51eb851f

08003104 <irmp_init>:
 *  Initialize IRMP decoder
 *  @details  Configures IRMP input pin
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
#ifndef ANALYZE
void irmp_init(void) {
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
#endif

#if IRMP_LOGGING == 1
    irmp_uart_init ();
#endif
}
 8003108:	bf00      	nop
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr

08003110 <irmp_get_data>:
 *  @details  gets decoded IRMP data
 *  @param    pointer in order to store IRMP data
 *  @return    TRUE: successful, FALSE: failed
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint_fast8_t irmp_get_data(IRMP_DATA *irmp_data_p) {
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint_fast8_t rtc = FALSE;
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]
#if IRMP_SUPPORT_MERLIN_PROTOCOL == 1
    uint_fast8_t   cmd_len = 0;
#endif

  if (irmp_ir_detected) {
 800311c:	4b3d      	ldr	r3, [pc, #244]	; (8003214 <irmp_get_data+0x104>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d071      	beq.n	8003208 <irmp_get_data+0xf8>
    switch (irmp_protocol) {
 8003124:	4b3c      	ldr	r3, [pc, #240]	; (8003218 <irmp_get_data+0x108>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2b02      	cmp	r3, #2
 800312a:	d002      	beq.n	8003132 <irmp_get_data+0x22>
 800312c:	2b32      	cmp	r3, #50	; 0x32
 800312e:	d02e      	beq.n	800318e <irmp_get_data+0x7e>
 8003130:	e03d      	b.n	80031ae <irmp_get_data+0x9e>
#endif
#endif

#if IRMP_SUPPORT_NEC_PROTOCOL == 1
    case IRMP_NEC_PROTOCOL:
      if ((irmp_command >> 8) == (~irmp_command & 0x00FF)) {
 8003132:	4b3a      	ldr	r3, [pc, #232]	; (800321c <irmp_get_data+0x10c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	0a1a      	lsrs	r2, r3, #8
 8003138:	4b38      	ldr	r3, [pc, #224]	; (800321c <irmp_get_data+0x10c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	43db      	mvns	r3, r3
 800313e:	b2db      	uxtb	r3, r3
 8003140:	429a      	cmp	r2, r3
 8003142:	d107      	bne.n	8003154 <irmp_get_data+0x44>
        irmp_command &= 0xff;
 8003144:	4b35      	ldr	r3, [pc, #212]	; (800321c <irmp_get_data+0x10c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	4a34      	ldr	r2, [pc, #208]	; (800321c <irmp_get_data+0x10c>)
 800314c:	6013      	str	r3, [r2, #0]
        rtc = TRUE;
 800314e:	2301      	movs	r3, #1
 8003150:	60fb      	str	r3, [r7, #12]
      } else {
        ANALYZE_PRINTF1 ("Switching to ONKYO protocol\n");
        irmp_protocol = IRMP_ONKYO_PROTOCOL;
        rtc = TRUE;
      }
      break;
 8003152:	e030      	b.n	80031b6 <irmp_get_data+0xa6>
      } else if (irmp_address == 0x87EE) {
 8003154:	4b32      	ldr	r3, [pc, #200]	; (8003220 <irmp_get_data+0x110>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f248 72ee 	movw	r2, #34798	; 0x87ee
 800315c:	4293      	cmp	r3, r2
 800315e:	d110      	bne.n	8003182 <irmp_get_data+0x72>
        irmp_protocol = IRMP_APPLE_PROTOCOL;
 8003160:	4b2d      	ldr	r3, [pc, #180]	; (8003218 <irmp_get_data+0x108>)
 8003162:	220b      	movs	r2, #11
 8003164:	601a      	str	r2, [r3, #0]
        irmp_address = (irmp_command & 0xFF00) >> 8;
 8003166:	4b2d      	ldr	r3, [pc, #180]	; (800321c <irmp_get_data+0x10c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	0a1b      	lsrs	r3, r3, #8
 800316c:	b2db      	uxtb	r3, r3
 800316e:	4a2c      	ldr	r2, [pc, #176]	; (8003220 <irmp_get_data+0x110>)
 8003170:	6013      	str	r3, [r2, #0]
        irmp_command &= 0x00FF;
 8003172:	4b2a      	ldr	r3, [pc, #168]	; (800321c <irmp_get_data+0x10c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	b2db      	uxtb	r3, r3
 8003178:	4a28      	ldr	r2, [pc, #160]	; (800321c <irmp_get_data+0x10c>)
 800317a:	6013      	str	r3, [r2, #0]
        rtc = TRUE;
 800317c:	2301      	movs	r3, #1
 800317e:	60fb      	str	r3, [r7, #12]
      break;
 8003180:	e019      	b.n	80031b6 <irmp_get_data+0xa6>
        irmp_protocol = IRMP_ONKYO_PROTOCOL;
 8003182:	4b25      	ldr	r3, [pc, #148]	; (8003218 <irmp_get_data+0x108>)
 8003184:	2238      	movs	r2, #56	; 0x38
 8003186:	601a      	str	r2, [r3, #0]
        rtc = TRUE;
 8003188:	2301      	movs	r3, #1
 800318a:	60fb      	str	r3, [r7, #12]
      break;
 800318c:	e013      	b.n	80031b6 <irmp_get_data+0xa6>
#endif

#if IRMP_SUPPORT_NEC_PROTOCOL == 1
    case IRMP_VINCENT_PROTOCOL:
      if ((irmp_command >> 8) == (irmp_command & 0x00FF)) {
 800318e:	4b23      	ldr	r3, [pc, #140]	; (800321c <irmp_get_data+0x10c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	0a1a      	lsrs	r2, r3, #8
 8003194:	4b21      	ldr	r3, [pc, #132]	; (800321c <irmp_get_data+0x10c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	b2db      	uxtb	r3, r3
 800319a:	429a      	cmp	r2, r3
 800319c:	d10a      	bne.n	80031b4 <irmp_get_data+0xa4>
        irmp_command &= 0xff;
 800319e:	4b1f      	ldr	r3, [pc, #124]	; (800321c <irmp_get_data+0x10c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	4a1d      	ldr	r2, [pc, #116]	; (800321c <irmp_get_data+0x10c>)
 80031a6:	6013      	str	r3, [r2, #0]
        rtc = TRUE;
 80031a8:	2301      	movs	r3, #1
 80031aa:	60fb      	str	r3, [r7, #12]
      }
      break;
 80031ac:	e002      	b.n	80031b4 <irmp_get_data+0xa4>
                break;
            }
#endif

    default: {
      rtc = TRUE;
 80031ae:	2301      	movs	r3, #1
 80031b0:	60fb      	str	r3, [r7, #12]
      break;
 80031b2:	e000      	b.n	80031b6 <irmp_get_data+0xa6>
      break;
 80031b4:	bf00      	nop
    }
    }

    if (rtc) {
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d016      	beq.n	80031ea <irmp_get_data+0xda>
      irmp_data_p->protocol = irmp_protocol;
 80031bc:	4b16      	ldr	r3, [pc, #88]	; (8003218 <irmp_get_data+0x108>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	701a      	strb	r2, [r3, #0]
      irmp_data_p->address = irmp_address;
 80031c6:	4b16      	ldr	r3, [pc, #88]	; (8003220 <irmp_get_data+0x110>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f8a3 2001 	strh.w	r2, [r3, #1]
      irmp_data_p->command = irmp_command;
 80031d2:	4b12      	ldr	r3, [pc, #72]	; (800321c <irmp_get_data+0x10c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f8a3 2003 	strh.w	r2, [r3, #3]
      irmp_data_p->flags = irmp_flags;
 80031de:	4b11      	ldr	r3, [pc, #68]	; (8003224 <irmp_get_data+0x114>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	715a      	strb	r2, [r3, #5]
 80031e8:	e002      	b.n	80031f0 <irmp_get_data+0xe0>
    } else {
      irmp_protocol = IRMP_UNKNOWN_PROTOCOL;
 80031ea:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <irmp_get_data+0x108>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
    }

    irmp_command = 0;            // don't reset irmp_protocol here, needed for detection of NEC & JVC repetition frames!
 80031f0:	4b0a      	ldr	r3, [pc, #40]	; (800321c <irmp_get_data+0x10c>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
    irmp_address = 0;
 80031f6:	4b0a      	ldr	r3, [pc, #40]	; (8003220 <irmp_get_data+0x110>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
    irmp_flags = 0;
 80031fc:	4b09      	ldr	r3, [pc, #36]	; (8003224 <irmp_get_data+0x114>)
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]

    irmp_ir_detected = FALSE;
 8003202:	4b04      	ldr	r3, [pc, #16]	; (8003214 <irmp_get_data+0x104>)
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]
  }

  return rtc;
 8003208:	68fb      	ldr	r3, [r7, #12]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr
 8003214:	2000024c 	.word	0x2000024c
 8003218:	20000250 	.word	0x20000250
 800321c:	20000258 	.word	0x20000258
 8003220:	20000254 	.word	0x20000254
 8003224:	2000025c 	.word	0x2000025c

08003228 <irmp_store_bit>:
 *  @param    value to store: 0 or 1
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
// verhindert, dass irmp_store_bit() inline compiliert wird:
// static void irmp_store_bit (uint_fast8_t) __attribute__ ((noinline));
static void irmp_store_bit(uint_fast8_t value) {
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
        first_bit = value;
    }
    else
#endif

  if (irmp_bit >= irmp_param.address_offset && irmp_bit < irmp_param.address_end) {
 8003230:	4b2d      	ldr	r3, [pc, #180]	; (80032e8 <irmp_store_bit+0xc0>)
 8003232:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003234:	4b2d      	ldr	r3, [pc, #180]	; (80032ec <irmp_store_bit+0xc4>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d822      	bhi.n	8003282 <irmp_store_bit+0x5a>
 800323c:	4b2a      	ldr	r3, [pc, #168]	; (80032e8 <irmp_store_bit+0xc0>)
 800323e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003240:	4b2a      	ldr	r3, [pc, #168]	; (80032ec <irmp_store_bit+0xc4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d91c      	bls.n	8003282 <irmp_store_bit+0x5a>
    if (irmp_param.lsb_first) {
 8003248:	4b27      	ldr	r3, [pc, #156]	; (80032e8 <irmp_store_bit+0xc0>)
 800324a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00c      	beq.n	800326a <irmp_store_bit+0x42>
      irmp_tmp_address |= (((uint_fast16_t) (value)) << (irmp_bit - irmp_param.address_offset));      // CV wants cast
 8003250:	4b26      	ldr	r3, [pc, #152]	; (80032ec <irmp_store_bit+0xc4>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4b24      	ldr	r3, [pc, #144]	; (80032e8 <irmp_store_bit+0xc0>)
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	409a      	lsls	r2, r3
 800325e:	4b24      	ldr	r3, [pc, #144]	; (80032f0 <irmp_store_bit+0xc8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4313      	orrs	r3, r2
 8003264:	4a22      	ldr	r2, [pc, #136]	; (80032f0 <irmp_store_bit+0xc8>)
 8003266:	6013      	str	r3, [r2, #0]
    if (irmp_param.lsb_first) {
 8003268:	e033      	b.n	80032d2 <irmp_store_bit+0xaa>
    } else {
      irmp_tmp_address <<= 1;
 800326a:	4b21      	ldr	r3, [pc, #132]	; (80032f0 <irmp_store_bit+0xc8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	4a1f      	ldr	r2, [pc, #124]	; (80032f0 <irmp_store_bit+0xc8>)
 8003272:	6013      	str	r3, [r2, #0]
      irmp_tmp_address |= value;
 8003274:	4b1e      	ldr	r3, [pc, #120]	; (80032f0 <irmp_store_bit+0xc8>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4313      	orrs	r3, r2
 800327c:	4a1c      	ldr	r2, [pc, #112]	; (80032f0 <irmp_store_bit+0xc8>)
 800327e:	6013      	str	r3, [r2, #0]
    if (irmp_param.lsb_first) {
 8003280:	e027      	b.n	80032d2 <irmp_store_bit+0xaa>
    }
  } else if (irmp_bit >= irmp_param.command_offset && irmp_bit < irmp_param.command_end) {
 8003282:	4b19      	ldr	r3, [pc, #100]	; (80032e8 <irmp_store_bit+0xc0>)
 8003284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003286:	4b19      	ldr	r3, [pc, #100]	; (80032ec <irmp_store_bit+0xc4>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	429a      	cmp	r2, r3
 800328c:	d821      	bhi.n	80032d2 <irmp_store_bit+0xaa>
 800328e:	4b16      	ldr	r3, [pc, #88]	; (80032e8 <irmp_store_bit+0xc0>)
 8003290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003292:	4b16      	ldr	r3, [pc, #88]	; (80032ec <irmp_store_bit+0xc4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d91b      	bls.n	80032d2 <irmp_store_bit+0xaa>
    if (irmp_param.lsb_first) {
 800329a:	4b13      	ldr	r3, [pc, #76]	; (80032e8 <irmp_store_bit+0xc0>)
 800329c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00c      	beq.n	80032bc <irmp_store_bit+0x94>
                irmp_tmp_id |= (((uint_fast16_t) (value)) << (irmp_bit - 32));                              // CV wants cast
            }
            else
#endif
      {
        irmp_tmp_command |= (((uint_fast16_t) (value)) << (irmp_bit - irmp_param.command_offset));  // CV wants cast
 80032a2:	4b12      	ldr	r3, [pc, #72]	; (80032ec <irmp_store_bit+0xc4>)
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	4b10      	ldr	r3, [pc, #64]	; (80032e8 <irmp_store_bit+0xc0>)
 80032a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	409a      	lsls	r2, r3
 80032b0:	4b10      	ldr	r3, [pc, #64]	; (80032f4 <irmp_store_bit+0xcc>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	4a0f      	ldr	r2, [pc, #60]	; (80032f4 <irmp_store_bit+0xcc>)
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	e00a      	b.n	80032d2 <irmp_store_bit+0xaa>
      }
    } else {
      irmp_tmp_command <<= 1;
 80032bc:	4b0d      	ldr	r3, [pc, #52]	; (80032f4 <irmp_store_bit+0xcc>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	4a0c      	ldr	r2, [pc, #48]	; (80032f4 <irmp_store_bit+0xcc>)
 80032c4:	6013      	str	r3, [r2, #0]
      irmp_tmp_command |= value;
 80032c6:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <irmp_store_bit+0xcc>)
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	4a09      	ldr	r2, [pc, #36]	; (80032f4 <irmp_store_bit+0xcc>)
 80032d0:	6013      	str	r3, [r2, #0]
#endif // IRMP_SUPPORT_MITSU_HEAVY_PROTOCOL
  {
    ;
  }

  irmp_bit++;
 80032d2:	4b06      	ldr	r3, [pc, #24]	; (80032ec <irmp_store_bit+0xc4>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	3301      	adds	r3, #1
 80032d8:	4a04      	ldr	r2, [pc, #16]	; (80032ec <irmp_store_bit+0xc4>)
 80032da:	6013      	str	r3, [r2, #0]
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	20000208 	.word	0x20000208
 80032ec:	20000204 	.word	0x20000204
 80032f0:	20000260 	.word	0x20000260
 80032f4:	20000264 	.word	0x20000264

080032f8 <irmp_ISR>:
/*---------------------------------------------------------------------------------------------------------------------------------------------------
 *  ISR routine
 *  @details  ISR routine, called 10000 times per second
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
uint_fast8_t irmp_ISR(void) {
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
#endif // ANALYZE

#if IRMP_HIGH_ACTIVE == 1
    irmp_input = ! input(IRMP_PIN);
#else
  irmp_input = input(IRMP_PIN);
 80032fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003302:	4893      	ldr	r0, [pc, #588]	; (8003550 <irmp_ISR+0x258>)
 8003304:	f7fe facc 	bl	80018a0 <HAL_GPIO_ReadPin>
 8003308:	4603      	mov	r3, r0
 800330a:	607b      	str	r3, [r7, #4]
    }
#endif // IRMP_USE_CALLBACK == 1

  irmp_log(irmp_input);                                                       // log ir signal, if IRMP_LOGGING defined

  if (!irmp_ir_detected)                                                     // ir code already detected?
 800330c:	4b91      	ldr	r3, [pc, #580]	; (8003554 <irmp_ISR+0x25c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	f040 8239 	bne.w	8003788 <irmp_ISR+0x490>
  {                                                                           // no...
    if (!irmp_start_bit_detected)                                          // start bit detected?
 8003316:	4b90      	ldr	r3, [pc, #576]	; (8003558 <irmp_ISR+0x260>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d12f      	bne.n	800337e <irmp_ISR+0x86>
    {                                                                       // no...
      if (!irmp_input)                                                   // receiving burst?
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d105      	bne.n	8003330 <irmp_ISR+0x38>
                {
                    s_startBitSample = s_curSample;
                    ANALYZE_PRINTF2("%8.3fms [starting pulse]\n", (double) (time_counter * 1000) / F_INTERRUPTS);
                }
#endif // ANALYZE
        irmp_pulse_time++;                                              // increment counter
 8003324:	4b8d      	ldr	r3, [pc, #564]	; (800355c <irmp_ISR+0x264>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	3301      	adds	r3, #1
 800332a:	4a8c      	ldr	r2, [pc, #560]	; (800355c <irmp_ISR+0x264>)
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	e22b      	b.n	8003788 <irmp_ISR+0x490>
      } else {                                                                   // no...
        if (irmp_pulse_time)                                            // it's dark....
 8003330:	4b8a      	ldr	r3, [pc, #552]	; (800355c <irmp_ISR+0x264>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d015      	beq.n	8003364 <irmp_ISR+0x6c>
        {                                                              // set flags for counting the time of darkness...
          irmp_start_bit_detected = 1;
 8003338:	4b87      	ldr	r3, [pc, #540]	; (8003558 <irmp_ISR+0x260>)
 800333a:	2201      	movs	r2, #1
 800333c:	601a      	str	r2, [r3, #0]
          wait_for_start_space = 1;
 800333e:	4b88      	ldr	r3, [pc, #544]	; (8003560 <irmp_ISR+0x268>)
 8003340:	2201      	movs	r2, #1
 8003342:	601a      	str	r2, [r3, #0]
          wait_for_space = 0;
 8003344:	4b87      	ldr	r3, [pc, #540]	; (8003564 <irmp_ISR+0x26c>)
 8003346:	2200      	movs	r2, #0
 8003348:	601a      	str	r2, [r3, #0]
          irmp_tmp_command = 0;
 800334a:	4b87      	ldr	r3, [pc, #540]	; (8003568 <irmp_ISR+0x270>)
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
          irmp_tmp_address = 0;
 8003350:	4b86      	ldr	r3, [pc, #536]	; (800356c <irmp_ISR+0x274>)
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]
                    irmp_lgair_address      = 0;
#endif
#if IRMP_SUPPORT_MELINERA_PROTOCOL == 1
                    irmp_melinera_command   = 0;
#endif
          irmp_bit = 0xff;
 8003356:	4b86      	ldr	r3, [pc, #536]	; (8003570 <irmp_ISR+0x278>)
 8003358:	22ff      	movs	r2, #255	; 0xff
 800335a:	601a      	str	r2, [r3, #0]
          irmp_pause_time = 1;                                // 1st pause: set to 1, not to 0!
 800335c:	4b85      	ldr	r3, [pc, #532]	; (8003574 <irmp_ISR+0x27c>)
 800335e:	2201      	movs	r2, #1
 8003360:	701a      	strb	r2, [r3, #0]
 8003362:	e211      	b.n	8003788 <irmp_ISR+0x490>
#if IRMP_SUPPORT_RC5_PROTOCOL == 1 || IRMP_SUPPORT_S100_PROTOCOL == 1
                    rc5_cmd_bit6            = 0;                                // fm 2010-03-07: bugfix: reset it after incomplete RC5 frame!
#endif
        } else {
          if (key_repetition_len < 0xFFFF)                            // avoid overflow of counter
 8003364:	4b84      	ldr	r3, [pc, #528]	; (8003578 <irmp_ISR+0x280>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800336c:	4293      	cmp	r3, r2
 800336e:	f200 820b 	bhi.w	8003788 <irmp_ISR+0x490>
              {
            key_repetition_len++;
 8003372:	4b81      	ldr	r3, [pc, #516]	; (8003578 <irmp_ISR+0x280>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	3301      	adds	r3, #1
 8003378:	4a7f      	ldr	r2, [pc, #508]	; (8003578 <irmp_ISR+0x280>)
 800337a:	6013      	str	r3, [r2, #0]
 800337c:	e204      	b.n	8003788 <irmp_ISR+0x490>
#endif // IRMP_SUPPORT_DENON_PROTOCOL == 1
          }
        }
      }
    } else {
      if (wait_for_start_space)                                           // we have received start bit...
 800337e:	4b78      	ldr	r3, [pc, #480]	; (8003560 <irmp_ISR+0x268>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d05b      	beq.n	800343e <irmp_ISR+0x146>
      {                                                                   // ...and are counting the time of darkness
        if (irmp_input)                                                 // still dark?
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d014      	beq.n	80033b6 <irmp_ISR+0xbe>
        {                                                               // yes
          irmp_pause_time++;                                          // increment counter
 800338c:	4b79      	ldr	r3, [pc, #484]	; (8003574 <irmp_ISR+0x27c>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	3301      	adds	r3, #1
 8003392:	b2da      	uxtb	r2, r3
 8003394:	4b77      	ldr	r3, [pc, #476]	; (8003574 <irmp_ISR+0x27c>)
 8003396:	701a      	strb	r2, [r3, #0]

#if IRMP_SUPPORT_NIKON_PROTOCOL == 1
                    if (((irmp_pulse_time < NIKON_START_BIT_PULSE_LEN_MIN || irmp_pulse_time > NIKON_START_BIT_PULSE_LEN_MAX) && irmp_pause_time > IRMP_TIMEOUT_LEN) ||
                         irmp_pause_time > IRMP_TIMEOUT_NIKON_LEN)
#else
          if (irmp_pause_time > IRMP_TIMEOUT_LEN)                     // timeout?
 8003398:	4b76      	ldr	r3, [pc, #472]	; (8003574 <irmp_ISR+0x27c>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2be9      	cmp	r3, #233	; 0xe9
 800339e:	f240 8163 	bls.w	8003668 <irmp_ISR+0x370>
#endif // IRMP_SUPPORT_JVC_PROTOCOL == 1
            {
              ANALYZE_PRINTF4 ("%8.3fms error 1: pause after start bit pulse %d too long: %d\n", (double) (time_counter * 1000) / F_INTERRUPTS, irmp_pulse_time, irmp_pause_time);ANALYZE_ONLY_NORMAL_PUTCHAR ('\n');
            }

            irmp_start_bit_detected = 0;                            // reset flags, let's wait for another start bit
 80033a2:	4b6d      	ldr	r3, [pc, #436]	; (8003558 <irmp_ISR+0x260>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]
            irmp_pulse_time = 0;
 80033a8:	4b6c      	ldr	r3, [pc, #432]	; (800355c <irmp_ISR+0x264>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]
            irmp_pause_time = 0;
 80033ae:	4b71      	ldr	r3, [pc, #452]	; (8003574 <irmp_ISR+0x27c>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	701a      	strb	r2, [r3, #0]
 80033b4:	e158      	b.n	8003668 <irmp_ISR+0x370>
          }
        } else {                                                               // receiving first data pulse!
          IRMP_PARAMETER *irmp_param_p;
          irmp_param_p = (IRMP_PARAMETER*) 0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]
          irmp_bit = 0;
 80033ba:	4b6d      	ldr	r3, [pc, #436]	; (8003570 <irmp_ISR+0x278>)
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]
                    }
                    else
#endif // IRMP_SUPPORT_JVC_PROTOCOL == 1

#if IRMP_SUPPORT_NEC_PROTOCOL == 1
          if (irmp_pulse_time >= NEC_START_BIT_PULSE_LEN_MIN && irmp_pulse_time <= NEC_START_BIT_PULSE_LEN_MAX
 80033c0:	4b66      	ldr	r3, [pc, #408]	; (800355c <irmp_ISR+0x264>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b5d      	cmp	r3, #93	; 0x5d
 80033c6:	d90e      	bls.n	80033e6 <irmp_ISR+0xee>
 80033c8:	4b64      	ldr	r3, [pc, #400]	; (800355c <irmp_ISR+0x264>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2bb1      	cmp	r3, #177	; 0xb1
 80033ce:	d80a      	bhi.n	80033e6 <irmp_ISR+0xee>
              && irmp_pause_time >= NEC_START_BIT_PAUSE_LEN_MIN && irmp_pause_time <= NEC_START_BIT_PAUSE_LEN_MAX) {
 80033d0:	4b68      	ldr	r3, [pc, #416]	; (8003574 <irmp_ISR+0x27c>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b2d      	cmp	r3, #45	; 0x2d
 80033d6:	d906      	bls.n	80033e6 <irmp_ISR+0xee>
 80033d8:	4b66      	ldr	r3, [pc, #408]	; (8003574 <irmp_ISR+0x27c>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b59      	cmp	r3, #89	; 0x59
 80033de:	d802      	bhi.n	80033e6 <irmp_ISR+0xee>
                        irmp_param_p = (IRMP_PARAMETER *) &nec42_param;
#else
            ANALYZE_PRINTF5 ("protocol = NEC, start bit timings: pulse: %3d - %3d, pause: %3d - %3d\n",
                NEC_START_BIT_PULSE_LEN_MIN, NEC_START_BIT_PULSE_LEN_MAX,
                NEC_START_BIT_PAUSE_LEN_MIN, NEC_START_BIT_PAUSE_LEN_MAX);
            irmp_param_p = (IRMP_PARAMETER*) &nec_param;
 80033e0:	4b66      	ldr	r3, [pc, #408]	; (800357c <irmp_ISR+0x284>)
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	e018      	b.n	8003418 <irmp_ISR+0x120>
#endif
          } else if (irmp_pulse_time >= NEC_START_BIT_PULSE_LEN_MIN && irmp_pulse_time <= NEC_START_BIT_PULSE_LEN_MAX
 80033e6:	4b5d      	ldr	r3, [pc, #372]	; (800355c <irmp_ISR+0x264>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b5d      	cmp	r3, #93	; 0x5d
 80033ec:	d90e      	bls.n	800340c <irmp_ISR+0x114>
 80033ee:	4b5b      	ldr	r3, [pc, #364]	; (800355c <irmp_ISR+0x264>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2bb1      	cmp	r3, #177	; 0xb1
 80033f4:	d80a      	bhi.n	800340c <irmp_ISR+0x114>
              && irmp_pause_time >= NEC_REPEAT_START_BIT_PAUSE_LEN_MIN
 80033f6:	4b5f      	ldr	r3, [pc, #380]	; (8003574 <irmp_ISR+0x27c>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b16      	cmp	r3, #22
 80033fc:	d906      	bls.n	800340c <irmp_ISR+0x114>
              && irmp_pause_time <= NEC_REPEAT_START_BIT_PAUSE_LEN_MAX) {                                    // it's NEC
 80033fe:	4b5d      	ldr	r3, [pc, #372]	; (8003574 <irmp_ISR+0x27c>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b2d      	cmp	r3, #45	; 0x2d
 8003404:	d802      	bhi.n	800340c <irmp_ISR+0x114>
            {
              ANALYZE_PRINTF5 ("protocol = NEC (repetition frame), start bit timings: pulse: %3d - %3d, pause: %3d - %3d\n",
                  NEC_START_BIT_PULSE_LEN_MIN, NEC_START_BIT_PULSE_LEN_MAX,
                  NEC_REPEAT_START_BIT_PAUSE_LEN_MIN, NEC_REPEAT_START_BIT_PAUSE_LEN_MAX);

              irmp_param_p = (IRMP_PARAMETER*) &nec_rep_param;
 8003406:	4b5e      	ldr	r3, [pc, #376]	; (8003580 <irmp_ISR+0x288>)
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	e005      	b.n	8003418 <irmp_ISR+0x120>
                    }
                    else
#endif // IRMP_SUPPORT_RCMM_PROTOCOL == 1
          {
            ANALYZE_PRINTF1 ("protocol = UNKNOWN\n");
            irmp_start_bit_detected = 0;                            // wait for another start bit...
 800340c:	4b52      	ldr	r3, [pc, #328]	; (8003558 <irmp_ISR+0x260>)
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
            irmp_param.protocol = 0;                                // reset protocol
 8003412:	4b5c      	ldr	r3, [pc, #368]	; (8003584 <irmp_ISR+0x28c>)
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
          }

          if (irmp_start_bit_detected) {
 8003418:	4b4f      	ldr	r3, [pc, #316]	; (8003558 <irmp_ISR+0x260>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d004      	beq.n	800342a <irmp_ISR+0x132>
            memcpy_P(&irmp_param, irmp_param_p, sizeof(IRMP_PARAMETER));
 8003420:	2244      	movs	r2, #68	; 0x44
 8003422:	68f9      	ldr	r1, [r7, #12]
 8003424:	4857      	ldr	r0, [pc, #348]	; (8003584 <irmp_ISR+0x28c>)
 8003426:	f000 fa01 	bl	800382c <memcpy>
#endif // IRMP_SUPPORT_RF_GEN24_PROTOCOL == 1
          {
            ;                                                       // else do nothing
          }

          irmp_pulse_time = 1;                                        // set counter to 1, not 0
 800342a:	4b4c      	ldr	r3, [pc, #304]	; (800355c <irmp_ISR+0x264>)
 800342c:	2201      	movs	r2, #1
 800342e:	601a      	str	r2, [r3, #0]
          irmp_pause_time = 0;
 8003430:	4b50      	ldr	r3, [pc, #320]	; (8003574 <irmp_ISR+0x27c>)
 8003432:	2200      	movs	r2, #0
 8003434:	701a      	strb	r2, [r3, #0]
          wait_for_start_space = 0;
 8003436:	4b4a      	ldr	r3, [pc, #296]	; (8003560 <irmp_ISR+0x268>)
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	e114      	b.n	8003668 <irmp_ISR+0x370>
        }
      } else if (wait_for_space)                                            // the data section....
 800343e:	4b49      	ldr	r3, [pc, #292]	; (8003564 <irmp_ISR+0x26c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 8101 	beq.w	800364a <irmp_ISR+0x352>
      {                                                                   // counting the time of darkness....
        uint_fast8_t got_light = FALSE;
 8003448:	2300      	movs	r3, #0
 800344a:	60bb      	str	r3, [r7, #8]

        if (irmp_input)                                                 // still dark?
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 80aa 	beq.w	80035a8 <irmp_ISR+0x2b0>
        {                                                               // yes...
          irmp_pause_time++;                                          // increment counter
 8003454:	4b47      	ldr	r3, [pc, #284]	; (8003574 <irmp_ISR+0x27c>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	3301      	adds	r3, #1
 800345a:	b2da      	uxtb	r2, r3
 800345c:	4b45      	ldr	r3, [pc, #276]	; (8003574 <irmp_ISR+0x27c>)
 800345e:	701a      	strb	r2, [r3, #0]

          if (irmp_bit == irmp_param.complete_len && irmp_param.stop_bit == 1
 8003460:	4b48      	ldr	r3, [pc, #288]	; (8003584 <irmp_ISR+0x28c>)
 8003462:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003464:	4b42      	ldr	r3, [pc, #264]	; (8003570 <irmp_ISR+0x278>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d12b      	bne.n	80034c4 <irmp_ISR+0x1cc>
 800346c:	4b45      	ldr	r3, [pc, #276]	; (8003584 <irmp_ISR+0x28c>)
 800346e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003470:	2b01      	cmp	r3, #1
 8003472:	d127      	bne.n	80034c4 <irmp_ISR+0x1cc>
              && irmp_pause_time > ((irmp_param.flags & IRMP_PARAM_FLAG_IS_MANCHESTER) ? 0 : STOP_BIT_PAUSE_LEN_MIN)) {
 8003474:	4b3f      	ldr	r3, [pc, #252]	; (8003574 <irmp_ISR+0x27c>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	461a      	mov	r2, r3
 800347a:	4b42      	ldr	r3, [pc, #264]	; (8003584 <irmp_ISR+0x28c>)
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <irmp_ISR+0x192>
 8003486:	2300      	movs	r3, #0
 8003488:	e000      	b.n	800348c <irmp_ISR+0x194>
 800348a:	232e      	movs	r3, #46	; 0x2e
 800348c:	4293      	cmp	r3, r2
 800348e:	d219      	bcs.n	80034c4 <irmp_ISR+0x1cc>
                            (irmp_param.flags & IRMP_PARAM_FLAG_IS_MANCHESTER) ||
#endif
#if IRMP_SUPPORT_SERIAL == 1
                            (irmp_param.flags & IRMP_PARAM_FLAG_IS_SERIAL) ||
#endif
            (irmp_pulse_time >= irmp_param.pulse_0_len_min && irmp_pulse_time <= irmp_param.pulse_0_len_max)) {
 8003490:	4b3c      	ldr	r3, [pc, #240]	; (8003584 <irmp_ISR+0x28c>)
 8003492:	695a      	ldr	r2, [r3, #20]
 8003494:	4b31      	ldr	r3, [pc, #196]	; (800355c <irmp_ISR+0x264>)
 8003496:	681b      	ldr	r3, [r3, #0]
            if (
 8003498:	429a      	cmp	r2, r3
 800349a:	d809      	bhi.n	80034b0 <irmp_ISR+0x1b8>
            (irmp_pulse_time >= irmp_param.pulse_0_len_min && irmp_pulse_time <= irmp_param.pulse_0_len_max)) {
 800349c:	4b39      	ldr	r3, [pc, #228]	; (8003584 <irmp_ISR+0x28c>)
 800349e:	699a      	ldr	r2, [r3, #24]
 80034a0:	4b2e      	ldr	r3, [pc, #184]	; (800355c <irmp_ISR+0x264>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d303      	bcc.n	80034b0 <irmp_ISR+0x1b8>
                                    irmp_tmp_address = 0;                      // no address
                                }
#endif
              }

              irmp_param.stop_bit = 0;
 80034a8:	4b36      	ldr	r3, [pc, #216]	; (8003584 <irmp_ISR+0x28c>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	639a      	str	r2, [r3, #56]	; 0x38
            if (
 80034ae:	e07d      	b.n	80035ac <irmp_ISR+0x2b4>
            } else {
              ANALYZE_PRINTF5 ("error: stop bit timing wrong, irmp_bit = %d, irmp_pulse_time = %d, pulse_0_len_min = %d, pulse_0_len_max = %d\n",
                  irmp_bit, irmp_pulse_time, irmp_param.pulse_0_len_min, irmp_param.pulse_0_len_max);
              irmp_start_bit_detected = 0;                        // wait for another start bit...
 80034b0:	4b29      	ldr	r3, [pc, #164]	; (8003558 <irmp_ISR+0x260>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
              irmp_pulse_time = 0;
 80034b6:	4b29      	ldr	r3, [pc, #164]	; (800355c <irmp_ISR+0x264>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
              irmp_pause_time = 0;
 80034bc:	4b2d      	ldr	r3, [pc, #180]	; (8003574 <irmp_ISR+0x27c>)
 80034be:	2200      	movs	r2, #0
 80034c0:	701a      	strb	r2, [r3, #0]
            if (
 80034c2:	e073      	b.n	80035ac <irmp_ISR+0x2b4>
                        got_light = TRUE;                                   // this is a lie, but generates a stop bit ;-)
                        irmp_param.stop_bit = TRUE;                         // set flag
                    }
                    else
#endif // IRMP_SUPPORT_MANCHESTER == 1
          if (irmp_pause_time > IRMP_TIMEOUT_LEN)                 // timeout?
 80034c4:	4b2b      	ldr	r3, [pc, #172]	; (8003574 <irmp_ISR+0x27c>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2be9      	cmp	r3, #233	; 0xe9
 80034ca:	d96f      	bls.n	80035ac <irmp_ISR+0x2b4>
          {                                                       // yes...
            if (irmp_bit == irmp_param.complete_len - 1 && irmp_param.stop_bit == 0) {
 80034cc:	4b2d      	ldr	r3, [pc, #180]	; (8003584 <irmp_ISR+0x28c>)
 80034ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d0:	1e5a      	subs	r2, r3, #1
 80034d2:	4b27      	ldr	r3, [pc, #156]	; (8003570 <irmp_ISR+0x278>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d109      	bne.n	80034ee <irmp_ISR+0x1f6>
 80034da:	4b2a      	ldr	r3, [pc, #168]	; (8003584 <irmp_ISR+0x28c>)
 80034dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d105      	bne.n	80034ee <irmp_ISR+0x1f6>
              irmp_bit++;
 80034e2:	4b23      	ldr	r3, [pc, #140]	; (8003570 <irmp_ISR+0x278>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	3301      	adds	r3, #1
 80034e8:	4a21      	ldr	r2, [pc, #132]	; (8003570 <irmp_ISR+0x278>)
 80034ea:	6013      	str	r3, [r2, #0]
 80034ec:	e05e      	b.n	80035ac <irmp_ISR+0x2b4>
            }
#if IRMP_SUPPORT_NEC_PROTOCOL == 1
            else if ((irmp_param.protocol == IRMP_NEC_PROTOCOL || irmp_param.protocol == IRMP_NEC42_PROTOCOL)
 80034ee:	4b25      	ldr	r3, [pc, #148]	; (8003584 <irmp_ISR+0x28c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d003      	beq.n	80034fe <irmp_ISR+0x206>
 80034f6:	4b23      	ldr	r3, [pc, #140]	; (8003584 <irmp_ISR+0x28c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2b1c      	cmp	r3, #28
 80034fc:	d14a      	bne.n	8003594 <irmp_ISR+0x29c>
                && irmp_bit == 0) {                                            // it was a non-standard repetition frame
 80034fe:	4b1c      	ldr	r3, [pc, #112]	; (8003570 <irmp_ISR+0x278>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d146      	bne.n	8003594 <irmp_ISR+0x29c>
              ANALYZE_PRINTF1 ("Detected non-standard repetition frame, switching to NEC repetition\n");
              if (key_repetition_len < NEC_FRAME_REPEAT_PAUSE_LEN_MAX) {
 8003506:	4b1c      	ldr	r3, [pc, #112]	; (8003578 <irmp_ISR+0x280>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800350e:	d21b      	bcs.n	8003548 <irmp_ISR+0x250>
                irmp_param.stop_bit = TRUE;                         // set flag
 8003510:	4b1c      	ldr	r3, [pc, #112]	; (8003584 <irmp_ISR+0x28c>)
 8003512:	2201      	movs	r2, #1
 8003514:	639a      	str	r2, [r3, #56]	; 0x38
                irmp_param.protocol = IRMP_NEC_PROTOCOL;            // switch protocol
 8003516:	4b1b      	ldr	r3, [pc, #108]	; (8003584 <irmp_ISR+0x28c>)
 8003518:	2202      	movs	r2, #2
 800351a:	601a      	str	r2, [r3, #0]
                irmp_param.complete_len = irmp_bit;                     // patch length: 16 or 17
 800351c:	4b14      	ldr	r3, [pc, #80]	; (8003570 <irmp_ISR+0x278>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a18      	ldr	r2, [pc, #96]	; (8003584 <irmp_ISR+0x28c>)
 8003522:	6353      	str	r3, [r2, #52]	; 0x34
                irmp_tmp_address = last_irmp_address;                   // address is last address
 8003524:	4b18      	ldr	r3, [pc, #96]	; (8003588 <irmp_ISR+0x290>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a10      	ldr	r2, [pc, #64]	; (800356c <irmp_ISR+0x274>)
 800352a:	6013      	str	r3, [r2, #0]
                irmp_tmp_command = last_irmp_command;                   // command is last command
 800352c:	4b17      	ldr	r3, [pc, #92]	; (800358c <irmp_ISR+0x294>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a0d      	ldr	r2, [pc, #52]	; (8003568 <irmp_ISR+0x270>)
 8003532:	6013      	str	r3, [r2, #0]
                irmp_flags |= IRMP_FLAG_REPETITION;
 8003534:	4b16      	ldr	r3, [pc, #88]	; (8003590 <irmp_ISR+0x298>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	4a14      	ldr	r2, [pc, #80]	; (8003590 <irmp_ISR+0x298>)
 800353e:	6013      	str	r3, [r2, #0]
                key_repetition_len = 0;
 8003540:	4b0d      	ldr	r3, [pc, #52]	; (8003578 <irmp_ISR+0x280>)
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
              if (key_repetition_len < NEC_FRAME_REPEAT_PAUSE_LEN_MAX) {
 8003546:	e031      	b.n	80035ac <irmp_ISR+0x2b4>
              } else {
                ANALYZE_PRINTF3 ("ignoring NEC repetition frame: timeout occured, key_repetition_len = %u > %u\n",
                    (unsigned int) key_repetition_len, (unsigned int) NEC_FRAME_REPEAT_PAUSE_LEN_MAX);
                irmp_ir_detected = FALSE;
 8003548:	4b02      	ldr	r3, [pc, #8]	; (8003554 <irmp_ISR+0x25c>)
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
              if (key_repetition_len < NEC_FRAME_REPEAT_PAUSE_LEN_MAX) {
 800354e:	e02d      	b.n	80035ac <irmp_ISR+0x2b4>
 8003550:	40010c00 	.word	0x40010c00
 8003554:	2000024c 	.word	0x2000024c
 8003558:	20000268 	.word	0x20000268
 800355c:	2000026c 	.word	0x2000026c
 8003560:	20000270 	.word	0x20000270
 8003564:	20000274 	.word	0x20000274
 8003568:	20000264 	.word	0x20000264
 800356c:	20000260 	.word	0x20000260
 8003570:	20000204 	.word	0x20000204
 8003574:	20000278 	.word	0x20000278
 8003578:	2000027c 	.word	0x2000027c
 800357c:	08006384 	.word	0x08006384
 8003580:	080063c8 	.word	0x080063c8
 8003584:	20000208 	.word	0x20000208
 8003588:	2000000c 	.word	0x2000000c
 800358c:	20000010 	.word	0x20000010
 8003590:	2000025c 	.word	0x2000025c
                            }
                        }
#endif // IRMP_SUPPORT_TECHNICS_PROTOCOL == 1
            else {
              ANALYZE_PRINTF3 ("error 2: pause %d after data bit %d too long\n", irmp_pause_time, irmp_bit);ANALYZE_ONLY_NORMAL_PUTCHAR ('\n');
              irmp_start_bit_detected = 0;                    // wait for another start bit...
 8003594:	4b7f      	ldr	r3, [pc, #508]	; (8003794 <irmp_ISR+0x49c>)
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]
              irmp_pulse_time = 0;
 800359a:	4b7f      	ldr	r3, [pc, #508]	; (8003798 <irmp_ISR+0x4a0>)
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]
              irmp_pause_time = 0;
 80035a0:	4b7e      	ldr	r3, [pc, #504]	; (800379c <irmp_ISR+0x4a4>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	701a      	strb	r2, [r3, #0]
 80035a6:	e001      	b.n	80035ac <irmp_ISR+0x2b4>
            }
          }
        } else {                                                               // got light now!
          got_light = TRUE;
 80035a8:	2301      	movs	r3, #1
 80035aa:	60bb      	str	r3, [r7, #8]
        }

        if (got_light) {
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d05a      	beq.n	8003668 <irmp_ISR+0x370>
                        wait_for_space = 0;
                    }
                    else
#endif

          if (irmp_pulse_time >= irmp_param.pulse_1_len_min && irmp_pulse_time <= irmp_param.pulse_1_len_max
 80035b2:	4b7b      	ldr	r3, [pc, #492]	; (80037a0 <irmp_ISR+0x4a8>)
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	4b78      	ldr	r3, [pc, #480]	; (8003798 <irmp_ISR+0x4a0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d81a      	bhi.n	80035f4 <irmp_ISR+0x2fc>
 80035be:	4b78      	ldr	r3, [pc, #480]	; (80037a0 <irmp_ISR+0x4a8>)
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	4b75      	ldr	r3, [pc, #468]	; (8003798 <irmp_ISR+0x4a0>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d314      	bcc.n	80035f4 <irmp_ISR+0x2fc>
              && irmp_pause_time >= irmp_param.pause_1_len_min && irmp_pause_time <= irmp_param.pause_1_len_max) { // pulse & pause timings correct for "1"?
 80035ca:	4b74      	ldr	r3, [pc, #464]	; (800379c <irmp_ISR+0x4a4>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	461a      	mov	r2, r3
 80035d0:	4b73      	ldr	r3, [pc, #460]	; (80037a0 <irmp_ISR+0x4a8>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d30d      	bcc.n	80035f4 <irmp_ISR+0x2fc>
 80035d8:	4b70      	ldr	r3, [pc, #448]	; (800379c <irmp_ISR+0x4a4>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	461a      	mov	r2, r3
 80035de:	4b70      	ldr	r3, [pc, #448]	; (80037a0 <irmp_ISR+0x4a8>)
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d806      	bhi.n	80035f4 <irmp_ISR+0x2fc>
            ANALYZE_PUTCHAR ('1');ANALYZE_NEWLINE ();
            irmp_store_bit(1);
 80035e6:	2001      	movs	r0, #1
 80035e8:	f7ff fe1e 	bl	8003228 <irmp_store_bit>
            wait_for_space = 0;
 80035ec:	4b6d      	ldr	r3, [pc, #436]	; (80037a4 <irmp_ISR+0x4ac>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	e026      	b.n	8003642 <irmp_ISR+0x34a>
          } else if (irmp_pulse_time >= irmp_param.pulse_0_len_min && irmp_pulse_time <= irmp_param.pulse_0_len_max
 80035f4:	4b6a      	ldr	r3, [pc, #424]	; (80037a0 <irmp_ISR+0x4a8>)
 80035f6:	695a      	ldr	r2, [r3, #20]
 80035f8:	4b67      	ldr	r3, [pc, #412]	; (8003798 <irmp_ISR+0x4a0>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d81a      	bhi.n	8003636 <irmp_ISR+0x33e>
 8003600:	4b67      	ldr	r3, [pc, #412]	; (80037a0 <irmp_ISR+0x4a8>)
 8003602:	699a      	ldr	r2, [r3, #24]
 8003604:	4b64      	ldr	r3, [pc, #400]	; (8003798 <irmp_ISR+0x4a0>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	429a      	cmp	r2, r3
 800360a:	d314      	bcc.n	8003636 <irmp_ISR+0x33e>
              && irmp_pause_time >= irmp_param.pause_0_len_min && irmp_pause_time <= irmp_param.pause_0_len_max) { // pulse & pause timings correct for "0"?
 800360c:	4b63      	ldr	r3, [pc, #396]	; (800379c <irmp_ISR+0x4a4>)
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	461a      	mov	r2, r3
 8003612:	4b63      	ldr	r3, [pc, #396]	; (80037a0 <irmp_ISR+0x4a8>)
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	429a      	cmp	r2, r3
 8003618:	d30d      	bcc.n	8003636 <irmp_ISR+0x33e>
 800361a:	4b60      	ldr	r3, [pc, #384]	; (800379c <irmp_ISR+0x4a4>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	4b5f      	ldr	r3, [pc, #380]	; (80037a0 <irmp_ISR+0x4a8>)
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	429a      	cmp	r2, r3
 8003626:	d806      	bhi.n	8003636 <irmp_ISR+0x33e>
            ANALYZE_PUTCHAR ('0');ANALYZE_NEWLINE ();
            irmp_store_bit(0);
 8003628:	2000      	movs	r0, #0
 800362a:	f7ff fdfd 	bl	8003228 <irmp_store_bit>
            wait_for_space = 0;
 800362e:	4b5d      	ldr	r3, [pc, #372]	; (80037a4 <irmp_ISR+0x4ac>)
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	e005      	b.n	8003642 <irmp_ISR+0x34a>
                    }
                    else
#endif // IRMP_SUPPORT_MELINERA_PROTOCOL
          {                                                               // timing incorrect!
            ANALYZE_PRINTF4 ("error 3: timing not correct: data bit %d,  pulse: %d, pause: %d\n", irmp_bit, irmp_pulse_time, irmp_pause_time);ANALYZE_ONLY_NORMAL_PUTCHAR ('\n');
            irmp_start_bit_detected = 0;                                // reset flags and wait for next start bit
 8003636:	4b57      	ldr	r3, [pc, #348]	; (8003794 <irmp_ISR+0x49c>)
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
            irmp_pause_time = 0;
 800363c:	4b57      	ldr	r3, [pc, #348]	; (800379c <irmp_ISR+0x4a4>)
 800363e:	2200      	movs	r2, #0
 8003640:	701a      	strb	r2, [r3, #0]
          }

          irmp_pulse_time = 1;                                            // set counter to 1, not 0
 8003642:	4b55      	ldr	r3, [pc, #340]	; (8003798 <irmp_ISR+0x4a0>)
 8003644:	2201      	movs	r2, #1
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	e00e      	b.n	8003668 <irmp_ISR+0x370>
        }
      } else {                                                                       // counting the pulse length ...
        if (!irmp_input)                                                   // still light?
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d105      	bne.n	800365c <irmp_ISR+0x364>
        {                                                                   // yes...
          irmp_pulse_time++;                                              // increment counter
 8003650:	4b51      	ldr	r3, [pc, #324]	; (8003798 <irmp_ISR+0x4a0>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3301      	adds	r3, #1
 8003656:	4a50      	ldr	r2, [pc, #320]	; (8003798 <irmp_ISR+0x4a0>)
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	e005      	b.n	8003668 <irmp_ISR+0x370>
        } else {                                                                   // now it's dark!
          wait_for_space = 1;                                            // let's count the time (see above)
 800365c:	4b51      	ldr	r3, [pc, #324]	; (80037a4 <irmp_ISR+0x4ac>)
 800365e:	2201      	movs	r2, #1
 8003660:	601a      	str	r2, [r3, #0]
          irmp_pause_time = 1;                                            // set pause counter to 1, not 0
 8003662:	4b4e      	ldr	r3, [pc, #312]	; (800379c <irmp_ISR+0x4a4>)
 8003664:	2201      	movs	r2, #1
 8003666:	701a      	strb	r2, [r3, #0]
                    }
#endif
        }
      }

      if (irmp_start_bit_detected && irmp_bit == irmp_param.complete_len && irmp_param.stop_bit == 0) // enough bits received?
 8003668:	4b4a      	ldr	r3, [pc, #296]	; (8003794 <irmp_ISR+0x49c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 808b 	beq.w	8003788 <irmp_ISR+0x490>
 8003672:	4b4b      	ldr	r3, [pc, #300]	; (80037a0 <irmp_ISR+0x4a8>)
 8003674:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003676:	4b4c      	ldr	r3, [pc, #304]	; (80037a8 <irmp_ISR+0x4b0>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	429a      	cmp	r2, r3
 800367c:	f040 8084 	bne.w	8003788 <irmp_ISR+0x490>
 8003680:	4b47      	ldr	r3, [pc, #284]	; (80037a0 <irmp_ISR+0x4a8>)
 8003682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003684:	2b00      	cmp	r3, #0
 8003686:	d17f      	bne.n	8003788 <irmp_ISR+0x490>
          {
        if (last_irmp_command == irmp_tmp_command && key_repetition_len < AUTO_FRAME_REPETITION_LEN) {
 8003688:	4b48      	ldr	r3, [pc, #288]	; (80037ac <irmp_ISR+0x4b4>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	4b48      	ldr	r3, [pc, #288]	; (80037b0 <irmp_ISR+0x4b8>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	429a      	cmp	r2, r3
 8003692:	d10a      	bne.n	80036aa <irmp_ISR+0x3b2>
 8003694:	4b47      	ldr	r3, [pc, #284]	; (80037b4 <irmp_ISR+0x4bc>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800369c:	d205      	bcs.n	80036aa <irmp_ISR+0x3b2>
          repetition_frame_number++;
 800369e:	4b46      	ldr	r3, [pc, #280]	; (80037b8 <irmp_ISR+0x4c0>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	3301      	adds	r3, #1
 80036a4:	4a44      	ldr	r2, [pc, #272]	; (80037b8 <irmp_ISR+0x4c0>)
 80036a6:	6013      	str	r3, [r2, #0]
 80036a8:	e002      	b.n	80036b0 <irmp_ISR+0x3b8>
        } else {
          repetition_frame_number = 0;
 80036aa:	4b43      	ldr	r3, [pc, #268]	; (80037b8 <irmp_ISR+0x4c0>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
                else
#endif

        {
          ANALYZE_PRINTF3 ("%8.3fms code detected, length = %d\n", (double) (time_counter * 1000) / F_INTERRUPTS, irmp_bit);
          irmp_ir_detected = TRUE;
 80036b0:	4b42      	ldr	r3, [pc, #264]	; (80037bc <irmp_ISR+0x4c4>)
 80036b2:	2201      	movs	r2, #1
 80036b4:	601a      	str	r2, [r3, #0]
                    }
                    else
#endif // IRMP_SUPPORT_NOKIA_PROTOCOL
          {
#if IRMP_SUPPORT_NEC_PROTOCOL == 1
            if (irmp_param.protocol == IRMP_NEC_PROTOCOL && irmp_bit == 0)  // repetition frame
 80036b6:	4b3a      	ldr	r3, [pc, #232]	; (80037a0 <irmp_ISR+0x4a8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d11d      	bne.n	80036fa <irmp_ISR+0x402>
 80036be:	4b3a      	ldr	r3, [pc, #232]	; (80037a8 <irmp_ISR+0x4b0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d119      	bne.n	80036fa <irmp_ISR+0x402>
                {
              if (key_repetition_len < NEC_FRAME_REPEAT_PAUSE_LEN_MAX) {
 80036c6:	4b3b      	ldr	r3, [pc, #236]	; (80037b4 <irmp_ISR+0x4bc>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80036ce:	d211      	bcs.n	80036f4 <irmp_ISR+0x3fc>
                ANALYZE_PRINTF2 ("Detected NEC repetition frame, key_repetition_len = %u\n", (unsigned int) key_repetition_len);ANALYZE_ONLY_NORMAL_PRINTF1("REPETETION FRAME                ");
                irmp_tmp_address = last_irmp_address;                   // address is last address
 80036d0:	4b3b      	ldr	r3, [pc, #236]	; (80037c0 <irmp_ISR+0x4c8>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a3b      	ldr	r2, [pc, #236]	; (80037c4 <irmp_ISR+0x4cc>)
 80036d6:	6013      	str	r3, [r2, #0]
                irmp_tmp_command = last_irmp_command;                   // command is last command
 80036d8:	4b34      	ldr	r3, [pc, #208]	; (80037ac <irmp_ISR+0x4b4>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a34      	ldr	r2, [pc, #208]	; (80037b0 <irmp_ISR+0x4b8>)
 80036de:	6013      	str	r3, [r2, #0]
                irmp_flags |= IRMP_FLAG_REPETITION;
 80036e0:	4b39      	ldr	r3, [pc, #228]	; (80037c8 <irmp_ISR+0x4d0>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f043 0301 	orr.w	r3, r3, #1
 80036e8:	4a37      	ldr	r2, [pc, #220]	; (80037c8 <irmp_ISR+0x4d0>)
 80036ea:	6013      	str	r3, [r2, #0]
                key_repetition_len = 0;
 80036ec:	4b31      	ldr	r3, [pc, #196]	; (80037b4 <irmp_ISR+0x4bc>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	e002      	b.n	80036fa <irmp_ISR+0x402>
              } else {
                ANALYZE_PRINTF3 ("Detected NEC repetition frame, ignoring it: timeout occured, key_repetition_len = %u > %u\n",
                    (unsigned int) key_repetition_len, (unsigned int) NEC_FRAME_REPEAT_PAUSE_LEN_MAX);
                irmp_ir_detected = FALSE;
 80036f4:	4b31      	ldr	r3, [pc, #196]	; (80037bc <irmp_ISR+0x4c4>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]
                            irmp_protocol = IRMP_RC6A_PROTOCOL;
                        }
                        else
#endif // IRMP_SUPPORT_RC6_PROTOCOL == 1
            {
              irmp_protocol = irmp_param.protocol;
 80036fa:	4b29      	ldr	r3, [pc, #164]	; (80037a0 <irmp_ISR+0x4a8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a33      	ldr	r2, [pc, #204]	; (80037cc <irmp_ISR+0x4d4>)
 8003700:	6013      	str	r3, [r2, #0]
                            irmp_tmp_command |= (irmp_tmp_address << 2) & 0x0F00;   // 000000CCCCAAAAAA -> 0000CCCC00000000
                            irmp_tmp_address &= 0x003F;
                        }
#endif

            irmp_address = irmp_tmp_address;                            // store address
 8003702:	4b30      	ldr	r3, [pc, #192]	; (80037c4 <irmp_ISR+0x4cc>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a32      	ldr	r2, [pc, #200]	; (80037d0 <irmp_ISR+0x4d8>)
 8003708:	6013      	str	r3, [r2, #0]
#if IRMP_SUPPORT_NEC_PROTOCOL == 1
            if (irmp_param.protocol == IRMP_NEC_PROTOCOL) {
 800370a:	4b25      	ldr	r3, [pc, #148]	; (80037a0 <irmp_ISR+0x4a8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b02      	cmp	r3, #2
 8003710:	d103      	bne.n	800371a <irmp_ISR+0x422>
              last_irmp_address = irmp_tmp_address;                   // store as last address, too
 8003712:	4b2c      	ldr	r3, [pc, #176]	; (80037c4 <irmp_ISR+0x4cc>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a2a      	ldr	r2, [pc, #168]	; (80037c0 <irmp_ISR+0x4c8>)
 8003718:	6013      	str	r3, [r2, #0]
                        if (irmp_param.protocol == IRMP_S100_PROTOCOL)
                        {
                            irmp_tmp_command |= rc5_cmd_bit6;                       // store bit 6
                        }
#endif
            irmp_command = irmp_tmp_command;                            // store command
 800371a:	4b25      	ldr	r3, [pc, #148]	; (80037b0 <irmp_ISR+0x4b8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a2d      	ldr	r2, [pc, #180]	; (80037d4 <irmp_ISR+0x4dc>)
 8003720:	6013      	str	r3, [r2, #0]
                        irmp_id = irmp_tmp_id;
#endif
          }
        }

        if (irmp_ir_detected) {
 8003722:	4b26      	ldr	r3, [pc, #152]	; (80037bc <irmp_ISR+0x4c4>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d022      	beq.n	8003770 <irmp_ISR+0x478>
          if (last_irmp_command == irmp_tmp_command&&
 800372a:	4b20      	ldr	r3, [pc, #128]	; (80037ac <irmp_ISR+0x4b4>)
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	4b20      	ldr	r3, [pc, #128]	; (80037b0 <irmp_ISR+0x4b8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d111      	bne.n	800375a <irmp_ISR+0x462>
          last_irmp_address == irmp_tmp_address &&
 8003736:	4b22      	ldr	r3, [pc, #136]	; (80037c0 <irmp_ISR+0x4c8>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	4b22      	ldr	r3, [pc, #136]	; (80037c4 <irmp_ISR+0x4cc>)
 800373c:	681b      	ldr	r3, [r3, #0]
          if (last_irmp_command == irmp_tmp_command&&
 800373e:	429a      	cmp	r2, r3
 8003740:	d10b      	bne.n	800375a <irmp_ISR+0x462>
          key_repetition_len < IRMP_KEY_REPETITION_LEN) {
 8003742:	4b1c      	ldr	r3, [pc, #112]	; (80037b4 <irmp_ISR+0x4bc>)
 8003744:	681b      	ldr	r3, [r3, #0]
          last_irmp_address == irmp_tmp_address &&
 8003746:	f640 02c9 	movw	r2, #2249	; 0x8c9
 800374a:	4293      	cmp	r3, r2
 800374c:	d805      	bhi.n	800375a <irmp_ISR+0x462>
            irmp_flags |= IRMP_FLAG_REPETITION;
 800374e:	4b1e      	ldr	r3, [pc, #120]	; (80037c8 <irmp_ISR+0x4d0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f043 0301 	orr.w	r3, r3, #1
 8003756:	4a1c      	ldr	r2, [pc, #112]	; (80037c8 <irmp_ISR+0x4d0>)
 8003758:	6013      	str	r3, [r2, #0]
          }

          last_irmp_address = irmp_tmp_address;                          // store as last address, too
 800375a:	4b1a      	ldr	r3, [pc, #104]	; (80037c4 <irmp_ISR+0x4cc>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a18      	ldr	r2, [pc, #96]	; (80037c0 <irmp_ISR+0x4c8>)
 8003760:	6013      	str	r3, [r2, #0]
          last_irmp_command = irmp_tmp_command;                          // store as last command, too
 8003762:	4b13      	ldr	r3, [pc, #76]	; (80037b0 <irmp_ISR+0x4b8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a11      	ldr	r2, [pc, #68]	; (80037ac <irmp_ISR+0x4b4>)
 8003768:	6013      	str	r3, [r2, #0]

#if IRMP_ENABLE_RELEASE_DETECTION == 1
                    key_released        = FALSE;
#endif
          key_repetition_len = 0;
 800376a:	4b12      	ldr	r3, [pc, #72]	; (80037b4 <irmp_ISR+0x4bc>)
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
        } else {
          ANALYZE_ONLY_NORMAL_PUTCHAR ('\n');
        }

        irmp_start_bit_detected = 0;                                        // and wait for next start bit
 8003770:	4b08      	ldr	r3, [pc, #32]	; (8003794 <irmp_ISR+0x49c>)
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]
        irmp_tmp_command = 0;
 8003776:	4b0e      	ldr	r3, [pc, #56]	; (80037b0 <irmp_ISR+0x4b8>)
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
        irmp_pulse_time = 0;
 800377c:	4b06      	ldr	r3, [pc, #24]	; (8003798 <irmp_ISR+0x4a0>)
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
        irmp_pause_time = 0;
 8003782:	4b06      	ldr	r3, [pc, #24]	; (800379c <irmp_ISR+0x4a4>)
 8003784:	2200      	movs	r2, #0
 8003786:	701a      	strb	r2, [r3, #0]

        irmp_idle();
    }
#endif // IRMP_USE_IDLE_CALL

  return (irmp_ir_detected);
 8003788:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <irmp_ISR+0x4c4>)
 800378a:	681b      	ldr	r3, [r3, #0]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	20000268 	.word	0x20000268
 8003798:	2000026c 	.word	0x2000026c
 800379c:	20000278 	.word	0x20000278
 80037a0:	20000208 	.word	0x20000208
 80037a4:	20000274 	.word	0x20000274
 80037a8:	20000204 	.word	0x20000204
 80037ac:	20000010 	.word	0x20000010
 80037b0:	20000264 	.word	0x20000264
 80037b4:	2000027c 	.word	0x2000027c
 80037b8:	20000280 	.word	0x20000280
 80037bc:	2000024c 	.word	0x2000024c
 80037c0:	2000000c 	.word	0x2000000c
 80037c4:	20000260 	.word	0x20000260
 80037c8:	2000025c 	.word	0x2000025c
 80037cc:	20000250 	.word	0x20000250
 80037d0:	20000254 	.word	0x20000254
 80037d4:	20000258 	.word	0x20000258

080037d8 <__errno>:
 80037d8:	4b01      	ldr	r3, [pc, #4]	; (80037e0 <__errno+0x8>)
 80037da:	6818      	ldr	r0, [r3, #0]
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	20000014 	.word	0x20000014

080037e4 <__libc_init_array>:
 80037e4:	b570      	push	{r4, r5, r6, lr}
 80037e6:	2600      	movs	r6, #0
 80037e8:	4d0c      	ldr	r5, [pc, #48]	; (800381c <__libc_init_array+0x38>)
 80037ea:	4c0d      	ldr	r4, [pc, #52]	; (8003820 <__libc_init_array+0x3c>)
 80037ec:	1b64      	subs	r4, r4, r5
 80037ee:	10a4      	asrs	r4, r4, #2
 80037f0:	42a6      	cmp	r6, r4
 80037f2:	d109      	bne.n	8003808 <__libc_init_array+0x24>
 80037f4:	f002 fd84 	bl	8006300 <_init>
 80037f8:	2600      	movs	r6, #0
 80037fa:	4d0a      	ldr	r5, [pc, #40]	; (8003824 <__libc_init_array+0x40>)
 80037fc:	4c0a      	ldr	r4, [pc, #40]	; (8003828 <__libc_init_array+0x44>)
 80037fe:	1b64      	subs	r4, r4, r5
 8003800:	10a4      	asrs	r4, r4, #2
 8003802:	42a6      	cmp	r6, r4
 8003804:	d105      	bne.n	8003812 <__libc_init_array+0x2e>
 8003806:	bd70      	pop	{r4, r5, r6, pc}
 8003808:	f855 3b04 	ldr.w	r3, [r5], #4
 800380c:	4798      	blx	r3
 800380e:	3601      	adds	r6, #1
 8003810:	e7ee      	b.n	80037f0 <__libc_init_array+0xc>
 8003812:	f855 3b04 	ldr.w	r3, [r5], #4
 8003816:	4798      	blx	r3
 8003818:	3601      	adds	r6, #1
 800381a:	e7f2      	b.n	8003802 <__libc_init_array+0x1e>
 800381c:	080067ec 	.word	0x080067ec
 8003820:	080067ec 	.word	0x080067ec
 8003824:	080067ec 	.word	0x080067ec
 8003828:	080067f0 	.word	0x080067f0

0800382c <memcpy>:
 800382c:	440a      	add	r2, r1
 800382e:	4291      	cmp	r1, r2
 8003830:	f100 33ff 	add.w	r3, r0, #4294967295
 8003834:	d100      	bne.n	8003838 <memcpy+0xc>
 8003836:	4770      	bx	lr
 8003838:	b510      	push	{r4, lr}
 800383a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800383e:	4291      	cmp	r1, r2
 8003840:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003844:	d1f9      	bne.n	800383a <memcpy+0xe>
 8003846:	bd10      	pop	{r4, pc}

08003848 <memset>:
 8003848:	4603      	mov	r3, r0
 800384a:	4402      	add	r2, r0
 800384c:	4293      	cmp	r3, r2
 800384e:	d100      	bne.n	8003852 <memset+0xa>
 8003850:	4770      	bx	lr
 8003852:	f803 1b01 	strb.w	r1, [r3], #1
 8003856:	e7f9      	b.n	800384c <memset+0x4>

08003858 <__cvt>:
 8003858:	2b00      	cmp	r3, #0
 800385a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800385e:	461f      	mov	r7, r3
 8003860:	bfbb      	ittet	lt
 8003862:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003866:	461f      	movlt	r7, r3
 8003868:	2300      	movge	r3, #0
 800386a:	232d      	movlt	r3, #45	; 0x2d
 800386c:	b088      	sub	sp, #32
 800386e:	4614      	mov	r4, r2
 8003870:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003872:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003874:	7013      	strb	r3, [r2, #0]
 8003876:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003878:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800387c:	f023 0820 	bic.w	r8, r3, #32
 8003880:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003884:	d005      	beq.n	8003892 <__cvt+0x3a>
 8003886:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800388a:	d100      	bne.n	800388e <__cvt+0x36>
 800388c:	3501      	adds	r5, #1
 800388e:	2302      	movs	r3, #2
 8003890:	e000      	b.n	8003894 <__cvt+0x3c>
 8003892:	2303      	movs	r3, #3
 8003894:	aa07      	add	r2, sp, #28
 8003896:	9204      	str	r2, [sp, #16]
 8003898:	aa06      	add	r2, sp, #24
 800389a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800389e:	e9cd 3500 	strd	r3, r5, [sp]
 80038a2:	4622      	mov	r2, r4
 80038a4:	463b      	mov	r3, r7
 80038a6:	f000 fe13 	bl	80044d0 <_dtoa_r>
 80038aa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80038ae:	4606      	mov	r6, r0
 80038b0:	d102      	bne.n	80038b8 <__cvt+0x60>
 80038b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80038b4:	07db      	lsls	r3, r3, #31
 80038b6:	d522      	bpl.n	80038fe <__cvt+0xa6>
 80038b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80038bc:	eb06 0905 	add.w	r9, r6, r5
 80038c0:	d110      	bne.n	80038e4 <__cvt+0x8c>
 80038c2:	7833      	ldrb	r3, [r6, #0]
 80038c4:	2b30      	cmp	r3, #48	; 0x30
 80038c6:	d10a      	bne.n	80038de <__cvt+0x86>
 80038c8:	2200      	movs	r2, #0
 80038ca:	2300      	movs	r3, #0
 80038cc:	4620      	mov	r0, r4
 80038ce:	4639      	mov	r1, r7
 80038d0:	f7fd f8d6 	bl	8000a80 <__aeabi_dcmpeq>
 80038d4:	b918      	cbnz	r0, 80038de <__cvt+0x86>
 80038d6:	f1c5 0501 	rsb	r5, r5, #1
 80038da:	f8ca 5000 	str.w	r5, [sl]
 80038de:	f8da 3000 	ldr.w	r3, [sl]
 80038e2:	4499      	add	r9, r3
 80038e4:	2200      	movs	r2, #0
 80038e6:	2300      	movs	r3, #0
 80038e8:	4620      	mov	r0, r4
 80038ea:	4639      	mov	r1, r7
 80038ec:	f7fd f8c8 	bl	8000a80 <__aeabi_dcmpeq>
 80038f0:	b108      	cbz	r0, 80038f6 <__cvt+0x9e>
 80038f2:	f8cd 901c 	str.w	r9, [sp, #28]
 80038f6:	2230      	movs	r2, #48	; 0x30
 80038f8:	9b07      	ldr	r3, [sp, #28]
 80038fa:	454b      	cmp	r3, r9
 80038fc:	d307      	bcc.n	800390e <__cvt+0xb6>
 80038fe:	4630      	mov	r0, r6
 8003900:	9b07      	ldr	r3, [sp, #28]
 8003902:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003904:	1b9b      	subs	r3, r3, r6
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	b008      	add	sp, #32
 800390a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800390e:	1c59      	adds	r1, r3, #1
 8003910:	9107      	str	r1, [sp, #28]
 8003912:	701a      	strb	r2, [r3, #0]
 8003914:	e7f0      	b.n	80038f8 <__cvt+0xa0>

08003916 <__exponent>:
 8003916:	4603      	mov	r3, r0
 8003918:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800391a:	2900      	cmp	r1, #0
 800391c:	f803 2b02 	strb.w	r2, [r3], #2
 8003920:	bfb6      	itet	lt
 8003922:	222d      	movlt	r2, #45	; 0x2d
 8003924:	222b      	movge	r2, #43	; 0x2b
 8003926:	4249      	neglt	r1, r1
 8003928:	2909      	cmp	r1, #9
 800392a:	7042      	strb	r2, [r0, #1]
 800392c:	dd2b      	ble.n	8003986 <__exponent+0x70>
 800392e:	f10d 0407 	add.w	r4, sp, #7
 8003932:	46a4      	mov	ip, r4
 8003934:	270a      	movs	r7, #10
 8003936:	fb91 f6f7 	sdiv	r6, r1, r7
 800393a:	460a      	mov	r2, r1
 800393c:	46a6      	mov	lr, r4
 800393e:	fb07 1516 	mls	r5, r7, r6, r1
 8003942:	2a63      	cmp	r2, #99	; 0x63
 8003944:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003948:	4631      	mov	r1, r6
 800394a:	f104 34ff 	add.w	r4, r4, #4294967295
 800394e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003952:	dcf0      	bgt.n	8003936 <__exponent+0x20>
 8003954:	3130      	adds	r1, #48	; 0x30
 8003956:	f1ae 0502 	sub.w	r5, lr, #2
 800395a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800395e:	4629      	mov	r1, r5
 8003960:	1c44      	adds	r4, r0, #1
 8003962:	4561      	cmp	r1, ip
 8003964:	d30a      	bcc.n	800397c <__exponent+0x66>
 8003966:	f10d 0209 	add.w	r2, sp, #9
 800396a:	eba2 020e 	sub.w	r2, r2, lr
 800396e:	4565      	cmp	r5, ip
 8003970:	bf88      	it	hi
 8003972:	2200      	movhi	r2, #0
 8003974:	4413      	add	r3, r2
 8003976:	1a18      	subs	r0, r3, r0
 8003978:	b003      	add	sp, #12
 800397a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800397c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003980:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003984:	e7ed      	b.n	8003962 <__exponent+0x4c>
 8003986:	2330      	movs	r3, #48	; 0x30
 8003988:	3130      	adds	r1, #48	; 0x30
 800398a:	7083      	strb	r3, [r0, #2]
 800398c:	70c1      	strb	r1, [r0, #3]
 800398e:	1d03      	adds	r3, r0, #4
 8003990:	e7f1      	b.n	8003976 <__exponent+0x60>
	...

08003994 <_printf_float>:
 8003994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003998:	b091      	sub	sp, #68	; 0x44
 800399a:	460c      	mov	r4, r1
 800399c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80039a0:	4616      	mov	r6, r2
 80039a2:	461f      	mov	r7, r3
 80039a4:	4605      	mov	r5, r0
 80039a6:	f001 fd39 	bl	800541c <_localeconv_r>
 80039aa:	6803      	ldr	r3, [r0, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	9309      	str	r3, [sp, #36]	; 0x24
 80039b0:	f7fc fc3a 	bl	8000228 <strlen>
 80039b4:	2300      	movs	r3, #0
 80039b6:	930e      	str	r3, [sp, #56]	; 0x38
 80039b8:	f8d8 3000 	ldr.w	r3, [r8]
 80039bc:	900a      	str	r0, [sp, #40]	; 0x28
 80039be:	3307      	adds	r3, #7
 80039c0:	f023 0307 	bic.w	r3, r3, #7
 80039c4:	f103 0208 	add.w	r2, r3, #8
 80039c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80039cc:	f8d4 b000 	ldr.w	fp, [r4]
 80039d0:	f8c8 2000 	str.w	r2, [r8]
 80039d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80039dc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80039e0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80039e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80039e6:	f04f 32ff 	mov.w	r2, #4294967295
 80039ea:	4640      	mov	r0, r8
 80039ec:	4b9c      	ldr	r3, [pc, #624]	; (8003c60 <_printf_float+0x2cc>)
 80039ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80039f0:	f7fd f878 	bl	8000ae4 <__aeabi_dcmpun>
 80039f4:	bb70      	cbnz	r0, 8003a54 <_printf_float+0xc0>
 80039f6:	f04f 32ff 	mov.w	r2, #4294967295
 80039fa:	4640      	mov	r0, r8
 80039fc:	4b98      	ldr	r3, [pc, #608]	; (8003c60 <_printf_float+0x2cc>)
 80039fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a00:	f7fd f852 	bl	8000aa8 <__aeabi_dcmple>
 8003a04:	bb30      	cbnz	r0, 8003a54 <_printf_float+0xc0>
 8003a06:	2200      	movs	r2, #0
 8003a08:	2300      	movs	r3, #0
 8003a0a:	4640      	mov	r0, r8
 8003a0c:	4651      	mov	r1, sl
 8003a0e:	f7fd f841 	bl	8000a94 <__aeabi_dcmplt>
 8003a12:	b110      	cbz	r0, 8003a1a <_printf_float+0x86>
 8003a14:	232d      	movs	r3, #45	; 0x2d
 8003a16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a1a:	4b92      	ldr	r3, [pc, #584]	; (8003c64 <_printf_float+0x2d0>)
 8003a1c:	4892      	ldr	r0, [pc, #584]	; (8003c68 <_printf_float+0x2d4>)
 8003a1e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003a22:	bf94      	ite	ls
 8003a24:	4698      	movls	r8, r3
 8003a26:	4680      	movhi	r8, r0
 8003a28:	2303      	movs	r3, #3
 8003a2a:	f04f 0a00 	mov.w	sl, #0
 8003a2e:	6123      	str	r3, [r4, #16]
 8003a30:	f02b 0304 	bic.w	r3, fp, #4
 8003a34:	6023      	str	r3, [r4, #0]
 8003a36:	4633      	mov	r3, r6
 8003a38:	4621      	mov	r1, r4
 8003a3a:	4628      	mov	r0, r5
 8003a3c:	9700      	str	r7, [sp, #0]
 8003a3e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003a40:	f000 f9d4 	bl	8003dec <_printf_common>
 8003a44:	3001      	adds	r0, #1
 8003a46:	f040 8090 	bne.w	8003b6a <_printf_float+0x1d6>
 8003a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a4e:	b011      	add	sp, #68	; 0x44
 8003a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a54:	4642      	mov	r2, r8
 8003a56:	4653      	mov	r3, sl
 8003a58:	4640      	mov	r0, r8
 8003a5a:	4651      	mov	r1, sl
 8003a5c:	f7fd f842 	bl	8000ae4 <__aeabi_dcmpun>
 8003a60:	b148      	cbz	r0, 8003a76 <_printf_float+0xe2>
 8003a62:	f1ba 0f00 	cmp.w	sl, #0
 8003a66:	bfb8      	it	lt
 8003a68:	232d      	movlt	r3, #45	; 0x2d
 8003a6a:	4880      	ldr	r0, [pc, #512]	; (8003c6c <_printf_float+0x2d8>)
 8003a6c:	bfb8      	it	lt
 8003a6e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003a72:	4b7f      	ldr	r3, [pc, #508]	; (8003c70 <_printf_float+0x2dc>)
 8003a74:	e7d3      	b.n	8003a1e <_printf_float+0x8a>
 8003a76:	6863      	ldr	r3, [r4, #4]
 8003a78:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	d142      	bne.n	8003b06 <_printf_float+0x172>
 8003a80:	2306      	movs	r3, #6
 8003a82:	6063      	str	r3, [r4, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	9206      	str	r2, [sp, #24]
 8003a88:	aa0e      	add	r2, sp, #56	; 0x38
 8003a8a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003a8e:	aa0d      	add	r2, sp, #52	; 0x34
 8003a90:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003a94:	9203      	str	r2, [sp, #12]
 8003a96:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003a9a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003a9e:	6023      	str	r3, [r4, #0]
 8003aa0:	6863      	ldr	r3, [r4, #4]
 8003aa2:	4642      	mov	r2, r8
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	4628      	mov	r0, r5
 8003aa8:	4653      	mov	r3, sl
 8003aaa:	910b      	str	r1, [sp, #44]	; 0x2c
 8003aac:	f7ff fed4 	bl	8003858 <__cvt>
 8003ab0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ab2:	4680      	mov	r8, r0
 8003ab4:	2947      	cmp	r1, #71	; 0x47
 8003ab6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003ab8:	d108      	bne.n	8003acc <_printf_float+0x138>
 8003aba:	1cc8      	adds	r0, r1, #3
 8003abc:	db02      	blt.n	8003ac4 <_printf_float+0x130>
 8003abe:	6863      	ldr	r3, [r4, #4]
 8003ac0:	4299      	cmp	r1, r3
 8003ac2:	dd40      	ble.n	8003b46 <_printf_float+0x1b2>
 8003ac4:	f1a9 0902 	sub.w	r9, r9, #2
 8003ac8:	fa5f f989 	uxtb.w	r9, r9
 8003acc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003ad0:	d81f      	bhi.n	8003b12 <_printf_float+0x17e>
 8003ad2:	464a      	mov	r2, r9
 8003ad4:	3901      	subs	r1, #1
 8003ad6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003ada:	910d      	str	r1, [sp, #52]	; 0x34
 8003adc:	f7ff ff1b 	bl	8003916 <__exponent>
 8003ae0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003ae2:	4682      	mov	sl, r0
 8003ae4:	1813      	adds	r3, r2, r0
 8003ae6:	2a01      	cmp	r2, #1
 8003ae8:	6123      	str	r3, [r4, #16]
 8003aea:	dc02      	bgt.n	8003af2 <_printf_float+0x15e>
 8003aec:	6822      	ldr	r2, [r4, #0]
 8003aee:	07d2      	lsls	r2, r2, #31
 8003af0:	d501      	bpl.n	8003af6 <_printf_float+0x162>
 8003af2:	3301      	adds	r3, #1
 8003af4:	6123      	str	r3, [r4, #16]
 8003af6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d09b      	beq.n	8003a36 <_printf_float+0xa2>
 8003afe:	232d      	movs	r3, #45	; 0x2d
 8003b00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b04:	e797      	b.n	8003a36 <_printf_float+0xa2>
 8003b06:	2947      	cmp	r1, #71	; 0x47
 8003b08:	d1bc      	bne.n	8003a84 <_printf_float+0xf0>
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1ba      	bne.n	8003a84 <_printf_float+0xf0>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e7b7      	b.n	8003a82 <_printf_float+0xee>
 8003b12:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003b16:	d118      	bne.n	8003b4a <_printf_float+0x1b6>
 8003b18:	2900      	cmp	r1, #0
 8003b1a:	6863      	ldr	r3, [r4, #4]
 8003b1c:	dd0b      	ble.n	8003b36 <_printf_float+0x1a2>
 8003b1e:	6121      	str	r1, [r4, #16]
 8003b20:	b913      	cbnz	r3, 8003b28 <_printf_float+0x194>
 8003b22:	6822      	ldr	r2, [r4, #0]
 8003b24:	07d0      	lsls	r0, r2, #31
 8003b26:	d502      	bpl.n	8003b2e <_printf_float+0x19a>
 8003b28:	3301      	adds	r3, #1
 8003b2a:	440b      	add	r3, r1
 8003b2c:	6123      	str	r3, [r4, #16]
 8003b2e:	f04f 0a00 	mov.w	sl, #0
 8003b32:	65a1      	str	r1, [r4, #88]	; 0x58
 8003b34:	e7df      	b.n	8003af6 <_printf_float+0x162>
 8003b36:	b913      	cbnz	r3, 8003b3e <_printf_float+0x1aa>
 8003b38:	6822      	ldr	r2, [r4, #0]
 8003b3a:	07d2      	lsls	r2, r2, #31
 8003b3c:	d501      	bpl.n	8003b42 <_printf_float+0x1ae>
 8003b3e:	3302      	adds	r3, #2
 8003b40:	e7f4      	b.n	8003b2c <_printf_float+0x198>
 8003b42:	2301      	movs	r3, #1
 8003b44:	e7f2      	b.n	8003b2c <_printf_float+0x198>
 8003b46:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003b4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b4c:	4299      	cmp	r1, r3
 8003b4e:	db05      	blt.n	8003b5c <_printf_float+0x1c8>
 8003b50:	6823      	ldr	r3, [r4, #0]
 8003b52:	6121      	str	r1, [r4, #16]
 8003b54:	07d8      	lsls	r0, r3, #31
 8003b56:	d5ea      	bpl.n	8003b2e <_printf_float+0x19a>
 8003b58:	1c4b      	adds	r3, r1, #1
 8003b5a:	e7e7      	b.n	8003b2c <_printf_float+0x198>
 8003b5c:	2900      	cmp	r1, #0
 8003b5e:	bfcc      	ite	gt
 8003b60:	2201      	movgt	r2, #1
 8003b62:	f1c1 0202 	rsble	r2, r1, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	e7e0      	b.n	8003b2c <_printf_float+0x198>
 8003b6a:	6823      	ldr	r3, [r4, #0]
 8003b6c:	055a      	lsls	r2, r3, #21
 8003b6e:	d407      	bmi.n	8003b80 <_printf_float+0x1ec>
 8003b70:	6923      	ldr	r3, [r4, #16]
 8003b72:	4642      	mov	r2, r8
 8003b74:	4631      	mov	r1, r6
 8003b76:	4628      	mov	r0, r5
 8003b78:	47b8      	blx	r7
 8003b7a:	3001      	adds	r0, #1
 8003b7c:	d12b      	bne.n	8003bd6 <_printf_float+0x242>
 8003b7e:	e764      	b.n	8003a4a <_printf_float+0xb6>
 8003b80:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003b84:	f240 80dd 	bls.w	8003d42 <_printf_float+0x3ae>
 8003b88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	2300      	movs	r3, #0
 8003b90:	f7fc ff76 	bl	8000a80 <__aeabi_dcmpeq>
 8003b94:	2800      	cmp	r0, #0
 8003b96:	d033      	beq.n	8003c00 <_printf_float+0x26c>
 8003b98:	2301      	movs	r3, #1
 8003b9a:	4631      	mov	r1, r6
 8003b9c:	4628      	mov	r0, r5
 8003b9e:	4a35      	ldr	r2, [pc, #212]	; (8003c74 <_printf_float+0x2e0>)
 8003ba0:	47b8      	blx	r7
 8003ba2:	3001      	adds	r0, #1
 8003ba4:	f43f af51 	beq.w	8003a4a <_printf_float+0xb6>
 8003ba8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003bac:	429a      	cmp	r2, r3
 8003bae:	db02      	blt.n	8003bb6 <_printf_float+0x222>
 8003bb0:	6823      	ldr	r3, [r4, #0]
 8003bb2:	07d8      	lsls	r0, r3, #31
 8003bb4:	d50f      	bpl.n	8003bd6 <_printf_float+0x242>
 8003bb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003bba:	4631      	mov	r1, r6
 8003bbc:	4628      	mov	r0, r5
 8003bbe:	47b8      	blx	r7
 8003bc0:	3001      	adds	r0, #1
 8003bc2:	f43f af42 	beq.w	8003a4a <_printf_float+0xb6>
 8003bc6:	f04f 0800 	mov.w	r8, #0
 8003bca:	f104 091a 	add.w	r9, r4, #26
 8003bce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	4543      	cmp	r3, r8
 8003bd4:	dc09      	bgt.n	8003bea <_printf_float+0x256>
 8003bd6:	6823      	ldr	r3, [r4, #0]
 8003bd8:	079b      	lsls	r3, r3, #30
 8003bda:	f100 8102 	bmi.w	8003de2 <_printf_float+0x44e>
 8003bde:	68e0      	ldr	r0, [r4, #12]
 8003be0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003be2:	4298      	cmp	r0, r3
 8003be4:	bfb8      	it	lt
 8003be6:	4618      	movlt	r0, r3
 8003be8:	e731      	b.n	8003a4e <_printf_float+0xba>
 8003bea:	2301      	movs	r3, #1
 8003bec:	464a      	mov	r2, r9
 8003bee:	4631      	mov	r1, r6
 8003bf0:	4628      	mov	r0, r5
 8003bf2:	47b8      	blx	r7
 8003bf4:	3001      	adds	r0, #1
 8003bf6:	f43f af28 	beq.w	8003a4a <_printf_float+0xb6>
 8003bfa:	f108 0801 	add.w	r8, r8, #1
 8003bfe:	e7e6      	b.n	8003bce <_printf_float+0x23a>
 8003c00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	dc38      	bgt.n	8003c78 <_printf_float+0x2e4>
 8003c06:	2301      	movs	r3, #1
 8003c08:	4631      	mov	r1, r6
 8003c0a:	4628      	mov	r0, r5
 8003c0c:	4a19      	ldr	r2, [pc, #100]	; (8003c74 <_printf_float+0x2e0>)
 8003c0e:	47b8      	blx	r7
 8003c10:	3001      	adds	r0, #1
 8003c12:	f43f af1a 	beq.w	8003a4a <_printf_float+0xb6>
 8003c16:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	d102      	bne.n	8003c24 <_printf_float+0x290>
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	07d9      	lsls	r1, r3, #31
 8003c22:	d5d8      	bpl.n	8003bd6 <_printf_float+0x242>
 8003c24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c28:	4631      	mov	r1, r6
 8003c2a:	4628      	mov	r0, r5
 8003c2c:	47b8      	blx	r7
 8003c2e:	3001      	adds	r0, #1
 8003c30:	f43f af0b 	beq.w	8003a4a <_printf_float+0xb6>
 8003c34:	f04f 0900 	mov.w	r9, #0
 8003c38:	f104 0a1a 	add.w	sl, r4, #26
 8003c3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c3e:	425b      	negs	r3, r3
 8003c40:	454b      	cmp	r3, r9
 8003c42:	dc01      	bgt.n	8003c48 <_printf_float+0x2b4>
 8003c44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c46:	e794      	b.n	8003b72 <_printf_float+0x1de>
 8003c48:	2301      	movs	r3, #1
 8003c4a:	4652      	mov	r2, sl
 8003c4c:	4631      	mov	r1, r6
 8003c4e:	4628      	mov	r0, r5
 8003c50:	47b8      	blx	r7
 8003c52:	3001      	adds	r0, #1
 8003c54:	f43f aef9 	beq.w	8003a4a <_printf_float+0xb6>
 8003c58:	f109 0901 	add.w	r9, r9, #1
 8003c5c:	e7ee      	b.n	8003c3c <_printf_float+0x2a8>
 8003c5e:	bf00      	nop
 8003c60:	7fefffff 	.word	0x7fefffff
 8003c64:	08006410 	.word	0x08006410
 8003c68:	08006414 	.word	0x08006414
 8003c6c:	0800641c 	.word	0x0800641c
 8003c70:	08006418 	.word	0x08006418
 8003c74:	08006420 	.word	0x08006420
 8003c78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	bfa8      	it	ge
 8003c80:	461a      	movge	r2, r3
 8003c82:	2a00      	cmp	r2, #0
 8003c84:	4691      	mov	r9, r2
 8003c86:	dc37      	bgt.n	8003cf8 <_printf_float+0x364>
 8003c88:	f04f 0b00 	mov.w	fp, #0
 8003c8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c90:	f104 021a 	add.w	r2, r4, #26
 8003c94:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003c98:	ebaa 0309 	sub.w	r3, sl, r9
 8003c9c:	455b      	cmp	r3, fp
 8003c9e:	dc33      	bgt.n	8003d08 <_printf_float+0x374>
 8003ca0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	db3b      	blt.n	8003d20 <_printf_float+0x38c>
 8003ca8:	6823      	ldr	r3, [r4, #0]
 8003caa:	07da      	lsls	r2, r3, #31
 8003cac:	d438      	bmi.n	8003d20 <_printf_float+0x38c>
 8003cae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003cb0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003cb2:	eba2 030a 	sub.w	r3, r2, sl
 8003cb6:	eba2 0901 	sub.w	r9, r2, r1
 8003cba:	4599      	cmp	r9, r3
 8003cbc:	bfa8      	it	ge
 8003cbe:	4699      	movge	r9, r3
 8003cc0:	f1b9 0f00 	cmp.w	r9, #0
 8003cc4:	dc34      	bgt.n	8003d30 <_printf_float+0x39c>
 8003cc6:	f04f 0800 	mov.w	r8, #0
 8003cca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003cce:	f104 0a1a 	add.w	sl, r4, #26
 8003cd2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003cd6:	1a9b      	subs	r3, r3, r2
 8003cd8:	eba3 0309 	sub.w	r3, r3, r9
 8003cdc:	4543      	cmp	r3, r8
 8003cde:	f77f af7a 	ble.w	8003bd6 <_printf_float+0x242>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	4652      	mov	r2, sl
 8003ce6:	4631      	mov	r1, r6
 8003ce8:	4628      	mov	r0, r5
 8003cea:	47b8      	blx	r7
 8003cec:	3001      	adds	r0, #1
 8003cee:	f43f aeac 	beq.w	8003a4a <_printf_float+0xb6>
 8003cf2:	f108 0801 	add.w	r8, r8, #1
 8003cf6:	e7ec      	b.n	8003cd2 <_printf_float+0x33e>
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	4631      	mov	r1, r6
 8003cfc:	4642      	mov	r2, r8
 8003cfe:	4628      	mov	r0, r5
 8003d00:	47b8      	blx	r7
 8003d02:	3001      	adds	r0, #1
 8003d04:	d1c0      	bne.n	8003c88 <_printf_float+0x2f4>
 8003d06:	e6a0      	b.n	8003a4a <_printf_float+0xb6>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	4631      	mov	r1, r6
 8003d0c:	4628      	mov	r0, r5
 8003d0e:	920b      	str	r2, [sp, #44]	; 0x2c
 8003d10:	47b8      	blx	r7
 8003d12:	3001      	adds	r0, #1
 8003d14:	f43f ae99 	beq.w	8003a4a <_printf_float+0xb6>
 8003d18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003d1a:	f10b 0b01 	add.w	fp, fp, #1
 8003d1e:	e7b9      	b.n	8003c94 <_printf_float+0x300>
 8003d20:	4631      	mov	r1, r6
 8003d22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d26:	4628      	mov	r0, r5
 8003d28:	47b8      	blx	r7
 8003d2a:	3001      	adds	r0, #1
 8003d2c:	d1bf      	bne.n	8003cae <_printf_float+0x31a>
 8003d2e:	e68c      	b.n	8003a4a <_printf_float+0xb6>
 8003d30:	464b      	mov	r3, r9
 8003d32:	4631      	mov	r1, r6
 8003d34:	4628      	mov	r0, r5
 8003d36:	eb08 020a 	add.w	r2, r8, sl
 8003d3a:	47b8      	blx	r7
 8003d3c:	3001      	adds	r0, #1
 8003d3e:	d1c2      	bne.n	8003cc6 <_printf_float+0x332>
 8003d40:	e683      	b.n	8003a4a <_printf_float+0xb6>
 8003d42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d44:	2a01      	cmp	r2, #1
 8003d46:	dc01      	bgt.n	8003d4c <_printf_float+0x3b8>
 8003d48:	07db      	lsls	r3, r3, #31
 8003d4a:	d537      	bpl.n	8003dbc <_printf_float+0x428>
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	4642      	mov	r2, r8
 8003d50:	4631      	mov	r1, r6
 8003d52:	4628      	mov	r0, r5
 8003d54:	47b8      	blx	r7
 8003d56:	3001      	adds	r0, #1
 8003d58:	f43f ae77 	beq.w	8003a4a <_printf_float+0xb6>
 8003d5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d60:	4631      	mov	r1, r6
 8003d62:	4628      	mov	r0, r5
 8003d64:	47b8      	blx	r7
 8003d66:	3001      	adds	r0, #1
 8003d68:	f43f ae6f 	beq.w	8003a4a <_printf_float+0xb6>
 8003d6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d70:	2200      	movs	r2, #0
 8003d72:	2300      	movs	r3, #0
 8003d74:	f7fc fe84 	bl	8000a80 <__aeabi_dcmpeq>
 8003d78:	b9d8      	cbnz	r0, 8003db2 <_printf_float+0x41e>
 8003d7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d7c:	f108 0201 	add.w	r2, r8, #1
 8003d80:	3b01      	subs	r3, #1
 8003d82:	4631      	mov	r1, r6
 8003d84:	4628      	mov	r0, r5
 8003d86:	47b8      	blx	r7
 8003d88:	3001      	adds	r0, #1
 8003d8a:	d10e      	bne.n	8003daa <_printf_float+0x416>
 8003d8c:	e65d      	b.n	8003a4a <_printf_float+0xb6>
 8003d8e:	2301      	movs	r3, #1
 8003d90:	464a      	mov	r2, r9
 8003d92:	4631      	mov	r1, r6
 8003d94:	4628      	mov	r0, r5
 8003d96:	47b8      	blx	r7
 8003d98:	3001      	adds	r0, #1
 8003d9a:	f43f ae56 	beq.w	8003a4a <_printf_float+0xb6>
 8003d9e:	f108 0801 	add.w	r8, r8, #1
 8003da2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003da4:	3b01      	subs	r3, #1
 8003da6:	4543      	cmp	r3, r8
 8003da8:	dcf1      	bgt.n	8003d8e <_printf_float+0x3fa>
 8003daa:	4653      	mov	r3, sl
 8003dac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003db0:	e6e0      	b.n	8003b74 <_printf_float+0x1e0>
 8003db2:	f04f 0800 	mov.w	r8, #0
 8003db6:	f104 091a 	add.w	r9, r4, #26
 8003dba:	e7f2      	b.n	8003da2 <_printf_float+0x40e>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	4642      	mov	r2, r8
 8003dc0:	e7df      	b.n	8003d82 <_printf_float+0x3ee>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	464a      	mov	r2, r9
 8003dc6:	4631      	mov	r1, r6
 8003dc8:	4628      	mov	r0, r5
 8003dca:	47b8      	blx	r7
 8003dcc:	3001      	adds	r0, #1
 8003dce:	f43f ae3c 	beq.w	8003a4a <_printf_float+0xb6>
 8003dd2:	f108 0801 	add.w	r8, r8, #1
 8003dd6:	68e3      	ldr	r3, [r4, #12]
 8003dd8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003dda:	1a5b      	subs	r3, r3, r1
 8003ddc:	4543      	cmp	r3, r8
 8003dde:	dcf0      	bgt.n	8003dc2 <_printf_float+0x42e>
 8003de0:	e6fd      	b.n	8003bde <_printf_float+0x24a>
 8003de2:	f04f 0800 	mov.w	r8, #0
 8003de6:	f104 0919 	add.w	r9, r4, #25
 8003dea:	e7f4      	b.n	8003dd6 <_printf_float+0x442>

08003dec <_printf_common>:
 8003dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003df0:	4616      	mov	r6, r2
 8003df2:	4699      	mov	r9, r3
 8003df4:	688a      	ldr	r2, [r1, #8]
 8003df6:	690b      	ldr	r3, [r1, #16]
 8003df8:	4607      	mov	r7, r0
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	bfb8      	it	lt
 8003dfe:	4613      	movlt	r3, r2
 8003e00:	6033      	str	r3, [r6, #0]
 8003e02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e06:	460c      	mov	r4, r1
 8003e08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e0c:	b10a      	cbz	r2, 8003e12 <_printf_common+0x26>
 8003e0e:	3301      	adds	r3, #1
 8003e10:	6033      	str	r3, [r6, #0]
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	0699      	lsls	r1, r3, #26
 8003e16:	bf42      	ittt	mi
 8003e18:	6833      	ldrmi	r3, [r6, #0]
 8003e1a:	3302      	addmi	r3, #2
 8003e1c:	6033      	strmi	r3, [r6, #0]
 8003e1e:	6825      	ldr	r5, [r4, #0]
 8003e20:	f015 0506 	ands.w	r5, r5, #6
 8003e24:	d106      	bne.n	8003e34 <_printf_common+0x48>
 8003e26:	f104 0a19 	add.w	sl, r4, #25
 8003e2a:	68e3      	ldr	r3, [r4, #12]
 8003e2c:	6832      	ldr	r2, [r6, #0]
 8003e2e:	1a9b      	subs	r3, r3, r2
 8003e30:	42ab      	cmp	r3, r5
 8003e32:	dc28      	bgt.n	8003e86 <_printf_common+0x9a>
 8003e34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e38:	1e13      	subs	r3, r2, #0
 8003e3a:	6822      	ldr	r2, [r4, #0]
 8003e3c:	bf18      	it	ne
 8003e3e:	2301      	movne	r3, #1
 8003e40:	0692      	lsls	r2, r2, #26
 8003e42:	d42d      	bmi.n	8003ea0 <_printf_common+0xb4>
 8003e44:	4649      	mov	r1, r9
 8003e46:	4638      	mov	r0, r7
 8003e48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e4c:	47c0      	blx	r8
 8003e4e:	3001      	adds	r0, #1
 8003e50:	d020      	beq.n	8003e94 <_printf_common+0xa8>
 8003e52:	6823      	ldr	r3, [r4, #0]
 8003e54:	68e5      	ldr	r5, [r4, #12]
 8003e56:	f003 0306 	and.w	r3, r3, #6
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	bf18      	it	ne
 8003e5e:	2500      	movne	r5, #0
 8003e60:	6832      	ldr	r2, [r6, #0]
 8003e62:	f04f 0600 	mov.w	r6, #0
 8003e66:	68a3      	ldr	r3, [r4, #8]
 8003e68:	bf08      	it	eq
 8003e6a:	1aad      	subeq	r5, r5, r2
 8003e6c:	6922      	ldr	r2, [r4, #16]
 8003e6e:	bf08      	it	eq
 8003e70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e74:	4293      	cmp	r3, r2
 8003e76:	bfc4      	itt	gt
 8003e78:	1a9b      	subgt	r3, r3, r2
 8003e7a:	18ed      	addgt	r5, r5, r3
 8003e7c:	341a      	adds	r4, #26
 8003e7e:	42b5      	cmp	r5, r6
 8003e80:	d11a      	bne.n	8003eb8 <_printf_common+0xcc>
 8003e82:	2000      	movs	r0, #0
 8003e84:	e008      	b.n	8003e98 <_printf_common+0xac>
 8003e86:	2301      	movs	r3, #1
 8003e88:	4652      	mov	r2, sl
 8003e8a:	4649      	mov	r1, r9
 8003e8c:	4638      	mov	r0, r7
 8003e8e:	47c0      	blx	r8
 8003e90:	3001      	adds	r0, #1
 8003e92:	d103      	bne.n	8003e9c <_printf_common+0xb0>
 8003e94:	f04f 30ff 	mov.w	r0, #4294967295
 8003e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e9c:	3501      	adds	r5, #1
 8003e9e:	e7c4      	b.n	8003e2a <_printf_common+0x3e>
 8003ea0:	2030      	movs	r0, #48	; 0x30
 8003ea2:	18e1      	adds	r1, r4, r3
 8003ea4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003eae:	4422      	add	r2, r4
 8003eb0:	3302      	adds	r3, #2
 8003eb2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003eb6:	e7c5      	b.n	8003e44 <_printf_common+0x58>
 8003eb8:	2301      	movs	r3, #1
 8003eba:	4622      	mov	r2, r4
 8003ebc:	4649      	mov	r1, r9
 8003ebe:	4638      	mov	r0, r7
 8003ec0:	47c0      	blx	r8
 8003ec2:	3001      	adds	r0, #1
 8003ec4:	d0e6      	beq.n	8003e94 <_printf_common+0xa8>
 8003ec6:	3601      	adds	r6, #1
 8003ec8:	e7d9      	b.n	8003e7e <_printf_common+0x92>
	...

08003ecc <_printf_i>:
 8003ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ed0:	460c      	mov	r4, r1
 8003ed2:	7e27      	ldrb	r7, [r4, #24]
 8003ed4:	4691      	mov	r9, r2
 8003ed6:	2f78      	cmp	r7, #120	; 0x78
 8003ed8:	4680      	mov	r8, r0
 8003eda:	469a      	mov	sl, r3
 8003edc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003ede:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ee2:	d807      	bhi.n	8003ef4 <_printf_i+0x28>
 8003ee4:	2f62      	cmp	r7, #98	; 0x62
 8003ee6:	d80a      	bhi.n	8003efe <_printf_i+0x32>
 8003ee8:	2f00      	cmp	r7, #0
 8003eea:	f000 80d9 	beq.w	80040a0 <_printf_i+0x1d4>
 8003eee:	2f58      	cmp	r7, #88	; 0x58
 8003ef0:	f000 80a4 	beq.w	800403c <_printf_i+0x170>
 8003ef4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ef8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003efc:	e03a      	b.n	8003f74 <_printf_i+0xa8>
 8003efe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f02:	2b15      	cmp	r3, #21
 8003f04:	d8f6      	bhi.n	8003ef4 <_printf_i+0x28>
 8003f06:	a001      	add	r0, pc, #4	; (adr r0, 8003f0c <_printf_i+0x40>)
 8003f08:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003f0c:	08003f65 	.word	0x08003f65
 8003f10:	08003f79 	.word	0x08003f79
 8003f14:	08003ef5 	.word	0x08003ef5
 8003f18:	08003ef5 	.word	0x08003ef5
 8003f1c:	08003ef5 	.word	0x08003ef5
 8003f20:	08003ef5 	.word	0x08003ef5
 8003f24:	08003f79 	.word	0x08003f79
 8003f28:	08003ef5 	.word	0x08003ef5
 8003f2c:	08003ef5 	.word	0x08003ef5
 8003f30:	08003ef5 	.word	0x08003ef5
 8003f34:	08003ef5 	.word	0x08003ef5
 8003f38:	08004087 	.word	0x08004087
 8003f3c:	08003fa9 	.word	0x08003fa9
 8003f40:	08004069 	.word	0x08004069
 8003f44:	08003ef5 	.word	0x08003ef5
 8003f48:	08003ef5 	.word	0x08003ef5
 8003f4c:	080040a9 	.word	0x080040a9
 8003f50:	08003ef5 	.word	0x08003ef5
 8003f54:	08003fa9 	.word	0x08003fa9
 8003f58:	08003ef5 	.word	0x08003ef5
 8003f5c:	08003ef5 	.word	0x08003ef5
 8003f60:	08004071 	.word	0x08004071
 8003f64:	680b      	ldr	r3, [r1, #0]
 8003f66:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f6a:	1d1a      	adds	r2, r3, #4
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	600a      	str	r2, [r1, #0]
 8003f70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f74:	2301      	movs	r3, #1
 8003f76:	e0a4      	b.n	80040c2 <_printf_i+0x1f6>
 8003f78:	6825      	ldr	r5, [r4, #0]
 8003f7a:	6808      	ldr	r0, [r1, #0]
 8003f7c:	062e      	lsls	r6, r5, #24
 8003f7e:	f100 0304 	add.w	r3, r0, #4
 8003f82:	d50a      	bpl.n	8003f9a <_printf_i+0xce>
 8003f84:	6805      	ldr	r5, [r0, #0]
 8003f86:	600b      	str	r3, [r1, #0]
 8003f88:	2d00      	cmp	r5, #0
 8003f8a:	da03      	bge.n	8003f94 <_printf_i+0xc8>
 8003f8c:	232d      	movs	r3, #45	; 0x2d
 8003f8e:	426d      	negs	r5, r5
 8003f90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f94:	230a      	movs	r3, #10
 8003f96:	485e      	ldr	r0, [pc, #376]	; (8004110 <_printf_i+0x244>)
 8003f98:	e019      	b.n	8003fce <_printf_i+0x102>
 8003f9a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003f9e:	6805      	ldr	r5, [r0, #0]
 8003fa0:	600b      	str	r3, [r1, #0]
 8003fa2:	bf18      	it	ne
 8003fa4:	b22d      	sxthne	r5, r5
 8003fa6:	e7ef      	b.n	8003f88 <_printf_i+0xbc>
 8003fa8:	680b      	ldr	r3, [r1, #0]
 8003faa:	6825      	ldr	r5, [r4, #0]
 8003fac:	1d18      	adds	r0, r3, #4
 8003fae:	6008      	str	r0, [r1, #0]
 8003fb0:	0628      	lsls	r0, r5, #24
 8003fb2:	d501      	bpl.n	8003fb8 <_printf_i+0xec>
 8003fb4:	681d      	ldr	r5, [r3, #0]
 8003fb6:	e002      	b.n	8003fbe <_printf_i+0xf2>
 8003fb8:	0669      	lsls	r1, r5, #25
 8003fba:	d5fb      	bpl.n	8003fb4 <_printf_i+0xe8>
 8003fbc:	881d      	ldrh	r5, [r3, #0]
 8003fbe:	2f6f      	cmp	r7, #111	; 0x6f
 8003fc0:	bf0c      	ite	eq
 8003fc2:	2308      	moveq	r3, #8
 8003fc4:	230a      	movne	r3, #10
 8003fc6:	4852      	ldr	r0, [pc, #328]	; (8004110 <_printf_i+0x244>)
 8003fc8:	2100      	movs	r1, #0
 8003fca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fce:	6866      	ldr	r6, [r4, #4]
 8003fd0:	2e00      	cmp	r6, #0
 8003fd2:	bfa8      	it	ge
 8003fd4:	6821      	ldrge	r1, [r4, #0]
 8003fd6:	60a6      	str	r6, [r4, #8]
 8003fd8:	bfa4      	itt	ge
 8003fda:	f021 0104 	bicge.w	r1, r1, #4
 8003fde:	6021      	strge	r1, [r4, #0]
 8003fe0:	b90d      	cbnz	r5, 8003fe6 <_printf_i+0x11a>
 8003fe2:	2e00      	cmp	r6, #0
 8003fe4:	d04d      	beq.n	8004082 <_printf_i+0x1b6>
 8003fe6:	4616      	mov	r6, r2
 8003fe8:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fec:	fb03 5711 	mls	r7, r3, r1, r5
 8003ff0:	5dc7      	ldrb	r7, [r0, r7]
 8003ff2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ff6:	462f      	mov	r7, r5
 8003ff8:	42bb      	cmp	r3, r7
 8003ffa:	460d      	mov	r5, r1
 8003ffc:	d9f4      	bls.n	8003fe8 <_printf_i+0x11c>
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d10b      	bne.n	800401a <_printf_i+0x14e>
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	07df      	lsls	r7, r3, #31
 8004006:	d508      	bpl.n	800401a <_printf_i+0x14e>
 8004008:	6923      	ldr	r3, [r4, #16]
 800400a:	6861      	ldr	r1, [r4, #4]
 800400c:	4299      	cmp	r1, r3
 800400e:	bfde      	ittt	le
 8004010:	2330      	movle	r3, #48	; 0x30
 8004012:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004016:	f106 36ff 	addle.w	r6, r6, #4294967295
 800401a:	1b92      	subs	r2, r2, r6
 800401c:	6122      	str	r2, [r4, #16]
 800401e:	464b      	mov	r3, r9
 8004020:	4621      	mov	r1, r4
 8004022:	4640      	mov	r0, r8
 8004024:	f8cd a000 	str.w	sl, [sp]
 8004028:	aa03      	add	r2, sp, #12
 800402a:	f7ff fedf 	bl	8003dec <_printf_common>
 800402e:	3001      	adds	r0, #1
 8004030:	d14c      	bne.n	80040cc <_printf_i+0x200>
 8004032:	f04f 30ff 	mov.w	r0, #4294967295
 8004036:	b004      	add	sp, #16
 8004038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800403c:	4834      	ldr	r0, [pc, #208]	; (8004110 <_printf_i+0x244>)
 800403e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004042:	680e      	ldr	r6, [r1, #0]
 8004044:	6823      	ldr	r3, [r4, #0]
 8004046:	f856 5b04 	ldr.w	r5, [r6], #4
 800404a:	061f      	lsls	r7, r3, #24
 800404c:	600e      	str	r6, [r1, #0]
 800404e:	d514      	bpl.n	800407a <_printf_i+0x1ae>
 8004050:	07d9      	lsls	r1, r3, #31
 8004052:	bf44      	itt	mi
 8004054:	f043 0320 	orrmi.w	r3, r3, #32
 8004058:	6023      	strmi	r3, [r4, #0]
 800405a:	b91d      	cbnz	r5, 8004064 <_printf_i+0x198>
 800405c:	6823      	ldr	r3, [r4, #0]
 800405e:	f023 0320 	bic.w	r3, r3, #32
 8004062:	6023      	str	r3, [r4, #0]
 8004064:	2310      	movs	r3, #16
 8004066:	e7af      	b.n	8003fc8 <_printf_i+0xfc>
 8004068:	6823      	ldr	r3, [r4, #0]
 800406a:	f043 0320 	orr.w	r3, r3, #32
 800406e:	6023      	str	r3, [r4, #0]
 8004070:	2378      	movs	r3, #120	; 0x78
 8004072:	4828      	ldr	r0, [pc, #160]	; (8004114 <_printf_i+0x248>)
 8004074:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004078:	e7e3      	b.n	8004042 <_printf_i+0x176>
 800407a:	065e      	lsls	r6, r3, #25
 800407c:	bf48      	it	mi
 800407e:	b2ad      	uxthmi	r5, r5
 8004080:	e7e6      	b.n	8004050 <_printf_i+0x184>
 8004082:	4616      	mov	r6, r2
 8004084:	e7bb      	b.n	8003ffe <_printf_i+0x132>
 8004086:	680b      	ldr	r3, [r1, #0]
 8004088:	6826      	ldr	r6, [r4, #0]
 800408a:	1d1d      	adds	r5, r3, #4
 800408c:	6960      	ldr	r0, [r4, #20]
 800408e:	600d      	str	r5, [r1, #0]
 8004090:	0635      	lsls	r5, r6, #24
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	d501      	bpl.n	800409a <_printf_i+0x1ce>
 8004096:	6018      	str	r0, [r3, #0]
 8004098:	e002      	b.n	80040a0 <_printf_i+0x1d4>
 800409a:	0671      	lsls	r1, r6, #25
 800409c:	d5fb      	bpl.n	8004096 <_printf_i+0x1ca>
 800409e:	8018      	strh	r0, [r3, #0]
 80040a0:	2300      	movs	r3, #0
 80040a2:	4616      	mov	r6, r2
 80040a4:	6123      	str	r3, [r4, #16]
 80040a6:	e7ba      	b.n	800401e <_printf_i+0x152>
 80040a8:	680b      	ldr	r3, [r1, #0]
 80040aa:	1d1a      	adds	r2, r3, #4
 80040ac:	600a      	str	r2, [r1, #0]
 80040ae:	681e      	ldr	r6, [r3, #0]
 80040b0:	2100      	movs	r1, #0
 80040b2:	4630      	mov	r0, r6
 80040b4:	6862      	ldr	r2, [r4, #4]
 80040b6:	f001 fa25 	bl	8005504 <memchr>
 80040ba:	b108      	cbz	r0, 80040c0 <_printf_i+0x1f4>
 80040bc:	1b80      	subs	r0, r0, r6
 80040be:	6060      	str	r0, [r4, #4]
 80040c0:	6863      	ldr	r3, [r4, #4]
 80040c2:	6123      	str	r3, [r4, #16]
 80040c4:	2300      	movs	r3, #0
 80040c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040ca:	e7a8      	b.n	800401e <_printf_i+0x152>
 80040cc:	4632      	mov	r2, r6
 80040ce:	4649      	mov	r1, r9
 80040d0:	4640      	mov	r0, r8
 80040d2:	6923      	ldr	r3, [r4, #16]
 80040d4:	47d0      	blx	sl
 80040d6:	3001      	adds	r0, #1
 80040d8:	d0ab      	beq.n	8004032 <_printf_i+0x166>
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	079b      	lsls	r3, r3, #30
 80040de:	d413      	bmi.n	8004108 <_printf_i+0x23c>
 80040e0:	68e0      	ldr	r0, [r4, #12]
 80040e2:	9b03      	ldr	r3, [sp, #12]
 80040e4:	4298      	cmp	r0, r3
 80040e6:	bfb8      	it	lt
 80040e8:	4618      	movlt	r0, r3
 80040ea:	e7a4      	b.n	8004036 <_printf_i+0x16a>
 80040ec:	2301      	movs	r3, #1
 80040ee:	4632      	mov	r2, r6
 80040f0:	4649      	mov	r1, r9
 80040f2:	4640      	mov	r0, r8
 80040f4:	47d0      	blx	sl
 80040f6:	3001      	adds	r0, #1
 80040f8:	d09b      	beq.n	8004032 <_printf_i+0x166>
 80040fa:	3501      	adds	r5, #1
 80040fc:	68e3      	ldr	r3, [r4, #12]
 80040fe:	9903      	ldr	r1, [sp, #12]
 8004100:	1a5b      	subs	r3, r3, r1
 8004102:	42ab      	cmp	r3, r5
 8004104:	dcf2      	bgt.n	80040ec <_printf_i+0x220>
 8004106:	e7eb      	b.n	80040e0 <_printf_i+0x214>
 8004108:	2500      	movs	r5, #0
 800410a:	f104 0619 	add.w	r6, r4, #25
 800410e:	e7f5      	b.n	80040fc <_printf_i+0x230>
 8004110:	08006422 	.word	0x08006422
 8004114:	08006433 	.word	0x08006433

08004118 <iprintf>:
 8004118:	b40f      	push	{r0, r1, r2, r3}
 800411a:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <iprintf+0x2c>)
 800411c:	b513      	push	{r0, r1, r4, lr}
 800411e:	681c      	ldr	r4, [r3, #0]
 8004120:	b124      	cbz	r4, 800412c <iprintf+0x14>
 8004122:	69a3      	ldr	r3, [r4, #24]
 8004124:	b913      	cbnz	r3, 800412c <iprintf+0x14>
 8004126:	4620      	mov	r0, r4
 8004128:	f001 f8da 	bl	80052e0 <__sinit>
 800412c:	ab05      	add	r3, sp, #20
 800412e:	4620      	mov	r0, r4
 8004130:	9a04      	ldr	r2, [sp, #16]
 8004132:	68a1      	ldr	r1, [r4, #8]
 8004134:	9301      	str	r3, [sp, #4]
 8004136:	f001 fe51 	bl	8005ddc <_vfiprintf_r>
 800413a:	b002      	add	sp, #8
 800413c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004140:	b004      	add	sp, #16
 8004142:	4770      	bx	lr
 8004144:	20000014 	.word	0x20000014

08004148 <_puts_r>:
 8004148:	b570      	push	{r4, r5, r6, lr}
 800414a:	460e      	mov	r6, r1
 800414c:	4605      	mov	r5, r0
 800414e:	b118      	cbz	r0, 8004158 <_puts_r+0x10>
 8004150:	6983      	ldr	r3, [r0, #24]
 8004152:	b90b      	cbnz	r3, 8004158 <_puts_r+0x10>
 8004154:	f001 f8c4 	bl	80052e0 <__sinit>
 8004158:	69ab      	ldr	r3, [r5, #24]
 800415a:	68ac      	ldr	r4, [r5, #8]
 800415c:	b913      	cbnz	r3, 8004164 <_puts_r+0x1c>
 800415e:	4628      	mov	r0, r5
 8004160:	f001 f8be 	bl	80052e0 <__sinit>
 8004164:	4b2c      	ldr	r3, [pc, #176]	; (8004218 <_puts_r+0xd0>)
 8004166:	429c      	cmp	r4, r3
 8004168:	d120      	bne.n	80041ac <_puts_r+0x64>
 800416a:	686c      	ldr	r4, [r5, #4]
 800416c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800416e:	07db      	lsls	r3, r3, #31
 8004170:	d405      	bmi.n	800417e <_puts_r+0x36>
 8004172:	89a3      	ldrh	r3, [r4, #12]
 8004174:	0598      	lsls	r0, r3, #22
 8004176:	d402      	bmi.n	800417e <_puts_r+0x36>
 8004178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800417a:	f001 f954 	bl	8005426 <__retarget_lock_acquire_recursive>
 800417e:	89a3      	ldrh	r3, [r4, #12]
 8004180:	0719      	lsls	r1, r3, #28
 8004182:	d51d      	bpl.n	80041c0 <_puts_r+0x78>
 8004184:	6923      	ldr	r3, [r4, #16]
 8004186:	b1db      	cbz	r3, 80041c0 <_puts_r+0x78>
 8004188:	3e01      	subs	r6, #1
 800418a:	68a3      	ldr	r3, [r4, #8]
 800418c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004190:	3b01      	subs	r3, #1
 8004192:	60a3      	str	r3, [r4, #8]
 8004194:	bb39      	cbnz	r1, 80041e6 <_puts_r+0x9e>
 8004196:	2b00      	cmp	r3, #0
 8004198:	da38      	bge.n	800420c <_puts_r+0xc4>
 800419a:	4622      	mov	r2, r4
 800419c:	210a      	movs	r1, #10
 800419e:	4628      	mov	r0, r5
 80041a0:	f000 f848 	bl	8004234 <__swbuf_r>
 80041a4:	3001      	adds	r0, #1
 80041a6:	d011      	beq.n	80041cc <_puts_r+0x84>
 80041a8:	250a      	movs	r5, #10
 80041aa:	e011      	b.n	80041d0 <_puts_r+0x88>
 80041ac:	4b1b      	ldr	r3, [pc, #108]	; (800421c <_puts_r+0xd4>)
 80041ae:	429c      	cmp	r4, r3
 80041b0:	d101      	bne.n	80041b6 <_puts_r+0x6e>
 80041b2:	68ac      	ldr	r4, [r5, #8]
 80041b4:	e7da      	b.n	800416c <_puts_r+0x24>
 80041b6:	4b1a      	ldr	r3, [pc, #104]	; (8004220 <_puts_r+0xd8>)
 80041b8:	429c      	cmp	r4, r3
 80041ba:	bf08      	it	eq
 80041bc:	68ec      	ldreq	r4, [r5, #12]
 80041be:	e7d5      	b.n	800416c <_puts_r+0x24>
 80041c0:	4621      	mov	r1, r4
 80041c2:	4628      	mov	r0, r5
 80041c4:	f000 f888 	bl	80042d8 <__swsetup_r>
 80041c8:	2800      	cmp	r0, #0
 80041ca:	d0dd      	beq.n	8004188 <_puts_r+0x40>
 80041cc:	f04f 35ff 	mov.w	r5, #4294967295
 80041d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041d2:	07da      	lsls	r2, r3, #31
 80041d4:	d405      	bmi.n	80041e2 <_puts_r+0x9a>
 80041d6:	89a3      	ldrh	r3, [r4, #12]
 80041d8:	059b      	lsls	r3, r3, #22
 80041da:	d402      	bmi.n	80041e2 <_puts_r+0x9a>
 80041dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041de:	f001 f923 	bl	8005428 <__retarget_lock_release_recursive>
 80041e2:	4628      	mov	r0, r5
 80041e4:	bd70      	pop	{r4, r5, r6, pc}
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	da04      	bge.n	80041f4 <_puts_r+0xac>
 80041ea:	69a2      	ldr	r2, [r4, #24]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	dc06      	bgt.n	80041fe <_puts_r+0xb6>
 80041f0:	290a      	cmp	r1, #10
 80041f2:	d004      	beq.n	80041fe <_puts_r+0xb6>
 80041f4:	6823      	ldr	r3, [r4, #0]
 80041f6:	1c5a      	adds	r2, r3, #1
 80041f8:	6022      	str	r2, [r4, #0]
 80041fa:	7019      	strb	r1, [r3, #0]
 80041fc:	e7c5      	b.n	800418a <_puts_r+0x42>
 80041fe:	4622      	mov	r2, r4
 8004200:	4628      	mov	r0, r5
 8004202:	f000 f817 	bl	8004234 <__swbuf_r>
 8004206:	3001      	adds	r0, #1
 8004208:	d1bf      	bne.n	800418a <_puts_r+0x42>
 800420a:	e7df      	b.n	80041cc <_puts_r+0x84>
 800420c:	250a      	movs	r5, #10
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	6022      	str	r2, [r4, #0]
 8004214:	701d      	strb	r5, [r3, #0]
 8004216:	e7db      	b.n	80041d0 <_puts_r+0x88>
 8004218:	080064f8 	.word	0x080064f8
 800421c:	08006518 	.word	0x08006518
 8004220:	080064d8 	.word	0x080064d8

08004224 <puts>:
 8004224:	4b02      	ldr	r3, [pc, #8]	; (8004230 <puts+0xc>)
 8004226:	4601      	mov	r1, r0
 8004228:	6818      	ldr	r0, [r3, #0]
 800422a:	f7ff bf8d 	b.w	8004148 <_puts_r>
 800422e:	bf00      	nop
 8004230:	20000014 	.word	0x20000014

08004234 <__swbuf_r>:
 8004234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004236:	460e      	mov	r6, r1
 8004238:	4614      	mov	r4, r2
 800423a:	4605      	mov	r5, r0
 800423c:	b118      	cbz	r0, 8004246 <__swbuf_r+0x12>
 800423e:	6983      	ldr	r3, [r0, #24]
 8004240:	b90b      	cbnz	r3, 8004246 <__swbuf_r+0x12>
 8004242:	f001 f84d 	bl	80052e0 <__sinit>
 8004246:	4b21      	ldr	r3, [pc, #132]	; (80042cc <__swbuf_r+0x98>)
 8004248:	429c      	cmp	r4, r3
 800424a:	d12b      	bne.n	80042a4 <__swbuf_r+0x70>
 800424c:	686c      	ldr	r4, [r5, #4]
 800424e:	69a3      	ldr	r3, [r4, #24]
 8004250:	60a3      	str	r3, [r4, #8]
 8004252:	89a3      	ldrh	r3, [r4, #12]
 8004254:	071a      	lsls	r2, r3, #28
 8004256:	d52f      	bpl.n	80042b8 <__swbuf_r+0x84>
 8004258:	6923      	ldr	r3, [r4, #16]
 800425a:	b36b      	cbz	r3, 80042b8 <__swbuf_r+0x84>
 800425c:	6923      	ldr	r3, [r4, #16]
 800425e:	6820      	ldr	r0, [r4, #0]
 8004260:	b2f6      	uxtb	r6, r6
 8004262:	1ac0      	subs	r0, r0, r3
 8004264:	6963      	ldr	r3, [r4, #20]
 8004266:	4637      	mov	r7, r6
 8004268:	4283      	cmp	r3, r0
 800426a:	dc04      	bgt.n	8004276 <__swbuf_r+0x42>
 800426c:	4621      	mov	r1, r4
 800426e:	4628      	mov	r0, r5
 8004270:	f000 ffa2 	bl	80051b8 <_fflush_r>
 8004274:	bb30      	cbnz	r0, 80042c4 <__swbuf_r+0x90>
 8004276:	68a3      	ldr	r3, [r4, #8]
 8004278:	3001      	adds	r0, #1
 800427a:	3b01      	subs	r3, #1
 800427c:	60a3      	str	r3, [r4, #8]
 800427e:	6823      	ldr	r3, [r4, #0]
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	6022      	str	r2, [r4, #0]
 8004284:	701e      	strb	r6, [r3, #0]
 8004286:	6963      	ldr	r3, [r4, #20]
 8004288:	4283      	cmp	r3, r0
 800428a:	d004      	beq.n	8004296 <__swbuf_r+0x62>
 800428c:	89a3      	ldrh	r3, [r4, #12]
 800428e:	07db      	lsls	r3, r3, #31
 8004290:	d506      	bpl.n	80042a0 <__swbuf_r+0x6c>
 8004292:	2e0a      	cmp	r6, #10
 8004294:	d104      	bne.n	80042a0 <__swbuf_r+0x6c>
 8004296:	4621      	mov	r1, r4
 8004298:	4628      	mov	r0, r5
 800429a:	f000 ff8d 	bl	80051b8 <_fflush_r>
 800429e:	b988      	cbnz	r0, 80042c4 <__swbuf_r+0x90>
 80042a0:	4638      	mov	r0, r7
 80042a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042a4:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <__swbuf_r+0x9c>)
 80042a6:	429c      	cmp	r4, r3
 80042a8:	d101      	bne.n	80042ae <__swbuf_r+0x7a>
 80042aa:	68ac      	ldr	r4, [r5, #8]
 80042ac:	e7cf      	b.n	800424e <__swbuf_r+0x1a>
 80042ae:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <__swbuf_r+0xa0>)
 80042b0:	429c      	cmp	r4, r3
 80042b2:	bf08      	it	eq
 80042b4:	68ec      	ldreq	r4, [r5, #12]
 80042b6:	e7ca      	b.n	800424e <__swbuf_r+0x1a>
 80042b8:	4621      	mov	r1, r4
 80042ba:	4628      	mov	r0, r5
 80042bc:	f000 f80c 	bl	80042d8 <__swsetup_r>
 80042c0:	2800      	cmp	r0, #0
 80042c2:	d0cb      	beq.n	800425c <__swbuf_r+0x28>
 80042c4:	f04f 37ff 	mov.w	r7, #4294967295
 80042c8:	e7ea      	b.n	80042a0 <__swbuf_r+0x6c>
 80042ca:	bf00      	nop
 80042cc:	080064f8 	.word	0x080064f8
 80042d0:	08006518 	.word	0x08006518
 80042d4:	080064d8 	.word	0x080064d8

080042d8 <__swsetup_r>:
 80042d8:	4b32      	ldr	r3, [pc, #200]	; (80043a4 <__swsetup_r+0xcc>)
 80042da:	b570      	push	{r4, r5, r6, lr}
 80042dc:	681d      	ldr	r5, [r3, #0]
 80042de:	4606      	mov	r6, r0
 80042e0:	460c      	mov	r4, r1
 80042e2:	b125      	cbz	r5, 80042ee <__swsetup_r+0x16>
 80042e4:	69ab      	ldr	r3, [r5, #24]
 80042e6:	b913      	cbnz	r3, 80042ee <__swsetup_r+0x16>
 80042e8:	4628      	mov	r0, r5
 80042ea:	f000 fff9 	bl	80052e0 <__sinit>
 80042ee:	4b2e      	ldr	r3, [pc, #184]	; (80043a8 <__swsetup_r+0xd0>)
 80042f0:	429c      	cmp	r4, r3
 80042f2:	d10f      	bne.n	8004314 <__swsetup_r+0x3c>
 80042f4:	686c      	ldr	r4, [r5, #4]
 80042f6:	89a3      	ldrh	r3, [r4, #12]
 80042f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042fc:	0719      	lsls	r1, r3, #28
 80042fe:	d42c      	bmi.n	800435a <__swsetup_r+0x82>
 8004300:	06dd      	lsls	r5, r3, #27
 8004302:	d411      	bmi.n	8004328 <__swsetup_r+0x50>
 8004304:	2309      	movs	r3, #9
 8004306:	6033      	str	r3, [r6, #0]
 8004308:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800430c:	f04f 30ff 	mov.w	r0, #4294967295
 8004310:	81a3      	strh	r3, [r4, #12]
 8004312:	e03e      	b.n	8004392 <__swsetup_r+0xba>
 8004314:	4b25      	ldr	r3, [pc, #148]	; (80043ac <__swsetup_r+0xd4>)
 8004316:	429c      	cmp	r4, r3
 8004318:	d101      	bne.n	800431e <__swsetup_r+0x46>
 800431a:	68ac      	ldr	r4, [r5, #8]
 800431c:	e7eb      	b.n	80042f6 <__swsetup_r+0x1e>
 800431e:	4b24      	ldr	r3, [pc, #144]	; (80043b0 <__swsetup_r+0xd8>)
 8004320:	429c      	cmp	r4, r3
 8004322:	bf08      	it	eq
 8004324:	68ec      	ldreq	r4, [r5, #12]
 8004326:	e7e6      	b.n	80042f6 <__swsetup_r+0x1e>
 8004328:	0758      	lsls	r0, r3, #29
 800432a:	d512      	bpl.n	8004352 <__swsetup_r+0x7a>
 800432c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800432e:	b141      	cbz	r1, 8004342 <__swsetup_r+0x6a>
 8004330:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004334:	4299      	cmp	r1, r3
 8004336:	d002      	beq.n	800433e <__swsetup_r+0x66>
 8004338:	4630      	mov	r0, r6
 800433a:	f001 fc81 	bl	8005c40 <_free_r>
 800433e:	2300      	movs	r3, #0
 8004340:	6363      	str	r3, [r4, #52]	; 0x34
 8004342:	89a3      	ldrh	r3, [r4, #12]
 8004344:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004348:	81a3      	strh	r3, [r4, #12]
 800434a:	2300      	movs	r3, #0
 800434c:	6063      	str	r3, [r4, #4]
 800434e:	6923      	ldr	r3, [r4, #16]
 8004350:	6023      	str	r3, [r4, #0]
 8004352:	89a3      	ldrh	r3, [r4, #12]
 8004354:	f043 0308 	orr.w	r3, r3, #8
 8004358:	81a3      	strh	r3, [r4, #12]
 800435a:	6923      	ldr	r3, [r4, #16]
 800435c:	b94b      	cbnz	r3, 8004372 <__swsetup_r+0x9a>
 800435e:	89a3      	ldrh	r3, [r4, #12]
 8004360:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004368:	d003      	beq.n	8004372 <__swsetup_r+0x9a>
 800436a:	4621      	mov	r1, r4
 800436c:	4630      	mov	r0, r6
 800436e:	f001 f881 	bl	8005474 <__smakebuf_r>
 8004372:	89a0      	ldrh	r0, [r4, #12]
 8004374:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004378:	f010 0301 	ands.w	r3, r0, #1
 800437c:	d00a      	beq.n	8004394 <__swsetup_r+0xbc>
 800437e:	2300      	movs	r3, #0
 8004380:	60a3      	str	r3, [r4, #8]
 8004382:	6963      	ldr	r3, [r4, #20]
 8004384:	425b      	negs	r3, r3
 8004386:	61a3      	str	r3, [r4, #24]
 8004388:	6923      	ldr	r3, [r4, #16]
 800438a:	b943      	cbnz	r3, 800439e <__swsetup_r+0xc6>
 800438c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004390:	d1ba      	bne.n	8004308 <__swsetup_r+0x30>
 8004392:	bd70      	pop	{r4, r5, r6, pc}
 8004394:	0781      	lsls	r1, r0, #30
 8004396:	bf58      	it	pl
 8004398:	6963      	ldrpl	r3, [r4, #20]
 800439a:	60a3      	str	r3, [r4, #8]
 800439c:	e7f4      	b.n	8004388 <__swsetup_r+0xb0>
 800439e:	2000      	movs	r0, #0
 80043a0:	e7f7      	b.n	8004392 <__swsetup_r+0xba>
 80043a2:	bf00      	nop
 80043a4:	20000014 	.word	0x20000014
 80043a8:	080064f8 	.word	0x080064f8
 80043ac:	08006518 	.word	0x08006518
 80043b0:	080064d8 	.word	0x080064d8

080043b4 <quorem>:
 80043b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043b8:	6903      	ldr	r3, [r0, #16]
 80043ba:	690c      	ldr	r4, [r1, #16]
 80043bc:	4607      	mov	r7, r0
 80043be:	42a3      	cmp	r3, r4
 80043c0:	f2c0 8083 	blt.w	80044ca <quorem+0x116>
 80043c4:	3c01      	subs	r4, #1
 80043c6:	f100 0514 	add.w	r5, r0, #20
 80043ca:	f101 0814 	add.w	r8, r1, #20
 80043ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80043d2:	9301      	str	r3, [sp, #4]
 80043d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80043d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80043dc:	3301      	adds	r3, #1
 80043de:	429a      	cmp	r2, r3
 80043e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80043e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80043e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80043ec:	d332      	bcc.n	8004454 <quorem+0xa0>
 80043ee:	f04f 0e00 	mov.w	lr, #0
 80043f2:	4640      	mov	r0, r8
 80043f4:	46ac      	mov	ip, r5
 80043f6:	46f2      	mov	sl, lr
 80043f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80043fc:	b293      	uxth	r3, r2
 80043fe:	fb06 e303 	mla	r3, r6, r3, lr
 8004402:	0c12      	lsrs	r2, r2, #16
 8004404:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004408:	fb06 e202 	mla	r2, r6, r2, lr
 800440c:	b29b      	uxth	r3, r3
 800440e:	ebaa 0303 	sub.w	r3, sl, r3
 8004412:	f8dc a000 	ldr.w	sl, [ip]
 8004416:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800441a:	fa1f fa8a 	uxth.w	sl, sl
 800441e:	4453      	add	r3, sl
 8004420:	fa1f fa82 	uxth.w	sl, r2
 8004424:	f8dc 2000 	ldr.w	r2, [ip]
 8004428:	4581      	cmp	r9, r0
 800442a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800442e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004432:	b29b      	uxth	r3, r3
 8004434:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004438:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800443c:	f84c 3b04 	str.w	r3, [ip], #4
 8004440:	d2da      	bcs.n	80043f8 <quorem+0x44>
 8004442:	f855 300b 	ldr.w	r3, [r5, fp]
 8004446:	b92b      	cbnz	r3, 8004454 <quorem+0xa0>
 8004448:	9b01      	ldr	r3, [sp, #4]
 800444a:	3b04      	subs	r3, #4
 800444c:	429d      	cmp	r5, r3
 800444e:	461a      	mov	r2, r3
 8004450:	d32f      	bcc.n	80044b2 <quorem+0xfe>
 8004452:	613c      	str	r4, [r7, #16]
 8004454:	4638      	mov	r0, r7
 8004456:	f001 fadd 	bl	8005a14 <__mcmp>
 800445a:	2800      	cmp	r0, #0
 800445c:	db25      	blt.n	80044aa <quorem+0xf6>
 800445e:	4628      	mov	r0, r5
 8004460:	f04f 0c00 	mov.w	ip, #0
 8004464:	3601      	adds	r6, #1
 8004466:	f858 1b04 	ldr.w	r1, [r8], #4
 800446a:	f8d0 e000 	ldr.w	lr, [r0]
 800446e:	b28b      	uxth	r3, r1
 8004470:	ebac 0303 	sub.w	r3, ip, r3
 8004474:	fa1f f28e 	uxth.w	r2, lr
 8004478:	4413      	add	r3, r2
 800447a:	0c0a      	lsrs	r2, r1, #16
 800447c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004480:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004484:	b29b      	uxth	r3, r3
 8004486:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800448a:	45c1      	cmp	r9, r8
 800448c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004490:	f840 3b04 	str.w	r3, [r0], #4
 8004494:	d2e7      	bcs.n	8004466 <quorem+0xb2>
 8004496:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800449a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800449e:	b922      	cbnz	r2, 80044aa <quorem+0xf6>
 80044a0:	3b04      	subs	r3, #4
 80044a2:	429d      	cmp	r5, r3
 80044a4:	461a      	mov	r2, r3
 80044a6:	d30a      	bcc.n	80044be <quorem+0x10a>
 80044a8:	613c      	str	r4, [r7, #16]
 80044aa:	4630      	mov	r0, r6
 80044ac:	b003      	add	sp, #12
 80044ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044b2:	6812      	ldr	r2, [r2, #0]
 80044b4:	3b04      	subs	r3, #4
 80044b6:	2a00      	cmp	r2, #0
 80044b8:	d1cb      	bne.n	8004452 <quorem+0x9e>
 80044ba:	3c01      	subs	r4, #1
 80044bc:	e7c6      	b.n	800444c <quorem+0x98>
 80044be:	6812      	ldr	r2, [r2, #0]
 80044c0:	3b04      	subs	r3, #4
 80044c2:	2a00      	cmp	r2, #0
 80044c4:	d1f0      	bne.n	80044a8 <quorem+0xf4>
 80044c6:	3c01      	subs	r4, #1
 80044c8:	e7eb      	b.n	80044a2 <quorem+0xee>
 80044ca:	2000      	movs	r0, #0
 80044cc:	e7ee      	b.n	80044ac <quorem+0xf8>
	...

080044d0 <_dtoa_r>:
 80044d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d4:	4616      	mov	r6, r2
 80044d6:	461f      	mov	r7, r3
 80044d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80044da:	b099      	sub	sp, #100	; 0x64
 80044dc:	4605      	mov	r5, r0
 80044de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80044e2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80044e6:	b974      	cbnz	r4, 8004506 <_dtoa_r+0x36>
 80044e8:	2010      	movs	r0, #16
 80044ea:	f001 f803 	bl	80054f4 <malloc>
 80044ee:	4602      	mov	r2, r0
 80044f0:	6268      	str	r0, [r5, #36]	; 0x24
 80044f2:	b920      	cbnz	r0, 80044fe <_dtoa_r+0x2e>
 80044f4:	21ea      	movs	r1, #234	; 0xea
 80044f6:	4bae      	ldr	r3, [pc, #696]	; (80047b0 <_dtoa_r+0x2e0>)
 80044f8:	48ae      	ldr	r0, [pc, #696]	; (80047b4 <_dtoa_r+0x2e4>)
 80044fa:	f001 fe05 	bl	8006108 <__assert_func>
 80044fe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004502:	6004      	str	r4, [r0, #0]
 8004504:	60c4      	str	r4, [r0, #12]
 8004506:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004508:	6819      	ldr	r1, [r3, #0]
 800450a:	b151      	cbz	r1, 8004522 <_dtoa_r+0x52>
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	2301      	movs	r3, #1
 8004510:	4093      	lsls	r3, r2
 8004512:	604a      	str	r2, [r1, #4]
 8004514:	608b      	str	r3, [r1, #8]
 8004516:	4628      	mov	r0, r5
 8004518:	f001 f842 	bl	80055a0 <_Bfree>
 800451c:	2200      	movs	r2, #0
 800451e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	1e3b      	subs	r3, r7, #0
 8004524:	bfaf      	iteee	ge
 8004526:	2300      	movge	r3, #0
 8004528:	2201      	movlt	r2, #1
 800452a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800452e:	9305      	strlt	r3, [sp, #20]
 8004530:	bfa8      	it	ge
 8004532:	f8c8 3000 	strge.w	r3, [r8]
 8004536:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800453a:	4b9f      	ldr	r3, [pc, #636]	; (80047b8 <_dtoa_r+0x2e8>)
 800453c:	bfb8      	it	lt
 800453e:	f8c8 2000 	strlt.w	r2, [r8]
 8004542:	ea33 0309 	bics.w	r3, r3, r9
 8004546:	d119      	bne.n	800457c <_dtoa_r+0xac>
 8004548:	f242 730f 	movw	r3, #9999	; 0x270f
 800454c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004554:	4333      	orrs	r3, r6
 8004556:	f000 8580 	beq.w	800505a <_dtoa_r+0xb8a>
 800455a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800455c:	b953      	cbnz	r3, 8004574 <_dtoa_r+0xa4>
 800455e:	4b97      	ldr	r3, [pc, #604]	; (80047bc <_dtoa_r+0x2ec>)
 8004560:	e022      	b.n	80045a8 <_dtoa_r+0xd8>
 8004562:	4b97      	ldr	r3, [pc, #604]	; (80047c0 <_dtoa_r+0x2f0>)
 8004564:	9308      	str	r3, [sp, #32]
 8004566:	3308      	adds	r3, #8
 8004568:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800456a:	6013      	str	r3, [r2, #0]
 800456c:	9808      	ldr	r0, [sp, #32]
 800456e:	b019      	add	sp, #100	; 0x64
 8004570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004574:	4b91      	ldr	r3, [pc, #580]	; (80047bc <_dtoa_r+0x2ec>)
 8004576:	9308      	str	r3, [sp, #32]
 8004578:	3303      	adds	r3, #3
 800457a:	e7f5      	b.n	8004568 <_dtoa_r+0x98>
 800457c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004580:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004584:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004588:	2200      	movs	r2, #0
 800458a:	2300      	movs	r3, #0
 800458c:	f7fc fa78 	bl	8000a80 <__aeabi_dcmpeq>
 8004590:	4680      	mov	r8, r0
 8004592:	b158      	cbz	r0, 80045ac <_dtoa_r+0xdc>
 8004594:	2301      	movs	r3, #1
 8004596:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 8559 	beq.w	8005054 <_dtoa_r+0xb84>
 80045a2:	4888      	ldr	r0, [pc, #544]	; (80047c4 <_dtoa_r+0x2f4>)
 80045a4:	6018      	str	r0, [r3, #0]
 80045a6:	1e43      	subs	r3, r0, #1
 80045a8:	9308      	str	r3, [sp, #32]
 80045aa:	e7df      	b.n	800456c <_dtoa_r+0x9c>
 80045ac:	ab16      	add	r3, sp, #88	; 0x58
 80045ae:	9301      	str	r3, [sp, #4]
 80045b0:	ab17      	add	r3, sp, #92	; 0x5c
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	4628      	mov	r0, r5
 80045b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80045ba:	f001 fad7 	bl	8005b6c <__d2b>
 80045be:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80045c2:	4682      	mov	sl, r0
 80045c4:	2c00      	cmp	r4, #0
 80045c6:	d07e      	beq.n	80046c6 <_dtoa_r+0x1f6>
 80045c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80045cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045ce:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80045d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045d6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80045da:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80045de:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80045e2:	2200      	movs	r2, #0
 80045e4:	4b78      	ldr	r3, [pc, #480]	; (80047c8 <_dtoa_r+0x2f8>)
 80045e6:	f7fb fe2b 	bl	8000240 <__aeabi_dsub>
 80045ea:	a36b      	add	r3, pc, #428	; (adr r3, 8004798 <_dtoa_r+0x2c8>)
 80045ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f0:	f7fb ffde 	bl	80005b0 <__aeabi_dmul>
 80045f4:	a36a      	add	r3, pc, #424	; (adr r3, 80047a0 <_dtoa_r+0x2d0>)
 80045f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fa:	f7fb fe23 	bl	8000244 <__adddf3>
 80045fe:	4606      	mov	r6, r0
 8004600:	4620      	mov	r0, r4
 8004602:	460f      	mov	r7, r1
 8004604:	f7fb ff6a 	bl	80004dc <__aeabi_i2d>
 8004608:	a367      	add	r3, pc, #412	; (adr r3, 80047a8 <_dtoa_r+0x2d8>)
 800460a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460e:	f7fb ffcf 	bl	80005b0 <__aeabi_dmul>
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	4630      	mov	r0, r6
 8004618:	4639      	mov	r1, r7
 800461a:	f7fb fe13 	bl	8000244 <__adddf3>
 800461e:	4606      	mov	r6, r0
 8004620:	460f      	mov	r7, r1
 8004622:	f7fc fa75 	bl	8000b10 <__aeabi_d2iz>
 8004626:	2200      	movs	r2, #0
 8004628:	4681      	mov	r9, r0
 800462a:	2300      	movs	r3, #0
 800462c:	4630      	mov	r0, r6
 800462e:	4639      	mov	r1, r7
 8004630:	f7fc fa30 	bl	8000a94 <__aeabi_dcmplt>
 8004634:	b148      	cbz	r0, 800464a <_dtoa_r+0x17a>
 8004636:	4648      	mov	r0, r9
 8004638:	f7fb ff50 	bl	80004dc <__aeabi_i2d>
 800463c:	4632      	mov	r2, r6
 800463e:	463b      	mov	r3, r7
 8004640:	f7fc fa1e 	bl	8000a80 <__aeabi_dcmpeq>
 8004644:	b908      	cbnz	r0, 800464a <_dtoa_r+0x17a>
 8004646:	f109 39ff 	add.w	r9, r9, #4294967295
 800464a:	f1b9 0f16 	cmp.w	r9, #22
 800464e:	d857      	bhi.n	8004700 <_dtoa_r+0x230>
 8004650:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004654:	4b5d      	ldr	r3, [pc, #372]	; (80047cc <_dtoa_r+0x2fc>)
 8004656:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800465a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465e:	f7fc fa19 	bl	8000a94 <__aeabi_dcmplt>
 8004662:	2800      	cmp	r0, #0
 8004664:	d04e      	beq.n	8004704 <_dtoa_r+0x234>
 8004666:	2300      	movs	r3, #0
 8004668:	f109 39ff 	add.w	r9, r9, #4294967295
 800466c:	930f      	str	r3, [sp, #60]	; 0x3c
 800466e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004670:	1b1c      	subs	r4, r3, r4
 8004672:	1e63      	subs	r3, r4, #1
 8004674:	9309      	str	r3, [sp, #36]	; 0x24
 8004676:	bf49      	itett	mi
 8004678:	f1c4 0301 	rsbmi	r3, r4, #1
 800467c:	2300      	movpl	r3, #0
 800467e:	9306      	strmi	r3, [sp, #24]
 8004680:	2300      	movmi	r3, #0
 8004682:	bf54      	ite	pl
 8004684:	9306      	strpl	r3, [sp, #24]
 8004686:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004688:	f1b9 0f00 	cmp.w	r9, #0
 800468c:	db3c      	blt.n	8004708 <_dtoa_r+0x238>
 800468e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004690:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004694:	444b      	add	r3, r9
 8004696:	9309      	str	r3, [sp, #36]	; 0x24
 8004698:	2300      	movs	r3, #0
 800469a:	930a      	str	r3, [sp, #40]	; 0x28
 800469c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800469e:	2b09      	cmp	r3, #9
 80046a0:	d86c      	bhi.n	800477c <_dtoa_r+0x2ac>
 80046a2:	2b05      	cmp	r3, #5
 80046a4:	bfc4      	itt	gt
 80046a6:	3b04      	subgt	r3, #4
 80046a8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80046aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80046ac:	bfc8      	it	gt
 80046ae:	2400      	movgt	r4, #0
 80046b0:	f1a3 0302 	sub.w	r3, r3, #2
 80046b4:	bfd8      	it	le
 80046b6:	2401      	movle	r4, #1
 80046b8:	2b03      	cmp	r3, #3
 80046ba:	f200 808b 	bhi.w	80047d4 <_dtoa_r+0x304>
 80046be:	e8df f003 	tbb	[pc, r3]
 80046c2:	4f2d      	.short	0x4f2d
 80046c4:	5b4d      	.short	0x5b4d
 80046c6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80046ca:	441c      	add	r4, r3
 80046cc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80046d0:	2b20      	cmp	r3, #32
 80046d2:	bfc3      	ittte	gt
 80046d4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80046d8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80046dc:	fa09 f303 	lslgt.w	r3, r9, r3
 80046e0:	f1c3 0320 	rsble	r3, r3, #32
 80046e4:	bfc6      	itte	gt
 80046e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80046ea:	4318      	orrgt	r0, r3
 80046ec:	fa06 f003 	lslle.w	r0, r6, r3
 80046f0:	f7fb fee4 	bl	80004bc <__aeabi_ui2d>
 80046f4:	2301      	movs	r3, #1
 80046f6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80046fa:	3c01      	subs	r4, #1
 80046fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80046fe:	e770      	b.n	80045e2 <_dtoa_r+0x112>
 8004700:	2301      	movs	r3, #1
 8004702:	e7b3      	b.n	800466c <_dtoa_r+0x19c>
 8004704:	900f      	str	r0, [sp, #60]	; 0x3c
 8004706:	e7b2      	b.n	800466e <_dtoa_r+0x19e>
 8004708:	9b06      	ldr	r3, [sp, #24]
 800470a:	eba3 0309 	sub.w	r3, r3, r9
 800470e:	9306      	str	r3, [sp, #24]
 8004710:	f1c9 0300 	rsb	r3, r9, #0
 8004714:	930a      	str	r3, [sp, #40]	; 0x28
 8004716:	2300      	movs	r3, #0
 8004718:	930e      	str	r3, [sp, #56]	; 0x38
 800471a:	e7bf      	b.n	800469c <_dtoa_r+0x1cc>
 800471c:	2300      	movs	r3, #0
 800471e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004720:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004722:	2b00      	cmp	r3, #0
 8004724:	dc59      	bgt.n	80047da <_dtoa_r+0x30a>
 8004726:	f04f 0b01 	mov.w	fp, #1
 800472a:	465b      	mov	r3, fp
 800472c:	f8cd b008 	str.w	fp, [sp, #8]
 8004730:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004734:	2200      	movs	r2, #0
 8004736:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004738:	6042      	str	r2, [r0, #4]
 800473a:	2204      	movs	r2, #4
 800473c:	f102 0614 	add.w	r6, r2, #20
 8004740:	429e      	cmp	r6, r3
 8004742:	6841      	ldr	r1, [r0, #4]
 8004744:	d94f      	bls.n	80047e6 <_dtoa_r+0x316>
 8004746:	4628      	mov	r0, r5
 8004748:	f000 feea 	bl	8005520 <_Balloc>
 800474c:	9008      	str	r0, [sp, #32]
 800474e:	2800      	cmp	r0, #0
 8004750:	d14d      	bne.n	80047ee <_dtoa_r+0x31e>
 8004752:	4602      	mov	r2, r0
 8004754:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004758:	4b1d      	ldr	r3, [pc, #116]	; (80047d0 <_dtoa_r+0x300>)
 800475a:	e6cd      	b.n	80044f8 <_dtoa_r+0x28>
 800475c:	2301      	movs	r3, #1
 800475e:	e7de      	b.n	800471e <_dtoa_r+0x24e>
 8004760:	2300      	movs	r3, #0
 8004762:	930b      	str	r3, [sp, #44]	; 0x2c
 8004764:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004766:	eb09 0b03 	add.w	fp, r9, r3
 800476a:	f10b 0301 	add.w	r3, fp, #1
 800476e:	2b01      	cmp	r3, #1
 8004770:	9302      	str	r3, [sp, #8]
 8004772:	bfb8      	it	lt
 8004774:	2301      	movlt	r3, #1
 8004776:	e7dd      	b.n	8004734 <_dtoa_r+0x264>
 8004778:	2301      	movs	r3, #1
 800477a:	e7f2      	b.n	8004762 <_dtoa_r+0x292>
 800477c:	2401      	movs	r4, #1
 800477e:	2300      	movs	r3, #0
 8004780:	940b      	str	r4, [sp, #44]	; 0x2c
 8004782:	9322      	str	r3, [sp, #136]	; 0x88
 8004784:	f04f 3bff 	mov.w	fp, #4294967295
 8004788:	2200      	movs	r2, #0
 800478a:	2312      	movs	r3, #18
 800478c:	f8cd b008 	str.w	fp, [sp, #8]
 8004790:	9223      	str	r2, [sp, #140]	; 0x8c
 8004792:	e7cf      	b.n	8004734 <_dtoa_r+0x264>
 8004794:	f3af 8000 	nop.w
 8004798:	636f4361 	.word	0x636f4361
 800479c:	3fd287a7 	.word	0x3fd287a7
 80047a0:	8b60c8b3 	.word	0x8b60c8b3
 80047a4:	3fc68a28 	.word	0x3fc68a28
 80047a8:	509f79fb 	.word	0x509f79fb
 80047ac:	3fd34413 	.word	0x3fd34413
 80047b0:	08006451 	.word	0x08006451
 80047b4:	08006468 	.word	0x08006468
 80047b8:	7ff00000 	.word	0x7ff00000
 80047bc:	0800644d 	.word	0x0800644d
 80047c0:	08006444 	.word	0x08006444
 80047c4:	08006421 	.word	0x08006421
 80047c8:	3ff80000 	.word	0x3ff80000
 80047cc:	080065c0 	.word	0x080065c0
 80047d0:	080064c7 	.word	0x080064c7
 80047d4:	2301      	movs	r3, #1
 80047d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80047d8:	e7d4      	b.n	8004784 <_dtoa_r+0x2b4>
 80047da:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80047de:	465b      	mov	r3, fp
 80047e0:	f8cd b008 	str.w	fp, [sp, #8]
 80047e4:	e7a6      	b.n	8004734 <_dtoa_r+0x264>
 80047e6:	3101      	adds	r1, #1
 80047e8:	6041      	str	r1, [r0, #4]
 80047ea:	0052      	lsls	r2, r2, #1
 80047ec:	e7a6      	b.n	800473c <_dtoa_r+0x26c>
 80047ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80047f0:	9a08      	ldr	r2, [sp, #32]
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	9b02      	ldr	r3, [sp, #8]
 80047f6:	2b0e      	cmp	r3, #14
 80047f8:	f200 80a8 	bhi.w	800494c <_dtoa_r+0x47c>
 80047fc:	2c00      	cmp	r4, #0
 80047fe:	f000 80a5 	beq.w	800494c <_dtoa_r+0x47c>
 8004802:	f1b9 0f00 	cmp.w	r9, #0
 8004806:	dd34      	ble.n	8004872 <_dtoa_r+0x3a2>
 8004808:	4a9a      	ldr	r2, [pc, #616]	; (8004a74 <_dtoa_r+0x5a4>)
 800480a:	f009 030f 	and.w	r3, r9, #15
 800480e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004812:	f419 7f80 	tst.w	r9, #256	; 0x100
 8004816:	e9d3 3400 	ldrd	r3, r4, [r3]
 800481a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800481e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8004822:	d016      	beq.n	8004852 <_dtoa_r+0x382>
 8004824:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004828:	4b93      	ldr	r3, [pc, #588]	; (8004a78 <_dtoa_r+0x5a8>)
 800482a:	2703      	movs	r7, #3
 800482c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004830:	f7fb ffe8 	bl	8000804 <__aeabi_ddiv>
 8004834:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004838:	f004 040f 	and.w	r4, r4, #15
 800483c:	4e8e      	ldr	r6, [pc, #568]	; (8004a78 <_dtoa_r+0x5a8>)
 800483e:	b954      	cbnz	r4, 8004856 <_dtoa_r+0x386>
 8004840:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004844:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004848:	f7fb ffdc 	bl	8000804 <__aeabi_ddiv>
 800484c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004850:	e029      	b.n	80048a6 <_dtoa_r+0x3d6>
 8004852:	2702      	movs	r7, #2
 8004854:	e7f2      	b.n	800483c <_dtoa_r+0x36c>
 8004856:	07e1      	lsls	r1, r4, #31
 8004858:	d508      	bpl.n	800486c <_dtoa_r+0x39c>
 800485a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800485e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004862:	f7fb fea5 	bl	80005b0 <__aeabi_dmul>
 8004866:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800486a:	3701      	adds	r7, #1
 800486c:	1064      	asrs	r4, r4, #1
 800486e:	3608      	adds	r6, #8
 8004870:	e7e5      	b.n	800483e <_dtoa_r+0x36e>
 8004872:	f000 80a5 	beq.w	80049c0 <_dtoa_r+0x4f0>
 8004876:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800487a:	f1c9 0400 	rsb	r4, r9, #0
 800487e:	4b7d      	ldr	r3, [pc, #500]	; (8004a74 <_dtoa_r+0x5a4>)
 8004880:	f004 020f 	and.w	r2, r4, #15
 8004884:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488c:	f7fb fe90 	bl	80005b0 <__aeabi_dmul>
 8004890:	2702      	movs	r7, #2
 8004892:	2300      	movs	r3, #0
 8004894:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004898:	4e77      	ldr	r6, [pc, #476]	; (8004a78 <_dtoa_r+0x5a8>)
 800489a:	1124      	asrs	r4, r4, #4
 800489c:	2c00      	cmp	r4, #0
 800489e:	f040 8084 	bne.w	80049aa <_dtoa_r+0x4da>
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1d2      	bne.n	800484c <_dtoa_r+0x37c>
 80048a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 808b 	beq.w	80049c4 <_dtoa_r+0x4f4>
 80048ae:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80048b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80048b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80048ba:	2200      	movs	r2, #0
 80048bc:	4b6f      	ldr	r3, [pc, #444]	; (8004a7c <_dtoa_r+0x5ac>)
 80048be:	f7fc f8e9 	bl	8000a94 <__aeabi_dcmplt>
 80048c2:	2800      	cmp	r0, #0
 80048c4:	d07e      	beq.n	80049c4 <_dtoa_r+0x4f4>
 80048c6:	9b02      	ldr	r3, [sp, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d07b      	beq.n	80049c4 <_dtoa_r+0x4f4>
 80048cc:	f1bb 0f00 	cmp.w	fp, #0
 80048d0:	dd38      	ble.n	8004944 <_dtoa_r+0x474>
 80048d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80048d6:	2200      	movs	r2, #0
 80048d8:	4b69      	ldr	r3, [pc, #420]	; (8004a80 <_dtoa_r+0x5b0>)
 80048da:	f7fb fe69 	bl	80005b0 <__aeabi_dmul>
 80048de:	465c      	mov	r4, fp
 80048e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80048e4:	f109 38ff 	add.w	r8, r9, #4294967295
 80048e8:	3701      	adds	r7, #1
 80048ea:	4638      	mov	r0, r7
 80048ec:	f7fb fdf6 	bl	80004dc <__aeabi_i2d>
 80048f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048f4:	f7fb fe5c 	bl	80005b0 <__aeabi_dmul>
 80048f8:	2200      	movs	r2, #0
 80048fa:	4b62      	ldr	r3, [pc, #392]	; (8004a84 <_dtoa_r+0x5b4>)
 80048fc:	f7fb fca2 	bl	8000244 <__adddf3>
 8004900:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004904:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004908:	9611      	str	r6, [sp, #68]	; 0x44
 800490a:	2c00      	cmp	r4, #0
 800490c:	d15d      	bne.n	80049ca <_dtoa_r+0x4fa>
 800490e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004912:	2200      	movs	r2, #0
 8004914:	4b5c      	ldr	r3, [pc, #368]	; (8004a88 <_dtoa_r+0x5b8>)
 8004916:	f7fb fc93 	bl	8000240 <__aeabi_dsub>
 800491a:	4602      	mov	r2, r0
 800491c:	460b      	mov	r3, r1
 800491e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004922:	4633      	mov	r3, r6
 8004924:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004926:	f7fc f8d3 	bl	8000ad0 <__aeabi_dcmpgt>
 800492a:	2800      	cmp	r0, #0
 800492c:	f040 829e 	bne.w	8004e6c <_dtoa_r+0x99c>
 8004930:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004934:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004936:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800493a:	f7fc f8ab 	bl	8000a94 <__aeabi_dcmplt>
 800493e:	2800      	cmp	r0, #0
 8004940:	f040 8292 	bne.w	8004e68 <_dtoa_r+0x998>
 8004944:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004948:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800494c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800494e:	2b00      	cmp	r3, #0
 8004950:	f2c0 8153 	blt.w	8004bfa <_dtoa_r+0x72a>
 8004954:	f1b9 0f0e 	cmp.w	r9, #14
 8004958:	f300 814f 	bgt.w	8004bfa <_dtoa_r+0x72a>
 800495c:	4b45      	ldr	r3, [pc, #276]	; (8004a74 <_dtoa_r+0x5a4>)
 800495e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004962:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004966:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800496a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800496c:	2b00      	cmp	r3, #0
 800496e:	f280 80db 	bge.w	8004b28 <_dtoa_r+0x658>
 8004972:	9b02      	ldr	r3, [sp, #8]
 8004974:	2b00      	cmp	r3, #0
 8004976:	f300 80d7 	bgt.w	8004b28 <_dtoa_r+0x658>
 800497a:	f040 8274 	bne.w	8004e66 <_dtoa_r+0x996>
 800497e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004982:	2200      	movs	r2, #0
 8004984:	4b40      	ldr	r3, [pc, #256]	; (8004a88 <_dtoa_r+0x5b8>)
 8004986:	f7fb fe13 	bl	80005b0 <__aeabi_dmul>
 800498a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800498e:	f7fc f895 	bl	8000abc <__aeabi_dcmpge>
 8004992:	9c02      	ldr	r4, [sp, #8]
 8004994:	4626      	mov	r6, r4
 8004996:	2800      	cmp	r0, #0
 8004998:	f040 824a 	bne.w	8004e30 <_dtoa_r+0x960>
 800499c:	2331      	movs	r3, #49	; 0x31
 800499e:	9f08      	ldr	r7, [sp, #32]
 80049a0:	f109 0901 	add.w	r9, r9, #1
 80049a4:	f807 3b01 	strb.w	r3, [r7], #1
 80049a8:	e246      	b.n	8004e38 <_dtoa_r+0x968>
 80049aa:	07e2      	lsls	r2, r4, #31
 80049ac:	d505      	bpl.n	80049ba <_dtoa_r+0x4ea>
 80049ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80049b2:	f7fb fdfd 	bl	80005b0 <__aeabi_dmul>
 80049b6:	2301      	movs	r3, #1
 80049b8:	3701      	adds	r7, #1
 80049ba:	1064      	asrs	r4, r4, #1
 80049bc:	3608      	adds	r6, #8
 80049be:	e76d      	b.n	800489c <_dtoa_r+0x3cc>
 80049c0:	2702      	movs	r7, #2
 80049c2:	e770      	b.n	80048a6 <_dtoa_r+0x3d6>
 80049c4:	46c8      	mov	r8, r9
 80049c6:	9c02      	ldr	r4, [sp, #8]
 80049c8:	e78f      	b.n	80048ea <_dtoa_r+0x41a>
 80049ca:	9908      	ldr	r1, [sp, #32]
 80049cc:	4b29      	ldr	r3, [pc, #164]	; (8004a74 <_dtoa_r+0x5a4>)
 80049ce:	4421      	add	r1, r4
 80049d0:	9112      	str	r1, [sp, #72]	; 0x48
 80049d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80049d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80049d8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80049dc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80049e0:	2900      	cmp	r1, #0
 80049e2:	d055      	beq.n	8004a90 <_dtoa_r+0x5c0>
 80049e4:	2000      	movs	r0, #0
 80049e6:	4929      	ldr	r1, [pc, #164]	; (8004a8c <_dtoa_r+0x5bc>)
 80049e8:	f7fb ff0c 	bl	8000804 <__aeabi_ddiv>
 80049ec:	463b      	mov	r3, r7
 80049ee:	4632      	mov	r2, r6
 80049f0:	f7fb fc26 	bl	8000240 <__aeabi_dsub>
 80049f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80049f8:	9f08      	ldr	r7, [sp, #32]
 80049fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049fe:	f7fc f887 	bl	8000b10 <__aeabi_d2iz>
 8004a02:	4604      	mov	r4, r0
 8004a04:	f7fb fd6a 	bl	80004dc <__aeabi_i2d>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a10:	f7fb fc16 	bl	8000240 <__aeabi_dsub>
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	3430      	adds	r4, #48	; 0x30
 8004a1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004a22:	f807 4b01 	strb.w	r4, [r7], #1
 8004a26:	f7fc f835 	bl	8000a94 <__aeabi_dcmplt>
 8004a2a:	2800      	cmp	r0, #0
 8004a2c:	d174      	bne.n	8004b18 <_dtoa_r+0x648>
 8004a2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a32:	2000      	movs	r0, #0
 8004a34:	4911      	ldr	r1, [pc, #68]	; (8004a7c <_dtoa_r+0x5ac>)
 8004a36:	f7fb fc03 	bl	8000240 <__aeabi_dsub>
 8004a3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004a3e:	f7fc f829 	bl	8000a94 <__aeabi_dcmplt>
 8004a42:	2800      	cmp	r0, #0
 8004a44:	f040 80b6 	bne.w	8004bb4 <_dtoa_r+0x6e4>
 8004a48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a4a:	429f      	cmp	r7, r3
 8004a4c:	f43f af7a 	beq.w	8004944 <_dtoa_r+0x474>
 8004a50:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004a54:	2200      	movs	r2, #0
 8004a56:	4b0a      	ldr	r3, [pc, #40]	; (8004a80 <_dtoa_r+0x5b0>)
 8004a58:	f7fb fdaa 	bl	80005b0 <__aeabi_dmul>
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004a62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a66:	4b06      	ldr	r3, [pc, #24]	; (8004a80 <_dtoa_r+0x5b0>)
 8004a68:	f7fb fda2 	bl	80005b0 <__aeabi_dmul>
 8004a6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a70:	e7c3      	b.n	80049fa <_dtoa_r+0x52a>
 8004a72:	bf00      	nop
 8004a74:	080065c0 	.word	0x080065c0
 8004a78:	08006598 	.word	0x08006598
 8004a7c:	3ff00000 	.word	0x3ff00000
 8004a80:	40240000 	.word	0x40240000
 8004a84:	401c0000 	.word	0x401c0000
 8004a88:	40140000 	.word	0x40140000
 8004a8c:	3fe00000 	.word	0x3fe00000
 8004a90:	4630      	mov	r0, r6
 8004a92:	4639      	mov	r1, r7
 8004a94:	f7fb fd8c 	bl	80005b0 <__aeabi_dmul>
 8004a98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a9a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004a9e:	9c08      	ldr	r4, [sp, #32]
 8004aa0:	9314      	str	r3, [sp, #80]	; 0x50
 8004aa2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004aa6:	f7fc f833 	bl	8000b10 <__aeabi_d2iz>
 8004aaa:	9015      	str	r0, [sp, #84]	; 0x54
 8004aac:	f7fb fd16 	bl	80004dc <__aeabi_i2d>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ab8:	f7fb fbc2 	bl	8000240 <__aeabi_dsub>
 8004abc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004abe:	4606      	mov	r6, r0
 8004ac0:	3330      	adds	r3, #48	; 0x30
 8004ac2:	f804 3b01 	strb.w	r3, [r4], #1
 8004ac6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004ac8:	460f      	mov	r7, r1
 8004aca:	429c      	cmp	r4, r3
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	d124      	bne.n	8004b1c <_dtoa_r+0x64c>
 8004ad2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ad6:	4bb3      	ldr	r3, [pc, #716]	; (8004da4 <_dtoa_r+0x8d4>)
 8004ad8:	f7fb fbb4 	bl	8000244 <__adddf3>
 8004adc:	4602      	mov	r2, r0
 8004ade:	460b      	mov	r3, r1
 8004ae0:	4630      	mov	r0, r6
 8004ae2:	4639      	mov	r1, r7
 8004ae4:	f7fb fff4 	bl	8000ad0 <__aeabi_dcmpgt>
 8004ae8:	2800      	cmp	r0, #0
 8004aea:	d162      	bne.n	8004bb2 <_dtoa_r+0x6e2>
 8004aec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004af0:	2000      	movs	r0, #0
 8004af2:	49ac      	ldr	r1, [pc, #688]	; (8004da4 <_dtoa_r+0x8d4>)
 8004af4:	f7fb fba4 	bl	8000240 <__aeabi_dsub>
 8004af8:	4602      	mov	r2, r0
 8004afa:	460b      	mov	r3, r1
 8004afc:	4630      	mov	r0, r6
 8004afe:	4639      	mov	r1, r7
 8004b00:	f7fb ffc8 	bl	8000a94 <__aeabi_dcmplt>
 8004b04:	2800      	cmp	r0, #0
 8004b06:	f43f af1d 	beq.w	8004944 <_dtoa_r+0x474>
 8004b0a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004b0c:	1e7b      	subs	r3, r7, #1
 8004b0e:	9314      	str	r3, [sp, #80]	; 0x50
 8004b10:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004b14:	2b30      	cmp	r3, #48	; 0x30
 8004b16:	d0f8      	beq.n	8004b0a <_dtoa_r+0x63a>
 8004b18:	46c1      	mov	r9, r8
 8004b1a:	e03a      	b.n	8004b92 <_dtoa_r+0x6c2>
 8004b1c:	4ba2      	ldr	r3, [pc, #648]	; (8004da8 <_dtoa_r+0x8d8>)
 8004b1e:	f7fb fd47 	bl	80005b0 <__aeabi_dmul>
 8004b22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b26:	e7bc      	b.n	8004aa2 <_dtoa_r+0x5d2>
 8004b28:	9f08      	ldr	r7, [sp, #32]
 8004b2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b32:	f7fb fe67 	bl	8000804 <__aeabi_ddiv>
 8004b36:	f7fb ffeb 	bl	8000b10 <__aeabi_d2iz>
 8004b3a:	4604      	mov	r4, r0
 8004b3c:	f7fb fcce 	bl	80004dc <__aeabi_i2d>
 8004b40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b44:	f7fb fd34 	bl	80005b0 <__aeabi_dmul>
 8004b48:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	4602      	mov	r2, r0
 8004b50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b54:	f7fb fb74 	bl	8000240 <__aeabi_dsub>
 8004b58:	f807 6b01 	strb.w	r6, [r7], #1
 8004b5c:	9e08      	ldr	r6, [sp, #32]
 8004b5e:	9b02      	ldr	r3, [sp, #8]
 8004b60:	1bbe      	subs	r6, r7, r6
 8004b62:	42b3      	cmp	r3, r6
 8004b64:	d13a      	bne.n	8004bdc <_dtoa_r+0x70c>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	f7fb fb6b 	bl	8000244 <__adddf3>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b7a:	f7fb ffa9 	bl	8000ad0 <__aeabi_dcmpgt>
 8004b7e:	bb58      	cbnz	r0, 8004bd8 <_dtoa_r+0x708>
 8004b80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004b84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b88:	f7fb ff7a 	bl	8000a80 <__aeabi_dcmpeq>
 8004b8c:	b108      	cbz	r0, 8004b92 <_dtoa_r+0x6c2>
 8004b8e:	07e1      	lsls	r1, r4, #31
 8004b90:	d422      	bmi.n	8004bd8 <_dtoa_r+0x708>
 8004b92:	4628      	mov	r0, r5
 8004b94:	4651      	mov	r1, sl
 8004b96:	f000 fd03 	bl	80055a0 <_Bfree>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	703b      	strb	r3, [r7, #0]
 8004b9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004ba0:	f109 0001 	add.w	r0, r9, #1
 8004ba4:	6018      	str	r0, [r3, #0]
 8004ba6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f43f acdf 	beq.w	800456c <_dtoa_r+0x9c>
 8004bae:	601f      	str	r7, [r3, #0]
 8004bb0:	e4dc      	b.n	800456c <_dtoa_r+0x9c>
 8004bb2:	4627      	mov	r7, r4
 8004bb4:	463b      	mov	r3, r7
 8004bb6:	461f      	mov	r7, r3
 8004bb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004bbc:	2a39      	cmp	r2, #57	; 0x39
 8004bbe:	d107      	bne.n	8004bd0 <_dtoa_r+0x700>
 8004bc0:	9a08      	ldr	r2, [sp, #32]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d1f7      	bne.n	8004bb6 <_dtoa_r+0x6e6>
 8004bc6:	2230      	movs	r2, #48	; 0x30
 8004bc8:	9908      	ldr	r1, [sp, #32]
 8004bca:	f108 0801 	add.w	r8, r8, #1
 8004bce:	700a      	strb	r2, [r1, #0]
 8004bd0:	781a      	ldrb	r2, [r3, #0]
 8004bd2:	3201      	adds	r2, #1
 8004bd4:	701a      	strb	r2, [r3, #0]
 8004bd6:	e79f      	b.n	8004b18 <_dtoa_r+0x648>
 8004bd8:	46c8      	mov	r8, r9
 8004bda:	e7eb      	b.n	8004bb4 <_dtoa_r+0x6e4>
 8004bdc:	2200      	movs	r2, #0
 8004bde:	4b72      	ldr	r3, [pc, #456]	; (8004da8 <_dtoa_r+0x8d8>)
 8004be0:	f7fb fce6 	bl	80005b0 <__aeabi_dmul>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004bec:	2200      	movs	r2, #0
 8004bee:	2300      	movs	r3, #0
 8004bf0:	f7fb ff46 	bl	8000a80 <__aeabi_dcmpeq>
 8004bf4:	2800      	cmp	r0, #0
 8004bf6:	d098      	beq.n	8004b2a <_dtoa_r+0x65a>
 8004bf8:	e7cb      	b.n	8004b92 <_dtoa_r+0x6c2>
 8004bfa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004bfc:	2a00      	cmp	r2, #0
 8004bfe:	f000 80cd 	beq.w	8004d9c <_dtoa_r+0x8cc>
 8004c02:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004c04:	2a01      	cmp	r2, #1
 8004c06:	f300 80af 	bgt.w	8004d68 <_dtoa_r+0x898>
 8004c0a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004c0c:	2a00      	cmp	r2, #0
 8004c0e:	f000 80a7 	beq.w	8004d60 <_dtoa_r+0x890>
 8004c12:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004c16:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004c18:	9f06      	ldr	r7, [sp, #24]
 8004c1a:	9a06      	ldr	r2, [sp, #24]
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	441a      	add	r2, r3
 8004c20:	9206      	str	r2, [sp, #24]
 8004c22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c24:	4628      	mov	r0, r5
 8004c26:	441a      	add	r2, r3
 8004c28:	9209      	str	r2, [sp, #36]	; 0x24
 8004c2a:	f000 fd73 	bl	8005714 <__i2b>
 8004c2e:	4606      	mov	r6, r0
 8004c30:	2f00      	cmp	r7, #0
 8004c32:	dd0c      	ble.n	8004c4e <_dtoa_r+0x77e>
 8004c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	dd09      	ble.n	8004c4e <_dtoa_r+0x77e>
 8004c3a:	42bb      	cmp	r3, r7
 8004c3c:	bfa8      	it	ge
 8004c3e:	463b      	movge	r3, r7
 8004c40:	9a06      	ldr	r2, [sp, #24]
 8004c42:	1aff      	subs	r7, r7, r3
 8004c44:	1ad2      	subs	r2, r2, r3
 8004c46:	9206      	str	r2, [sp, #24]
 8004c48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8004c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c50:	b1f3      	cbz	r3, 8004c90 <_dtoa_r+0x7c0>
 8004c52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 80a9 	beq.w	8004dac <_dtoa_r+0x8dc>
 8004c5a:	2c00      	cmp	r4, #0
 8004c5c:	dd10      	ble.n	8004c80 <_dtoa_r+0x7b0>
 8004c5e:	4631      	mov	r1, r6
 8004c60:	4622      	mov	r2, r4
 8004c62:	4628      	mov	r0, r5
 8004c64:	f000 fe10 	bl	8005888 <__pow5mult>
 8004c68:	4652      	mov	r2, sl
 8004c6a:	4601      	mov	r1, r0
 8004c6c:	4606      	mov	r6, r0
 8004c6e:	4628      	mov	r0, r5
 8004c70:	f000 fd66 	bl	8005740 <__multiply>
 8004c74:	4680      	mov	r8, r0
 8004c76:	4651      	mov	r1, sl
 8004c78:	4628      	mov	r0, r5
 8004c7a:	f000 fc91 	bl	80055a0 <_Bfree>
 8004c7e:	46c2      	mov	sl, r8
 8004c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c82:	1b1a      	subs	r2, r3, r4
 8004c84:	d004      	beq.n	8004c90 <_dtoa_r+0x7c0>
 8004c86:	4651      	mov	r1, sl
 8004c88:	4628      	mov	r0, r5
 8004c8a:	f000 fdfd 	bl	8005888 <__pow5mult>
 8004c8e:	4682      	mov	sl, r0
 8004c90:	2101      	movs	r1, #1
 8004c92:	4628      	mov	r0, r5
 8004c94:	f000 fd3e 	bl	8005714 <__i2b>
 8004c98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f340 8087 	ble.w	8004db0 <_dtoa_r+0x8e0>
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	4601      	mov	r1, r0
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	f000 fdee 	bl	8005888 <__pow5mult>
 8004cac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004cae:	4604      	mov	r4, r0
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	f340 8080 	ble.w	8004db6 <_dtoa_r+0x8e6>
 8004cb6:	f04f 0800 	mov.w	r8, #0
 8004cba:	6923      	ldr	r3, [r4, #16]
 8004cbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004cc0:	6918      	ldr	r0, [r3, #16]
 8004cc2:	f000 fcd9 	bl	8005678 <__hi0bits>
 8004cc6:	f1c0 0020 	rsb	r0, r0, #32
 8004cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ccc:	4418      	add	r0, r3
 8004cce:	f010 001f 	ands.w	r0, r0, #31
 8004cd2:	f000 8092 	beq.w	8004dfa <_dtoa_r+0x92a>
 8004cd6:	f1c0 0320 	rsb	r3, r0, #32
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	f340 808a 	ble.w	8004df4 <_dtoa_r+0x924>
 8004ce0:	f1c0 001c 	rsb	r0, r0, #28
 8004ce4:	9b06      	ldr	r3, [sp, #24]
 8004ce6:	4407      	add	r7, r0
 8004ce8:	4403      	add	r3, r0
 8004cea:	9306      	str	r3, [sp, #24]
 8004cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cee:	4403      	add	r3, r0
 8004cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8004cf2:	9b06      	ldr	r3, [sp, #24]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	dd05      	ble.n	8004d04 <_dtoa_r+0x834>
 8004cf8:	4651      	mov	r1, sl
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	f000 fe1d 	bl	800593c <__lshift>
 8004d02:	4682      	mov	sl, r0
 8004d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	dd05      	ble.n	8004d16 <_dtoa_r+0x846>
 8004d0a:	4621      	mov	r1, r4
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	4628      	mov	r0, r5
 8004d10:	f000 fe14 	bl	800593c <__lshift>
 8004d14:	4604      	mov	r4, r0
 8004d16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d070      	beq.n	8004dfe <_dtoa_r+0x92e>
 8004d1c:	4621      	mov	r1, r4
 8004d1e:	4650      	mov	r0, sl
 8004d20:	f000 fe78 	bl	8005a14 <__mcmp>
 8004d24:	2800      	cmp	r0, #0
 8004d26:	da6a      	bge.n	8004dfe <_dtoa_r+0x92e>
 8004d28:	2300      	movs	r3, #0
 8004d2a:	4651      	mov	r1, sl
 8004d2c:	220a      	movs	r2, #10
 8004d2e:	4628      	mov	r0, r5
 8004d30:	f000 fc58 	bl	80055e4 <__multadd>
 8004d34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d36:	4682      	mov	sl, r0
 8004d38:	f109 39ff 	add.w	r9, r9, #4294967295
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 8193 	beq.w	8005068 <_dtoa_r+0xb98>
 8004d42:	4631      	mov	r1, r6
 8004d44:	2300      	movs	r3, #0
 8004d46:	220a      	movs	r2, #10
 8004d48:	4628      	mov	r0, r5
 8004d4a:	f000 fc4b 	bl	80055e4 <__multadd>
 8004d4e:	f1bb 0f00 	cmp.w	fp, #0
 8004d52:	4606      	mov	r6, r0
 8004d54:	f300 8093 	bgt.w	8004e7e <_dtoa_r+0x9ae>
 8004d58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	dc57      	bgt.n	8004e0e <_dtoa_r+0x93e>
 8004d5e:	e08e      	b.n	8004e7e <_dtoa_r+0x9ae>
 8004d60:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004d62:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004d66:	e756      	b.n	8004c16 <_dtoa_r+0x746>
 8004d68:	9b02      	ldr	r3, [sp, #8]
 8004d6a:	1e5c      	subs	r4, r3, #1
 8004d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d6e:	42a3      	cmp	r3, r4
 8004d70:	bfb7      	itett	lt
 8004d72:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004d74:	1b1c      	subge	r4, r3, r4
 8004d76:	1ae2      	sublt	r2, r4, r3
 8004d78:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004d7a:	bfbe      	ittt	lt
 8004d7c:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004d7e:	189b      	addlt	r3, r3, r2
 8004d80:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004d82:	9b02      	ldr	r3, [sp, #8]
 8004d84:	bfb8      	it	lt
 8004d86:	2400      	movlt	r4, #0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	bfbb      	ittet	lt
 8004d8c:	9b06      	ldrlt	r3, [sp, #24]
 8004d8e:	9a02      	ldrlt	r2, [sp, #8]
 8004d90:	9f06      	ldrge	r7, [sp, #24]
 8004d92:	1a9f      	sublt	r7, r3, r2
 8004d94:	bfac      	ite	ge
 8004d96:	9b02      	ldrge	r3, [sp, #8]
 8004d98:	2300      	movlt	r3, #0
 8004d9a:	e73e      	b.n	8004c1a <_dtoa_r+0x74a>
 8004d9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004d9e:	9f06      	ldr	r7, [sp, #24]
 8004da0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004da2:	e745      	b.n	8004c30 <_dtoa_r+0x760>
 8004da4:	3fe00000 	.word	0x3fe00000
 8004da8:	40240000 	.word	0x40240000
 8004dac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004dae:	e76a      	b.n	8004c86 <_dtoa_r+0x7b6>
 8004db0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	dc19      	bgt.n	8004dea <_dtoa_r+0x91a>
 8004db6:	9b04      	ldr	r3, [sp, #16]
 8004db8:	b9bb      	cbnz	r3, 8004dea <_dtoa_r+0x91a>
 8004dba:	9b05      	ldr	r3, [sp, #20]
 8004dbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dc0:	b99b      	cbnz	r3, 8004dea <_dtoa_r+0x91a>
 8004dc2:	9b05      	ldr	r3, [sp, #20]
 8004dc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004dc8:	0d1b      	lsrs	r3, r3, #20
 8004dca:	051b      	lsls	r3, r3, #20
 8004dcc:	b183      	cbz	r3, 8004df0 <_dtoa_r+0x920>
 8004dce:	f04f 0801 	mov.w	r8, #1
 8004dd2:	9b06      	ldr	r3, [sp, #24]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	9306      	str	r3, [sp, #24]
 8004dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dda:	3301      	adds	r3, #1
 8004ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8004dde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f47f af6a 	bne.w	8004cba <_dtoa_r+0x7ea>
 8004de6:	2001      	movs	r0, #1
 8004de8:	e76f      	b.n	8004cca <_dtoa_r+0x7fa>
 8004dea:	f04f 0800 	mov.w	r8, #0
 8004dee:	e7f6      	b.n	8004dde <_dtoa_r+0x90e>
 8004df0:	4698      	mov	r8, r3
 8004df2:	e7f4      	b.n	8004dde <_dtoa_r+0x90e>
 8004df4:	f43f af7d 	beq.w	8004cf2 <_dtoa_r+0x822>
 8004df8:	4618      	mov	r0, r3
 8004dfa:	301c      	adds	r0, #28
 8004dfc:	e772      	b.n	8004ce4 <_dtoa_r+0x814>
 8004dfe:	9b02      	ldr	r3, [sp, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	dc36      	bgt.n	8004e72 <_dtoa_r+0x9a2>
 8004e04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	dd33      	ble.n	8004e72 <_dtoa_r+0x9a2>
 8004e0a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004e0e:	f1bb 0f00 	cmp.w	fp, #0
 8004e12:	d10d      	bne.n	8004e30 <_dtoa_r+0x960>
 8004e14:	4621      	mov	r1, r4
 8004e16:	465b      	mov	r3, fp
 8004e18:	2205      	movs	r2, #5
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	f000 fbe2 	bl	80055e4 <__multadd>
 8004e20:	4601      	mov	r1, r0
 8004e22:	4604      	mov	r4, r0
 8004e24:	4650      	mov	r0, sl
 8004e26:	f000 fdf5 	bl	8005a14 <__mcmp>
 8004e2a:	2800      	cmp	r0, #0
 8004e2c:	f73f adb6 	bgt.w	800499c <_dtoa_r+0x4cc>
 8004e30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004e32:	9f08      	ldr	r7, [sp, #32]
 8004e34:	ea6f 0903 	mvn.w	r9, r3
 8004e38:	f04f 0800 	mov.w	r8, #0
 8004e3c:	4621      	mov	r1, r4
 8004e3e:	4628      	mov	r0, r5
 8004e40:	f000 fbae 	bl	80055a0 <_Bfree>
 8004e44:	2e00      	cmp	r6, #0
 8004e46:	f43f aea4 	beq.w	8004b92 <_dtoa_r+0x6c2>
 8004e4a:	f1b8 0f00 	cmp.w	r8, #0
 8004e4e:	d005      	beq.n	8004e5c <_dtoa_r+0x98c>
 8004e50:	45b0      	cmp	r8, r6
 8004e52:	d003      	beq.n	8004e5c <_dtoa_r+0x98c>
 8004e54:	4641      	mov	r1, r8
 8004e56:	4628      	mov	r0, r5
 8004e58:	f000 fba2 	bl	80055a0 <_Bfree>
 8004e5c:	4631      	mov	r1, r6
 8004e5e:	4628      	mov	r0, r5
 8004e60:	f000 fb9e 	bl	80055a0 <_Bfree>
 8004e64:	e695      	b.n	8004b92 <_dtoa_r+0x6c2>
 8004e66:	2400      	movs	r4, #0
 8004e68:	4626      	mov	r6, r4
 8004e6a:	e7e1      	b.n	8004e30 <_dtoa_r+0x960>
 8004e6c:	46c1      	mov	r9, r8
 8004e6e:	4626      	mov	r6, r4
 8004e70:	e594      	b.n	800499c <_dtoa_r+0x4cc>
 8004e72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e74:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 80fc 	beq.w	8005076 <_dtoa_r+0xba6>
 8004e7e:	2f00      	cmp	r7, #0
 8004e80:	dd05      	ble.n	8004e8e <_dtoa_r+0x9be>
 8004e82:	4631      	mov	r1, r6
 8004e84:	463a      	mov	r2, r7
 8004e86:	4628      	mov	r0, r5
 8004e88:	f000 fd58 	bl	800593c <__lshift>
 8004e8c:	4606      	mov	r6, r0
 8004e8e:	f1b8 0f00 	cmp.w	r8, #0
 8004e92:	d05c      	beq.n	8004f4e <_dtoa_r+0xa7e>
 8004e94:	4628      	mov	r0, r5
 8004e96:	6871      	ldr	r1, [r6, #4]
 8004e98:	f000 fb42 	bl	8005520 <_Balloc>
 8004e9c:	4607      	mov	r7, r0
 8004e9e:	b928      	cbnz	r0, 8004eac <_dtoa_r+0x9dc>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004ea6:	4b7e      	ldr	r3, [pc, #504]	; (80050a0 <_dtoa_r+0xbd0>)
 8004ea8:	f7ff bb26 	b.w	80044f8 <_dtoa_r+0x28>
 8004eac:	6932      	ldr	r2, [r6, #16]
 8004eae:	f106 010c 	add.w	r1, r6, #12
 8004eb2:	3202      	adds	r2, #2
 8004eb4:	0092      	lsls	r2, r2, #2
 8004eb6:	300c      	adds	r0, #12
 8004eb8:	f7fe fcb8 	bl	800382c <memcpy>
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	4639      	mov	r1, r7
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	f000 fd3b 	bl	800593c <__lshift>
 8004ec6:	46b0      	mov	r8, r6
 8004ec8:	4606      	mov	r6, r0
 8004eca:	9b08      	ldr	r3, [sp, #32]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	9302      	str	r3, [sp, #8]
 8004ed0:	9b08      	ldr	r3, [sp, #32]
 8004ed2:	445b      	add	r3, fp
 8004ed4:	930a      	str	r3, [sp, #40]	; 0x28
 8004ed6:	9b04      	ldr	r3, [sp, #16]
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	9309      	str	r3, [sp, #36]	; 0x24
 8004ede:	9b02      	ldr	r3, [sp, #8]
 8004ee0:	4621      	mov	r1, r4
 8004ee2:	4650      	mov	r0, sl
 8004ee4:	f103 3bff 	add.w	fp, r3, #4294967295
 8004ee8:	f7ff fa64 	bl	80043b4 <quorem>
 8004eec:	4603      	mov	r3, r0
 8004eee:	4641      	mov	r1, r8
 8004ef0:	3330      	adds	r3, #48	; 0x30
 8004ef2:	9004      	str	r0, [sp, #16]
 8004ef4:	4650      	mov	r0, sl
 8004ef6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ef8:	f000 fd8c 	bl	8005a14 <__mcmp>
 8004efc:	4632      	mov	r2, r6
 8004efe:	9006      	str	r0, [sp, #24]
 8004f00:	4621      	mov	r1, r4
 8004f02:	4628      	mov	r0, r5
 8004f04:	f000 fda2 	bl	8005a4c <__mdiff>
 8004f08:	68c2      	ldr	r2, [r0, #12]
 8004f0a:	4607      	mov	r7, r0
 8004f0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f0e:	bb02      	cbnz	r2, 8004f52 <_dtoa_r+0xa82>
 8004f10:	4601      	mov	r1, r0
 8004f12:	4650      	mov	r0, sl
 8004f14:	f000 fd7e 	bl	8005a14 <__mcmp>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f1c:	4639      	mov	r1, r7
 8004f1e:	4628      	mov	r0, r5
 8004f20:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004f24:	f000 fb3c 	bl	80055a0 <_Bfree>
 8004f28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f2c:	9f02      	ldr	r7, [sp, #8]
 8004f2e:	ea43 0102 	orr.w	r1, r3, r2
 8004f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f34:	430b      	orrs	r3, r1
 8004f36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f38:	d10d      	bne.n	8004f56 <_dtoa_r+0xa86>
 8004f3a:	2b39      	cmp	r3, #57	; 0x39
 8004f3c:	d027      	beq.n	8004f8e <_dtoa_r+0xabe>
 8004f3e:	9a06      	ldr	r2, [sp, #24]
 8004f40:	2a00      	cmp	r2, #0
 8004f42:	dd01      	ble.n	8004f48 <_dtoa_r+0xa78>
 8004f44:	9b04      	ldr	r3, [sp, #16]
 8004f46:	3331      	adds	r3, #49	; 0x31
 8004f48:	f88b 3000 	strb.w	r3, [fp]
 8004f4c:	e776      	b.n	8004e3c <_dtoa_r+0x96c>
 8004f4e:	4630      	mov	r0, r6
 8004f50:	e7b9      	b.n	8004ec6 <_dtoa_r+0x9f6>
 8004f52:	2201      	movs	r2, #1
 8004f54:	e7e2      	b.n	8004f1c <_dtoa_r+0xa4c>
 8004f56:	9906      	ldr	r1, [sp, #24]
 8004f58:	2900      	cmp	r1, #0
 8004f5a:	db04      	blt.n	8004f66 <_dtoa_r+0xa96>
 8004f5c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8004f5e:	4301      	orrs	r1, r0
 8004f60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f62:	4301      	orrs	r1, r0
 8004f64:	d120      	bne.n	8004fa8 <_dtoa_r+0xad8>
 8004f66:	2a00      	cmp	r2, #0
 8004f68:	ddee      	ble.n	8004f48 <_dtoa_r+0xa78>
 8004f6a:	4651      	mov	r1, sl
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	4628      	mov	r0, r5
 8004f70:	9302      	str	r3, [sp, #8]
 8004f72:	f000 fce3 	bl	800593c <__lshift>
 8004f76:	4621      	mov	r1, r4
 8004f78:	4682      	mov	sl, r0
 8004f7a:	f000 fd4b 	bl	8005a14 <__mcmp>
 8004f7e:	2800      	cmp	r0, #0
 8004f80:	9b02      	ldr	r3, [sp, #8]
 8004f82:	dc02      	bgt.n	8004f8a <_dtoa_r+0xaba>
 8004f84:	d1e0      	bne.n	8004f48 <_dtoa_r+0xa78>
 8004f86:	07da      	lsls	r2, r3, #31
 8004f88:	d5de      	bpl.n	8004f48 <_dtoa_r+0xa78>
 8004f8a:	2b39      	cmp	r3, #57	; 0x39
 8004f8c:	d1da      	bne.n	8004f44 <_dtoa_r+0xa74>
 8004f8e:	2339      	movs	r3, #57	; 0x39
 8004f90:	f88b 3000 	strb.w	r3, [fp]
 8004f94:	463b      	mov	r3, r7
 8004f96:	461f      	mov	r7, r3
 8004f98:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	2a39      	cmp	r2, #57	; 0x39
 8004fa0:	d050      	beq.n	8005044 <_dtoa_r+0xb74>
 8004fa2:	3201      	adds	r2, #1
 8004fa4:	701a      	strb	r2, [r3, #0]
 8004fa6:	e749      	b.n	8004e3c <_dtoa_r+0x96c>
 8004fa8:	2a00      	cmp	r2, #0
 8004faa:	dd03      	ble.n	8004fb4 <_dtoa_r+0xae4>
 8004fac:	2b39      	cmp	r3, #57	; 0x39
 8004fae:	d0ee      	beq.n	8004f8e <_dtoa_r+0xabe>
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	e7c9      	b.n	8004f48 <_dtoa_r+0xa78>
 8004fb4:	9a02      	ldr	r2, [sp, #8]
 8004fb6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004fb8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004fbc:	428a      	cmp	r2, r1
 8004fbe:	d02a      	beq.n	8005016 <_dtoa_r+0xb46>
 8004fc0:	4651      	mov	r1, sl
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	220a      	movs	r2, #10
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	f000 fb0c 	bl	80055e4 <__multadd>
 8004fcc:	45b0      	cmp	r8, r6
 8004fce:	4682      	mov	sl, r0
 8004fd0:	f04f 0300 	mov.w	r3, #0
 8004fd4:	f04f 020a 	mov.w	r2, #10
 8004fd8:	4641      	mov	r1, r8
 8004fda:	4628      	mov	r0, r5
 8004fdc:	d107      	bne.n	8004fee <_dtoa_r+0xb1e>
 8004fde:	f000 fb01 	bl	80055e4 <__multadd>
 8004fe2:	4680      	mov	r8, r0
 8004fe4:	4606      	mov	r6, r0
 8004fe6:	9b02      	ldr	r3, [sp, #8]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	9302      	str	r3, [sp, #8]
 8004fec:	e777      	b.n	8004ede <_dtoa_r+0xa0e>
 8004fee:	f000 faf9 	bl	80055e4 <__multadd>
 8004ff2:	4631      	mov	r1, r6
 8004ff4:	4680      	mov	r8, r0
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	220a      	movs	r2, #10
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	f000 faf2 	bl	80055e4 <__multadd>
 8005000:	4606      	mov	r6, r0
 8005002:	e7f0      	b.n	8004fe6 <_dtoa_r+0xb16>
 8005004:	f1bb 0f00 	cmp.w	fp, #0
 8005008:	bfcc      	ite	gt
 800500a:	465f      	movgt	r7, fp
 800500c:	2701      	movle	r7, #1
 800500e:	f04f 0800 	mov.w	r8, #0
 8005012:	9a08      	ldr	r2, [sp, #32]
 8005014:	4417      	add	r7, r2
 8005016:	4651      	mov	r1, sl
 8005018:	2201      	movs	r2, #1
 800501a:	4628      	mov	r0, r5
 800501c:	9302      	str	r3, [sp, #8]
 800501e:	f000 fc8d 	bl	800593c <__lshift>
 8005022:	4621      	mov	r1, r4
 8005024:	4682      	mov	sl, r0
 8005026:	f000 fcf5 	bl	8005a14 <__mcmp>
 800502a:	2800      	cmp	r0, #0
 800502c:	dcb2      	bgt.n	8004f94 <_dtoa_r+0xac4>
 800502e:	d102      	bne.n	8005036 <_dtoa_r+0xb66>
 8005030:	9b02      	ldr	r3, [sp, #8]
 8005032:	07db      	lsls	r3, r3, #31
 8005034:	d4ae      	bmi.n	8004f94 <_dtoa_r+0xac4>
 8005036:	463b      	mov	r3, r7
 8005038:	461f      	mov	r7, r3
 800503a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800503e:	2a30      	cmp	r2, #48	; 0x30
 8005040:	d0fa      	beq.n	8005038 <_dtoa_r+0xb68>
 8005042:	e6fb      	b.n	8004e3c <_dtoa_r+0x96c>
 8005044:	9a08      	ldr	r2, [sp, #32]
 8005046:	429a      	cmp	r2, r3
 8005048:	d1a5      	bne.n	8004f96 <_dtoa_r+0xac6>
 800504a:	2331      	movs	r3, #49	; 0x31
 800504c:	f109 0901 	add.w	r9, r9, #1
 8005050:	7013      	strb	r3, [r2, #0]
 8005052:	e6f3      	b.n	8004e3c <_dtoa_r+0x96c>
 8005054:	4b13      	ldr	r3, [pc, #76]	; (80050a4 <_dtoa_r+0xbd4>)
 8005056:	f7ff baa7 	b.w	80045a8 <_dtoa_r+0xd8>
 800505a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800505c:	2b00      	cmp	r3, #0
 800505e:	f47f aa80 	bne.w	8004562 <_dtoa_r+0x92>
 8005062:	4b11      	ldr	r3, [pc, #68]	; (80050a8 <_dtoa_r+0xbd8>)
 8005064:	f7ff baa0 	b.w	80045a8 <_dtoa_r+0xd8>
 8005068:	f1bb 0f00 	cmp.w	fp, #0
 800506c:	dc03      	bgt.n	8005076 <_dtoa_r+0xba6>
 800506e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005070:	2b02      	cmp	r3, #2
 8005072:	f73f aecc 	bgt.w	8004e0e <_dtoa_r+0x93e>
 8005076:	9f08      	ldr	r7, [sp, #32]
 8005078:	4621      	mov	r1, r4
 800507a:	4650      	mov	r0, sl
 800507c:	f7ff f99a 	bl	80043b4 <quorem>
 8005080:	9a08      	ldr	r2, [sp, #32]
 8005082:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005086:	f807 3b01 	strb.w	r3, [r7], #1
 800508a:	1aba      	subs	r2, r7, r2
 800508c:	4593      	cmp	fp, r2
 800508e:	ddb9      	ble.n	8005004 <_dtoa_r+0xb34>
 8005090:	4651      	mov	r1, sl
 8005092:	2300      	movs	r3, #0
 8005094:	220a      	movs	r2, #10
 8005096:	4628      	mov	r0, r5
 8005098:	f000 faa4 	bl	80055e4 <__multadd>
 800509c:	4682      	mov	sl, r0
 800509e:	e7eb      	b.n	8005078 <_dtoa_r+0xba8>
 80050a0:	080064c7 	.word	0x080064c7
 80050a4:	08006420 	.word	0x08006420
 80050a8:	08006444 	.word	0x08006444

080050ac <__sflush_r>:
 80050ac:	898a      	ldrh	r2, [r1, #12]
 80050ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050b2:	4605      	mov	r5, r0
 80050b4:	0710      	lsls	r0, r2, #28
 80050b6:	460c      	mov	r4, r1
 80050b8:	d458      	bmi.n	800516c <__sflush_r+0xc0>
 80050ba:	684b      	ldr	r3, [r1, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	dc05      	bgt.n	80050cc <__sflush_r+0x20>
 80050c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	dc02      	bgt.n	80050cc <__sflush_r+0x20>
 80050c6:	2000      	movs	r0, #0
 80050c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050ce:	2e00      	cmp	r6, #0
 80050d0:	d0f9      	beq.n	80050c6 <__sflush_r+0x1a>
 80050d2:	2300      	movs	r3, #0
 80050d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80050d8:	682f      	ldr	r7, [r5, #0]
 80050da:	602b      	str	r3, [r5, #0]
 80050dc:	d032      	beq.n	8005144 <__sflush_r+0x98>
 80050de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80050e0:	89a3      	ldrh	r3, [r4, #12]
 80050e2:	075a      	lsls	r2, r3, #29
 80050e4:	d505      	bpl.n	80050f2 <__sflush_r+0x46>
 80050e6:	6863      	ldr	r3, [r4, #4]
 80050e8:	1ac0      	subs	r0, r0, r3
 80050ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80050ec:	b10b      	cbz	r3, 80050f2 <__sflush_r+0x46>
 80050ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050f0:	1ac0      	subs	r0, r0, r3
 80050f2:	2300      	movs	r3, #0
 80050f4:	4602      	mov	r2, r0
 80050f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050f8:	4628      	mov	r0, r5
 80050fa:	6a21      	ldr	r1, [r4, #32]
 80050fc:	47b0      	blx	r6
 80050fe:	1c43      	adds	r3, r0, #1
 8005100:	89a3      	ldrh	r3, [r4, #12]
 8005102:	d106      	bne.n	8005112 <__sflush_r+0x66>
 8005104:	6829      	ldr	r1, [r5, #0]
 8005106:	291d      	cmp	r1, #29
 8005108:	d82c      	bhi.n	8005164 <__sflush_r+0xb8>
 800510a:	4a2a      	ldr	r2, [pc, #168]	; (80051b4 <__sflush_r+0x108>)
 800510c:	40ca      	lsrs	r2, r1
 800510e:	07d6      	lsls	r6, r2, #31
 8005110:	d528      	bpl.n	8005164 <__sflush_r+0xb8>
 8005112:	2200      	movs	r2, #0
 8005114:	6062      	str	r2, [r4, #4]
 8005116:	6922      	ldr	r2, [r4, #16]
 8005118:	04d9      	lsls	r1, r3, #19
 800511a:	6022      	str	r2, [r4, #0]
 800511c:	d504      	bpl.n	8005128 <__sflush_r+0x7c>
 800511e:	1c42      	adds	r2, r0, #1
 8005120:	d101      	bne.n	8005126 <__sflush_r+0x7a>
 8005122:	682b      	ldr	r3, [r5, #0]
 8005124:	b903      	cbnz	r3, 8005128 <__sflush_r+0x7c>
 8005126:	6560      	str	r0, [r4, #84]	; 0x54
 8005128:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800512a:	602f      	str	r7, [r5, #0]
 800512c:	2900      	cmp	r1, #0
 800512e:	d0ca      	beq.n	80050c6 <__sflush_r+0x1a>
 8005130:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005134:	4299      	cmp	r1, r3
 8005136:	d002      	beq.n	800513e <__sflush_r+0x92>
 8005138:	4628      	mov	r0, r5
 800513a:	f000 fd81 	bl	8005c40 <_free_r>
 800513e:	2000      	movs	r0, #0
 8005140:	6360      	str	r0, [r4, #52]	; 0x34
 8005142:	e7c1      	b.n	80050c8 <__sflush_r+0x1c>
 8005144:	6a21      	ldr	r1, [r4, #32]
 8005146:	2301      	movs	r3, #1
 8005148:	4628      	mov	r0, r5
 800514a:	47b0      	blx	r6
 800514c:	1c41      	adds	r1, r0, #1
 800514e:	d1c7      	bne.n	80050e0 <__sflush_r+0x34>
 8005150:	682b      	ldr	r3, [r5, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0c4      	beq.n	80050e0 <__sflush_r+0x34>
 8005156:	2b1d      	cmp	r3, #29
 8005158:	d001      	beq.n	800515e <__sflush_r+0xb2>
 800515a:	2b16      	cmp	r3, #22
 800515c:	d101      	bne.n	8005162 <__sflush_r+0xb6>
 800515e:	602f      	str	r7, [r5, #0]
 8005160:	e7b1      	b.n	80050c6 <__sflush_r+0x1a>
 8005162:	89a3      	ldrh	r3, [r4, #12]
 8005164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005168:	81a3      	strh	r3, [r4, #12]
 800516a:	e7ad      	b.n	80050c8 <__sflush_r+0x1c>
 800516c:	690f      	ldr	r7, [r1, #16]
 800516e:	2f00      	cmp	r7, #0
 8005170:	d0a9      	beq.n	80050c6 <__sflush_r+0x1a>
 8005172:	0793      	lsls	r3, r2, #30
 8005174:	bf18      	it	ne
 8005176:	2300      	movne	r3, #0
 8005178:	680e      	ldr	r6, [r1, #0]
 800517a:	bf08      	it	eq
 800517c:	694b      	ldreq	r3, [r1, #20]
 800517e:	eba6 0807 	sub.w	r8, r6, r7
 8005182:	600f      	str	r7, [r1, #0]
 8005184:	608b      	str	r3, [r1, #8]
 8005186:	f1b8 0f00 	cmp.w	r8, #0
 800518a:	dd9c      	ble.n	80050c6 <__sflush_r+0x1a>
 800518c:	4643      	mov	r3, r8
 800518e:	463a      	mov	r2, r7
 8005190:	4628      	mov	r0, r5
 8005192:	6a21      	ldr	r1, [r4, #32]
 8005194:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005196:	47b0      	blx	r6
 8005198:	2800      	cmp	r0, #0
 800519a:	dc06      	bgt.n	80051aa <__sflush_r+0xfe>
 800519c:	89a3      	ldrh	r3, [r4, #12]
 800519e:	f04f 30ff 	mov.w	r0, #4294967295
 80051a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051a6:	81a3      	strh	r3, [r4, #12]
 80051a8:	e78e      	b.n	80050c8 <__sflush_r+0x1c>
 80051aa:	4407      	add	r7, r0
 80051ac:	eba8 0800 	sub.w	r8, r8, r0
 80051b0:	e7e9      	b.n	8005186 <__sflush_r+0xda>
 80051b2:	bf00      	nop
 80051b4:	20400001 	.word	0x20400001

080051b8 <_fflush_r>:
 80051b8:	b538      	push	{r3, r4, r5, lr}
 80051ba:	690b      	ldr	r3, [r1, #16]
 80051bc:	4605      	mov	r5, r0
 80051be:	460c      	mov	r4, r1
 80051c0:	b913      	cbnz	r3, 80051c8 <_fflush_r+0x10>
 80051c2:	2500      	movs	r5, #0
 80051c4:	4628      	mov	r0, r5
 80051c6:	bd38      	pop	{r3, r4, r5, pc}
 80051c8:	b118      	cbz	r0, 80051d2 <_fflush_r+0x1a>
 80051ca:	6983      	ldr	r3, [r0, #24]
 80051cc:	b90b      	cbnz	r3, 80051d2 <_fflush_r+0x1a>
 80051ce:	f000 f887 	bl	80052e0 <__sinit>
 80051d2:	4b14      	ldr	r3, [pc, #80]	; (8005224 <_fflush_r+0x6c>)
 80051d4:	429c      	cmp	r4, r3
 80051d6:	d11b      	bne.n	8005210 <_fflush_r+0x58>
 80051d8:	686c      	ldr	r4, [r5, #4]
 80051da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d0ef      	beq.n	80051c2 <_fflush_r+0xa>
 80051e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80051e4:	07d0      	lsls	r0, r2, #31
 80051e6:	d404      	bmi.n	80051f2 <_fflush_r+0x3a>
 80051e8:	0599      	lsls	r1, r3, #22
 80051ea:	d402      	bmi.n	80051f2 <_fflush_r+0x3a>
 80051ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051ee:	f000 f91a 	bl	8005426 <__retarget_lock_acquire_recursive>
 80051f2:	4628      	mov	r0, r5
 80051f4:	4621      	mov	r1, r4
 80051f6:	f7ff ff59 	bl	80050ac <__sflush_r>
 80051fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051fc:	4605      	mov	r5, r0
 80051fe:	07da      	lsls	r2, r3, #31
 8005200:	d4e0      	bmi.n	80051c4 <_fflush_r+0xc>
 8005202:	89a3      	ldrh	r3, [r4, #12]
 8005204:	059b      	lsls	r3, r3, #22
 8005206:	d4dd      	bmi.n	80051c4 <_fflush_r+0xc>
 8005208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800520a:	f000 f90d 	bl	8005428 <__retarget_lock_release_recursive>
 800520e:	e7d9      	b.n	80051c4 <_fflush_r+0xc>
 8005210:	4b05      	ldr	r3, [pc, #20]	; (8005228 <_fflush_r+0x70>)
 8005212:	429c      	cmp	r4, r3
 8005214:	d101      	bne.n	800521a <_fflush_r+0x62>
 8005216:	68ac      	ldr	r4, [r5, #8]
 8005218:	e7df      	b.n	80051da <_fflush_r+0x22>
 800521a:	4b04      	ldr	r3, [pc, #16]	; (800522c <_fflush_r+0x74>)
 800521c:	429c      	cmp	r4, r3
 800521e:	bf08      	it	eq
 8005220:	68ec      	ldreq	r4, [r5, #12]
 8005222:	e7da      	b.n	80051da <_fflush_r+0x22>
 8005224:	080064f8 	.word	0x080064f8
 8005228:	08006518 	.word	0x08006518
 800522c:	080064d8 	.word	0x080064d8

08005230 <std>:
 8005230:	2300      	movs	r3, #0
 8005232:	b510      	push	{r4, lr}
 8005234:	4604      	mov	r4, r0
 8005236:	e9c0 3300 	strd	r3, r3, [r0]
 800523a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800523e:	6083      	str	r3, [r0, #8]
 8005240:	8181      	strh	r1, [r0, #12]
 8005242:	6643      	str	r3, [r0, #100]	; 0x64
 8005244:	81c2      	strh	r2, [r0, #14]
 8005246:	6183      	str	r3, [r0, #24]
 8005248:	4619      	mov	r1, r3
 800524a:	2208      	movs	r2, #8
 800524c:	305c      	adds	r0, #92	; 0x5c
 800524e:	f7fe fafb 	bl	8003848 <memset>
 8005252:	4b05      	ldr	r3, [pc, #20]	; (8005268 <std+0x38>)
 8005254:	6224      	str	r4, [r4, #32]
 8005256:	6263      	str	r3, [r4, #36]	; 0x24
 8005258:	4b04      	ldr	r3, [pc, #16]	; (800526c <std+0x3c>)
 800525a:	62a3      	str	r3, [r4, #40]	; 0x28
 800525c:	4b04      	ldr	r3, [pc, #16]	; (8005270 <std+0x40>)
 800525e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005260:	4b04      	ldr	r3, [pc, #16]	; (8005274 <std+0x44>)
 8005262:	6323      	str	r3, [r4, #48]	; 0x30
 8005264:	bd10      	pop	{r4, pc}
 8005266:	bf00      	nop
 8005268:	0800605d 	.word	0x0800605d
 800526c:	0800607f 	.word	0x0800607f
 8005270:	080060b7 	.word	0x080060b7
 8005274:	080060db 	.word	0x080060db

08005278 <_cleanup_r>:
 8005278:	4901      	ldr	r1, [pc, #4]	; (8005280 <_cleanup_r+0x8>)
 800527a:	f000 b8af 	b.w	80053dc <_fwalk_reent>
 800527e:	bf00      	nop
 8005280:	080051b9 	.word	0x080051b9

08005284 <__sfmoreglue>:
 8005284:	b570      	push	{r4, r5, r6, lr}
 8005286:	2568      	movs	r5, #104	; 0x68
 8005288:	1e4a      	subs	r2, r1, #1
 800528a:	4355      	muls	r5, r2
 800528c:	460e      	mov	r6, r1
 800528e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005292:	f000 fd21 	bl	8005cd8 <_malloc_r>
 8005296:	4604      	mov	r4, r0
 8005298:	b140      	cbz	r0, 80052ac <__sfmoreglue+0x28>
 800529a:	2100      	movs	r1, #0
 800529c:	e9c0 1600 	strd	r1, r6, [r0]
 80052a0:	300c      	adds	r0, #12
 80052a2:	60a0      	str	r0, [r4, #8]
 80052a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80052a8:	f7fe face 	bl	8003848 <memset>
 80052ac:	4620      	mov	r0, r4
 80052ae:	bd70      	pop	{r4, r5, r6, pc}

080052b0 <__sfp_lock_acquire>:
 80052b0:	4801      	ldr	r0, [pc, #4]	; (80052b8 <__sfp_lock_acquire+0x8>)
 80052b2:	f000 b8b8 	b.w	8005426 <__retarget_lock_acquire_recursive>
 80052b6:	bf00      	nop
 80052b8:	20000320 	.word	0x20000320

080052bc <__sfp_lock_release>:
 80052bc:	4801      	ldr	r0, [pc, #4]	; (80052c4 <__sfp_lock_release+0x8>)
 80052be:	f000 b8b3 	b.w	8005428 <__retarget_lock_release_recursive>
 80052c2:	bf00      	nop
 80052c4:	20000320 	.word	0x20000320

080052c8 <__sinit_lock_acquire>:
 80052c8:	4801      	ldr	r0, [pc, #4]	; (80052d0 <__sinit_lock_acquire+0x8>)
 80052ca:	f000 b8ac 	b.w	8005426 <__retarget_lock_acquire_recursive>
 80052ce:	bf00      	nop
 80052d0:	2000031b 	.word	0x2000031b

080052d4 <__sinit_lock_release>:
 80052d4:	4801      	ldr	r0, [pc, #4]	; (80052dc <__sinit_lock_release+0x8>)
 80052d6:	f000 b8a7 	b.w	8005428 <__retarget_lock_release_recursive>
 80052da:	bf00      	nop
 80052dc:	2000031b 	.word	0x2000031b

080052e0 <__sinit>:
 80052e0:	b510      	push	{r4, lr}
 80052e2:	4604      	mov	r4, r0
 80052e4:	f7ff fff0 	bl	80052c8 <__sinit_lock_acquire>
 80052e8:	69a3      	ldr	r3, [r4, #24]
 80052ea:	b11b      	cbz	r3, 80052f4 <__sinit+0x14>
 80052ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052f0:	f7ff bff0 	b.w	80052d4 <__sinit_lock_release>
 80052f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80052f8:	6523      	str	r3, [r4, #80]	; 0x50
 80052fa:	4b13      	ldr	r3, [pc, #76]	; (8005348 <__sinit+0x68>)
 80052fc:	4a13      	ldr	r2, [pc, #76]	; (800534c <__sinit+0x6c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	62a2      	str	r2, [r4, #40]	; 0x28
 8005302:	42a3      	cmp	r3, r4
 8005304:	bf08      	it	eq
 8005306:	2301      	moveq	r3, #1
 8005308:	4620      	mov	r0, r4
 800530a:	bf08      	it	eq
 800530c:	61a3      	streq	r3, [r4, #24]
 800530e:	f000 f81f 	bl	8005350 <__sfp>
 8005312:	6060      	str	r0, [r4, #4]
 8005314:	4620      	mov	r0, r4
 8005316:	f000 f81b 	bl	8005350 <__sfp>
 800531a:	60a0      	str	r0, [r4, #8]
 800531c:	4620      	mov	r0, r4
 800531e:	f000 f817 	bl	8005350 <__sfp>
 8005322:	2200      	movs	r2, #0
 8005324:	2104      	movs	r1, #4
 8005326:	60e0      	str	r0, [r4, #12]
 8005328:	6860      	ldr	r0, [r4, #4]
 800532a:	f7ff ff81 	bl	8005230 <std>
 800532e:	2201      	movs	r2, #1
 8005330:	2109      	movs	r1, #9
 8005332:	68a0      	ldr	r0, [r4, #8]
 8005334:	f7ff ff7c 	bl	8005230 <std>
 8005338:	2202      	movs	r2, #2
 800533a:	2112      	movs	r1, #18
 800533c:	68e0      	ldr	r0, [r4, #12]
 800533e:	f7ff ff77 	bl	8005230 <std>
 8005342:	2301      	movs	r3, #1
 8005344:	61a3      	str	r3, [r4, #24]
 8005346:	e7d1      	b.n	80052ec <__sinit+0xc>
 8005348:	0800640c 	.word	0x0800640c
 800534c:	08005279 	.word	0x08005279

08005350 <__sfp>:
 8005350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005352:	4607      	mov	r7, r0
 8005354:	f7ff ffac 	bl	80052b0 <__sfp_lock_acquire>
 8005358:	4b1e      	ldr	r3, [pc, #120]	; (80053d4 <__sfp+0x84>)
 800535a:	681e      	ldr	r6, [r3, #0]
 800535c:	69b3      	ldr	r3, [r6, #24]
 800535e:	b913      	cbnz	r3, 8005366 <__sfp+0x16>
 8005360:	4630      	mov	r0, r6
 8005362:	f7ff ffbd 	bl	80052e0 <__sinit>
 8005366:	3648      	adds	r6, #72	; 0x48
 8005368:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800536c:	3b01      	subs	r3, #1
 800536e:	d503      	bpl.n	8005378 <__sfp+0x28>
 8005370:	6833      	ldr	r3, [r6, #0]
 8005372:	b30b      	cbz	r3, 80053b8 <__sfp+0x68>
 8005374:	6836      	ldr	r6, [r6, #0]
 8005376:	e7f7      	b.n	8005368 <__sfp+0x18>
 8005378:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800537c:	b9d5      	cbnz	r5, 80053b4 <__sfp+0x64>
 800537e:	4b16      	ldr	r3, [pc, #88]	; (80053d8 <__sfp+0x88>)
 8005380:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005384:	60e3      	str	r3, [r4, #12]
 8005386:	6665      	str	r5, [r4, #100]	; 0x64
 8005388:	f000 f84c 	bl	8005424 <__retarget_lock_init_recursive>
 800538c:	f7ff ff96 	bl	80052bc <__sfp_lock_release>
 8005390:	2208      	movs	r2, #8
 8005392:	4629      	mov	r1, r5
 8005394:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005398:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800539c:	6025      	str	r5, [r4, #0]
 800539e:	61a5      	str	r5, [r4, #24]
 80053a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80053a4:	f7fe fa50 	bl	8003848 <memset>
 80053a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80053ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80053b0:	4620      	mov	r0, r4
 80053b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053b4:	3468      	adds	r4, #104	; 0x68
 80053b6:	e7d9      	b.n	800536c <__sfp+0x1c>
 80053b8:	2104      	movs	r1, #4
 80053ba:	4638      	mov	r0, r7
 80053bc:	f7ff ff62 	bl	8005284 <__sfmoreglue>
 80053c0:	4604      	mov	r4, r0
 80053c2:	6030      	str	r0, [r6, #0]
 80053c4:	2800      	cmp	r0, #0
 80053c6:	d1d5      	bne.n	8005374 <__sfp+0x24>
 80053c8:	f7ff ff78 	bl	80052bc <__sfp_lock_release>
 80053cc:	230c      	movs	r3, #12
 80053ce:	603b      	str	r3, [r7, #0]
 80053d0:	e7ee      	b.n	80053b0 <__sfp+0x60>
 80053d2:	bf00      	nop
 80053d4:	0800640c 	.word	0x0800640c
 80053d8:	ffff0001 	.word	0xffff0001

080053dc <_fwalk_reent>:
 80053dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053e0:	4606      	mov	r6, r0
 80053e2:	4688      	mov	r8, r1
 80053e4:	2700      	movs	r7, #0
 80053e6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80053ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053ee:	f1b9 0901 	subs.w	r9, r9, #1
 80053f2:	d505      	bpl.n	8005400 <_fwalk_reent+0x24>
 80053f4:	6824      	ldr	r4, [r4, #0]
 80053f6:	2c00      	cmp	r4, #0
 80053f8:	d1f7      	bne.n	80053ea <_fwalk_reent+0xe>
 80053fa:	4638      	mov	r0, r7
 80053fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005400:	89ab      	ldrh	r3, [r5, #12]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d907      	bls.n	8005416 <_fwalk_reent+0x3a>
 8005406:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800540a:	3301      	adds	r3, #1
 800540c:	d003      	beq.n	8005416 <_fwalk_reent+0x3a>
 800540e:	4629      	mov	r1, r5
 8005410:	4630      	mov	r0, r6
 8005412:	47c0      	blx	r8
 8005414:	4307      	orrs	r7, r0
 8005416:	3568      	adds	r5, #104	; 0x68
 8005418:	e7e9      	b.n	80053ee <_fwalk_reent+0x12>
	...

0800541c <_localeconv_r>:
 800541c:	4800      	ldr	r0, [pc, #0]	; (8005420 <_localeconv_r+0x4>)
 800541e:	4770      	bx	lr
 8005420:	20000168 	.word	0x20000168

08005424 <__retarget_lock_init_recursive>:
 8005424:	4770      	bx	lr

08005426 <__retarget_lock_acquire_recursive>:
 8005426:	4770      	bx	lr

08005428 <__retarget_lock_release_recursive>:
 8005428:	4770      	bx	lr

0800542a <__swhatbuf_r>:
 800542a:	b570      	push	{r4, r5, r6, lr}
 800542c:	460e      	mov	r6, r1
 800542e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005432:	4614      	mov	r4, r2
 8005434:	2900      	cmp	r1, #0
 8005436:	461d      	mov	r5, r3
 8005438:	b096      	sub	sp, #88	; 0x58
 800543a:	da07      	bge.n	800544c <__swhatbuf_r+0x22>
 800543c:	2300      	movs	r3, #0
 800543e:	602b      	str	r3, [r5, #0]
 8005440:	89b3      	ldrh	r3, [r6, #12]
 8005442:	061a      	lsls	r2, r3, #24
 8005444:	d410      	bmi.n	8005468 <__swhatbuf_r+0x3e>
 8005446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800544a:	e00e      	b.n	800546a <__swhatbuf_r+0x40>
 800544c:	466a      	mov	r2, sp
 800544e:	f000 fe9b 	bl	8006188 <_fstat_r>
 8005452:	2800      	cmp	r0, #0
 8005454:	dbf2      	blt.n	800543c <__swhatbuf_r+0x12>
 8005456:	9a01      	ldr	r2, [sp, #4]
 8005458:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800545c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005460:	425a      	negs	r2, r3
 8005462:	415a      	adcs	r2, r3
 8005464:	602a      	str	r2, [r5, #0]
 8005466:	e7ee      	b.n	8005446 <__swhatbuf_r+0x1c>
 8005468:	2340      	movs	r3, #64	; 0x40
 800546a:	2000      	movs	r0, #0
 800546c:	6023      	str	r3, [r4, #0]
 800546e:	b016      	add	sp, #88	; 0x58
 8005470:	bd70      	pop	{r4, r5, r6, pc}
	...

08005474 <__smakebuf_r>:
 8005474:	898b      	ldrh	r3, [r1, #12]
 8005476:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005478:	079d      	lsls	r5, r3, #30
 800547a:	4606      	mov	r6, r0
 800547c:	460c      	mov	r4, r1
 800547e:	d507      	bpl.n	8005490 <__smakebuf_r+0x1c>
 8005480:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005484:	6023      	str	r3, [r4, #0]
 8005486:	6123      	str	r3, [r4, #16]
 8005488:	2301      	movs	r3, #1
 800548a:	6163      	str	r3, [r4, #20]
 800548c:	b002      	add	sp, #8
 800548e:	bd70      	pop	{r4, r5, r6, pc}
 8005490:	466a      	mov	r2, sp
 8005492:	ab01      	add	r3, sp, #4
 8005494:	f7ff ffc9 	bl	800542a <__swhatbuf_r>
 8005498:	9900      	ldr	r1, [sp, #0]
 800549a:	4605      	mov	r5, r0
 800549c:	4630      	mov	r0, r6
 800549e:	f000 fc1b 	bl	8005cd8 <_malloc_r>
 80054a2:	b948      	cbnz	r0, 80054b8 <__smakebuf_r+0x44>
 80054a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054a8:	059a      	lsls	r2, r3, #22
 80054aa:	d4ef      	bmi.n	800548c <__smakebuf_r+0x18>
 80054ac:	f023 0303 	bic.w	r3, r3, #3
 80054b0:	f043 0302 	orr.w	r3, r3, #2
 80054b4:	81a3      	strh	r3, [r4, #12]
 80054b6:	e7e3      	b.n	8005480 <__smakebuf_r+0xc>
 80054b8:	4b0d      	ldr	r3, [pc, #52]	; (80054f0 <__smakebuf_r+0x7c>)
 80054ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80054bc:	89a3      	ldrh	r3, [r4, #12]
 80054be:	6020      	str	r0, [r4, #0]
 80054c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054c4:	81a3      	strh	r3, [r4, #12]
 80054c6:	9b00      	ldr	r3, [sp, #0]
 80054c8:	6120      	str	r0, [r4, #16]
 80054ca:	6163      	str	r3, [r4, #20]
 80054cc:	9b01      	ldr	r3, [sp, #4]
 80054ce:	b15b      	cbz	r3, 80054e8 <__smakebuf_r+0x74>
 80054d0:	4630      	mov	r0, r6
 80054d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054d6:	f000 fe69 	bl	80061ac <_isatty_r>
 80054da:	b128      	cbz	r0, 80054e8 <__smakebuf_r+0x74>
 80054dc:	89a3      	ldrh	r3, [r4, #12]
 80054de:	f023 0303 	bic.w	r3, r3, #3
 80054e2:	f043 0301 	orr.w	r3, r3, #1
 80054e6:	81a3      	strh	r3, [r4, #12]
 80054e8:	89a0      	ldrh	r0, [r4, #12]
 80054ea:	4305      	orrs	r5, r0
 80054ec:	81a5      	strh	r5, [r4, #12]
 80054ee:	e7cd      	b.n	800548c <__smakebuf_r+0x18>
 80054f0:	08005279 	.word	0x08005279

080054f4 <malloc>:
 80054f4:	4b02      	ldr	r3, [pc, #8]	; (8005500 <malloc+0xc>)
 80054f6:	4601      	mov	r1, r0
 80054f8:	6818      	ldr	r0, [r3, #0]
 80054fa:	f000 bbed 	b.w	8005cd8 <_malloc_r>
 80054fe:	bf00      	nop
 8005500:	20000014 	.word	0x20000014

08005504 <memchr>:
 8005504:	4603      	mov	r3, r0
 8005506:	b510      	push	{r4, lr}
 8005508:	b2c9      	uxtb	r1, r1
 800550a:	4402      	add	r2, r0
 800550c:	4293      	cmp	r3, r2
 800550e:	4618      	mov	r0, r3
 8005510:	d101      	bne.n	8005516 <memchr+0x12>
 8005512:	2000      	movs	r0, #0
 8005514:	e003      	b.n	800551e <memchr+0x1a>
 8005516:	7804      	ldrb	r4, [r0, #0]
 8005518:	3301      	adds	r3, #1
 800551a:	428c      	cmp	r4, r1
 800551c:	d1f6      	bne.n	800550c <memchr+0x8>
 800551e:	bd10      	pop	{r4, pc}

08005520 <_Balloc>:
 8005520:	b570      	push	{r4, r5, r6, lr}
 8005522:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005524:	4604      	mov	r4, r0
 8005526:	460d      	mov	r5, r1
 8005528:	b976      	cbnz	r6, 8005548 <_Balloc+0x28>
 800552a:	2010      	movs	r0, #16
 800552c:	f7ff ffe2 	bl	80054f4 <malloc>
 8005530:	4602      	mov	r2, r0
 8005532:	6260      	str	r0, [r4, #36]	; 0x24
 8005534:	b920      	cbnz	r0, 8005540 <_Balloc+0x20>
 8005536:	2166      	movs	r1, #102	; 0x66
 8005538:	4b17      	ldr	r3, [pc, #92]	; (8005598 <_Balloc+0x78>)
 800553a:	4818      	ldr	r0, [pc, #96]	; (800559c <_Balloc+0x7c>)
 800553c:	f000 fde4 	bl	8006108 <__assert_func>
 8005540:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005544:	6006      	str	r6, [r0, #0]
 8005546:	60c6      	str	r6, [r0, #12]
 8005548:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800554a:	68f3      	ldr	r3, [r6, #12]
 800554c:	b183      	cbz	r3, 8005570 <_Balloc+0x50>
 800554e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005556:	b9b8      	cbnz	r0, 8005588 <_Balloc+0x68>
 8005558:	2101      	movs	r1, #1
 800555a:	fa01 f605 	lsl.w	r6, r1, r5
 800555e:	1d72      	adds	r2, r6, #5
 8005560:	4620      	mov	r0, r4
 8005562:	0092      	lsls	r2, r2, #2
 8005564:	f000 fb5e 	bl	8005c24 <_calloc_r>
 8005568:	b160      	cbz	r0, 8005584 <_Balloc+0x64>
 800556a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800556e:	e00e      	b.n	800558e <_Balloc+0x6e>
 8005570:	2221      	movs	r2, #33	; 0x21
 8005572:	2104      	movs	r1, #4
 8005574:	4620      	mov	r0, r4
 8005576:	f000 fb55 	bl	8005c24 <_calloc_r>
 800557a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800557c:	60f0      	str	r0, [r6, #12]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1e4      	bne.n	800554e <_Balloc+0x2e>
 8005584:	2000      	movs	r0, #0
 8005586:	bd70      	pop	{r4, r5, r6, pc}
 8005588:	6802      	ldr	r2, [r0, #0]
 800558a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800558e:	2300      	movs	r3, #0
 8005590:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005594:	e7f7      	b.n	8005586 <_Balloc+0x66>
 8005596:	bf00      	nop
 8005598:	08006451 	.word	0x08006451
 800559c:	08006538 	.word	0x08006538

080055a0 <_Bfree>:
 80055a0:	b570      	push	{r4, r5, r6, lr}
 80055a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80055a4:	4605      	mov	r5, r0
 80055a6:	460c      	mov	r4, r1
 80055a8:	b976      	cbnz	r6, 80055c8 <_Bfree+0x28>
 80055aa:	2010      	movs	r0, #16
 80055ac:	f7ff ffa2 	bl	80054f4 <malloc>
 80055b0:	4602      	mov	r2, r0
 80055b2:	6268      	str	r0, [r5, #36]	; 0x24
 80055b4:	b920      	cbnz	r0, 80055c0 <_Bfree+0x20>
 80055b6:	218a      	movs	r1, #138	; 0x8a
 80055b8:	4b08      	ldr	r3, [pc, #32]	; (80055dc <_Bfree+0x3c>)
 80055ba:	4809      	ldr	r0, [pc, #36]	; (80055e0 <_Bfree+0x40>)
 80055bc:	f000 fda4 	bl	8006108 <__assert_func>
 80055c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80055c4:	6006      	str	r6, [r0, #0]
 80055c6:	60c6      	str	r6, [r0, #12]
 80055c8:	b13c      	cbz	r4, 80055da <_Bfree+0x3a>
 80055ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80055cc:	6862      	ldr	r2, [r4, #4]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80055d4:	6021      	str	r1, [r4, #0]
 80055d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80055da:	bd70      	pop	{r4, r5, r6, pc}
 80055dc:	08006451 	.word	0x08006451
 80055e0:	08006538 	.word	0x08006538

080055e4 <__multadd>:
 80055e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055e8:	4698      	mov	r8, r3
 80055ea:	460c      	mov	r4, r1
 80055ec:	2300      	movs	r3, #0
 80055ee:	690e      	ldr	r6, [r1, #16]
 80055f0:	4607      	mov	r7, r0
 80055f2:	f101 0014 	add.w	r0, r1, #20
 80055f6:	6805      	ldr	r5, [r0, #0]
 80055f8:	3301      	adds	r3, #1
 80055fa:	b2a9      	uxth	r1, r5
 80055fc:	fb02 8101 	mla	r1, r2, r1, r8
 8005600:	0c2d      	lsrs	r5, r5, #16
 8005602:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005606:	fb02 c505 	mla	r5, r2, r5, ip
 800560a:	b289      	uxth	r1, r1
 800560c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005610:	429e      	cmp	r6, r3
 8005612:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005616:	f840 1b04 	str.w	r1, [r0], #4
 800561a:	dcec      	bgt.n	80055f6 <__multadd+0x12>
 800561c:	f1b8 0f00 	cmp.w	r8, #0
 8005620:	d022      	beq.n	8005668 <__multadd+0x84>
 8005622:	68a3      	ldr	r3, [r4, #8]
 8005624:	42b3      	cmp	r3, r6
 8005626:	dc19      	bgt.n	800565c <__multadd+0x78>
 8005628:	6861      	ldr	r1, [r4, #4]
 800562a:	4638      	mov	r0, r7
 800562c:	3101      	adds	r1, #1
 800562e:	f7ff ff77 	bl	8005520 <_Balloc>
 8005632:	4605      	mov	r5, r0
 8005634:	b928      	cbnz	r0, 8005642 <__multadd+0x5e>
 8005636:	4602      	mov	r2, r0
 8005638:	21b5      	movs	r1, #181	; 0xb5
 800563a:	4b0d      	ldr	r3, [pc, #52]	; (8005670 <__multadd+0x8c>)
 800563c:	480d      	ldr	r0, [pc, #52]	; (8005674 <__multadd+0x90>)
 800563e:	f000 fd63 	bl	8006108 <__assert_func>
 8005642:	6922      	ldr	r2, [r4, #16]
 8005644:	f104 010c 	add.w	r1, r4, #12
 8005648:	3202      	adds	r2, #2
 800564a:	0092      	lsls	r2, r2, #2
 800564c:	300c      	adds	r0, #12
 800564e:	f7fe f8ed 	bl	800382c <memcpy>
 8005652:	4621      	mov	r1, r4
 8005654:	4638      	mov	r0, r7
 8005656:	f7ff ffa3 	bl	80055a0 <_Bfree>
 800565a:	462c      	mov	r4, r5
 800565c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005660:	3601      	adds	r6, #1
 8005662:	f8c3 8014 	str.w	r8, [r3, #20]
 8005666:	6126      	str	r6, [r4, #16]
 8005668:	4620      	mov	r0, r4
 800566a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800566e:	bf00      	nop
 8005670:	080064c7 	.word	0x080064c7
 8005674:	08006538 	.word	0x08006538

08005678 <__hi0bits>:
 8005678:	0c02      	lsrs	r2, r0, #16
 800567a:	0412      	lsls	r2, r2, #16
 800567c:	4603      	mov	r3, r0
 800567e:	b9ca      	cbnz	r2, 80056b4 <__hi0bits+0x3c>
 8005680:	0403      	lsls	r3, r0, #16
 8005682:	2010      	movs	r0, #16
 8005684:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005688:	bf04      	itt	eq
 800568a:	021b      	lsleq	r3, r3, #8
 800568c:	3008      	addeq	r0, #8
 800568e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005692:	bf04      	itt	eq
 8005694:	011b      	lsleq	r3, r3, #4
 8005696:	3004      	addeq	r0, #4
 8005698:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800569c:	bf04      	itt	eq
 800569e:	009b      	lsleq	r3, r3, #2
 80056a0:	3002      	addeq	r0, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	db05      	blt.n	80056b2 <__hi0bits+0x3a>
 80056a6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80056aa:	f100 0001 	add.w	r0, r0, #1
 80056ae:	bf08      	it	eq
 80056b0:	2020      	moveq	r0, #32
 80056b2:	4770      	bx	lr
 80056b4:	2000      	movs	r0, #0
 80056b6:	e7e5      	b.n	8005684 <__hi0bits+0xc>

080056b8 <__lo0bits>:
 80056b8:	6803      	ldr	r3, [r0, #0]
 80056ba:	4602      	mov	r2, r0
 80056bc:	f013 0007 	ands.w	r0, r3, #7
 80056c0:	d00b      	beq.n	80056da <__lo0bits+0x22>
 80056c2:	07d9      	lsls	r1, r3, #31
 80056c4:	d422      	bmi.n	800570c <__lo0bits+0x54>
 80056c6:	0798      	lsls	r0, r3, #30
 80056c8:	bf49      	itett	mi
 80056ca:	085b      	lsrmi	r3, r3, #1
 80056cc:	089b      	lsrpl	r3, r3, #2
 80056ce:	2001      	movmi	r0, #1
 80056d0:	6013      	strmi	r3, [r2, #0]
 80056d2:	bf5c      	itt	pl
 80056d4:	2002      	movpl	r0, #2
 80056d6:	6013      	strpl	r3, [r2, #0]
 80056d8:	4770      	bx	lr
 80056da:	b299      	uxth	r1, r3
 80056dc:	b909      	cbnz	r1, 80056e2 <__lo0bits+0x2a>
 80056de:	2010      	movs	r0, #16
 80056e0:	0c1b      	lsrs	r3, r3, #16
 80056e2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80056e6:	bf04      	itt	eq
 80056e8:	0a1b      	lsreq	r3, r3, #8
 80056ea:	3008      	addeq	r0, #8
 80056ec:	0719      	lsls	r1, r3, #28
 80056ee:	bf04      	itt	eq
 80056f0:	091b      	lsreq	r3, r3, #4
 80056f2:	3004      	addeq	r0, #4
 80056f4:	0799      	lsls	r1, r3, #30
 80056f6:	bf04      	itt	eq
 80056f8:	089b      	lsreq	r3, r3, #2
 80056fa:	3002      	addeq	r0, #2
 80056fc:	07d9      	lsls	r1, r3, #31
 80056fe:	d403      	bmi.n	8005708 <__lo0bits+0x50>
 8005700:	085b      	lsrs	r3, r3, #1
 8005702:	f100 0001 	add.w	r0, r0, #1
 8005706:	d003      	beq.n	8005710 <__lo0bits+0x58>
 8005708:	6013      	str	r3, [r2, #0]
 800570a:	4770      	bx	lr
 800570c:	2000      	movs	r0, #0
 800570e:	4770      	bx	lr
 8005710:	2020      	movs	r0, #32
 8005712:	4770      	bx	lr

08005714 <__i2b>:
 8005714:	b510      	push	{r4, lr}
 8005716:	460c      	mov	r4, r1
 8005718:	2101      	movs	r1, #1
 800571a:	f7ff ff01 	bl	8005520 <_Balloc>
 800571e:	4602      	mov	r2, r0
 8005720:	b928      	cbnz	r0, 800572e <__i2b+0x1a>
 8005722:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005726:	4b04      	ldr	r3, [pc, #16]	; (8005738 <__i2b+0x24>)
 8005728:	4804      	ldr	r0, [pc, #16]	; (800573c <__i2b+0x28>)
 800572a:	f000 fced 	bl	8006108 <__assert_func>
 800572e:	2301      	movs	r3, #1
 8005730:	6144      	str	r4, [r0, #20]
 8005732:	6103      	str	r3, [r0, #16]
 8005734:	bd10      	pop	{r4, pc}
 8005736:	bf00      	nop
 8005738:	080064c7 	.word	0x080064c7
 800573c:	08006538 	.word	0x08006538

08005740 <__multiply>:
 8005740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005744:	4614      	mov	r4, r2
 8005746:	690a      	ldr	r2, [r1, #16]
 8005748:	6923      	ldr	r3, [r4, #16]
 800574a:	460d      	mov	r5, r1
 800574c:	429a      	cmp	r2, r3
 800574e:	bfbe      	ittt	lt
 8005750:	460b      	movlt	r3, r1
 8005752:	4625      	movlt	r5, r4
 8005754:	461c      	movlt	r4, r3
 8005756:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800575a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800575e:	68ab      	ldr	r3, [r5, #8]
 8005760:	6869      	ldr	r1, [r5, #4]
 8005762:	eb0a 0709 	add.w	r7, sl, r9
 8005766:	42bb      	cmp	r3, r7
 8005768:	b085      	sub	sp, #20
 800576a:	bfb8      	it	lt
 800576c:	3101      	addlt	r1, #1
 800576e:	f7ff fed7 	bl	8005520 <_Balloc>
 8005772:	b930      	cbnz	r0, 8005782 <__multiply+0x42>
 8005774:	4602      	mov	r2, r0
 8005776:	f240 115d 	movw	r1, #349	; 0x15d
 800577a:	4b41      	ldr	r3, [pc, #260]	; (8005880 <__multiply+0x140>)
 800577c:	4841      	ldr	r0, [pc, #260]	; (8005884 <__multiply+0x144>)
 800577e:	f000 fcc3 	bl	8006108 <__assert_func>
 8005782:	f100 0614 	add.w	r6, r0, #20
 8005786:	4633      	mov	r3, r6
 8005788:	2200      	movs	r2, #0
 800578a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800578e:	4543      	cmp	r3, r8
 8005790:	d31e      	bcc.n	80057d0 <__multiply+0x90>
 8005792:	f105 0c14 	add.w	ip, r5, #20
 8005796:	f104 0314 	add.w	r3, r4, #20
 800579a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800579e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80057a2:	9202      	str	r2, [sp, #8]
 80057a4:	ebac 0205 	sub.w	r2, ip, r5
 80057a8:	3a15      	subs	r2, #21
 80057aa:	f022 0203 	bic.w	r2, r2, #3
 80057ae:	3204      	adds	r2, #4
 80057b0:	f105 0115 	add.w	r1, r5, #21
 80057b4:	458c      	cmp	ip, r1
 80057b6:	bf38      	it	cc
 80057b8:	2204      	movcc	r2, #4
 80057ba:	9201      	str	r2, [sp, #4]
 80057bc:	9a02      	ldr	r2, [sp, #8]
 80057be:	9303      	str	r3, [sp, #12]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d808      	bhi.n	80057d6 <__multiply+0x96>
 80057c4:	2f00      	cmp	r7, #0
 80057c6:	dc55      	bgt.n	8005874 <__multiply+0x134>
 80057c8:	6107      	str	r7, [r0, #16]
 80057ca:	b005      	add	sp, #20
 80057cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d0:	f843 2b04 	str.w	r2, [r3], #4
 80057d4:	e7db      	b.n	800578e <__multiply+0x4e>
 80057d6:	f8b3 a000 	ldrh.w	sl, [r3]
 80057da:	f1ba 0f00 	cmp.w	sl, #0
 80057de:	d020      	beq.n	8005822 <__multiply+0xe2>
 80057e0:	46b1      	mov	r9, r6
 80057e2:	2200      	movs	r2, #0
 80057e4:	f105 0e14 	add.w	lr, r5, #20
 80057e8:	f85e 4b04 	ldr.w	r4, [lr], #4
 80057ec:	f8d9 b000 	ldr.w	fp, [r9]
 80057f0:	b2a1      	uxth	r1, r4
 80057f2:	fa1f fb8b 	uxth.w	fp, fp
 80057f6:	fb0a b101 	mla	r1, sl, r1, fp
 80057fa:	4411      	add	r1, r2
 80057fc:	f8d9 2000 	ldr.w	r2, [r9]
 8005800:	0c24      	lsrs	r4, r4, #16
 8005802:	0c12      	lsrs	r2, r2, #16
 8005804:	fb0a 2404 	mla	r4, sl, r4, r2
 8005808:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800580c:	b289      	uxth	r1, r1
 800580e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005812:	45f4      	cmp	ip, lr
 8005814:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005818:	f849 1b04 	str.w	r1, [r9], #4
 800581c:	d8e4      	bhi.n	80057e8 <__multiply+0xa8>
 800581e:	9901      	ldr	r1, [sp, #4]
 8005820:	5072      	str	r2, [r6, r1]
 8005822:	9a03      	ldr	r2, [sp, #12]
 8005824:	3304      	adds	r3, #4
 8005826:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800582a:	f1b9 0f00 	cmp.w	r9, #0
 800582e:	d01f      	beq.n	8005870 <__multiply+0x130>
 8005830:	46b6      	mov	lr, r6
 8005832:	f04f 0a00 	mov.w	sl, #0
 8005836:	6834      	ldr	r4, [r6, #0]
 8005838:	f105 0114 	add.w	r1, r5, #20
 800583c:	880a      	ldrh	r2, [r1, #0]
 800583e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005842:	b2a4      	uxth	r4, r4
 8005844:	fb09 b202 	mla	r2, r9, r2, fp
 8005848:	4492      	add	sl, r2
 800584a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800584e:	f84e 4b04 	str.w	r4, [lr], #4
 8005852:	f851 4b04 	ldr.w	r4, [r1], #4
 8005856:	f8be 2000 	ldrh.w	r2, [lr]
 800585a:	0c24      	lsrs	r4, r4, #16
 800585c:	fb09 2404 	mla	r4, r9, r4, r2
 8005860:	458c      	cmp	ip, r1
 8005862:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005866:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800586a:	d8e7      	bhi.n	800583c <__multiply+0xfc>
 800586c:	9a01      	ldr	r2, [sp, #4]
 800586e:	50b4      	str	r4, [r6, r2]
 8005870:	3604      	adds	r6, #4
 8005872:	e7a3      	b.n	80057bc <__multiply+0x7c>
 8005874:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1a5      	bne.n	80057c8 <__multiply+0x88>
 800587c:	3f01      	subs	r7, #1
 800587e:	e7a1      	b.n	80057c4 <__multiply+0x84>
 8005880:	080064c7 	.word	0x080064c7
 8005884:	08006538 	.word	0x08006538

08005888 <__pow5mult>:
 8005888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800588c:	4615      	mov	r5, r2
 800588e:	f012 0203 	ands.w	r2, r2, #3
 8005892:	4606      	mov	r6, r0
 8005894:	460f      	mov	r7, r1
 8005896:	d007      	beq.n	80058a8 <__pow5mult+0x20>
 8005898:	4c25      	ldr	r4, [pc, #148]	; (8005930 <__pow5mult+0xa8>)
 800589a:	3a01      	subs	r2, #1
 800589c:	2300      	movs	r3, #0
 800589e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80058a2:	f7ff fe9f 	bl	80055e4 <__multadd>
 80058a6:	4607      	mov	r7, r0
 80058a8:	10ad      	asrs	r5, r5, #2
 80058aa:	d03d      	beq.n	8005928 <__pow5mult+0xa0>
 80058ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80058ae:	b97c      	cbnz	r4, 80058d0 <__pow5mult+0x48>
 80058b0:	2010      	movs	r0, #16
 80058b2:	f7ff fe1f 	bl	80054f4 <malloc>
 80058b6:	4602      	mov	r2, r0
 80058b8:	6270      	str	r0, [r6, #36]	; 0x24
 80058ba:	b928      	cbnz	r0, 80058c8 <__pow5mult+0x40>
 80058bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80058c0:	4b1c      	ldr	r3, [pc, #112]	; (8005934 <__pow5mult+0xac>)
 80058c2:	481d      	ldr	r0, [pc, #116]	; (8005938 <__pow5mult+0xb0>)
 80058c4:	f000 fc20 	bl	8006108 <__assert_func>
 80058c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80058cc:	6004      	str	r4, [r0, #0]
 80058ce:	60c4      	str	r4, [r0, #12]
 80058d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80058d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80058d8:	b94c      	cbnz	r4, 80058ee <__pow5mult+0x66>
 80058da:	f240 2171 	movw	r1, #625	; 0x271
 80058de:	4630      	mov	r0, r6
 80058e0:	f7ff ff18 	bl	8005714 <__i2b>
 80058e4:	2300      	movs	r3, #0
 80058e6:	4604      	mov	r4, r0
 80058e8:	f8c8 0008 	str.w	r0, [r8, #8]
 80058ec:	6003      	str	r3, [r0, #0]
 80058ee:	f04f 0900 	mov.w	r9, #0
 80058f2:	07eb      	lsls	r3, r5, #31
 80058f4:	d50a      	bpl.n	800590c <__pow5mult+0x84>
 80058f6:	4639      	mov	r1, r7
 80058f8:	4622      	mov	r2, r4
 80058fa:	4630      	mov	r0, r6
 80058fc:	f7ff ff20 	bl	8005740 <__multiply>
 8005900:	4680      	mov	r8, r0
 8005902:	4639      	mov	r1, r7
 8005904:	4630      	mov	r0, r6
 8005906:	f7ff fe4b 	bl	80055a0 <_Bfree>
 800590a:	4647      	mov	r7, r8
 800590c:	106d      	asrs	r5, r5, #1
 800590e:	d00b      	beq.n	8005928 <__pow5mult+0xa0>
 8005910:	6820      	ldr	r0, [r4, #0]
 8005912:	b938      	cbnz	r0, 8005924 <__pow5mult+0x9c>
 8005914:	4622      	mov	r2, r4
 8005916:	4621      	mov	r1, r4
 8005918:	4630      	mov	r0, r6
 800591a:	f7ff ff11 	bl	8005740 <__multiply>
 800591e:	6020      	str	r0, [r4, #0]
 8005920:	f8c0 9000 	str.w	r9, [r0]
 8005924:	4604      	mov	r4, r0
 8005926:	e7e4      	b.n	80058f2 <__pow5mult+0x6a>
 8005928:	4638      	mov	r0, r7
 800592a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800592e:	bf00      	nop
 8005930:	08006688 	.word	0x08006688
 8005934:	08006451 	.word	0x08006451
 8005938:	08006538 	.word	0x08006538

0800593c <__lshift>:
 800593c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005940:	460c      	mov	r4, r1
 8005942:	4607      	mov	r7, r0
 8005944:	4691      	mov	r9, r2
 8005946:	6923      	ldr	r3, [r4, #16]
 8005948:	6849      	ldr	r1, [r1, #4]
 800594a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800594e:	68a3      	ldr	r3, [r4, #8]
 8005950:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005954:	f108 0601 	add.w	r6, r8, #1
 8005958:	42b3      	cmp	r3, r6
 800595a:	db0b      	blt.n	8005974 <__lshift+0x38>
 800595c:	4638      	mov	r0, r7
 800595e:	f7ff fddf 	bl	8005520 <_Balloc>
 8005962:	4605      	mov	r5, r0
 8005964:	b948      	cbnz	r0, 800597a <__lshift+0x3e>
 8005966:	4602      	mov	r2, r0
 8005968:	f240 11d9 	movw	r1, #473	; 0x1d9
 800596c:	4b27      	ldr	r3, [pc, #156]	; (8005a0c <__lshift+0xd0>)
 800596e:	4828      	ldr	r0, [pc, #160]	; (8005a10 <__lshift+0xd4>)
 8005970:	f000 fbca 	bl	8006108 <__assert_func>
 8005974:	3101      	adds	r1, #1
 8005976:	005b      	lsls	r3, r3, #1
 8005978:	e7ee      	b.n	8005958 <__lshift+0x1c>
 800597a:	2300      	movs	r3, #0
 800597c:	f100 0114 	add.w	r1, r0, #20
 8005980:	f100 0210 	add.w	r2, r0, #16
 8005984:	4618      	mov	r0, r3
 8005986:	4553      	cmp	r3, sl
 8005988:	db33      	blt.n	80059f2 <__lshift+0xb6>
 800598a:	6920      	ldr	r0, [r4, #16]
 800598c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005990:	f104 0314 	add.w	r3, r4, #20
 8005994:	f019 091f 	ands.w	r9, r9, #31
 8005998:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800599c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80059a0:	d02b      	beq.n	80059fa <__lshift+0xbe>
 80059a2:	468a      	mov	sl, r1
 80059a4:	2200      	movs	r2, #0
 80059a6:	f1c9 0e20 	rsb	lr, r9, #32
 80059aa:	6818      	ldr	r0, [r3, #0]
 80059ac:	fa00 f009 	lsl.w	r0, r0, r9
 80059b0:	4302      	orrs	r2, r0
 80059b2:	f84a 2b04 	str.w	r2, [sl], #4
 80059b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80059ba:	459c      	cmp	ip, r3
 80059bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80059c0:	d8f3      	bhi.n	80059aa <__lshift+0x6e>
 80059c2:	ebac 0304 	sub.w	r3, ip, r4
 80059c6:	3b15      	subs	r3, #21
 80059c8:	f023 0303 	bic.w	r3, r3, #3
 80059cc:	3304      	adds	r3, #4
 80059ce:	f104 0015 	add.w	r0, r4, #21
 80059d2:	4584      	cmp	ip, r0
 80059d4:	bf38      	it	cc
 80059d6:	2304      	movcc	r3, #4
 80059d8:	50ca      	str	r2, [r1, r3]
 80059da:	b10a      	cbz	r2, 80059e0 <__lshift+0xa4>
 80059dc:	f108 0602 	add.w	r6, r8, #2
 80059e0:	3e01      	subs	r6, #1
 80059e2:	4638      	mov	r0, r7
 80059e4:	4621      	mov	r1, r4
 80059e6:	612e      	str	r6, [r5, #16]
 80059e8:	f7ff fdda 	bl	80055a0 <_Bfree>
 80059ec:	4628      	mov	r0, r5
 80059ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80059f6:	3301      	adds	r3, #1
 80059f8:	e7c5      	b.n	8005986 <__lshift+0x4a>
 80059fa:	3904      	subs	r1, #4
 80059fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a00:	459c      	cmp	ip, r3
 8005a02:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a06:	d8f9      	bhi.n	80059fc <__lshift+0xc0>
 8005a08:	e7ea      	b.n	80059e0 <__lshift+0xa4>
 8005a0a:	bf00      	nop
 8005a0c:	080064c7 	.word	0x080064c7
 8005a10:	08006538 	.word	0x08006538

08005a14 <__mcmp>:
 8005a14:	4603      	mov	r3, r0
 8005a16:	690a      	ldr	r2, [r1, #16]
 8005a18:	6900      	ldr	r0, [r0, #16]
 8005a1a:	b530      	push	{r4, r5, lr}
 8005a1c:	1a80      	subs	r0, r0, r2
 8005a1e:	d10d      	bne.n	8005a3c <__mcmp+0x28>
 8005a20:	3314      	adds	r3, #20
 8005a22:	3114      	adds	r1, #20
 8005a24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005a28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005a2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005a30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005a34:	4295      	cmp	r5, r2
 8005a36:	d002      	beq.n	8005a3e <__mcmp+0x2a>
 8005a38:	d304      	bcc.n	8005a44 <__mcmp+0x30>
 8005a3a:	2001      	movs	r0, #1
 8005a3c:	bd30      	pop	{r4, r5, pc}
 8005a3e:	42a3      	cmp	r3, r4
 8005a40:	d3f4      	bcc.n	8005a2c <__mcmp+0x18>
 8005a42:	e7fb      	b.n	8005a3c <__mcmp+0x28>
 8005a44:	f04f 30ff 	mov.w	r0, #4294967295
 8005a48:	e7f8      	b.n	8005a3c <__mcmp+0x28>
	...

08005a4c <__mdiff>:
 8005a4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a50:	460c      	mov	r4, r1
 8005a52:	4606      	mov	r6, r0
 8005a54:	4611      	mov	r1, r2
 8005a56:	4620      	mov	r0, r4
 8005a58:	4692      	mov	sl, r2
 8005a5a:	f7ff ffdb 	bl	8005a14 <__mcmp>
 8005a5e:	1e05      	subs	r5, r0, #0
 8005a60:	d111      	bne.n	8005a86 <__mdiff+0x3a>
 8005a62:	4629      	mov	r1, r5
 8005a64:	4630      	mov	r0, r6
 8005a66:	f7ff fd5b 	bl	8005520 <_Balloc>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	b928      	cbnz	r0, 8005a7a <__mdiff+0x2e>
 8005a6e:	f240 2132 	movw	r1, #562	; 0x232
 8005a72:	4b3c      	ldr	r3, [pc, #240]	; (8005b64 <__mdiff+0x118>)
 8005a74:	483c      	ldr	r0, [pc, #240]	; (8005b68 <__mdiff+0x11c>)
 8005a76:	f000 fb47 	bl	8006108 <__assert_func>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005a80:	4610      	mov	r0, r2
 8005a82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a86:	bfa4      	itt	ge
 8005a88:	4653      	movge	r3, sl
 8005a8a:	46a2      	movge	sl, r4
 8005a8c:	4630      	mov	r0, r6
 8005a8e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005a92:	bfa6      	itte	ge
 8005a94:	461c      	movge	r4, r3
 8005a96:	2500      	movge	r5, #0
 8005a98:	2501      	movlt	r5, #1
 8005a9a:	f7ff fd41 	bl	8005520 <_Balloc>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	b918      	cbnz	r0, 8005aaa <__mdiff+0x5e>
 8005aa2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005aa6:	4b2f      	ldr	r3, [pc, #188]	; (8005b64 <__mdiff+0x118>)
 8005aa8:	e7e4      	b.n	8005a74 <__mdiff+0x28>
 8005aaa:	f100 0814 	add.w	r8, r0, #20
 8005aae:	f8da 7010 	ldr.w	r7, [sl, #16]
 8005ab2:	60c5      	str	r5, [r0, #12]
 8005ab4:	f04f 0c00 	mov.w	ip, #0
 8005ab8:	f10a 0514 	add.w	r5, sl, #20
 8005abc:	f10a 0010 	add.w	r0, sl, #16
 8005ac0:	46c2      	mov	sl, r8
 8005ac2:	6926      	ldr	r6, [r4, #16]
 8005ac4:	f104 0914 	add.w	r9, r4, #20
 8005ac8:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8005acc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005ad0:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8005ad4:	f859 3b04 	ldr.w	r3, [r9], #4
 8005ad8:	fa1f f18b 	uxth.w	r1, fp
 8005adc:	4461      	add	r1, ip
 8005ade:	fa1f fc83 	uxth.w	ip, r3
 8005ae2:	0c1b      	lsrs	r3, r3, #16
 8005ae4:	eba1 010c 	sub.w	r1, r1, ip
 8005ae8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005aec:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005af0:	b289      	uxth	r1, r1
 8005af2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005af6:	454e      	cmp	r6, r9
 8005af8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005afc:	f84a 3b04 	str.w	r3, [sl], #4
 8005b00:	d8e6      	bhi.n	8005ad0 <__mdiff+0x84>
 8005b02:	1b33      	subs	r3, r6, r4
 8005b04:	3b15      	subs	r3, #21
 8005b06:	f023 0303 	bic.w	r3, r3, #3
 8005b0a:	3415      	adds	r4, #21
 8005b0c:	3304      	adds	r3, #4
 8005b0e:	42a6      	cmp	r6, r4
 8005b10:	bf38      	it	cc
 8005b12:	2304      	movcc	r3, #4
 8005b14:	441d      	add	r5, r3
 8005b16:	4443      	add	r3, r8
 8005b18:	461e      	mov	r6, r3
 8005b1a:	462c      	mov	r4, r5
 8005b1c:	4574      	cmp	r4, lr
 8005b1e:	d30e      	bcc.n	8005b3e <__mdiff+0xf2>
 8005b20:	f10e 0103 	add.w	r1, lr, #3
 8005b24:	1b49      	subs	r1, r1, r5
 8005b26:	f021 0103 	bic.w	r1, r1, #3
 8005b2a:	3d03      	subs	r5, #3
 8005b2c:	45ae      	cmp	lr, r5
 8005b2e:	bf38      	it	cc
 8005b30:	2100      	movcc	r1, #0
 8005b32:	4419      	add	r1, r3
 8005b34:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005b38:	b18b      	cbz	r3, 8005b5e <__mdiff+0x112>
 8005b3a:	6117      	str	r7, [r2, #16]
 8005b3c:	e7a0      	b.n	8005a80 <__mdiff+0x34>
 8005b3e:	f854 8b04 	ldr.w	r8, [r4], #4
 8005b42:	fa1f f188 	uxth.w	r1, r8
 8005b46:	4461      	add	r1, ip
 8005b48:	1408      	asrs	r0, r1, #16
 8005b4a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8005b4e:	b289      	uxth	r1, r1
 8005b50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005b54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005b58:	f846 1b04 	str.w	r1, [r6], #4
 8005b5c:	e7de      	b.n	8005b1c <__mdiff+0xd0>
 8005b5e:	3f01      	subs	r7, #1
 8005b60:	e7e8      	b.n	8005b34 <__mdiff+0xe8>
 8005b62:	bf00      	nop
 8005b64:	080064c7 	.word	0x080064c7
 8005b68:	08006538 	.word	0x08006538

08005b6c <__d2b>:
 8005b6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005b70:	2101      	movs	r1, #1
 8005b72:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005b76:	4690      	mov	r8, r2
 8005b78:	461d      	mov	r5, r3
 8005b7a:	f7ff fcd1 	bl	8005520 <_Balloc>
 8005b7e:	4604      	mov	r4, r0
 8005b80:	b930      	cbnz	r0, 8005b90 <__d2b+0x24>
 8005b82:	4602      	mov	r2, r0
 8005b84:	f240 310a 	movw	r1, #778	; 0x30a
 8005b88:	4b24      	ldr	r3, [pc, #144]	; (8005c1c <__d2b+0xb0>)
 8005b8a:	4825      	ldr	r0, [pc, #148]	; (8005c20 <__d2b+0xb4>)
 8005b8c:	f000 fabc 	bl	8006108 <__assert_func>
 8005b90:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005b94:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005b98:	bb2d      	cbnz	r5, 8005be6 <__d2b+0x7a>
 8005b9a:	9301      	str	r3, [sp, #4]
 8005b9c:	f1b8 0300 	subs.w	r3, r8, #0
 8005ba0:	d026      	beq.n	8005bf0 <__d2b+0x84>
 8005ba2:	4668      	mov	r0, sp
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	f7ff fd87 	bl	80056b8 <__lo0bits>
 8005baa:	9900      	ldr	r1, [sp, #0]
 8005bac:	b1f0      	cbz	r0, 8005bec <__d2b+0x80>
 8005bae:	9a01      	ldr	r2, [sp, #4]
 8005bb0:	f1c0 0320 	rsb	r3, r0, #32
 8005bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb8:	430b      	orrs	r3, r1
 8005bba:	40c2      	lsrs	r2, r0
 8005bbc:	6163      	str	r3, [r4, #20]
 8005bbe:	9201      	str	r2, [sp, #4]
 8005bc0:	9b01      	ldr	r3, [sp, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	bf14      	ite	ne
 8005bc6:	2102      	movne	r1, #2
 8005bc8:	2101      	moveq	r1, #1
 8005bca:	61a3      	str	r3, [r4, #24]
 8005bcc:	6121      	str	r1, [r4, #16]
 8005bce:	b1c5      	cbz	r5, 8005c02 <__d2b+0x96>
 8005bd0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005bd4:	4405      	add	r5, r0
 8005bd6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005bda:	603d      	str	r5, [r7, #0]
 8005bdc:	6030      	str	r0, [r6, #0]
 8005bde:	4620      	mov	r0, r4
 8005be0:	b002      	add	sp, #8
 8005be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005be6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bea:	e7d6      	b.n	8005b9a <__d2b+0x2e>
 8005bec:	6161      	str	r1, [r4, #20]
 8005bee:	e7e7      	b.n	8005bc0 <__d2b+0x54>
 8005bf0:	a801      	add	r0, sp, #4
 8005bf2:	f7ff fd61 	bl	80056b8 <__lo0bits>
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	9b01      	ldr	r3, [sp, #4]
 8005bfa:	6121      	str	r1, [r4, #16]
 8005bfc:	6163      	str	r3, [r4, #20]
 8005bfe:	3020      	adds	r0, #32
 8005c00:	e7e5      	b.n	8005bce <__d2b+0x62>
 8005c02:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005c06:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005c0a:	6038      	str	r0, [r7, #0]
 8005c0c:	6918      	ldr	r0, [r3, #16]
 8005c0e:	f7ff fd33 	bl	8005678 <__hi0bits>
 8005c12:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005c16:	6031      	str	r1, [r6, #0]
 8005c18:	e7e1      	b.n	8005bde <__d2b+0x72>
 8005c1a:	bf00      	nop
 8005c1c:	080064c7 	.word	0x080064c7
 8005c20:	08006538 	.word	0x08006538

08005c24 <_calloc_r>:
 8005c24:	b538      	push	{r3, r4, r5, lr}
 8005c26:	fb02 f501 	mul.w	r5, r2, r1
 8005c2a:	4629      	mov	r1, r5
 8005c2c:	f000 f854 	bl	8005cd8 <_malloc_r>
 8005c30:	4604      	mov	r4, r0
 8005c32:	b118      	cbz	r0, 8005c3c <_calloc_r+0x18>
 8005c34:	462a      	mov	r2, r5
 8005c36:	2100      	movs	r1, #0
 8005c38:	f7fd fe06 	bl	8003848 <memset>
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	bd38      	pop	{r3, r4, r5, pc}

08005c40 <_free_r>:
 8005c40:	b538      	push	{r3, r4, r5, lr}
 8005c42:	4605      	mov	r5, r0
 8005c44:	2900      	cmp	r1, #0
 8005c46:	d043      	beq.n	8005cd0 <_free_r+0x90>
 8005c48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c4c:	1f0c      	subs	r4, r1, #4
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	bfb8      	it	lt
 8005c52:	18e4      	addlt	r4, r4, r3
 8005c54:	f000 fade 	bl	8006214 <__malloc_lock>
 8005c58:	4a1e      	ldr	r2, [pc, #120]	; (8005cd4 <_free_r+0x94>)
 8005c5a:	6813      	ldr	r3, [r2, #0]
 8005c5c:	4610      	mov	r0, r2
 8005c5e:	b933      	cbnz	r3, 8005c6e <_free_r+0x2e>
 8005c60:	6063      	str	r3, [r4, #4]
 8005c62:	6014      	str	r4, [r2, #0]
 8005c64:	4628      	mov	r0, r5
 8005c66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c6a:	f000 bad9 	b.w	8006220 <__malloc_unlock>
 8005c6e:	42a3      	cmp	r3, r4
 8005c70:	d90a      	bls.n	8005c88 <_free_r+0x48>
 8005c72:	6821      	ldr	r1, [r4, #0]
 8005c74:	1862      	adds	r2, r4, r1
 8005c76:	4293      	cmp	r3, r2
 8005c78:	bf01      	itttt	eq
 8005c7a:	681a      	ldreq	r2, [r3, #0]
 8005c7c:	685b      	ldreq	r3, [r3, #4]
 8005c7e:	1852      	addeq	r2, r2, r1
 8005c80:	6022      	streq	r2, [r4, #0]
 8005c82:	6063      	str	r3, [r4, #4]
 8005c84:	6004      	str	r4, [r0, #0]
 8005c86:	e7ed      	b.n	8005c64 <_free_r+0x24>
 8005c88:	461a      	mov	r2, r3
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	b10b      	cbz	r3, 8005c92 <_free_r+0x52>
 8005c8e:	42a3      	cmp	r3, r4
 8005c90:	d9fa      	bls.n	8005c88 <_free_r+0x48>
 8005c92:	6811      	ldr	r1, [r2, #0]
 8005c94:	1850      	adds	r0, r2, r1
 8005c96:	42a0      	cmp	r0, r4
 8005c98:	d10b      	bne.n	8005cb2 <_free_r+0x72>
 8005c9a:	6820      	ldr	r0, [r4, #0]
 8005c9c:	4401      	add	r1, r0
 8005c9e:	1850      	adds	r0, r2, r1
 8005ca0:	4283      	cmp	r3, r0
 8005ca2:	6011      	str	r1, [r2, #0]
 8005ca4:	d1de      	bne.n	8005c64 <_free_r+0x24>
 8005ca6:	6818      	ldr	r0, [r3, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	4401      	add	r1, r0
 8005cac:	6011      	str	r1, [r2, #0]
 8005cae:	6053      	str	r3, [r2, #4]
 8005cb0:	e7d8      	b.n	8005c64 <_free_r+0x24>
 8005cb2:	d902      	bls.n	8005cba <_free_r+0x7a>
 8005cb4:	230c      	movs	r3, #12
 8005cb6:	602b      	str	r3, [r5, #0]
 8005cb8:	e7d4      	b.n	8005c64 <_free_r+0x24>
 8005cba:	6820      	ldr	r0, [r4, #0]
 8005cbc:	1821      	adds	r1, r4, r0
 8005cbe:	428b      	cmp	r3, r1
 8005cc0:	bf01      	itttt	eq
 8005cc2:	6819      	ldreq	r1, [r3, #0]
 8005cc4:	685b      	ldreq	r3, [r3, #4]
 8005cc6:	1809      	addeq	r1, r1, r0
 8005cc8:	6021      	streq	r1, [r4, #0]
 8005cca:	6063      	str	r3, [r4, #4]
 8005ccc:	6054      	str	r4, [r2, #4]
 8005cce:	e7c9      	b.n	8005c64 <_free_r+0x24>
 8005cd0:	bd38      	pop	{r3, r4, r5, pc}
 8005cd2:	bf00      	nop
 8005cd4:	20000284 	.word	0x20000284

08005cd8 <_malloc_r>:
 8005cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cda:	1ccd      	adds	r5, r1, #3
 8005cdc:	f025 0503 	bic.w	r5, r5, #3
 8005ce0:	3508      	adds	r5, #8
 8005ce2:	2d0c      	cmp	r5, #12
 8005ce4:	bf38      	it	cc
 8005ce6:	250c      	movcc	r5, #12
 8005ce8:	2d00      	cmp	r5, #0
 8005cea:	4606      	mov	r6, r0
 8005cec:	db01      	blt.n	8005cf2 <_malloc_r+0x1a>
 8005cee:	42a9      	cmp	r1, r5
 8005cf0:	d903      	bls.n	8005cfa <_malloc_r+0x22>
 8005cf2:	230c      	movs	r3, #12
 8005cf4:	6033      	str	r3, [r6, #0]
 8005cf6:	2000      	movs	r0, #0
 8005cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cfa:	f000 fa8b 	bl	8006214 <__malloc_lock>
 8005cfe:	4921      	ldr	r1, [pc, #132]	; (8005d84 <_malloc_r+0xac>)
 8005d00:	680a      	ldr	r2, [r1, #0]
 8005d02:	4614      	mov	r4, r2
 8005d04:	b99c      	cbnz	r4, 8005d2e <_malloc_r+0x56>
 8005d06:	4f20      	ldr	r7, [pc, #128]	; (8005d88 <_malloc_r+0xb0>)
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	b923      	cbnz	r3, 8005d16 <_malloc_r+0x3e>
 8005d0c:	4621      	mov	r1, r4
 8005d0e:	4630      	mov	r0, r6
 8005d10:	f000 f994 	bl	800603c <_sbrk_r>
 8005d14:	6038      	str	r0, [r7, #0]
 8005d16:	4629      	mov	r1, r5
 8005d18:	4630      	mov	r0, r6
 8005d1a:	f000 f98f 	bl	800603c <_sbrk_r>
 8005d1e:	1c43      	adds	r3, r0, #1
 8005d20:	d123      	bne.n	8005d6a <_malloc_r+0x92>
 8005d22:	230c      	movs	r3, #12
 8005d24:	4630      	mov	r0, r6
 8005d26:	6033      	str	r3, [r6, #0]
 8005d28:	f000 fa7a 	bl	8006220 <__malloc_unlock>
 8005d2c:	e7e3      	b.n	8005cf6 <_malloc_r+0x1e>
 8005d2e:	6823      	ldr	r3, [r4, #0]
 8005d30:	1b5b      	subs	r3, r3, r5
 8005d32:	d417      	bmi.n	8005d64 <_malloc_r+0x8c>
 8005d34:	2b0b      	cmp	r3, #11
 8005d36:	d903      	bls.n	8005d40 <_malloc_r+0x68>
 8005d38:	6023      	str	r3, [r4, #0]
 8005d3a:	441c      	add	r4, r3
 8005d3c:	6025      	str	r5, [r4, #0]
 8005d3e:	e004      	b.n	8005d4a <_malloc_r+0x72>
 8005d40:	6863      	ldr	r3, [r4, #4]
 8005d42:	42a2      	cmp	r2, r4
 8005d44:	bf0c      	ite	eq
 8005d46:	600b      	streq	r3, [r1, #0]
 8005d48:	6053      	strne	r3, [r2, #4]
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	f000 fa68 	bl	8006220 <__malloc_unlock>
 8005d50:	f104 000b 	add.w	r0, r4, #11
 8005d54:	1d23      	adds	r3, r4, #4
 8005d56:	f020 0007 	bic.w	r0, r0, #7
 8005d5a:	1ac2      	subs	r2, r0, r3
 8005d5c:	d0cc      	beq.n	8005cf8 <_malloc_r+0x20>
 8005d5e:	1a1b      	subs	r3, r3, r0
 8005d60:	50a3      	str	r3, [r4, r2]
 8005d62:	e7c9      	b.n	8005cf8 <_malloc_r+0x20>
 8005d64:	4622      	mov	r2, r4
 8005d66:	6864      	ldr	r4, [r4, #4]
 8005d68:	e7cc      	b.n	8005d04 <_malloc_r+0x2c>
 8005d6a:	1cc4      	adds	r4, r0, #3
 8005d6c:	f024 0403 	bic.w	r4, r4, #3
 8005d70:	42a0      	cmp	r0, r4
 8005d72:	d0e3      	beq.n	8005d3c <_malloc_r+0x64>
 8005d74:	1a21      	subs	r1, r4, r0
 8005d76:	4630      	mov	r0, r6
 8005d78:	f000 f960 	bl	800603c <_sbrk_r>
 8005d7c:	3001      	adds	r0, #1
 8005d7e:	d1dd      	bne.n	8005d3c <_malloc_r+0x64>
 8005d80:	e7cf      	b.n	8005d22 <_malloc_r+0x4a>
 8005d82:	bf00      	nop
 8005d84:	20000284 	.word	0x20000284
 8005d88:	20000288 	.word	0x20000288

08005d8c <__sfputc_r>:
 8005d8c:	6893      	ldr	r3, [r2, #8]
 8005d8e:	b410      	push	{r4}
 8005d90:	3b01      	subs	r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	6093      	str	r3, [r2, #8]
 8005d96:	da07      	bge.n	8005da8 <__sfputc_r+0x1c>
 8005d98:	6994      	ldr	r4, [r2, #24]
 8005d9a:	42a3      	cmp	r3, r4
 8005d9c:	db01      	blt.n	8005da2 <__sfputc_r+0x16>
 8005d9e:	290a      	cmp	r1, #10
 8005da0:	d102      	bne.n	8005da8 <__sfputc_r+0x1c>
 8005da2:	bc10      	pop	{r4}
 8005da4:	f7fe ba46 	b.w	8004234 <__swbuf_r>
 8005da8:	6813      	ldr	r3, [r2, #0]
 8005daa:	1c58      	adds	r0, r3, #1
 8005dac:	6010      	str	r0, [r2, #0]
 8005dae:	7019      	strb	r1, [r3, #0]
 8005db0:	4608      	mov	r0, r1
 8005db2:	bc10      	pop	{r4}
 8005db4:	4770      	bx	lr

08005db6 <__sfputs_r>:
 8005db6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db8:	4606      	mov	r6, r0
 8005dba:	460f      	mov	r7, r1
 8005dbc:	4614      	mov	r4, r2
 8005dbe:	18d5      	adds	r5, r2, r3
 8005dc0:	42ac      	cmp	r4, r5
 8005dc2:	d101      	bne.n	8005dc8 <__sfputs_r+0x12>
 8005dc4:	2000      	movs	r0, #0
 8005dc6:	e007      	b.n	8005dd8 <__sfputs_r+0x22>
 8005dc8:	463a      	mov	r2, r7
 8005dca:	4630      	mov	r0, r6
 8005dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dd0:	f7ff ffdc 	bl	8005d8c <__sfputc_r>
 8005dd4:	1c43      	adds	r3, r0, #1
 8005dd6:	d1f3      	bne.n	8005dc0 <__sfputs_r+0xa>
 8005dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ddc <_vfiprintf_r>:
 8005ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005de0:	460d      	mov	r5, r1
 8005de2:	4614      	mov	r4, r2
 8005de4:	4698      	mov	r8, r3
 8005de6:	4606      	mov	r6, r0
 8005de8:	b09d      	sub	sp, #116	; 0x74
 8005dea:	b118      	cbz	r0, 8005df4 <_vfiprintf_r+0x18>
 8005dec:	6983      	ldr	r3, [r0, #24]
 8005dee:	b90b      	cbnz	r3, 8005df4 <_vfiprintf_r+0x18>
 8005df0:	f7ff fa76 	bl	80052e0 <__sinit>
 8005df4:	4b89      	ldr	r3, [pc, #548]	; (800601c <_vfiprintf_r+0x240>)
 8005df6:	429d      	cmp	r5, r3
 8005df8:	d11b      	bne.n	8005e32 <_vfiprintf_r+0x56>
 8005dfa:	6875      	ldr	r5, [r6, #4]
 8005dfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dfe:	07d9      	lsls	r1, r3, #31
 8005e00:	d405      	bmi.n	8005e0e <_vfiprintf_r+0x32>
 8005e02:	89ab      	ldrh	r3, [r5, #12]
 8005e04:	059a      	lsls	r2, r3, #22
 8005e06:	d402      	bmi.n	8005e0e <_vfiprintf_r+0x32>
 8005e08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e0a:	f7ff fb0c 	bl	8005426 <__retarget_lock_acquire_recursive>
 8005e0e:	89ab      	ldrh	r3, [r5, #12]
 8005e10:	071b      	lsls	r3, r3, #28
 8005e12:	d501      	bpl.n	8005e18 <_vfiprintf_r+0x3c>
 8005e14:	692b      	ldr	r3, [r5, #16]
 8005e16:	b9eb      	cbnz	r3, 8005e54 <_vfiprintf_r+0x78>
 8005e18:	4629      	mov	r1, r5
 8005e1a:	4630      	mov	r0, r6
 8005e1c:	f7fe fa5c 	bl	80042d8 <__swsetup_r>
 8005e20:	b1c0      	cbz	r0, 8005e54 <_vfiprintf_r+0x78>
 8005e22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e24:	07dc      	lsls	r4, r3, #31
 8005e26:	d50e      	bpl.n	8005e46 <_vfiprintf_r+0x6a>
 8005e28:	f04f 30ff 	mov.w	r0, #4294967295
 8005e2c:	b01d      	add	sp, #116	; 0x74
 8005e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e32:	4b7b      	ldr	r3, [pc, #492]	; (8006020 <_vfiprintf_r+0x244>)
 8005e34:	429d      	cmp	r5, r3
 8005e36:	d101      	bne.n	8005e3c <_vfiprintf_r+0x60>
 8005e38:	68b5      	ldr	r5, [r6, #8]
 8005e3a:	e7df      	b.n	8005dfc <_vfiprintf_r+0x20>
 8005e3c:	4b79      	ldr	r3, [pc, #484]	; (8006024 <_vfiprintf_r+0x248>)
 8005e3e:	429d      	cmp	r5, r3
 8005e40:	bf08      	it	eq
 8005e42:	68f5      	ldreq	r5, [r6, #12]
 8005e44:	e7da      	b.n	8005dfc <_vfiprintf_r+0x20>
 8005e46:	89ab      	ldrh	r3, [r5, #12]
 8005e48:	0598      	lsls	r0, r3, #22
 8005e4a:	d4ed      	bmi.n	8005e28 <_vfiprintf_r+0x4c>
 8005e4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e4e:	f7ff faeb 	bl	8005428 <__retarget_lock_release_recursive>
 8005e52:	e7e9      	b.n	8005e28 <_vfiprintf_r+0x4c>
 8005e54:	2300      	movs	r3, #0
 8005e56:	9309      	str	r3, [sp, #36]	; 0x24
 8005e58:	2320      	movs	r3, #32
 8005e5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e5e:	2330      	movs	r3, #48	; 0x30
 8005e60:	f04f 0901 	mov.w	r9, #1
 8005e64:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e68:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006028 <_vfiprintf_r+0x24c>
 8005e6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e70:	4623      	mov	r3, r4
 8005e72:	469a      	mov	sl, r3
 8005e74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e78:	b10a      	cbz	r2, 8005e7e <_vfiprintf_r+0xa2>
 8005e7a:	2a25      	cmp	r2, #37	; 0x25
 8005e7c:	d1f9      	bne.n	8005e72 <_vfiprintf_r+0x96>
 8005e7e:	ebba 0b04 	subs.w	fp, sl, r4
 8005e82:	d00b      	beq.n	8005e9c <_vfiprintf_r+0xc0>
 8005e84:	465b      	mov	r3, fp
 8005e86:	4622      	mov	r2, r4
 8005e88:	4629      	mov	r1, r5
 8005e8a:	4630      	mov	r0, r6
 8005e8c:	f7ff ff93 	bl	8005db6 <__sfputs_r>
 8005e90:	3001      	adds	r0, #1
 8005e92:	f000 80aa 	beq.w	8005fea <_vfiprintf_r+0x20e>
 8005e96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e98:	445a      	add	r2, fp
 8005e9a:	9209      	str	r2, [sp, #36]	; 0x24
 8005e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 80a2 	beq.w	8005fea <_vfiprintf_r+0x20e>
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8005eac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005eb0:	f10a 0a01 	add.w	sl, sl, #1
 8005eb4:	9304      	str	r3, [sp, #16]
 8005eb6:	9307      	str	r3, [sp, #28]
 8005eb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ebc:	931a      	str	r3, [sp, #104]	; 0x68
 8005ebe:	4654      	mov	r4, sl
 8005ec0:	2205      	movs	r2, #5
 8005ec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ec6:	4858      	ldr	r0, [pc, #352]	; (8006028 <_vfiprintf_r+0x24c>)
 8005ec8:	f7ff fb1c 	bl	8005504 <memchr>
 8005ecc:	9a04      	ldr	r2, [sp, #16]
 8005ece:	b9d8      	cbnz	r0, 8005f08 <_vfiprintf_r+0x12c>
 8005ed0:	06d1      	lsls	r1, r2, #27
 8005ed2:	bf44      	itt	mi
 8005ed4:	2320      	movmi	r3, #32
 8005ed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005eda:	0713      	lsls	r3, r2, #28
 8005edc:	bf44      	itt	mi
 8005ede:	232b      	movmi	r3, #43	; 0x2b
 8005ee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ee4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ee8:	2b2a      	cmp	r3, #42	; 0x2a
 8005eea:	d015      	beq.n	8005f18 <_vfiprintf_r+0x13c>
 8005eec:	4654      	mov	r4, sl
 8005eee:	2000      	movs	r0, #0
 8005ef0:	f04f 0c0a 	mov.w	ip, #10
 8005ef4:	9a07      	ldr	r2, [sp, #28]
 8005ef6:	4621      	mov	r1, r4
 8005ef8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005efc:	3b30      	subs	r3, #48	; 0x30
 8005efe:	2b09      	cmp	r3, #9
 8005f00:	d94e      	bls.n	8005fa0 <_vfiprintf_r+0x1c4>
 8005f02:	b1b0      	cbz	r0, 8005f32 <_vfiprintf_r+0x156>
 8005f04:	9207      	str	r2, [sp, #28]
 8005f06:	e014      	b.n	8005f32 <_vfiprintf_r+0x156>
 8005f08:	eba0 0308 	sub.w	r3, r0, r8
 8005f0c:	fa09 f303 	lsl.w	r3, r9, r3
 8005f10:	4313      	orrs	r3, r2
 8005f12:	46a2      	mov	sl, r4
 8005f14:	9304      	str	r3, [sp, #16]
 8005f16:	e7d2      	b.n	8005ebe <_vfiprintf_r+0xe2>
 8005f18:	9b03      	ldr	r3, [sp, #12]
 8005f1a:	1d19      	adds	r1, r3, #4
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	9103      	str	r1, [sp, #12]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	bfbb      	ittet	lt
 8005f24:	425b      	neglt	r3, r3
 8005f26:	f042 0202 	orrlt.w	r2, r2, #2
 8005f2a:	9307      	strge	r3, [sp, #28]
 8005f2c:	9307      	strlt	r3, [sp, #28]
 8005f2e:	bfb8      	it	lt
 8005f30:	9204      	strlt	r2, [sp, #16]
 8005f32:	7823      	ldrb	r3, [r4, #0]
 8005f34:	2b2e      	cmp	r3, #46	; 0x2e
 8005f36:	d10c      	bne.n	8005f52 <_vfiprintf_r+0x176>
 8005f38:	7863      	ldrb	r3, [r4, #1]
 8005f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8005f3c:	d135      	bne.n	8005faa <_vfiprintf_r+0x1ce>
 8005f3e:	9b03      	ldr	r3, [sp, #12]
 8005f40:	3402      	adds	r4, #2
 8005f42:	1d1a      	adds	r2, r3, #4
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	9203      	str	r2, [sp, #12]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	bfb8      	it	lt
 8005f4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f50:	9305      	str	r3, [sp, #20]
 8005f52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006038 <_vfiprintf_r+0x25c>
 8005f56:	2203      	movs	r2, #3
 8005f58:	4650      	mov	r0, sl
 8005f5a:	7821      	ldrb	r1, [r4, #0]
 8005f5c:	f7ff fad2 	bl	8005504 <memchr>
 8005f60:	b140      	cbz	r0, 8005f74 <_vfiprintf_r+0x198>
 8005f62:	2340      	movs	r3, #64	; 0x40
 8005f64:	eba0 000a 	sub.w	r0, r0, sl
 8005f68:	fa03 f000 	lsl.w	r0, r3, r0
 8005f6c:	9b04      	ldr	r3, [sp, #16]
 8005f6e:	3401      	adds	r4, #1
 8005f70:	4303      	orrs	r3, r0
 8005f72:	9304      	str	r3, [sp, #16]
 8005f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f78:	2206      	movs	r2, #6
 8005f7a:	482c      	ldr	r0, [pc, #176]	; (800602c <_vfiprintf_r+0x250>)
 8005f7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f80:	f7ff fac0 	bl	8005504 <memchr>
 8005f84:	2800      	cmp	r0, #0
 8005f86:	d03f      	beq.n	8006008 <_vfiprintf_r+0x22c>
 8005f88:	4b29      	ldr	r3, [pc, #164]	; (8006030 <_vfiprintf_r+0x254>)
 8005f8a:	bb1b      	cbnz	r3, 8005fd4 <_vfiprintf_r+0x1f8>
 8005f8c:	9b03      	ldr	r3, [sp, #12]
 8005f8e:	3307      	adds	r3, #7
 8005f90:	f023 0307 	bic.w	r3, r3, #7
 8005f94:	3308      	adds	r3, #8
 8005f96:	9303      	str	r3, [sp, #12]
 8005f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f9a:	443b      	add	r3, r7
 8005f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f9e:	e767      	b.n	8005e70 <_vfiprintf_r+0x94>
 8005fa0:	460c      	mov	r4, r1
 8005fa2:	2001      	movs	r0, #1
 8005fa4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fa8:	e7a5      	b.n	8005ef6 <_vfiprintf_r+0x11a>
 8005faa:	2300      	movs	r3, #0
 8005fac:	f04f 0c0a 	mov.w	ip, #10
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	3401      	adds	r4, #1
 8005fb4:	9305      	str	r3, [sp, #20]
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fbc:	3a30      	subs	r2, #48	; 0x30
 8005fbe:	2a09      	cmp	r2, #9
 8005fc0:	d903      	bls.n	8005fca <_vfiprintf_r+0x1ee>
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d0c5      	beq.n	8005f52 <_vfiprintf_r+0x176>
 8005fc6:	9105      	str	r1, [sp, #20]
 8005fc8:	e7c3      	b.n	8005f52 <_vfiprintf_r+0x176>
 8005fca:	4604      	mov	r4, r0
 8005fcc:	2301      	movs	r3, #1
 8005fce:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fd2:	e7f0      	b.n	8005fb6 <_vfiprintf_r+0x1da>
 8005fd4:	ab03      	add	r3, sp, #12
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	462a      	mov	r2, r5
 8005fda:	4630      	mov	r0, r6
 8005fdc:	4b15      	ldr	r3, [pc, #84]	; (8006034 <_vfiprintf_r+0x258>)
 8005fde:	a904      	add	r1, sp, #16
 8005fe0:	f7fd fcd8 	bl	8003994 <_printf_float>
 8005fe4:	4607      	mov	r7, r0
 8005fe6:	1c78      	adds	r0, r7, #1
 8005fe8:	d1d6      	bne.n	8005f98 <_vfiprintf_r+0x1bc>
 8005fea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fec:	07d9      	lsls	r1, r3, #31
 8005fee:	d405      	bmi.n	8005ffc <_vfiprintf_r+0x220>
 8005ff0:	89ab      	ldrh	r3, [r5, #12]
 8005ff2:	059a      	lsls	r2, r3, #22
 8005ff4:	d402      	bmi.n	8005ffc <_vfiprintf_r+0x220>
 8005ff6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ff8:	f7ff fa16 	bl	8005428 <__retarget_lock_release_recursive>
 8005ffc:	89ab      	ldrh	r3, [r5, #12]
 8005ffe:	065b      	lsls	r3, r3, #25
 8006000:	f53f af12 	bmi.w	8005e28 <_vfiprintf_r+0x4c>
 8006004:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006006:	e711      	b.n	8005e2c <_vfiprintf_r+0x50>
 8006008:	ab03      	add	r3, sp, #12
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	462a      	mov	r2, r5
 800600e:	4630      	mov	r0, r6
 8006010:	4b08      	ldr	r3, [pc, #32]	; (8006034 <_vfiprintf_r+0x258>)
 8006012:	a904      	add	r1, sp, #16
 8006014:	f7fd ff5a 	bl	8003ecc <_printf_i>
 8006018:	e7e4      	b.n	8005fe4 <_vfiprintf_r+0x208>
 800601a:	bf00      	nop
 800601c:	080064f8 	.word	0x080064f8
 8006020:	08006518 	.word	0x08006518
 8006024:	080064d8 	.word	0x080064d8
 8006028:	08006694 	.word	0x08006694
 800602c:	0800669e 	.word	0x0800669e
 8006030:	08003995 	.word	0x08003995
 8006034:	08005db7 	.word	0x08005db7
 8006038:	0800669a 	.word	0x0800669a

0800603c <_sbrk_r>:
 800603c:	b538      	push	{r3, r4, r5, lr}
 800603e:	2300      	movs	r3, #0
 8006040:	4d05      	ldr	r5, [pc, #20]	; (8006058 <_sbrk_r+0x1c>)
 8006042:	4604      	mov	r4, r0
 8006044:	4608      	mov	r0, r1
 8006046:	602b      	str	r3, [r5, #0]
 8006048:	f7fa ff4a 	bl	8000ee0 <_sbrk>
 800604c:	1c43      	adds	r3, r0, #1
 800604e:	d102      	bne.n	8006056 <_sbrk_r+0x1a>
 8006050:	682b      	ldr	r3, [r5, #0]
 8006052:	b103      	cbz	r3, 8006056 <_sbrk_r+0x1a>
 8006054:	6023      	str	r3, [r4, #0]
 8006056:	bd38      	pop	{r3, r4, r5, pc}
 8006058:	20000324 	.word	0x20000324

0800605c <__sread>:
 800605c:	b510      	push	{r4, lr}
 800605e:	460c      	mov	r4, r1
 8006060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006064:	f000 f8e2 	bl	800622c <_read_r>
 8006068:	2800      	cmp	r0, #0
 800606a:	bfab      	itete	ge
 800606c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800606e:	89a3      	ldrhlt	r3, [r4, #12]
 8006070:	181b      	addge	r3, r3, r0
 8006072:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006076:	bfac      	ite	ge
 8006078:	6563      	strge	r3, [r4, #84]	; 0x54
 800607a:	81a3      	strhlt	r3, [r4, #12]
 800607c:	bd10      	pop	{r4, pc}

0800607e <__swrite>:
 800607e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006082:	461f      	mov	r7, r3
 8006084:	898b      	ldrh	r3, [r1, #12]
 8006086:	4605      	mov	r5, r0
 8006088:	05db      	lsls	r3, r3, #23
 800608a:	460c      	mov	r4, r1
 800608c:	4616      	mov	r6, r2
 800608e:	d505      	bpl.n	800609c <__swrite+0x1e>
 8006090:	2302      	movs	r3, #2
 8006092:	2200      	movs	r2, #0
 8006094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006098:	f000 f898 	bl	80061cc <_lseek_r>
 800609c:	89a3      	ldrh	r3, [r4, #12]
 800609e:	4632      	mov	r2, r6
 80060a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060a4:	81a3      	strh	r3, [r4, #12]
 80060a6:	4628      	mov	r0, r5
 80060a8:	463b      	mov	r3, r7
 80060aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060b2:	f000 b817 	b.w	80060e4 <_write_r>

080060b6 <__sseek>:
 80060b6:	b510      	push	{r4, lr}
 80060b8:	460c      	mov	r4, r1
 80060ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060be:	f000 f885 	bl	80061cc <_lseek_r>
 80060c2:	1c43      	adds	r3, r0, #1
 80060c4:	89a3      	ldrh	r3, [r4, #12]
 80060c6:	bf15      	itete	ne
 80060c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80060ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80060ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80060d2:	81a3      	strheq	r3, [r4, #12]
 80060d4:	bf18      	it	ne
 80060d6:	81a3      	strhne	r3, [r4, #12]
 80060d8:	bd10      	pop	{r4, pc}

080060da <__sclose>:
 80060da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060de:	f000 b831 	b.w	8006144 <_close_r>
	...

080060e4 <_write_r>:
 80060e4:	b538      	push	{r3, r4, r5, lr}
 80060e6:	4604      	mov	r4, r0
 80060e8:	4608      	mov	r0, r1
 80060ea:	4611      	mov	r1, r2
 80060ec:	2200      	movs	r2, #0
 80060ee:	4d05      	ldr	r5, [pc, #20]	; (8006104 <_write_r+0x20>)
 80060f0:	602a      	str	r2, [r5, #0]
 80060f2:	461a      	mov	r2, r3
 80060f4:	f7fa fea8 	bl	8000e48 <_write>
 80060f8:	1c43      	adds	r3, r0, #1
 80060fa:	d102      	bne.n	8006102 <_write_r+0x1e>
 80060fc:	682b      	ldr	r3, [r5, #0]
 80060fe:	b103      	cbz	r3, 8006102 <_write_r+0x1e>
 8006100:	6023      	str	r3, [r4, #0]
 8006102:	bd38      	pop	{r3, r4, r5, pc}
 8006104:	20000324 	.word	0x20000324

08006108 <__assert_func>:
 8006108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800610a:	4614      	mov	r4, r2
 800610c:	461a      	mov	r2, r3
 800610e:	4b09      	ldr	r3, [pc, #36]	; (8006134 <__assert_func+0x2c>)
 8006110:	4605      	mov	r5, r0
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68d8      	ldr	r0, [r3, #12]
 8006116:	b14c      	cbz	r4, 800612c <__assert_func+0x24>
 8006118:	4b07      	ldr	r3, [pc, #28]	; (8006138 <__assert_func+0x30>)
 800611a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800611e:	9100      	str	r1, [sp, #0]
 8006120:	462b      	mov	r3, r5
 8006122:	4906      	ldr	r1, [pc, #24]	; (800613c <__assert_func+0x34>)
 8006124:	f000 f81e 	bl	8006164 <fiprintf>
 8006128:	f000 f89f 	bl	800626a <abort>
 800612c:	4b04      	ldr	r3, [pc, #16]	; (8006140 <__assert_func+0x38>)
 800612e:	461c      	mov	r4, r3
 8006130:	e7f3      	b.n	800611a <__assert_func+0x12>
 8006132:	bf00      	nop
 8006134:	20000014 	.word	0x20000014
 8006138:	080066a5 	.word	0x080066a5
 800613c:	080066b2 	.word	0x080066b2
 8006140:	080066e0 	.word	0x080066e0

08006144 <_close_r>:
 8006144:	b538      	push	{r3, r4, r5, lr}
 8006146:	2300      	movs	r3, #0
 8006148:	4d05      	ldr	r5, [pc, #20]	; (8006160 <_close_r+0x1c>)
 800614a:	4604      	mov	r4, r0
 800614c:	4608      	mov	r0, r1
 800614e:	602b      	str	r3, [r5, #0]
 8006150:	f7fa fe96 	bl	8000e80 <_close>
 8006154:	1c43      	adds	r3, r0, #1
 8006156:	d102      	bne.n	800615e <_close_r+0x1a>
 8006158:	682b      	ldr	r3, [r5, #0]
 800615a:	b103      	cbz	r3, 800615e <_close_r+0x1a>
 800615c:	6023      	str	r3, [r4, #0]
 800615e:	bd38      	pop	{r3, r4, r5, pc}
 8006160:	20000324 	.word	0x20000324

08006164 <fiprintf>:
 8006164:	b40e      	push	{r1, r2, r3}
 8006166:	b503      	push	{r0, r1, lr}
 8006168:	4601      	mov	r1, r0
 800616a:	ab03      	add	r3, sp, #12
 800616c:	4805      	ldr	r0, [pc, #20]	; (8006184 <fiprintf+0x20>)
 800616e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006172:	6800      	ldr	r0, [r0, #0]
 8006174:	9301      	str	r3, [sp, #4]
 8006176:	f7ff fe31 	bl	8005ddc <_vfiprintf_r>
 800617a:	b002      	add	sp, #8
 800617c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006180:	b003      	add	sp, #12
 8006182:	4770      	bx	lr
 8006184:	20000014 	.word	0x20000014

08006188 <_fstat_r>:
 8006188:	b538      	push	{r3, r4, r5, lr}
 800618a:	2300      	movs	r3, #0
 800618c:	4d06      	ldr	r5, [pc, #24]	; (80061a8 <_fstat_r+0x20>)
 800618e:	4604      	mov	r4, r0
 8006190:	4608      	mov	r0, r1
 8006192:	4611      	mov	r1, r2
 8006194:	602b      	str	r3, [r5, #0]
 8006196:	f7fa fe7e 	bl	8000e96 <_fstat>
 800619a:	1c43      	adds	r3, r0, #1
 800619c:	d102      	bne.n	80061a4 <_fstat_r+0x1c>
 800619e:	682b      	ldr	r3, [r5, #0]
 80061a0:	b103      	cbz	r3, 80061a4 <_fstat_r+0x1c>
 80061a2:	6023      	str	r3, [r4, #0]
 80061a4:	bd38      	pop	{r3, r4, r5, pc}
 80061a6:	bf00      	nop
 80061a8:	20000324 	.word	0x20000324

080061ac <_isatty_r>:
 80061ac:	b538      	push	{r3, r4, r5, lr}
 80061ae:	2300      	movs	r3, #0
 80061b0:	4d05      	ldr	r5, [pc, #20]	; (80061c8 <_isatty_r+0x1c>)
 80061b2:	4604      	mov	r4, r0
 80061b4:	4608      	mov	r0, r1
 80061b6:	602b      	str	r3, [r5, #0]
 80061b8:	f7fa fe7c 	bl	8000eb4 <_isatty>
 80061bc:	1c43      	adds	r3, r0, #1
 80061be:	d102      	bne.n	80061c6 <_isatty_r+0x1a>
 80061c0:	682b      	ldr	r3, [r5, #0]
 80061c2:	b103      	cbz	r3, 80061c6 <_isatty_r+0x1a>
 80061c4:	6023      	str	r3, [r4, #0]
 80061c6:	bd38      	pop	{r3, r4, r5, pc}
 80061c8:	20000324 	.word	0x20000324

080061cc <_lseek_r>:
 80061cc:	b538      	push	{r3, r4, r5, lr}
 80061ce:	4604      	mov	r4, r0
 80061d0:	4608      	mov	r0, r1
 80061d2:	4611      	mov	r1, r2
 80061d4:	2200      	movs	r2, #0
 80061d6:	4d05      	ldr	r5, [pc, #20]	; (80061ec <_lseek_r+0x20>)
 80061d8:	602a      	str	r2, [r5, #0]
 80061da:	461a      	mov	r2, r3
 80061dc:	f7fa fe74 	bl	8000ec8 <_lseek>
 80061e0:	1c43      	adds	r3, r0, #1
 80061e2:	d102      	bne.n	80061ea <_lseek_r+0x1e>
 80061e4:	682b      	ldr	r3, [r5, #0]
 80061e6:	b103      	cbz	r3, 80061ea <_lseek_r+0x1e>
 80061e8:	6023      	str	r3, [r4, #0]
 80061ea:	bd38      	pop	{r3, r4, r5, pc}
 80061ec:	20000324 	.word	0x20000324

080061f0 <__ascii_mbtowc>:
 80061f0:	b082      	sub	sp, #8
 80061f2:	b901      	cbnz	r1, 80061f6 <__ascii_mbtowc+0x6>
 80061f4:	a901      	add	r1, sp, #4
 80061f6:	b142      	cbz	r2, 800620a <__ascii_mbtowc+0x1a>
 80061f8:	b14b      	cbz	r3, 800620e <__ascii_mbtowc+0x1e>
 80061fa:	7813      	ldrb	r3, [r2, #0]
 80061fc:	600b      	str	r3, [r1, #0]
 80061fe:	7812      	ldrb	r2, [r2, #0]
 8006200:	1e10      	subs	r0, r2, #0
 8006202:	bf18      	it	ne
 8006204:	2001      	movne	r0, #1
 8006206:	b002      	add	sp, #8
 8006208:	4770      	bx	lr
 800620a:	4610      	mov	r0, r2
 800620c:	e7fb      	b.n	8006206 <__ascii_mbtowc+0x16>
 800620e:	f06f 0001 	mvn.w	r0, #1
 8006212:	e7f8      	b.n	8006206 <__ascii_mbtowc+0x16>

08006214 <__malloc_lock>:
 8006214:	4801      	ldr	r0, [pc, #4]	; (800621c <__malloc_lock+0x8>)
 8006216:	f7ff b906 	b.w	8005426 <__retarget_lock_acquire_recursive>
 800621a:	bf00      	nop
 800621c:	2000031c 	.word	0x2000031c

08006220 <__malloc_unlock>:
 8006220:	4801      	ldr	r0, [pc, #4]	; (8006228 <__malloc_unlock+0x8>)
 8006222:	f7ff b901 	b.w	8005428 <__retarget_lock_release_recursive>
 8006226:	bf00      	nop
 8006228:	2000031c 	.word	0x2000031c

0800622c <_read_r>:
 800622c:	b538      	push	{r3, r4, r5, lr}
 800622e:	4604      	mov	r4, r0
 8006230:	4608      	mov	r0, r1
 8006232:	4611      	mov	r1, r2
 8006234:	2200      	movs	r2, #0
 8006236:	4d05      	ldr	r5, [pc, #20]	; (800624c <_read_r+0x20>)
 8006238:	602a      	str	r2, [r5, #0]
 800623a:	461a      	mov	r2, r3
 800623c:	f7fa fde7 	bl	8000e0e <_read>
 8006240:	1c43      	adds	r3, r0, #1
 8006242:	d102      	bne.n	800624a <_read_r+0x1e>
 8006244:	682b      	ldr	r3, [r5, #0]
 8006246:	b103      	cbz	r3, 800624a <_read_r+0x1e>
 8006248:	6023      	str	r3, [r4, #0]
 800624a:	bd38      	pop	{r3, r4, r5, pc}
 800624c:	20000324 	.word	0x20000324

08006250 <__ascii_wctomb>:
 8006250:	4603      	mov	r3, r0
 8006252:	4608      	mov	r0, r1
 8006254:	b141      	cbz	r1, 8006268 <__ascii_wctomb+0x18>
 8006256:	2aff      	cmp	r2, #255	; 0xff
 8006258:	d904      	bls.n	8006264 <__ascii_wctomb+0x14>
 800625a:	228a      	movs	r2, #138	; 0x8a
 800625c:	f04f 30ff 	mov.w	r0, #4294967295
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	4770      	bx	lr
 8006264:	2001      	movs	r0, #1
 8006266:	700a      	strb	r2, [r1, #0]
 8006268:	4770      	bx	lr

0800626a <abort>:
 800626a:	2006      	movs	r0, #6
 800626c:	b508      	push	{r3, lr}
 800626e:	f000 f82b 	bl	80062c8 <raise>
 8006272:	2001      	movs	r0, #1
 8006274:	f7fa fdc1 	bl	8000dfa <_exit>

08006278 <_raise_r>:
 8006278:	291f      	cmp	r1, #31
 800627a:	b538      	push	{r3, r4, r5, lr}
 800627c:	4604      	mov	r4, r0
 800627e:	460d      	mov	r5, r1
 8006280:	d904      	bls.n	800628c <_raise_r+0x14>
 8006282:	2316      	movs	r3, #22
 8006284:	6003      	str	r3, [r0, #0]
 8006286:	f04f 30ff 	mov.w	r0, #4294967295
 800628a:	bd38      	pop	{r3, r4, r5, pc}
 800628c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800628e:	b112      	cbz	r2, 8006296 <_raise_r+0x1e>
 8006290:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006294:	b94b      	cbnz	r3, 80062aa <_raise_r+0x32>
 8006296:	4620      	mov	r0, r4
 8006298:	f000 f830 	bl	80062fc <_getpid_r>
 800629c:	462a      	mov	r2, r5
 800629e:	4601      	mov	r1, r0
 80062a0:	4620      	mov	r0, r4
 80062a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062a6:	f000 b817 	b.w	80062d8 <_kill_r>
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d00a      	beq.n	80062c4 <_raise_r+0x4c>
 80062ae:	1c59      	adds	r1, r3, #1
 80062b0:	d103      	bne.n	80062ba <_raise_r+0x42>
 80062b2:	2316      	movs	r3, #22
 80062b4:	6003      	str	r3, [r0, #0]
 80062b6:	2001      	movs	r0, #1
 80062b8:	e7e7      	b.n	800628a <_raise_r+0x12>
 80062ba:	2400      	movs	r4, #0
 80062bc:	4628      	mov	r0, r5
 80062be:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80062c2:	4798      	blx	r3
 80062c4:	2000      	movs	r0, #0
 80062c6:	e7e0      	b.n	800628a <_raise_r+0x12>

080062c8 <raise>:
 80062c8:	4b02      	ldr	r3, [pc, #8]	; (80062d4 <raise+0xc>)
 80062ca:	4601      	mov	r1, r0
 80062cc:	6818      	ldr	r0, [r3, #0]
 80062ce:	f7ff bfd3 	b.w	8006278 <_raise_r>
 80062d2:	bf00      	nop
 80062d4:	20000014 	.word	0x20000014

080062d8 <_kill_r>:
 80062d8:	b538      	push	{r3, r4, r5, lr}
 80062da:	2300      	movs	r3, #0
 80062dc:	4d06      	ldr	r5, [pc, #24]	; (80062f8 <_kill_r+0x20>)
 80062de:	4604      	mov	r4, r0
 80062e0:	4608      	mov	r0, r1
 80062e2:	4611      	mov	r1, r2
 80062e4:	602b      	str	r3, [r5, #0]
 80062e6:	f7fa fd78 	bl	8000dda <_kill>
 80062ea:	1c43      	adds	r3, r0, #1
 80062ec:	d102      	bne.n	80062f4 <_kill_r+0x1c>
 80062ee:	682b      	ldr	r3, [r5, #0]
 80062f0:	b103      	cbz	r3, 80062f4 <_kill_r+0x1c>
 80062f2:	6023      	str	r3, [r4, #0]
 80062f4:	bd38      	pop	{r3, r4, r5, pc}
 80062f6:	bf00      	nop
 80062f8:	20000324 	.word	0x20000324

080062fc <_getpid_r>:
 80062fc:	f7fa bd66 	b.w	8000dcc <_getpid>

08006300 <_init>:
 8006300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006302:	bf00      	nop
 8006304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006306:	bc08      	pop	{r3}
 8006308:	469e      	mov	lr, r3
 800630a:	4770      	bx	lr

0800630c <_fini>:
 800630c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800630e:	bf00      	nop
 8006310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006312:	bc08      	pop	{r3}
 8006314:	469e      	mov	lr, r3
 8006316:	4770      	bx	lr
