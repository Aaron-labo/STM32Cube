
PROJECT_COURSE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da60  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d3a4  0800dc48  0800dc48  0001dc48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801afec  0801afec  000301e8  2**0
                  CONTENTS
  4 .ARM          00000000  0801afec  0801afec  000301e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801afec  0801afec  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801afec  0801afec  0002afec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801aff0  0801aff0  0002aff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0801aff4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  200001e8  0801b1dc  000301e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  0801b1dc  00030480  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b786  00000000  00000000  00030211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cf0  00000000  00000000  0004b997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  0004f688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c8  00000000  00000000  00050908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e144  00000000  00000000  000519d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000174c5  00000000  00000000  0006fb14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fa6d  00000000  00000000  00086fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00126a46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006278  00000000  00000000  00126a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e8 	.word	0x200001e8
 8000204:	00000000 	.word	0x00000000
 8000208:	0800dc30 	.word	0x0800dc30

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001ec 	.word	0x200001ec
 8000224:	0800dc30 	.word	0x0800dc30

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <__aeabi_fcmpun>:
 80011e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80011f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80011f4:	d102      	bne.n	80011fc <__aeabi_fcmpun+0x14>
 80011f6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80011fa:	d108      	bne.n	800120e <__aeabi_fcmpun+0x26>
 80011fc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001200:	d102      	bne.n	8001208 <__aeabi_fcmpun+0x20>
 8001202:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001206:	d102      	bne.n	800120e <__aeabi_fcmpun+0x26>
 8001208:	f04f 0000 	mov.w	r0, #0
 800120c:	4770      	bx	lr
 800120e:	f04f 0001 	mov.w	r0, #1
 8001212:	4770      	bx	lr

08001214 <__aeabi_d2lz>:
 8001214:	b538      	push	{r3, r4, r5, lr}
 8001216:	460c      	mov	r4, r1
 8001218:	4605      	mov	r5, r0
 800121a:	4621      	mov	r1, r4
 800121c:	4628      	mov	r0, r5
 800121e:	2200      	movs	r2, #0
 8001220:	2300      	movs	r3, #0
 8001222:	f7ff fc37 	bl	8000a94 <__aeabi_dcmplt>
 8001226:	b928      	cbnz	r0, 8001234 <__aeabi_d2lz+0x20>
 8001228:	4628      	mov	r0, r5
 800122a:	4621      	mov	r1, r4
 800122c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001230:	f000 b80a 	b.w	8001248 <__aeabi_d2ulz>
 8001234:	4628      	mov	r0, r5
 8001236:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800123a:	f000 f805 	bl	8001248 <__aeabi_d2ulz>
 800123e:	4240      	negs	r0, r0
 8001240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001244:	bd38      	pop	{r3, r4, r5, pc}
 8001246:	bf00      	nop

08001248 <__aeabi_d2ulz>:
 8001248:	b5d0      	push	{r4, r6, r7, lr}
 800124a:	2200      	movs	r2, #0
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <__aeabi_d2ulz+0x34>)
 800124e:	4606      	mov	r6, r0
 8001250:	460f      	mov	r7, r1
 8001252:	f7ff f9ad 	bl	80005b0 <__aeabi_dmul>
 8001256:	f7ff fc83 	bl	8000b60 <__aeabi_d2uiz>
 800125a:	4604      	mov	r4, r0
 800125c:	f7ff f92e 	bl	80004bc <__aeabi_ui2d>
 8001260:	2200      	movs	r2, #0
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <__aeabi_d2ulz+0x38>)
 8001264:	f7ff f9a4 	bl	80005b0 <__aeabi_dmul>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4630      	mov	r0, r6
 800126e:	4639      	mov	r1, r7
 8001270:	f7fe ffe6 	bl	8000240 <__aeabi_dsub>
 8001274:	f7ff fc74 	bl	8000b60 <__aeabi_d2uiz>
 8001278:	4621      	mov	r1, r4
 800127a:	bdd0      	pop	{r4, r6, r7, pc}
 800127c:	3df00000 	.word	0x3df00000
 8001280:	41f00000 	.word	0x41f00000

08001284 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08e      	sub	sp, #56	; 0x38
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]
 800129a:	615a      	str	r2, [r3, #20]
 800129c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800129e:	463b      	mov	r3, r7
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
 80012ac:	615a      	str	r2, [r3, #20]
 80012ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80012b0:	4b30      	ldr	r3, [pc, #192]	; (8001374 <MX_FSMC_Init+0xf0>)
 80012b2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80012b6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80012b8:	4b2e      	ldr	r3, [pc, #184]	; (8001374 <MX_FSMC_Init+0xf0>)
 80012ba:	4a2f      	ldr	r2, [pc, #188]	; (8001378 <MX_FSMC_Init+0xf4>)
 80012bc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK4;
 80012be:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <MX_FSMC_Init+0xf0>)
 80012c0:	2206      	movs	r2, #6
 80012c2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80012c4:	4b2b      	ldr	r3, [pc, #172]	; (8001374 <MX_FSMC_Init+0xf0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80012ca:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <MX_FSMC_Init+0xf0>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80012d0:	4b28      	ldr	r3, [pc, #160]	; (8001374 <MX_FSMC_Init+0xf0>)
 80012d2:	2210      	movs	r2, #16
 80012d4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80012d6:	4b27      	ldr	r3, [pc, #156]	; (8001374 <MX_FSMC_Init+0xf0>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80012dc:	4b25      	ldr	r3, [pc, #148]	; (8001374 <MX_FSMC_Init+0xf0>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80012e2:	4b24      	ldr	r3, [pc, #144]	; (8001374 <MX_FSMC_Init+0xf0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80012e8:	4b22      	ldr	r3, [pc, #136]	; (8001374 <MX_FSMC_Init+0xf0>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80012ee:	4b21      	ldr	r3, [pc, #132]	; (8001374 <MX_FSMC_Init+0xf0>)
 80012f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012f4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80012f6:	4b1f      	ldr	r3, [pc, #124]	; (8001374 <MX_FSMC_Init+0xf0>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <MX_FSMC_Init+0xf0>)
 80012fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001302:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <MX_FSMC_Init+0xf0>)
 8001306:	2200      	movs	r2, #0
 8001308:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800130a:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <MX_FSMC_Init+0xf0>)
 800130c:	2200      	movs	r2, #0
 800130e:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 1;
 8001310:	2301      	movs	r3, #1
 8001312:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001314:	230f      	movs	r3, #15
 8001316:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 4;
 8001318:	2304      	movs	r3, #4
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 800131c:	230f      	movs	r3, #15
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001320:	2310      	movs	r3, #16
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001324:	2311      	movs	r3, #17
 8001326:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001328:	2300      	movs	r3, #0
 800132a:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001330:	230f      	movs	r3, #15
 8001332:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 3;
 8001334:	2303      	movs	r3, #3
 8001336:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 8001338:	230f      	movs	r3, #15
 800133a:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800133c:	2310      	movs	r3, #16
 800133e:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001340:	2311      	movs	r3, #17
 8001342:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001344:	2300      	movs	r3, #0
 8001346:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001348:	463a      	mov	r2, r7
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	4619      	mov	r1, r3
 8001350:	4808      	ldr	r0, [pc, #32]	; (8001374 <MX_FSMC_Init+0xf0>)
 8001352:	f007 f8b9 	bl	80084c8 <HAL_SRAM_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_FSMC_Init+0xdc>
  {
    Error_Handler( );
 800135c:	f000 fcb6 	bl	8001ccc <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <MX_FSMC_Init+0xf8>)
 8001362:	69db      	ldr	r3, [r3, #28]
 8001364:	4a05      	ldr	r2, [pc, #20]	; (800137c <MX_FSMC_Init+0xf8>)
 8001366:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800136a:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800136c:	bf00      	nop
 800136e:	3738      	adds	r7, #56	; 0x38
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000220 	.word	0x20000220
 8001378:	a0000104 	.word	0xa0000104
 800137c:	40010000 	.word	0x40010000

08001380 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001386:	f107 0308 	add.w	r3, r7, #8
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001394:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <HAL_FSMC_MspInit+0x94>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d136      	bne.n	800140a <HAL_FSMC_MspInit+0x8a>
    return;
  }
  FSMC_Initialized = 1;
 800139c:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <HAL_FSMC_MspInit+0x94>)
 800139e:	2201      	movs	r2, #1
 80013a0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80013a2:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <HAL_FSMC_MspInit+0x98>)
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	4a1c      	ldr	r2, [pc, #112]	; (8001418 <HAL_FSMC_MspInit+0x98>)
 80013a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ac:	6153      	str	r3, [r2, #20]
 80013ae:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <HAL_FSMC_MspInit+0x98>)
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12;
 80013ba:	f241 0301 	movw	r3, #4097	; 0x1001
 80013be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c4:	2303      	movs	r3, #3
 80013c6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013c8:	f107 0308 	add.w	r3, r7, #8
 80013cc:	4619      	mov	r1, r3
 80013ce:	4813      	ldr	r0, [pc, #76]	; (800141c <HAL_FSMC_MspInit+0x9c>)
 80013d0:	f005 ffd0 	bl	8007374 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80013d4:	f64f 7380 	movw	r3, #65408	; 0xff80
 80013d8:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013de:	2303      	movs	r3, #3
 80013e0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013e2:	f107 0308 	add.w	r3, r7, #8
 80013e6:	4619      	mov	r1, r3
 80013e8:	480d      	ldr	r0, [pc, #52]	; (8001420 <HAL_FSMC_MspInit+0xa0>)
 80013ea:	f005 ffc3 	bl	8007374 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80013ee:	f24c 7333 	movw	r3, #50995	; 0xc733
 80013f2:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013f8:	2303      	movs	r3, #3
 80013fa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013fc:	f107 0308 	add.w	r3, r7, #8
 8001400:	4619      	mov	r1, r3
 8001402:	4808      	ldr	r0, [pc, #32]	; (8001424 <HAL_FSMC_MspInit+0xa4>)
 8001404:	f005 ffb6 	bl	8007374 <HAL_GPIO_Init>
 8001408:	e000      	b.n	800140c <HAL_FSMC_MspInit+0x8c>
    return;
 800140a:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000204 	.word	0x20000204
 8001418:	40021000 	.word	0x40021000
 800141c:	40012000 	.word	0x40012000
 8001420:	40011800 	.word	0x40011800
 8001424:	40011400 	.word	0x40011400

08001428 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001430:	f7ff ffa6 	bl	8001380 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	; 0x28
 8001440:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001442:	f107 0318 	add.w	r3, r7, #24
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001450:	4b63      	ldr	r3, [pc, #396]	; (80015e0 <MX_GPIO_Init+0x1a4>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a62      	ldr	r2, [pc, #392]	; (80015e0 <MX_GPIO_Init+0x1a4>)
 8001456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800145a:	6193      	str	r3, [r2, #24]
 800145c:	4b60      	ldr	r3, [pc, #384]	; (80015e0 <MX_GPIO_Init+0x1a4>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001468:	4b5d      	ldr	r3, [pc, #372]	; (80015e0 <MX_GPIO_Init+0x1a4>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4a5c      	ldr	r2, [pc, #368]	; (80015e0 <MX_GPIO_Init+0x1a4>)
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	6193      	str	r3, [r2, #24]
 8001474:	4b5a      	ldr	r3, [pc, #360]	; (80015e0 <MX_GPIO_Init+0x1a4>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001480:	4b57      	ldr	r3, [pc, #348]	; (80015e0 <MX_GPIO_Init+0x1a4>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	4a56      	ldr	r2, [pc, #344]	; (80015e0 <MX_GPIO_Init+0x1a4>)
 8001486:	f043 0308 	orr.w	r3, r3, #8
 800148a:	6193      	str	r3, [r2, #24]
 800148c:	4b54      	ldr	r3, [pc, #336]	; (80015e0 <MX_GPIO_Init+0x1a4>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001498:	4b51      	ldr	r3, [pc, #324]	; (80015e0 <MX_GPIO_Init+0x1a4>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4a50      	ldr	r2, [pc, #320]	; (80015e0 <MX_GPIO_Init+0x1a4>)
 800149e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	4b4e      	ldr	r3, [pc, #312]	; (80015e0 <MX_GPIO_Init+0x1a4>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b0:	4b4b      	ldr	r3, [pc, #300]	; (80015e0 <MX_GPIO_Init+0x1a4>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	4a4a      	ldr	r2, [pc, #296]	; (80015e0 <MX_GPIO_Init+0x1a4>)
 80014b6:	f043 0320 	orr.w	r3, r3, #32
 80014ba:	6193      	str	r3, [r2, #24]
 80014bc:	4b48      	ldr	r3, [pc, #288]	; (80015e0 <MX_GPIO_Init+0x1a4>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	f003 0320 	and.w	r3, r3, #32
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80014c8:	2201      	movs	r2, #1
 80014ca:	2120      	movs	r1, #32
 80014cc:	4845      	ldr	r0, [pc, #276]	; (80015e4 <MX_GPIO_Init+0x1a8>)
 80014ce:	f006 f8fc 	bl	80076ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2140      	movs	r1, #64	; 0x40
 80014d6:	4844      	ldr	r0, [pc, #272]	; (80015e8 <MX_GPIO_Init+0x1ac>)
 80014d8:	f006 f8f7 	bl	80076ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|BEEP_Pin, GPIO_PIN_RESET);
 80014dc:	2200      	movs	r2, #0
 80014de:	f240 1101 	movw	r1, #257	; 0x101
 80014e2:	4842      	ldr	r0, [pc, #264]	; (80015ec <MX_GPIO_Init+0x1b0>)
 80014e4:	f006 f8f1 	bl	80076ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, NRF_CS_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 80014e8:	2200      	movs	r2, #0
 80014ea:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80014ee:	4840      	ldr	r0, [pc, #256]	; (80015f0 <MX_GPIO_Init+0x1b4>)
 80014f0:	f006 f8eb 	bl	80076ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80014f4:	2201      	movs	r2, #1
 80014f6:	2120      	movs	r1, #32
 80014f8:	483c      	ldr	r0, [pc, #240]	; (80015ec <MX_GPIO_Init+0x1b0>)
 80014fa:	f006 f8e6 	bl	80076ca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY0_Pin;
 80014fe:	2318      	movs	r3, #24
 8001500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001506:	2301      	movs	r3, #1
 8001508:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800150a:	f107 0318 	add.w	r3, r7, #24
 800150e:	4619      	mov	r1, r3
 8001510:	4834      	ldr	r0, [pc, #208]	; (80015e4 <MX_GPIO_Init+0x1a8>)
 8001512:	f005 ff2f 	bl	8007374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001516:	2320      	movs	r3, #32
 8001518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151a:	2301      	movs	r3, #1
 800151c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800151e:	2301      	movs	r3, #1
 8001520:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001526:	f107 0318 	add.w	r3, r7, #24
 800152a:	4619      	mov	r1, r3
 800152c:	482d      	ldr	r0, [pc, #180]	; (80015e4 <MX_GPIO_Init+0x1a8>)
 800152e:	f005 ff21 	bl	8007374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = KY_UP_Pin|HC_SR501_Pin|Echo_Pin;
 8001532:	23a1      	movs	r3, #161	; 0xa1
 8001534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800153a:	2302      	movs	r3, #2
 800153c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153e:	f107 0318 	add.w	r3, r7, #24
 8001542:	4619      	mov	r1, r3
 8001544:	4828      	ldr	r0, [pc, #160]	; (80015e8 <MX_GPIO_Init+0x1ac>)
 8001546:	f005 ff15 	bl	8007374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Trig_Pin;
 800154a:	2340      	movs	r3, #64	; 0x40
 800154c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154e:	2301      	movs	r3, #1
 8001550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001552:	2302      	movs	r3, #2
 8001554:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001556:	2303      	movs	r3, #3
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 800155a:	f107 0318 	add.w	r3, r7, #24
 800155e:	4619      	mov	r1, r3
 8001560:	4821      	ldr	r0, [pc, #132]	; (80015e8 <MX_GPIO_Init+0x1ac>)
 8001562:	f005 ff07 	bl	8007374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LED0_Pin;
 8001566:	2321      	movs	r3, #33	; 0x21
 8001568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156a:	2301      	movs	r3, #1
 800156c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800156e:	2301      	movs	r3, #1
 8001570:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001572:	2303      	movs	r3, #3
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001576:	f107 0318 	add.w	r3, r7, #24
 800157a:	4619      	mov	r1, r3
 800157c:	481b      	ldr	r0, [pc, #108]	; (80015ec <MX_GPIO_Init+0x1b0>)
 800157e:	f005 fef9 	bl	8007374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PG11 */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin|GPIO_PIN_11;
 8001582:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8001586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800158c:	2302      	movs	r3, #2
 800158e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001590:	f107 0318 	add.w	r3, r7, #24
 8001594:	4619      	mov	r1, r3
 8001596:	4816      	ldr	r0, [pc, #88]	; (80015f0 <MX_GPIO_Init+0x1b4>)
 8001598:	f005 feec 	bl	8007374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = NRF_CS_Pin|NRF_CE_Pin;
 800159c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80015a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a2:	2301      	movs	r3, #1
 80015a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015a6:	2302      	movs	r3, #2
 80015a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015aa:	2303      	movs	r3, #3
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015ae:	f107 0318 	add.w	r3, r7, #24
 80015b2:	4619      	mov	r1, r3
 80015b4:	480e      	ldr	r0, [pc, #56]	; (80015f0 <MX_GPIO_Init+0x1b4>)
 80015b6:	f005 fedd 	bl	8007374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 80015ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c0:	2301      	movs	r3, #1
 80015c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015c4:	2302      	movs	r3, #2
 80015c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c8:	2303      	movs	r3, #3
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BEEP_GPIO_Port, &GPIO_InitStruct);
 80015cc:	f107 0318 	add.w	r3, r7, #24
 80015d0:	4619      	mov	r1, r3
 80015d2:	4806      	ldr	r0, [pc, #24]	; (80015ec <MX_GPIO_Init+0x1b0>)
 80015d4:	f005 fece 	bl	8007374 <HAL_GPIO_Init>

}
 80015d8:	bf00      	nop
 80015da:	3728      	adds	r7, #40	; 0x28
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40011800 	.word	0x40011800
 80015e8:	40010800 	.word	0x40010800
 80015ec:	40010c00 	.word	0x40010c00
 80015f0:	40012000 	.word	0x40012000

080015f4 <LCD_Show>:
uint8_t Tx_Buf[32];
uint8_t mode, key;
uint32_t i = 0, time = 0;


void LCD_Show() {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b092      	sub	sp, #72	; 0x48
 80015f8:	af02      	add	r7, sp, #8
	uint8_t ShowBuffer[64]; //LCD输出缓冲区

	//LCD输出一个logo
	POINT_COLOR = BLACK; //将画笔颜色设置为黑色
 80015fa:	4b66      	ldr	r3, [pc, #408]	; (8001794 <LCD_Show+0x1a0>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(25, 30, 240, 16, 16, (uint8_t*) ".------..------..------.");
 8001600:	4b65      	ldr	r3, [pc, #404]	; (8001798 <LCD_Show+0x1a4>)
 8001602:	9301      	str	r3, [sp, #4]
 8001604:	2310      	movs	r3, #16
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	2310      	movs	r3, #16
 800160a:	22f0      	movs	r2, #240	; 0xf0
 800160c:	211e      	movs	r1, #30
 800160e:	2019      	movs	r0, #25
 8001610:	f005 fcf8 	bl	8007004 <LCD_ShowString>
	LCD_ShowString(25, 45, 240, 16, 16, (uint8_t*) "|W.--. ||X.--. ||Y.--. |");
 8001614:	4b61      	ldr	r3, [pc, #388]	; (800179c <LCD_Show+0x1a8>)
 8001616:	9301      	str	r3, [sp, #4]
 8001618:	2310      	movs	r3, #16
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2310      	movs	r3, #16
 800161e:	22f0      	movs	r2, #240	; 0xf0
 8001620:	212d      	movs	r1, #45	; 0x2d
 8001622:	2019      	movs	r0, #25
 8001624:	f005 fcee 	bl	8007004 <LCD_ShowString>
	LCD_ShowString(25, 60, 240, 16, 16, (uint8_t*) "| :/\\: || :/\\: || (\\/) |");
 8001628:	4b5d      	ldr	r3, [pc, #372]	; (80017a0 <LCD_Show+0x1ac>)
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	2310      	movs	r3, #16
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	2310      	movs	r3, #16
 8001632:	22f0      	movs	r2, #240	; 0xf0
 8001634:	213c      	movs	r1, #60	; 0x3c
 8001636:	2019      	movs	r0, #25
 8001638:	f005 fce4 	bl	8007004 <LCD_ShowString>
	LCD_ShowString(25, 75, 240, 16, 16, (uint8_t*) "| :\\/: || (__) || :\\/: |");
 800163c:	4b59      	ldr	r3, [pc, #356]	; (80017a4 <LCD_Show+0x1b0>)
 800163e:	9301      	str	r3, [sp, #4]
 8001640:	2310      	movs	r3, #16
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	2310      	movs	r3, #16
 8001646:	22f0      	movs	r2, #240	; 0xf0
 8001648:	214b      	movs	r1, #75	; 0x4b
 800164a:	2019      	movs	r0, #25
 800164c:	f005 fcda 	bl	8007004 <LCD_ShowString>
	LCD_ShowString(25, 90, 240, 16, 16, (uint8_t*) "| '--'W|| '--'X|| '--'Y|");
 8001650:	4b55      	ldr	r3, [pc, #340]	; (80017a8 <LCD_Show+0x1b4>)
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	2310      	movs	r3, #16
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2310      	movs	r3, #16
 800165a:	22f0      	movs	r2, #240	; 0xf0
 800165c:	215a      	movs	r1, #90	; 0x5a
 800165e:	2019      	movs	r0, #25
 8001660:	f005 fcd0 	bl	8007004 <LCD_ShowString>
	LCD_ShowString(25, 105, 240, 16, 16,(uint8_t*) "`------'`------'`------'");
 8001664:	4b51      	ldr	r3, [pc, #324]	; (80017ac <LCD_Show+0x1b8>)
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	2310      	movs	r3, #16
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2310      	movs	r3, #16
 800166e:	22f0      	movs	r2, #240	; 0xf0
 8001670:	2169      	movs	r1, #105	; 0x69
 8001672:	2019      	movs	r0, #25
 8001674:	f005 fcc6 	bl	8007004 <LCD_ShowString>

	//LCD输出测距结果
	POINT_COLOR = BLACK; //将画笔颜色设置为黑色
 8001678:	4b46      	ldr	r3, [pc, #280]	; (8001794 <LCD_Show+0x1a0>)
 800167a:	2200      	movs	r2, #0
 800167c:	801a      	strh	r2, [r3, #0]
	sprintf((char*) ShowBuffer, "DIST:%7.2f", hc_sr04.distance);
 800167e:	4b4c      	ldr	r3, [pc, #304]	; (80017b0 <LCD_Show+0x1bc>)
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe ff3c 	bl	8000500 <__aeabi_f2d>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4638      	mov	r0, r7
 800168e:	4949      	ldr	r1, [pc, #292]	; (80017b4 <LCD_Show+0x1c0>)
 8001690:	f008 fcd8 	bl	800a044 <siprintf>
	LCD_ShowString(30, 140, 240, 24, 24, ShowBuffer);
 8001694:	463b      	mov	r3, r7
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	2318      	movs	r3, #24
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	2318      	movs	r3, #24
 800169e:	22f0      	movs	r2, #240	; 0xf0
 80016a0:	218c      	movs	r1, #140	; 0x8c
 80016a2:	201e      	movs	r0, #30
 80016a4:	f005 fcae 	bl	8007004 <LCD_ShowString>

	//LCD输出测温结果
	sprintf((char*) ShowBuffer, "TEMP:%7.2f", temperature);
 80016a8:	4b43      	ldr	r3, [pc, #268]	; (80017b8 <LCD_Show+0x1c4>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe ff27 	bl	8000500 <__aeabi_f2d>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4638      	mov	r0, r7
 80016b8:	4940      	ldr	r1, [pc, #256]	; (80017bc <LCD_Show+0x1c8>)
 80016ba:	f008 fcc3 	bl	800a044 <siprintf>
	LCD_ShowString(30, 170, 240, 24, 24, ShowBuffer);
 80016be:	463b      	mov	r3, r7
 80016c0:	9301      	str	r3, [sp, #4]
 80016c2:	2318      	movs	r3, #24
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	2318      	movs	r3, #24
 80016c8:	22f0      	movs	r2, #240	; 0xf0
 80016ca:	21aa      	movs	r1, #170	; 0xaa
 80016cc:	201e      	movs	r0, #30
 80016ce:	f005 fc99 	bl	8007004 <LCD_ShowString>

	//根据按键选择的工作模式的不同，LCD上显示不同的提示信息
	if (mode == KEY0_PRES) {
 80016d2:	4b3b      	ldr	r3, [pc, #236]	; (80017c0 <LCD_Show+0x1cc>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d10b      	bne.n	80016f2 <LCD_Show+0xfe>
		LCD_ShowString(25, 280, 200, 24, 24, (uint8_t*) "NRF24L01 RX_MODE");
 80016da:	4b3a      	ldr	r3, [pc, #232]	; (80017c4 <LCD_Show+0x1d0>)
 80016dc:	9301      	str	r3, [sp, #4]
 80016de:	2318      	movs	r3, #24
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	2318      	movs	r3, #24
 80016e4:	22c8      	movs	r2, #200	; 0xc8
 80016e6:	f44f 718c 	mov.w	r1, #280	; 0x118
 80016ea:	2019      	movs	r0, #25
 80016ec:	f005 fc8a 	bl	8007004 <LCD_ShowString>
 80016f0:	e00e      	b.n	8001710 <LCD_Show+0x11c>
	} else if (mode == KEY1_PRES) {
 80016f2:	4b33      	ldr	r3, [pc, #204]	; (80017c0 <LCD_Show+0x1cc>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d10a      	bne.n	8001710 <LCD_Show+0x11c>
		LCD_ShowString(25, 280, 200, 24, 24, (uint8_t*) "NRF24L01 TX_MODE");
 80016fa:	4b33      	ldr	r3, [pc, #204]	; (80017c8 <LCD_Show+0x1d4>)
 80016fc:	9301      	str	r3, [sp, #4]
 80016fe:	2318      	movs	r3, #24
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	2318      	movs	r3, #24
 8001704:	22c8      	movs	r2, #200	; 0xc8
 8001706:	f44f 718c 	mov.w	r1, #280	; 0x118
 800170a:	2019      	movs	r0, #25
 800170c:	f005 fc7a 	bl	8007004 <LCD_ShowString>
	}

	//LCD输出红外结果
	//为避免不同字符混杂的情况，当LCD显示的字符不同时，先执行一次清屏操作
	if (LastCome != manCome) {
 8001710:	4b2e      	ldr	r3, [pc, #184]	; (80017cc <LCD_Show+0x1d8>)
 8001712:	781a      	ldrb	r2, [r3, #0]
 8001714:	4b2e      	ldr	r3, [pc, #184]	; (80017d0 <LCD_Show+0x1dc>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d009      	beq.n	8001730 <LCD_Show+0x13c>
		LCD_Fill(20, 200, 220, 280, WHITE);
 800171c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001726:	22dc      	movs	r2, #220	; 0xdc
 8001728:	21c8      	movs	r1, #200	; 0xc8
 800172a:	2014      	movs	r0, #20
 800172c:	f005 fb16 	bl	8006d5c <LCD_Fill>
	}
	if (manCome == 1) {
 8001730:	4b27      	ldr	r3, [pc, #156]	; (80017d0 <LCD_Show+0x1dc>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d118      	bne.n	800176a <LCD_Show+0x176>
		POINT_COLOR = RED;
 8001738:	4b16      	ldr	r3, [pc, #88]	; (8001794 <LCD_Show+0x1a0>)
 800173a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800173e:	801a      	strh	r2, [r3, #0]
		LCD_ShowString(30, 210, 240, 24, 24, (uint8_t*) "SOMEBODY");
 8001740:	4b24      	ldr	r3, [pc, #144]	; (80017d4 <LCD_Show+0x1e0>)
 8001742:	9301      	str	r3, [sp, #4]
 8001744:	2318      	movs	r3, #24
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	2318      	movs	r3, #24
 800174a:	22f0      	movs	r2, #240	; 0xf0
 800174c:	21d2      	movs	r1, #210	; 0xd2
 800174e:	201e      	movs	r0, #30
 8001750:	f005 fc58 	bl	8007004 <LCD_ShowString>
		LCD_ShowString(30, 240, 240, 24, 24, (uint8_t*) "APPROCHING!!!!");
 8001754:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <LCD_Show+0x1e4>)
 8001756:	9301      	str	r3, [sp, #4]
 8001758:	2318      	movs	r3, #24
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	2318      	movs	r3, #24
 800175e:	22f0      	movs	r2, #240	; 0xf0
 8001760:	21f0      	movs	r1, #240	; 0xf0
 8001762:	201e      	movs	r0, #30
 8001764:	f005 fc4e 	bl	8007004 <LCD_ShowString>
 8001768:	e00c      	b.n	8001784 <LCD_Show+0x190>
	} else {
		POINT_COLOR = BLACK;
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <LCD_Show+0x1a0>)
 800176c:	2200      	movs	r2, #0
 800176e:	801a      	strh	r2, [r3, #0]
		LCD_ShowString(40, 220, 240, 24, 24, (uint8_t*) "NOBODY......");
 8001770:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <LCD_Show+0x1e8>)
 8001772:	9301      	str	r3, [sp, #4]
 8001774:	2318      	movs	r3, #24
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	2318      	movs	r3, #24
 800177a:	22f0      	movs	r2, #240	; 0xf0
 800177c:	21dc      	movs	r1, #220	; 0xdc
 800177e:	2028      	movs	r0, #40	; 0x28
 8001780:	f005 fc40 	bl	8007004 <LCD_ShowString>
	}
	LastCome = manCome;
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <LCD_Show+0x1dc>)
 8001786:	781a      	ldrb	r2, [r3, #0]
 8001788:	4b10      	ldr	r3, [pc, #64]	; (80017cc <LCD_Show+0x1d8>)
 800178a:	701a      	strb	r2, [r3, #0]
}
 800178c:	bf00      	nop
 800178e:	3740      	adds	r7, #64	; 0x40
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000214 	.word	0x20000214
 8001798:	0800dc48 	.word	0x0800dc48
 800179c:	0800dc64 	.word	0x0800dc64
 80017a0:	0800dc80 	.word	0x0800dc80
 80017a4:	0800dc9c 	.word	0x0800dc9c
 80017a8:	0800dcb8 	.word	0x0800dcb8
 80017ac:	0800dcd4 	.word	0x0800dcd4
 80017b0:	200002fc 	.word	0x200002fc
 80017b4:	0800dcf0 	.word	0x0800dcf0
 80017b8:	20000268 	.word	0x20000268
 80017bc:	0800dcfc 	.word	0x0800dcfc
 80017c0:	2000026c 	.word	0x2000026c
 80017c4:	0800dd08 	.word	0x0800dd08
 80017c8:	0800dd1c 	.word	0x0800dd1c
 80017cc:	20000000 	.word	0x20000000
 80017d0:	20000290 	.word	0x20000290
 80017d4:	0800dd30 	.word	0x0800dd30
 80017d8:	0800dd3c 	.word	0x0800dd3c
 80017dc:	0800dd4c 	.word	0x0800dd4c

080017e0 <nRF24L01_Start>:

//选择nRF24L01的工作模式
void nRF24L01_Start(void) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af02      	add	r7, sp, #8
	//首先判断是否正常连接上了nRF24L01
	//若未正常连接，LCD显示错误提醒
	while (NRF24L01_Check()) {
 80017e6:	e01e      	b.n	8001826 <nRF24L01_Start+0x46>
		POINT_COLOR = RED;
 80017e8:	4b65      	ldr	r3, [pc, #404]	; (8001980 <nRF24L01_Start+0x1a0>)
 80017ea:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80017ee:	801a      	strh	r2, [r3, #0]
		LCD_ShowString(30, 70, 200, 24, 24, (uint8_t*) "NRF24L01 Error...");
 80017f0:	4b64      	ldr	r3, [pc, #400]	; (8001984 <nRF24L01_Start+0x1a4>)
 80017f2:	9301      	str	r3, [sp, #4]
 80017f4:	2318      	movs	r3, #24
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	2318      	movs	r3, #24
 80017fa:	22c8      	movs	r2, #200	; 0xc8
 80017fc:	2146      	movs	r1, #70	; 0x46
 80017fe:	201e      	movs	r0, #30
 8001800:	f005 fc00 	bl	8007004 <LCD_ShowString>
		HAL_Delay(700);
 8001804:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001808:	f005 fcac 	bl	8007164 <HAL_Delay>
		LCD_Fill(30, 70, 230, 94, WHITE);
 800180c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	235e      	movs	r3, #94	; 0x5e
 8001814:	22e6      	movs	r2, #230	; 0xe6
 8001816:	2146      	movs	r1, #70	; 0x46
 8001818:	201e      	movs	r0, #30
 800181a:	f005 fa9f 	bl	8006d5c <LCD_Fill>
		HAL_Delay(700);
 800181e:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001822:	f005 fc9f 	bl	8007164 <HAL_Delay>
	while (NRF24L01_Check()) {
 8001826:	f007 fd91 	bl	800934c <NRF24L01_Check>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1db      	bne.n	80017e8 <nRF24L01_Start+0x8>
	}
	//若正常连接nRF24L01则显示相关提示
	LCD_Fill(30, 70, 230, 94, WHITE);
 8001830:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	235e      	movs	r3, #94	; 0x5e
 8001838:	22e6      	movs	r2, #230	; 0xe6
 800183a:	2146      	movs	r1, #70	; 0x46
 800183c:	201e      	movs	r0, #30
 800183e:	f005 fa8d 	bl	8006d5c <LCD_Fill>
	POINT_COLOR = BLACK;
 8001842:	4b4f      	ldr	r3, [pc, #316]	; (8001980 <nRF24L01_Start+0x1a0>)
 8001844:	2200      	movs	r2, #0
 8001846:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(30, 70, 200, 24, 24, (uint8_t*) "NRF24L01 OK");
 8001848:	4b4f      	ldr	r3, [pc, #316]	; (8001988 <nRF24L01_Start+0x1a8>)
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	2318      	movs	r3, #24
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2318      	movs	r3, #24
 8001852:	22c8      	movs	r2, #200	; 0xc8
 8001854:	2146      	movs	r1, #70	; 0x46
 8001856:	201e      	movs	r0, #30
 8001858:	f005 fbd4 	bl	8007004 <LCD_ShowString>
	HAL_Delay(300);
 800185c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001860:	f005 fc80 	bl	8007164 <HAL_Delay>
	LCD_ShowString(30, 70, 200, 24, 24, (uint8_t*) "NRF24L01 OK.");
 8001864:	4b49      	ldr	r3, [pc, #292]	; (800198c <nRF24L01_Start+0x1ac>)
 8001866:	9301      	str	r3, [sp, #4]
 8001868:	2318      	movs	r3, #24
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	2318      	movs	r3, #24
 800186e:	22c8      	movs	r2, #200	; 0xc8
 8001870:	2146      	movs	r1, #70	; 0x46
 8001872:	201e      	movs	r0, #30
 8001874:	f005 fbc6 	bl	8007004 <LCD_ShowString>
	HAL_Delay(500);
 8001878:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800187c:	f005 fc72 	bl	8007164 <HAL_Delay>
	LCD_ShowString(30, 70, 200, 24, 24, (uint8_t*) "NRF24L01 OK..");
 8001880:	4b43      	ldr	r3, [pc, #268]	; (8001990 <nRF24L01_Start+0x1b0>)
 8001882:	9301      	str	r3, [sp, #4]
 8001884:	2318      	movs	r3, #24
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2318      	movs	r3, #24
 800188a:	22c8      	movs	r2, #200	; 0xc8
 800188c:	2146      	movs	r1, #70	; 0x46
 800188e:	201e      	movs	r0, #30
 8001890:	f005 fbb8 	bl	8007004 <LCD_ShowString>
	HAL_Delay(500);
 8001894:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001898:	f005 fc64 	bl	8007164 <HAL_Delay>
	LCD_ShowString(30, 70, 200, 24, 24, (uint8_t*) "NRF24L01 OK...");
 800189c:	4b3d      	ldr	r3, [pc, #244]	; (8001994 <nRF24L01_Start+0x1b4>)
 800189e:	9301      	str	r3, [sp, #4]
 80018a0:	2318      	movs	r3, #24
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2318      	movs	r3, #24
 80018a6:	22c8      	movs	r2, #200	; 0xc8
 80018a8:	2146      	movs	r1, #70	; 0x46
 80018aa:	201e      	movs	r0, #30
 80018ac:	f005 fbaa 	bl	8007004 <LCD_ShowString>
	HAL_Delay(500);
 80018b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018b4:	f005 fc56 	bl	8007164 <HAL_Delay>

	//使用按键选择单片机的工作模式
	//Key0----接收模式
	//Key1----发送模式
	while (1) {
		i++;
 80018b8:	4b37      	ldr	r3, [pc, #220]	; (8001998 <nRF24L01_Start+0x1b8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	3301      	adds	r3, #1
 80018be:	4a36      	ldr	r2, [pc, #216]	; (8001998 <nRF24L01_Start+0x1b8>)
 80018c0:	6013      	str	r3, [r2, #0]
		mode = KeyScan(0);
 80018c2:	2000      	movs	r0, #0
 80018c4:	f000 ff68 	bl	8002798 <KeyScan>
 80018c8:	4603      	mov	r3, r0
 80018ca:	461a      	mov	r2, r3
 80018cc:	4b33      	ldr	r3, [pc, #204]	; (800199c <nRF24L01_Start+0x1bc>)
 80018ce:	701a      	strb	r2, [r3, #0]
		POINT_COLOR = RED;
 80018d0:	4b2b      	ldr	r3, [pc, #172]	; (8001980 <nRF24L01_Start+0x1a0>)
 80018d2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80018d6:	801a      	strh	r2, [r3, #0]
		if (i == 80000) {
 80018d8:	4b2f      	ldr	r3, [pc, #188]	; (8001998 <nRF24L01_Start+0x1b8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a30      	ldr	r2, [pc, #192]	; (80019a0 <nRF24L01_Start+0x1c0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d11e      	bne.n	8001920 <nRF24L01_Start+0x140>
			LCD_ShowString(40, 130, 200, 24, 24, (uint8_t*) "RECEIVE(KEY0)");
 80018e2:	4b30      	ldr	r3, [pc, #192]	; (80019a4 <nRF24L01_Start+0x1c4>)
 80018e4:	9301      	str	r3, [sp, #4]
 80018e6:	2318      	movs	r3, #24
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	2318      	movs	r3, #24
 80018ec:	22c8      	movs	r2, #200	; 0xc8
 80018ee:	2182      	movs	r1, #130	; 0x82
 80018f0:	2028      	movs	r0, #40	; 0x28
 80018f2:	f005 fb87 	bl	8007004 <LCD_ShowString>
			LCD_ShowString(100, 170, 200, 24, 24, (uint8_t*) "OR");
 80018f6:	4b2c      	ldr	r3, [pc, #176]	; (80019a8 <nRF24L01_Start+0x1c8>)
 80018f8:	9301      	str	r3, [sp, #4]
 80018fa:	2318      	movs	r3, #24
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	2318      	movs	r3, #24
 8001900:	22c8      	movs	r2, #200	; 0xc8
 8001902:	21aa      	movs	r1, #170	; 0xaa
 8001904:	2064      	movs	r0, #100	; 0x64
 8001906:	f005 fb7d 	bl	8007004 <LCD_ShowString>
			LCD_ShowString(60, 210, 200, 24, 24, (uint8_t*) "SENT(KEY1)");
 800190a:	4b28      	ldr	r3, [pc, #160]	; (80019ac <nRF24L01_Start+0x1cc>)
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	2318      	movs	r3, #24
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	2318      	movs	r3, #24
 8001914:	22c8      	movs	r2, #200	; 0xc8
 8001916:	21d2      	movs	r1, #210	; 0xd2
 8001918:	203c      	movs	r0, #60	; 0x3c
 800191a:	f005 fb73 	bl	8007004 <LCD_ShowString>
 800191e:	e010      	b.n	8001942 <nRF24L01_Start+0x162>
		} else if (i == 160000) {
 8001920:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <nRF24L01_Start+0x1b8>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a22      	ldr	r2, [pc, #136]	; (80019b0 <nRF24L01_Start+0x1d0>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d10b      	bne.n	8001942 <nRF24L01_Start+0x162>
			LCD_Fill(30, 130, 230, 234, WHITE);
 800192a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	23ea      	movs	r3, #234	; 0xea
 8001932:	22e6      	movs	r2, #230	; 0xe6
 8001934:	2182      	movs	r1, #130	; 0x82
 8001936:	201e      	movs	r0, #30
 8001938:	f005 fa10 	bl	8006d5c <LCD_Fill>
			i = 0;
 800193c:	4b16      	ldr	r3, [pc, #88]	; (8001998 <nRF24L01_Start+0x1b8>)
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
		}

		POINT_COLOR = BLACK;
 8001942:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <nRF24L01_Start+0x1a0>)
 8001944:	2200      	movs	r2, #0
 8001946:	801a      	strh	r2, [r3, #0]
		switch (mode) {
 8001948:	4b14      	ldr	r3, [pc, #80]	; (800199c <nRF24L01_Start+0x1bc>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d002      	beq.n	8001956 <nRF24L01_Start+0x176>
 8001950:	2b02      	cmp	r3, #2
 8001952:	d003      	beq.n	800195c <nRF24L01_Start+0x17c>
 8001954:	e005      	b.n	8001962 <nRF24L01_Start+0x182>
		case KEY0_PRES:
			NRF24L01_RX_Mode();
 8001956:	f007 fe51 	bl	80095fc <NRF24L01_RX_Mode>
			break;
 800195a:	e003      	b.n	8001964 <nRF24L01_Start+0x184>
		case KEY1_PRES:
			NRF24L01_TX_Mode();
 800195c:	f007 fe82 	bl	8009664 <NRF24L01_TX_Mode>
			break;
 8001960:	e000      	b.n	8001964 <nRF24L01_Start+0x184>
		i++;
 8001962:	e7a9      	b.n	80018b8 <nRF24L01_Start+0xd8>
		default:
			continue;
		}
		break;
 8001964:	bf00      	nop
	}
	//结束后全屏清屏，方便后续处理
	LCD_Fill(0, 0, 320, 240, WHITE);
 8001966:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	23f0      	movs	r3, #240	; 0xf0
 800196e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001972:	2100      	movs	r1, #0
 8001974:	2000      	movs	r0, #0
 8001976:	f005 f9f1 	bl	8006d5c <LCD_Fill>
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000214 	.word	0x20000214
 8001984:	0800dd5c 	.word	0x0800dd5c
 8001988:	0800dd70 	.word	0x0800dd70
 800198c:	0800dd7c 	.word	0x0800dd7c
 8001990:	0800dd8c 	.word	0x0800dd8c
 8001994:	0800dd9c 	.word	0x0800dd9c
 8001998:	20000208 	.word	0x20000208
 800199c:	2000026c 	.word	0x2000026c
 80019a0:	00013880 	.word	0x00013880
 80019a4:	0800ddac 	.word	0x0800ddac
 80019a8:	0800ddbc 	.word	0x0800ddbc
 80019ac:	0800ddc0 	.word	0x0800ddc0
 80019b0:	00027100 	.word	0x00027100

080019b4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80019b4:	b5b0      	push	{r4, r5, r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80019ba:	f005 fb71 	bl	80070a0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80019be:	f000 f927 	bl	8001c10 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80019c2:	f7ff fd3b 	bl	800143c <MX_GPIO_Init>
	MX_FSMC_Init();
 80019c6:	f7ff fc5d 	bl	8001284 <MX_FSMC_Init>
	MX_USART1_UART_Init();
 80019ca:	f000 fbf7 	bl	80021bc <MX_USART1_UART_Init>
	MX_TIM2_Init();
 80019ce:	f000 fb25 	bl	800201c <MX_TIM2_Init>
	MX_SPI2_Init();
 80019d2:	f000 f981 	bl	8001cd8 <MX_SPI2_Init>
	MX_TIM7_Init();
 80019d6:	f000 fb6d 	bl	80020b4 <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */
	HC_SR04_Init(&hc_sr04); //HC_SR04初始化
 80019da:	487e      	ldr	r0, [pc, #504]	; (8001bd4 <main+0x220>)
 80019dc:	f000 fe30 	bl	8002640 <HC_SR04_Init>
	DS18B20_Init(); //DS18B20初始化
 80019e0:	f000 fdb2 	bl	8002548 <DS18B20_Init>
	NRF24L01_Init(); //nRF24L01初始化
 80019e4:	f007 fc20 	bl	8009228 <NRF24L01_Init>

	LCD_Init(); //LCD初始化
 80019e8:	f001 fd2e 	bl	8003448 <LCD_Init>
	LCD_Clear(WHITE); //清屏为白色
 80019ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80019f0:	f005 f966 	bl	8006cc0 <LCD_Clear>
	POINT_COLOR = BLACK; //将画笔颜色设置为黑色
 80019f4:	4b78      	ldr	r3, [pc, #480]	; (8001bd8 <main+0x224>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	801a      	strh	r2, [r3, #0]

	nRF24L01_Start(); //nRF24L01
 80019fa:	f7ff fef1 	bl	80017e0 <nRF24L01_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	//判断当前应该进入发送模式还是接收模式
	if (mode == KEY1_PRES) {
 80019fe:	4b77      	ldr	r3, [pc, #476]	; (8001bdc <main+0x228>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d15b      	bne.n	8001abe <main+0x10a>
			 * 		I-----红外
			 * 从第二个字符开始即为实际发送数据
			 */

			//使用HC_SR04测距
			HC_SR04_Measure(&hc_sr04);
 8001a06:	4873      	ldr	r0, [pc, #460]	; (8001bd4 <main+0x220>)
 8001a08:	f000 fe52 	bl	80026b0 <HC_SR04_Measure>
			LCD_Show();
 8001a0c:	f7ff fdf2 	bl	80015f4 <LCD_Show>
			sprintf((char*) Tx_Buf, "D%.2f", hc_sr04.distance);
 8001a10:	4b70      	ldr	r3, [pc, #448]	; (8001bd4 <main+0x220>)
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fd73 	bl	8000500 <__aeabi_f2d>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4970      	ldr	r1, [pc, #448]	; (8001be0 <main+0x22c>)
 8001a20:	4870      	ldr	r0, [pc, #448]	; (8001be4 <main+0x230>)
 8001a22:	f008 fb0f 	bl	800a044 <siprintf>
			while (NRF24L01_TxPacket(Tx_Buf) != TX_OK)
 8001a26:	bf00      	nop
 8001a28:	486e      	ldr	r0, [pc, #440]	; (8001be4 <main+0x230>)
 8001a2a:	f007 fd7d 	bl	8009528 <NRF24L01_TxPacket>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b20      	cmp	r3, #32
 8001a32:	d1f9      	bne.n	8001a28 <main+0x74>
				;

			//使用18b20测温
			temperature = DS18B20_Get_Temperature();
 8001a34:	f000 fda4 	bl	8002580 <DS18B20_Get_Temperature>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4a6b      	ldr	r2, [pc, #428]	; (8001be8 <main+0x234>)
 8001a3c:	6013      	str	r3, [r2, #0]
			LCD_Show();
 8001a3e:	f7ff fdd9 	bl	80015f4 <LCD_Show>
			sprintf((char*) Tx_Buf, "T%.2f", temperature);
 8001a42:	4b69      	ldr	r3, [pc, #420]	; (8001be8 <main+0x234>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fd5a 	bl	8000500 <__aeabi_f2d>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4966      	ldr	r1, [pc, #408]	; (8001bec <main+0x238>)
 8001a52:	4864      	ldr	r0, [pc, #400]	; (8001be4 <main+0x230>)
 8001a54:	f008 faf6 	bl	800a044 <siprintf>
			while (NRF24L01_TxPacket(Tx_Buf) != TX_OK)
 8001a58:	bf00      	nop
 8001a5a:	4862      	ldr	r0, [pc, #392]	; (8001be4 <main+0x230>)
 8001a5c:	f007 fd64 	bl	8009528 <NRF24L01_TxPacket>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b20      	cmp	r3, #32
 8001a64:	d1f9      	bne.n	8001a5a <main+0xa6>
				;

			//当红外传感器检测到人时，让LED0亮
			manCome = HC_SR501;
 8001a66:	2120      	movs	r1, #32
 8001a68:	4861      	ldr	r0, [pc, #388]	; (8001bf0 <main+0x23c>)
 8001a6a:	f005 fe17 	bl	800769c <HAL_GPIO_ReadPin>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b60      	ldr	r3, [pc, #384]	; (8001bf4 <main+0x240>)
 8001a74:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, !HC_SR501);
 8001a76:	2120      	movs	r1, #32
 8001a78:	485d      	ldr	r0, [pc, #372]	; (8001bf0 <main+0x23c>)
 8001a7a:	f005 fe0f 	bl	800769c <HAL_GPIO_ReadPin>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	bf0c      	ite	eq
 8001a84:	2301      	moveq	r3, #1
 8001a86:	2300      	movne	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	2120      	movs	r1, #32
 8001a8e:	485a      	ldr	r0, [pc, #360]	; (8001bf8 <main+0x244>)
 8001a90:	f005 fe1b 	bl	80076ca <HAL_GPIO_WritePin>
			LCD_Show();
 8001a94:	f7ff fdae 	bl	80015f4 <LCD_Show>
			sprintf((char*) Tx_Buf, "I%d", manCome);
 8001a98:	4b56      	ldr	r3, [pc, #344]	; (8001bf4 <main+0x240>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4957      	ldr	r1, [pc, #348]	; (8001bfc <main+0x248>)
 8001aa0:	4850      	ldr	r0, [pc, #320]	; (8001be4 <main+0x230>)
 8001aa2:	f008 facf 	bl	800a044 <siprintf>
			while (NRF24L01_TxPacket(Tx_Buf) != TX_OK)
 8001aa6:	bf00      	nop
 8001aa8:	484e      	ldr	r0, [pc, #312]	; (8001be4 <main+0x230>)
 8001aaa:	f007 fd3d 	bl	8009528 <NRF24L01_TxPacket>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b20      	cmp	r3, #32
 8001ab2:	d1f9      	bne.n	8001aa8 <main+0xf4>
				;

			HAL_Delay(500);
 8001ab4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ab8:	f005 fb54 	bl	8007164 <HAL_Delay>
			HC_SR04_Measure(&hc_sr04);
 8001abc:	e7a3      	b.n	8001a06 <main+0x52>
		}
	} else if (mode == KEY0_PRES) {
 8001abe:	4b47      	ldr	r3, [pc, #284]	; (8001bdc <main+0x228>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	f040 8081 	bne.w	8001bca <main+0x216>
			/*
			 * 接收模式中，根据发送的格式对接收到的数据进行处理
			 * 首先提取第一个字符，用于判断当前数据是哪个类型的数据
			 * 然后从数据的第二位开始，即为传感器的检测数据
			 */
			if (NRF24L01_RxPacket(Rx_Buf) == 0) {
 8001ac8:	484d      	ldr	r0, [pc, #308]	; (8001c00 <main+0x24c>)
 8001aca:	f007 fd71 	bl	80095b0 <NRF24L01_RxPacket>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d13e      	bne.n	8001b52 <main+0x19e>
				//数组的最后加上'\0'，表示字符串结束
				Rx_Buf[31] = 0;
 8001ad4:	4b4a      	ldr	r3, [pc, #296]	; (8001c00 <main+0x24c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	77da      	strb	r2, [r3, #31]
				//提取数据字符串，并将字符串转换成float或double或int
				if (Rx_Buf[0] == 'D') {
 8001ada:	4b49      	ldr	r3, [pc, #292]	; (8001c00 <main+0x24c>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b44      	cmp	r3, #68	; 0x44
 8001ae0:	d10c      	bne.n	8001afc <main+0x148>
					hc_sr04.distance = atof((char*) (&Rx_Buf[1]));
 8001ae2:	4848      	ldr	r0, [pc, #288]	; (8001c04 <main+0x250>)
 8001ae4:	f007 fdfa 	bl	80096dc <atof>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4610      	mov	r0, r2
 8001aee:	4619      	mov	r1, r3
 8001af0:	f7ff f856 	bl	8000ba0 <__aeabi_d2f>
 8001af4:	4603      	mov	r3, r0
 8001af6:	4a37      	ldr	r2, [pc, #220]	; (8001bd4 <main+0x220>)
 8001af8:	6153      	str	r3, [r2, #20]
 8001afa:	e02a      	b.n	8001b52 <main+0x19e>
				} else if (Rx_Buf[0] == 'T') {
 8001afc:	4b40      	ldr	r3, [pc, #256]	; (8001c00 <main+0x24c>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b54      	cmp	r3, #84	; 0x54
 8001b02:	d106      	bne.n	8001b12 <main+0x15e>
					temperature = atoff((char*) (&Rx_Buf[1]));
 8001b04:	483f      	ldr	r0, [pc, #252]	; (8001c04 <main+0x250>)
 8001b06:	f007 fdec 	bl	80096e2 <atoff>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	4a36      	ldr	r2, [pc, #216]	; (8001be8 <main+0x234>)
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	e01f      	b.n	8001b52 <main+0x19e>
				} else if (Rx_Buf[0] == 'I') {
 8001b12:	4b3b      	ldr	r3, [pc, #236]	; (8001c00 <main+0x24c>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b49      	cmp	r3, #73	; 0x49
 8001b18:	d11b      	bne.n	8001b52 <main+0x19e>
					manCome = atoi((char*) (&Rx_Buf[1]));
 8001b1a:	483a      	ldr	r0, [pc, #232]	; (8001c04 <main+0x250>)
 8001b1c:	f007 fde4 	bl	80096e8 <atoi>
 8001b20:	4603      	mov	r3, r0
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	4b33      	ldr	r3, [pc, #204]	; (8001bf4 <main+0x240>)
 8001b26:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, !manCome);
 8001b28:	4b32      	ldr	r3, [pc, #200]	; (8001bf4 <main+0x240>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	bf0c      	ite	eq
 8001b30:	2301      	moveq	r3, #1
 8001b32:	2300      	movne	r3, #0
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	461a      	mov	r2, r3
 8001b38:	2120      	movs	r1, #32
 8001b3a:	482f      	ldr	r0, [pc, #188]	; (8001bf8 <main+0x244>)
 8001b3c:	f005 fdc5 	bl	80076ca <HAL_GPIO_WritePin>
					//若检测到有人，则开始计时
					if (manCome == 1) {
 8001b40:	4b2c      	ldr	r3, [pc, #176]	; (8001bf4 <main+0x240>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d104      	bne.n	8001b52 <main+0x19e>
						time++;
 8001b48:	4b2f      	ldr	r3, [pc, #188]	; (8001c08 <main+0x254>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	4a2e      	ldr	r2, [pc, #184]	; (8001c08 <main+0x254>)
 8001b50:	6013      	str	r3, [r2, #0]
					}
				}
			}
			LCD_Show();
 8001b52:	f7ff fd4f 	bl	80015f4 <LCD_Show>

			//若检测到有人、距离较近且长时间逗留，则报警(蜂鸣器响)
			if (manCome == 1 && time >= 25 && hc_sr04.distance <= 100) {
 8001b56:	4b27      	ldr	r3, [pc, #156]	; (8001bf4 <main+0x240>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d112      	bne.n	8001b84 <main+0x1d0>
 8001b5e:	4b2a      	ldr	r3, [pc, #168]	; (8001c08 <main+0x254>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2b18      	cmp	r3, #24
 8001b64:	d90e      	bls.n	8001b84 <main+0x1d0>
 8001b66:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <main+0x220>)
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	4928      	ldr	r1, [pc, #160]	; (8001c0c <main+0x258>)
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff fb1d 	bl	80011ac <__aeabi_fcmple>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <main+0x1d0>
				BEEP_On();
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b7e:	481e      	ldr	r0, [pc, #120]	; (8001bf8 <main+0x244>)
 8001b80:	f005 fda3 	bl	80076ca <HAL_GPIO_WritePin>
			}
			//若此时人走了，则关闭蜂鸣器
			if (manCome == 0) {
 8001b84:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <main+0x240>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d108      	bne.n	8001b9e <main+0x1ea>
				BEEP_Off();
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b92:	4819      	ldr	r0, [pc, #100]	; (8001bf8 <main+0x244>)
 8001b94:	f005 fd99 	bl	80076ca <HAL_GPIO_WritePin>
				time = 0;
 8001b98:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <main+0x254>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
//			}
//			printf("当前测距结果为：%.2f cm\r\n", hc_sr04.distance);
//			printf("当前温度为：%.2f ℃\r\n", temperature);

			//按照要求，串口输出上位机
			mpu6050_send_data(hc_sr04.distance, temperature, manCome);
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <main+0x220>)
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe fcac 	bl	8000500 <__aeabi_f2d>
 8001ba8:	4604      	mov	r4, r0
 8001baa:	460d      	mov	r5, r1
 8001bac:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <main+0x234>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fca5 	bl	8000500 <__aeabi_f2d>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	490e      	ldr	r1, [pc, #56]	; (8001bf4 <main+0x240>)
 8001bbc:	7809      	ldrb	r1, [r1, #0]
 8001bbe:	9100      	str	r1, [sp, #0]
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	4629      	mov	r1, r5
 8001bc4:	f007 fafa 	bl	80091bc <mpu6050_send_data>
		while (1) {
 8001bc8:	e77e      	b.n	8001ac8 <main+0x114>
 8001bca:	2300      	movs	r3, #0
	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */

	/* USER CODE END 3 */
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200002fc 	.word	0x200002fc
 8001bd8:	20000214 	.word	0x20000214
 8001bdc:	2000026c 	.word	0x2000026c
 8001be0:	0800ddcc 	.word	0x0800ddcc
 8001be4:	20000270 	.word	0x20000270
 8001be8:	20000268 	.word	0x20000268
 8001bec:	0800ddd4 	.word	0x0800ddd4
 8001bf0:	40010800 	.word	0x40010800
 8001bf4:	20000290 	.word	0x20000290
 8001bf8:	40010c00 	.word	0x40010c00
 8001bfc:	0800dddc 	.word	0x0800dddc
 8001c00:	20000314 	.word	0x20000314
 8001c04:	20000315 	.word	0x20000315
 8001c08:	2000020c 	.word	0x2000020c
 8001c0c:	42c80000 	.word	0x42c80000

08001c10 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b090      	sub	sp, #64	; 0x40
 8001c14:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001c16:	f107 0318 	add.w	r3, r7, #24
 8001c1a:	2228      	movs	r2, #40	; 0x28
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f007 fd90 	bl	8009744 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
 8001c30:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c32:	2301      	movs	r3, #1
 8001c34:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c3a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c40:	2301      	movs	r3, #1
 8001c42:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c44:	2302      	movs	r3, #2
 8001c46:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c4c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c4e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001c52:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001c54:	f107 0318 	add.w	r3, r7, #24
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f005 fd4f 	bl	80076fc <HAL_RCC_OscConfig>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <SystemClock_Config+0x58>
		Error_Handler();
 8001c64:	f000 f832 	bl	8001ccc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001c68:	230f      	movs	r3, #15
 8001c6a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c78:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001c7e:	1d3b      	adds	r3, r7, #4
 8001c80:	2102      	movs	r1, #2
 8001c82:	4618      	mov	r0, r3
 8001c84:	f005 ffba 	bl	8007bfc <HAL_RCC_ClockConfig>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <SystemClock_Config+0x82>
		Error_Handler();
 8001c8e:	f000 f81d 	bl	8001ccc <Error_Handler>
	}
}
 8001c92:	bf00      	nop
 8001c94:	3740      	adds	r7, #64	; 0x40
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <__io_putchar>:
//定义_sys_exit()以避免使用半主机模式
void _sys_exit(int x) {
	x = x;
}
//重定义fputc函数
PUTCHAR_PROTOTYPE {
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	// 具体哪个串口可以更改huart2为其它串口
	// HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1 , 0xffff);
	while ((USART1->SR & 0X40) == 0) {
 8001ca4:	bf00      	nop
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <__io_putchar+0x2c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0f9      	beq.n	8001ca6 <__io_putchar+0xa>
	}; //循环发送,直到发送完毕
	USART1->DR = (uint8_t) ch;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <__io_putchar+0x2c>)
 8001cb8:	605a      	str	r2, [r3, #4]

//  while ((USART2->SR & 0X40) == 0) {
//  }; //循环发送,直到发送完毕
//  USART2->DR = (uint8_t) ch;

	return ch;
 8001cba:	687b      	ldr	r3, [r7, #4]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40013800 	.word	0x40013800

08001ccc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd0:	b672      	cpsid	i
}
 8001cd2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001cd4:	e7fe      	b.n	8001cd4 <Error_Handler+0x8>
	...

08001cd8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001cdc:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <MX_SPI2_Init+0x64>)
 8001cde:	4a18      	ldr	r2, [pc, #96]	; (8001d40 <MX_SPI2_Init+0x68>)
 8001ce0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ce2:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <MX_SPI2_Init+0x64>)
 8001ce4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ce8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001cea:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <MX_SPI2_Init+0x64>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <MX_SPI2_Init+0x64>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cf6:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <MX_SPI2_Init+0x64>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <MX_SPI2_Init+0x64>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d02:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <MX_SPI2_Init+0x64>)
 8001d04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d08:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <MX_SPI2_Init+0x64>)
 8001d0c:	2208      	movs	r2, #8
 8001d0e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d10:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <MX_SPI2_Init+0x64>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <MX_SPI2_Init+0x64>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d1c:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <MX_SPI2_Init+0x64>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <MX_SPI2_Init+0x64>)
 8001d24:	220a      	movs	r2, #10
 8001d26:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d28:	4804      	ldr	r0, [pc, #16]	; (8001d3c <MX_SPI2_Init+0x64>)
 8001d2a:	f006 f901 	bl	8007f30 <HAL_SPI_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001d34:	f7ff ffca 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000334 	.word	0x20000334
 8001d40:	40003800 	.word	0x40003800

08001d44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 0310 	add.w	r3, r7, #16
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a1c      	ldr	r2, [pc, #112]	; (8001dd0 <HAL_SPI_MspInit+0x8c>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d131      	bne.n	8001dc8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d64:	4b1b      	ldr	r3, [pc, #108]	; (8001dd4 <HAL_SPI_MspInit+0x90>)
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	4a1a      	ldr	r2, [pc, #104]	; (8001dd4 <HAL_SPI_MspInit+0x90>)
 8001d6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d6e:	61d3      	str	r3, [r2, #28]
 8001d70:	4b18      	ldr	r3, [pc, #96]	; (8001dd4 <HAL_SPI_MspInit+0x90>)
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7c:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <HAL_SPI_MspInit+0x90>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	4a14      	ldr	r2, [pc, #80]	; (8001dd4 <HAL_SPI_MspInit+0x90>)
 8001d82:	f043 0308 	orr.w	r3, r3, #8
 8001d86:	6193      	str	r3, [r2, #24]
 8001d88:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <HAL_SPI_MspInit+0x90>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	f003 0308 	and.w	r3, r3, #8
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001d94:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001d98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da2:	f107 0310 	add.w	r3, r7, #16
 8001da6:	4619      	mov	r1, r3
 8001da8:	480b      	ldr	r0, [pc, #44]	; (8001dd8 <HAL_SPI_MspInit+0x94>)
 8001daa:	f005 fae3 	bl	8007374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001dae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001db2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dbc:	f107 0310 	add.w	r3, r7, #16
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <HAL_SPI_MspInit+0x94>)
 8001dc4:	f005 fad6 	bl	8007374 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001dc8:	bf00      	nop
 8001dca:	3720      	adds	r7, #32
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40003800 	.word	0x40003800
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40010c00 	.word	0x40010c00

08001ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <HAL_MspInit+0x5c>)
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	4a14      	ldr	r2, [pc, #80]	; (8001e38 <HAL_MspInit+0x5c>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6193      	str	r3, [r2, #24]
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <HAL_MspInit+0x5c>)
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dfa:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <HAL_MspInit+0x5c>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	4a0e      	ldr	r2, [pc, #56]	; (8001e38 <HAL_MspInit+0x5c>)
 8001e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e04:	61d3      	str	r3, [r2, #28]
 8001e06:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <HAL_MspInit+0x5c>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0e:	607b      	str	r3, [r7, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e12:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <HAL_MspInit+0x60>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	4a04      	ldr	r2, [pc, #16]	; (8001e3c <HAL_MspInit+0x60>)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40010000 	.word	0x40010000

08001e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <NMI_Handler+0x4>

08001e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e4a:	e7fe      	b.n	8001e4a <HardFault_Handler+0x4>

08001e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e50:	e7fe      	b.n	8001e50 <MemManage_Handler+0x4>

08001e52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e56:	e7fe      	b.n	8001e56 <BusFault_Handler+0x4>

08001e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e5c:	e7fe      	b.n	8001e5c <UsageFault_Handler+0x4>

08001e5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr

08001e6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr

08001e76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr

08001e82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e86:	f005 f951 	bl	800712c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0
	return 1;
 8001e92:	2301      	movs	r3, #1
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <_kill>:

int _kill(int pid, int sig)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ea6:	f007 fc23 	bl	80096f0 <__errno>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2216      	movs	r2, #22
 8001eae:	601a      	str	r2, [r3, #0]
	return -1;
 8001eb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <_exit>:

void _exit (int status)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ffe7 	bl	8001e9c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ece:	e7fe      	b.n	8001ece <_exit+0x12>

08001ed0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	e00a      	b.n	8001ef8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ee2:	f3af 8000 	nop.w
 8001ee6:	4601      	mov	r1, r0
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	60ba      	str	r2, [r7, #8]
 8001eee:	b2ca      	uxtb	r2, r1
 8001ef0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	dbf0      	blt.n	8001ee2 <_read+0x12>
	}

return len;
 8001f00:	687b      	ldr	r3, [r7, #4]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b086      	sub	sp, #24
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	60f8      	str	r0, [r7, #12]
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	e009      	b.n	8001f30 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	60ba      	str	r2, [r7, #8]
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff feb9 	bl	8001c9c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	dbf1      	blt.n	8001f1c <_write+0x12>
	}
	return len;
 8001f38:	687b      	ldr	r3, [r7, #4]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <_close>:

int _close(int file)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
	return -1;
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f68:	605a      	str	r2, [r3, #4]
	return 0;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr

08001f76 <_isatty>:

int _isatty(int file)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
	return 1;
 8001f7e:	2301      	movs	r3, #1
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr

08001f8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b085      	sub	sp, #20
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
	return 0;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr
	...

08001fa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fac:	4a14      	ldr	r2, [pc, #80]	; (8002000 <_sbrk+0x5c>)
 8001fae:	4b15      	ldr	r3, [pc, #84]	; (8002004 <_sbrk+0x60>)
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fb8:	4b13      	ldr	r3, [pc, #76]	; (8002008 <_sbrk+0x64>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d102      	bne.n	8001fc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fc0:	4b11      	ldr	r3, [pc, #68]	; (8002008 <_sbrk+0x64>)
 8001fc2:	4a12      	ldr	r2, [pc, #72]	; (800200c <_sbrk+0x68>)
 8001fc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <_sbrk+0x64>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d207      	bcs.n	8001fe4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fd4:	f007 fb8c 	bl	80096f0 <__errno>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	220c      	movs	r2, #12
 8001fdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fde:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe2:	e009      	b.n	8001ff8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <_sbrk+0x64>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fea:	4b07      	ldr	r3, [pc, #28]	; (8002008 <_sbrk+0x64>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	4a05      	ldr	r2, [pc, #20]	; (8002008 <_sbrk+0x64>)
 8001ff4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20010000 	.word	0x20010000
 8002004:	00000400 	.word	0x00000400
 8002008:	20000210 	.word	0x20000210
 800200c:	20000480 	.word	0x20000480

08002010 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr

0800201c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002022:	f107 0308 	add.w	r3, r7, #8
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002030:	463b      	mov	r3, r7
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002038:	4b1d      	ldr	r3, [pc, #116]	; (80020b0 <MX_TIM2_Init+0x94>)
 800203a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800203e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8002040:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <MX_TIM2_Init+0x94>)
 8002042:	2247      	movs	r2, #71	; 0x47
 8002044:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002046:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <MX_TIM2_Init+0x94>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800204c:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <MX_TIM2_Init+0x94>)
 800204e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002052:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002054:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <MX_TIM2_Init+0x94>)
 8002056:	2200      	movs	r2, #0
 8002058:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800205a:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <MX_TIM2_Init+0x94>)
 800205c:	2200      	movs	r2, #0
 800205e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002060:	4813      	ldr	r0, [pc, #76]	; (80020b0 <MX_TIM2_Init+0x94>)
 8002062:	f006 fa7e 	bl	8008562 <HAL_TIM_Base_Init>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800206c:	f7ff fe2e 	bl	8001ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002074:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002076:	f107 0308 	add.w	r3, r7, #8
 800207a:	4619      	mov	r1, r3
 800207c:	480c      	ldr	r0, [pc, #48]	; (80020b0 <MX_TIM2_Init+0x94>)
 800207e:	f006 fb3d 	bl	80086fc <HAL_TIM_ConfigClockSource>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002088:	f7ff fe20 	bl	8001ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800208c:	2300      	movs	r3, #0
 800208e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002090:	2300      	movs	r3, #0
 8002092:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002094:	463b      	mov	r3, r7
 8002096:	4619      	mov	r1, r3
 8002098:	4805      	ldr	r0, [pc, #20]	; (80020b0 <MX_TIM2_Init+0x94>)
 800209a:	f006 fd03 	bl	8008aa4 <HAL_TIMEx_MasterConfigSynchronization>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80020a4:	f7ff fe12 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020a8:	bf00      	nop
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	2000038c 	.word	0x2000038c

080020b4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ba:	463b      	mov	r3, r7
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <MX_TIM7_Init+0x64>)
 80020c4:	4a15      	ldr	r2, [pc, #84]	; (800211c <MX_TIM7_Init+0x68>)
 80020c6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80020c8:	4b13      	ldr	r3, [pc, #76]	; (8002118 <MX_TIM7_Init+0x64>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ce:	4b12      	ldr	r3, [pc, #72]	; (8002118 <MX_TIM7_Init+0x64>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80020d4:	4b10      	ldr	r3, [pc, #64]	; (8002118 <MX_TIM7_Init+0x64>)
 80020d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020da:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020dc:	4b0e      	ldr	r3, [pc, #56]	; (8002118 <MX_TIM7_Init+0x64>)
 80020de:	2200      	movs	r2, #0
 80020e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80020e2:	480d      	ldr	r0, [pc, #52]	; (8002118 <MX_TIM7_Init+0x64>)
 80020e4:	f006 fa3d 	bl	8008562 <HAL_TIM_Base_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80020ee:	f7ff fded 	bl	8001ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f2:	2300      	movs	r3, #0
 80020f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f6:	2300      	movs	r3, #0
 80020f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80020fa:	463b      	mov	r3, r7
 80020fc:	4619      	mov	r1, r3
 80020fe:	4806      	ldr	r0, [pc, #24]	; (8002118 <MX_TIM7_Init+0x64>)
 8002100:	f006 fcd0 	bl	8008aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800210a:	f7ff fddf 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	200003d4 	.word	0x200003d4
 800211c:	40001400 	.word	0x40001400

08002120 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002130:	d10c      	bne.n	800214c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002132:	4b11      	ldr	r3, [pc, #68]	; (8002178 <HAL_TIM_Base_MspInit+0x58>)
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	4a10      	ldr	r2, [pc, #64]	; (8002178 <HAL_TIM_Base_MspInit+0x58>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	61d3      	str	r3, [r2, #28]
 800213e:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <HAL_TIM_Base_MspInit+0x58>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800214a:	e010      	b.n	800216e <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM7)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a0a      	ldr	r2, [pc, #40]	; (800217c <HAL_TIM_Base_MspInit+0x5c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d10b      	bne.n	800216e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002156:	4b08      	ldr	r3, [pc, #32]	; (8002178 <HAL_TIM_Base_MspInit+0x58>)
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	4a07      	ldr	r2, [pc, #28]	; (8002178 <HAL_TIM_Base_MspInit+0x58>)
 800215c:	f043 0320 	orr.w	r3, r3, #32
 8002160:	61d3      	str	r3, [r2, #28]
 8002162:	4b05      	ldr	r3, [pc, #20]	; (8002178 <HAL_TIM_Base_MspInit+0x58>)
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	f003 0320 	and.w	r3, r3, #32
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]
}
 800216e:	bf00      	nop
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr
 8002178:	40021000 	.word	0x40021000
 800217c:	40001400 	.word	0x40001400

08002180 <delay_us>:
/* USER CODE BEGIN 1 */
/**
 * @brief 微秒级延时，参考F103的库实现
 * @retval None
 */
void delay_us(uint32_t duration) {
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
	//见stm32f1xx_hal_rcc.c -- static void RCC_Delay(uint32_t mdelay)
	__IO uint32_t Delay = duration * (SystemCoreClock / 8U / 1000000U);
 8002188:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <delay_us+0x34>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <delay_us+0x38>)
 800218e:	fba2 2303 	umull	r2, r3, r2, r3
 8002192:	0d5b      	lsrs	r3, r3, #21
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	fb02 f303 	mul.w	r3, r2, r3
 800219a:	60fb      	str	r3, [r7, #12]
	do {
		__NOP();
 800219c:	bf00      	nop
	} while (Delay--);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1e5a      	subs	r2, r3, #1
 80021a2:	60fa      	str	r2, [r7, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1f9      	bne.n	800219c <delay_us+0x1c>
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr
 80021b4:	20000004 	.word	0x20000004
 80021b8:	431bde83 	.word	0x431bde83

080021bc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021c0:	4b11      	ldr	r3, [pc, #68]	; (8002208 <MX_USART1_UART_Init+0x4c>)
 80021c2:	4a12      	ldr	r2, [pc, #72]	; (800220c <MX_USART1_UART_Init+0x50>)
 80021c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021c6:	4b10      	ldr	r3, [pc, #64]	; (8002208 <MX_USART1_UART_Init+0x4c>)
 80021c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021ce:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <MX_USART1_UART_Init+0x4c>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <MX_USART1_UART_Init+0x4c>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021da:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <MX_USART1_UART_Init+0x4c>)
 80021dc:	2200      	movs	r2, #0
 80021de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021e0:	4b09      	ldr	r3, [pc, #36]	; (8002208 <MX_USART1_UART_Init+0x4c>)
 80021e2:	220c      	movs	r2, #12
 80021e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021e6:	4b08      	ldr	r3, [pc, #32]	; (8002208 <MX_USART1_UART_Init+0x4c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021ec:	4b06      	ldr	r3, [pc, #24]	; (8002208 <MX_USART1_UART_Init+0x4c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021f2:	4805      	ldr	r0, [pc, #20]	; (8002208 <MX_USART1_UART_Init+0x4c>)
 80021f4:	f006 fcc2 	bl	8008b7c <HAL_UART_Init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021fe:	f7ff fd65 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	2000041c 	.word	0x2000041c
 800220c:	40013800 	.word	0x40013800

08002210 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b088      	sub	sp, #32
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 0310 	add.w	r3, r7, #16
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a1c      	ldr	r2, [pc, #112]	; (800229c <HAL_UART_MspInit+0x8c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d131      	bne.n	8002294 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002230:	4b1b      	ldr	r3, [pc, #108]	; (80022a0 <HAL_UART_MspInit+0x90>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	4a1a      	ldr	r2, [pc, #104]	; (80022a0 <HAL_UART_MspInit+0x90>)
 8002236:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800223a:	6193      	str	r3, [r2, #24]
 800223c:	4b18      	ldr	r3, [pc, #96]	; (80022a0 <HAL_UART_MspInit+0x90>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002248:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <HAL_UART_MspInit+0x90>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	4a14      	ldr	r2, [pc, #80]	; (80022a0 <HAL_UART_MspInit+0x90>)
 800224e:	f043 0304 	orr.w	r3, r3, #4
 8002252:	6193      	str	r3, [r2, #24]
 8002254:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <HAL_UART_MspInit+0x90>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002260:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002264:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002266:	2302      	movs	r3, #2
 8002268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800226a:	2303      	movs	r3, #3
 800226c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226e:	f107 0310 	add.w	r3, r7, #16
 8002272:	4619      	mov	r1, r3
 8002274:	480b      	ldr	r0, [pc, #44]	; (80022a4 <HAL_UART_MspInit+0x94>)
 8002276:	f005 f87d 	bl	8007374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800227a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800227e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002288:	f107 0310 	add.w	r3, r7, #16
 800228c:	4619      	mov	r1, r3
 800228e:	4805      	ldr	r0, [pc, #20]	; (80022a4 <HAL_UART_MspInit+0x94>)
 8002290:	f005 f870 	bl	8007374 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002294:	bf00      	nop
 8002296:	3720      	adds	r7, #32
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40013800 	.word	0x40013800
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40010800 	.word	0x40010800

080022a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80022a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80022aa:	e003      	b.n	80022b4 <LoopCopyDataInit>

080022ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80022ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80022b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80022b2:	3104      	adds	r1, #4

080022b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80022b4:	480a      	ldr	r0, [pc, #40]	; (80022e0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80022b6:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80022b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80022ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80022bc:	d3f6      	bcc.n	80022ac <CopyDataInit>
  ldr r2, =_sbss
 80022be:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80022c0:	e002      	b.n	80022c8 <LoopFillZerobss>

080022c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80022c2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80022c4:	f842 3b04 	str.w	r3, [r2], #4

080022c8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80022c8:	4b08      	ldr	r3, [pc, #32]	; (80022ec <LoopFillZerobss+0x24>)
  cmp r2, r3
 80022ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80022cc:	d3f9      	bcc.n	80022c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022ce:	f7ff fe9f 	bl	8002010 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022d2:	f007 fa13 	bl	80096fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022d6:	f7ff fb6d 	bl	80019b4 <main>
  bx lr
 80022da:	4770      	bx	lr
  ldr r3, =_sidata
 80022dc:	0801aff4 	.word	0x0801aff4
  ldr r0, =_sdata
 80022e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80022e4:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 80022e8:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 80022ec:	20000480 	.word	0x20000480

080022f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022f0:	e7fe      	b.n	80022f0 <ADC1_2_IRQHandler>
	...

080022f4 <DS18B20_IO_IN>:
#include "ds18b20.h"
#include "tim.h"


void DS18B20_IO_IN(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = GPIO_PIN_11;
 80022fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022fe:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002300:	2300      	movs	r3, #0
 8002302:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOG,&GPIO_InitStructure);
 8002304:	463b      	mov	r3, r7
 8002306:	4619      	mov	r1, r3
 8002308:	4803      	ldr	r0, [pc, #12]	; (8002318 <DS18B20_IO_IN+0x24>)
 800230a:	f005 f833 	bl	8007374 <HAL_GPIO_Init>
}
 800230e:	bf00      	nop
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40012000 	.word	0x40012000

0800231c <DS18B20_IO_OUT>:

void DS18B20_IO_OUT(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.Pin = GPIO_PIN_11;
 8002322:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002326:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002328:	2301      	movs	r3, #1
 800232a:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800232c:	2303      	movs	r3, #3
 800232e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOG,&GPIO_InitStructure);
 8002330:	463b      	mov	r3, r7
 8002332:	4619      	mov	r1, r3
 8002334:	4803      	ldr	r0, [pc, #12]	; (8002344 <DS18B20_IO_OUT+0x28>)
 8002336:	f005 f81d 	bl	8007374 <HAL_GPIO_Init>
}
 800233a:	bf00      	nop
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40012000 	.word	0x40012000

08002348 <DS18B20_Rst>:

void DS18B20_Rst(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
	DS18B20_IO_OUT();
 800234c:	f7ff ffe6 	bl	800231c <DS18B20_IO_OUT>
	DS18B20_DQ_OUT_LOW;
 8002350:	2200      	movs	r2, #0
 8002352:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002356:	4809      	ldr	r0, [pc, #36]	; (800237c <DS18B20_Rst+0x34>)
 8002358:	f005 f9b7 	bl	80076ca <HAL_GPIO_WritePin>
	delay_us(750);
 800235c:	f240 20ee 	movw	r0, #750	; 0x2ee
 8002360:	f7ff ff0e 	bl	8002180 <delay_us>
	DS18B20_DQ_OUT_HIGH;
 8002364:	2201      	movs	r2, #1
 8002366:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800236a:	4804      	ldr	r0, [pc, #16]	; (800237c <DS18B20_Rst+0x34>)
 800236c:	f005 f9ad 	bl	80076ca <HAL_GPIO_WritePin>
	delay_us(15);
 8002370:	200f      	movs	r0, #15
 8002372:	f7ff ff05 	bl	8002180 <delay_us>
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40012000 	.word	0x40012000

08002380 <DS18B20_Check>:

uint8_t DS18B20_Check(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
	uint8_t retry = 0;
 8002386:	2300      	movs	r3, #0
 8002388:	71fb      	strb	r3, [r7, #7]
	DS18B20_IO_IN();
 800238a:	f7ff ffb3 	bl	80022f4 <DS18B20_IO_IN>
	while(DS18B20_DQ_IN && retry < 200)
 800238e:	e005      	b.n	800239c <DS18B20_Check+0x1c>
	{
		retry++;
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	3301      	adds	r3, #1
 8002394:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 8002396:	2001      	movs	r0, #1
 8002398:	f7ff fef2 	bl	8002180 <delay_us>
	while(DS18B20_DQ_IN && retry < 200)
 800239c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023a0:	4815      	ldr	r0, [pc, #84]	; (80023f8 <DS18B20_Check+0x78>)
 80023a2:	f005 f97b 	bl	800769c <HAL_GPIO_ReadPin>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d002      	beq.n	80023b2 <DS18B20_Check+0x32>
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	2bc7      	cmp	r3, #199	; 0xc7
 80023b0:	d9ee      	bls.n	8002390 <DS18B20_Check+0x10>
	}

	if(retry >= 200)
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	2bc7      	cmp	r3, #199	; 0xc7
 80023b6:	d901      	bls.n	80023bc <DS18B20_Check+0x3c>
		return 1;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e019      	b.n	80023f0 <DS18B20_Check+0x70>
	else
		retry = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	71fb      	strb	r3, [r7, #7]

	while(!DS18B20_DQ_IN && retry < 240)
 80023c0:	e005      	b.n	80023ce <DS18B20_Check+0x4e>
	{
		retry++;
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	3301      	adds	r3, #1
 80023c6:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 80023c8:	2001      	movs	r0, #1
 80023ca:	f7ff fed9 	bl	8002180 <delay_us>
	while(!DS18B20_DQ_IN && retry < 240)
 80023ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023d2:	4809      	ldr	r0, [pc, #36]	; (80023f8 <DS18B20_Check+0x78>)
 80023d4:	f005 f962 	bl	800769c <HAL_GPIO_ReadPin>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d102      	bne.n	80023e4 <DS18B20_Check+0x64>
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	2bef      	cmp	r3, #239	; 0xef
 80023e2:	d9ee      	bls.n	80023c2 <DS18B20_Check+0x42>
	}

	if(retry >= 240)
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	2bef      	cmp	r3, #239	; 0xef
 80023e8:	d901      	bls.n	80023ee <DS18B20_Check+0x6e>
		return 1;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <DS18B20_Check+0x70>

	return 0;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40012000 	.word	0x40012000

080023fc <DS18B20_Read_Bit>:

uint8_t DS18B20_Read_Bit(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
	uint8_t data;
	DS18B20_IO_OUT();
 8002402:	f7ff ff8b 	bl	800231c <DS18B20_IO_OUT>
	DS18B20_DQ_OUT_LOW;
 8002406:	2200      	movs	r2, #0
 8002408:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800240c:	4812      	ldr	r0, [pc, #72]	; (8002458 <DS18B20_Read_Bit+0x5c>)
 800240e:	f005 f95c 	bl	80076ca <HAL_GPIO_WritePin>
	delay_us(2);
 8002412:	2002      	movs	r0, #2
 8002414:	f7ff feb4 	bl	8002180 <delay_us>
	DS18B20_DQ_OUT_HIGH;
 8002418:	2201      	movs	r2, #1
 800241a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800241e:	480e      	ldr	r0, [pc, #56]	; (8002458 <DS18B20_Read_Bit+0x5c>)
 8002420:	f005 f953 	bl	80076ca <HAL_GPIO_WritePin>
	DS18B20_IO_IN();
 8002424:	f7ff ff66 	bl	80022f4 <DS18B20_IO_IN>
	delay_us(12);
 8002428:	200c      	movs	r0, #12
 800242a:	f7ff fea9 	bl	8002180 <delay_us>

	if(DS18B20_DQ_IN)
 800242e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002432:	4809      	ldr	r0, [pc, #36]	; (8002458 <DS18B20_Read_Bit+0x5c>)
 8002434:	f005 f932 	bl	800769c <HAL_GPIO_ReadPin>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d002      	beq.n	8002444 <DS18B20_Read_Bit+0x48>
		data = 1;
 800243e:	2301      	movs	r3, #1
 8002440:	71fb      	strb	r3, [r7, #7]
 8002442:	e001      	b.n	8002448 <DS18B20_Read_Bit+0x4c>
	else
		data = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	71fb      	strb	r3, [r7, #7]

	delay_us(50);
 8002448:	2032      	movs	r0, #50	; 0x32
 800244a:	f7ff fe99 	bl	8002180 <delay_us>
	return data;
 800244e:	79fb      	ldrb	r3, [r7, #7]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40012000 	.word	0x40012000

0800245c <DS18B20_Read_Byte>:

uint8_t DS18B20_Read_Byte(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
	uint8_t i,j,data;
	data = 0;
 8002462:	2300      	movs	r3, #0
 8002464:	71bb      	strb	r3, [r7, #6]
	for(i=1;i<=8;i++)
 8002466:	2301      	movs	r3, #1
 8002468:	71fb      	strb	r3, [r7, #7]
 800246a:	e010      	b.n	800248e <DS18B20_Read_Byte+0x32>
	{
		j = DS18B20_Read_Bit();
 800246c:	f7ff ffc6 	bl	80023fc <DS18B20_Read_Bit>
 8002470:	4603      	mov	r3, r0
 8002472:	717b      	strb	r3, [r7, #5]
		data = (j<<7)|(data>>1);
 8002474:	797b      	ldrb	r3, [r7, #5]
 8002476:	01db      	lsls	r3, r3, #7
 8002478:	b25a      	sxtb	r2, r3
 800247a:	79bb      	ldrb	r3, [r7, #6]
 800247c:	085b      	lsrs	r3, r3, #1
 800247e:	b2db      	uxtb	r3, r3
 8002480:	b25b      	sxtb	r3, r3
 8002482:	4313      	orrs	r3, r2
 8002484:	b25b      	sxtb	r3, r3
 8002486:	71bb      	strb	r3, [r7, #6]
	for(i=1;i<=8;i++)
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	3301      	adds	r3, #1
 800248c:	71fb      	strb	r3, [r7, #7]
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	2b08      	cmp	r3, #8
 8002492:	d9eb      	bls.n	800246c <DS18B20_Read_Byte+0x10>
	}
	return data;
 8002494:	79bb      	ldrb	r3, [r7, #6]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <DS18B20_Write_Byte>:

void DS18B20_Write_Byte(uint8_t data)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	71fb      	strb	r3, [r7, #7]
	uint8_t j;
	uint8_t testb;
	DS18B20_IO_OUT();
 80024aa:	f7ff ff37 	bl	800231c <DS18B20_IO_OUT>
	for(j=1;j<=8;j++)
 80024ae:	2301      	movs	r3, #1
 80024b0:	73fb      	strb	r3, [r7, #15]
 80024b2:	e031      	b.n	8002518 <DS18B20_Write_Byte+0x78>
	{
		testb=data&0x01;
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	73bb      	strb	r3, [r7, #14]
		data=data>>1;
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	085b      	lsrs	r3, r3, #1
 80024c0:	71fb      	strb	r3, [r7, #7]
		if(testb)
 80024c2:	7bbb      	ldrb	r3, [r7, #14]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d012      	beq.n	80024ee <DS18B20_Write_Byte+0x4e>
		{
			DS18B20_DQ_OUT_LOW;
 80024c8:	2200      	movs	r2, #0
 80024ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024ce:	4816      	ldr	r0, [pc, #88]	; (8002528 <DS18B20_Write_Byte+0x88>)
 80024d0:	f005 f8fb 	bl	80076ca <HAL_GPIO_WritePin>
			delay_us(2);
 80024d4:	2002      	movs	r0, #2
 80024d6:	f7ff fe53 	bl	8002180 <delay_us>
			DS18B20_DQ_OUT_HIGH;
 80024da:	2201      	movs	r2, #1
 80024dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024e0:	4811      	ldr	r0, [pc, #68]	; (8002528 <DS18B20_Write_Byte+0x88>)
 80024e2:	f005 f8f2 	bl	80076ca <HAL_GPIO_WritePin>
			delay_us(60);
 80024e6:	203c      	movs	r0, #60	; 0x3c
 80024e8:	f7ff fe4a 	bl	8002180 <delay_us>
 80024ec:	e011      	b.n	8002512 <DS18B20_Write_Byte+0x72>
		}
		else
		{
			DS18B20_DQ_OUT_LOW;
 80024ee:	2200      	movs	r2, #0
 80024f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024f4:	480c      	ldr	r0, [pc, #48]	; (8002528 <DS18B20_Write_Byte+0x88>)
 80024f6:	f005 f8e8 	bl	80076ca <HAL_GPIO_WritePin>
			delay_us(60);
 80024fa:	203c      	movs	r0, #60	; 0x3c
 80024fc:	f7ff fe40 	bl	8002180 <delay_us>
			DS18B20_DQ_OUT_HIGH;
 8002500:	2201      	movs	r2, #1
 8002502:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002506:	4808      	ldr	r0, [pc, #32]	; (8002528 <DS18B20_Write_Byte+0x88>)
 8002508:	f005 f8df 	bl	80076ca <HAL_GPIO_WritePin>
			delay_us(2);
 800250c:	2002      	movs	r0, #2
 800250e:	f7ff fe37 	bl	8002180 <delay_us>
	for(j=1;j<=8;j++)
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	3301      	adds	r3, #1
 8002516:	73fb      	strb	r3, [r7, #15]
 8002518:	7bfb      	ldrb	r3, [r7, #15]
 800251a:	2b08      	cmp	r3, #8
 800251c:	d9ca      	bls.n	80024b4 <DS18B20_Write_Byte+0x14>
		}
	}
}
 800251e:	bf00      	nop
 8002520:	bf00      	nop
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40012000 	.word	0x40012000

0800252c <DS18B20_Start>:

void DS18B20_Start(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
	DS18B20_Rst();
 8002530:	f7ff ff0a 	bl	8002348 <DS18B20_Rst>
	DS18B20_Check();
 8002534:	f7ff ff24 	bl	8002380 <DS18B20_Check>
	DS18B20_Write_Byte(0xcc);
 8002538:	20cc      	movs	r0, #204	; 0xcc
 800253a:	f7ff ffb1 	bl	80024a0 <DS18B20_Write_Byte>
	DS18B20_Write_Byte(0x44);
 800253e:	2044      	movs	r0, #68	; 0x44
 8002540:	f7ff ffae 	bl	80024a0 <DS18B20_Write_Byte>
}
 8002544:	bf00      	nop
 8002546:	bd80      	pop	{r7, pc}

08002548 <DS18B20_Init>:

uint8_t DS18B20_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.Pin = GPIO_PIN_11;
 800254e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002552:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002554:	2301      	movs	r3, #1
 8002556:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8002558:	2301      	movs	r3, #1
 800255a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800255c:	2303      	movs	r3, #3
 800255e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOG,&GPIO_InitStructure);
 8002560:	463b      	mov	r3, r7
 8002562:	4619      	mov	r1, r3
 8002564:	4805      	ldr	r0, [pc, #20]	; (800257c <DS18B20_Init+0x34>)
 8002566:	f004 ff05 	bl	8007374 <HAL_GPIO_Init>

	DS18B20_Rst();
 800256a:	f7ff feed 	bl	8002348 <DS18B20_Rst>
	return DS18B20_Check();
 800256e:	f7ff ff07 	bl	8002380 <DS18B20_Check>
 8002572:	4603      	mov	r3, r0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40012000 	.word	0x40012000

08002580 <DS18B20_Get_Temperature>:

float DS18B20_Get_Temperature(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
	uint8_t temp_L,temp_H;
	uint16_t temp;
	float temperature = 0;
 8002586:	f04f 0300 	mov.w	r3, #0
 800258a:	60bb      	str	r3, [r7, #8]

	DS18B20_Start();
 800258c:	f7ff ffce 	bl	800252c <DS18B20_Start>
	DS18B20_Rst();
 8002590:	f7ff feda 	bl	8002348 <DS18B20_Rst>
	DS18B20_Check();
 8002594:	f7ff fef4 	bl	8002380 <DS18B20_Check>
	DS18B20_Write_Byte(0xcc);
 8002598:	20cc      	movs	r0, #204	; 0xcc
 800259a:	f7ff ff81 	bl	80024a0 <DS18B20_Write_Byte>
	DS18B20_Write_Byte(0xbe);
 800259e:	20be      	movs	r0, #190	; 0xbe
 80025a0:	f7ff ff7e 	bl	80024a0 <DS18B20_Write_Byte>
	temp_L = DS18B20_Read_Byte();
 80025a4:	f7ff ff5a 	bl	800245c <DS18B20_Read_Byte>
 80025a8:	4603      	mov	r3, r0
 80025aa:	73fb      	strb	r3, [r7, #15]
	temp_H = DS18B20_Read_Byte();
 80025ac:	f7ff ff56 	bl	800245c <DS18B20_Read_Byte>
 80025b0:	4603      	mov	r3, r0
 80025b2:	73bb      	strb	r3, [r7, #14]

	if(temp_H>7)
 80025b4:	7bbb      	ldrb	r3, [r7, #14]
 80025b6:	2b07      	cmp	r3, #7
 80025b8:	d905      	bls.n	80025c6 <DS18B20_Get_Temperature+0x46>
	{
		temp_H = ~temp_H;
 80025ba:	7bbb      	ldrb	r3, [r7, #14]
 80025bc:	43db      	mvns	r3, r3
 80025be:	73bb      	strb	r3, [r7, #14]
		temp_L = ~temp_L;
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
 80025c2:	43db      	mvns	r3, r3
 80025c4:	73fb      	strb	r3, [r7, #15]
	}

	temp = temp_L | (temp_H << 8);
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
 80025c8:	b21a      	sxth	r2, r3
 80025ca:	7bbb      	ldrb	r3, [r7, #14]
 80025cc:	021b      	lsls	r3, r3, #8
 80025ce:	b21b      	sxth	r3, r3
 80025d0:	4313      	orrs	r3, r2
 80025d2:	b21b      	sxth	r3, r3
 80025d4:	80fb      	strh	r3, [r7, #6]
	temperature += (float)(temp >> 4);
 80025d6:	88fb      	ldrh	r3, [r7, #6]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	b29b      	uxth	r3, r3
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fe fbe9 	bl	8000db4 <__aeabi_i2f>
 80025e2:	4603      	mov	r3, r0
 80025e4:	4619      	mov	r1, r3
 80025e6:	68b8      	ldr	r0, [r7, #8]
 80025e8:	f7fe fb30 	bl	8000c4c <__addsf3>
 80025ec:	4603      	mov	r3, r0
 80025ee:	60bb      	str	r3, [r7, #8]
	temperature += (float)(temp &= 0x0f)/100;
 80025f0:	88fb      	ldrh	r3, [r7, #6]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	80fb      	strh	r3, [r7, #6]
 80025f8:	88fb      	ldrh	r3, [r7, #6]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fe fbd6 	bl	8000dac <__aeabi_ui2f>
 8002600:	4603      	mov	r3, r0
 8002602:	4908      	ldr	r1, [pc, #32]	; (8002624 <DS18B20_Get_Temperature+0xa4>)
 8002604:	4618      	mov	r0, r3
 8002606:	f7fe fcdd 	bl	8000fc4 <__aeabi_fdiv>
 800260a:	4603      	mov	r3, r0
 800260c:	4619      	mov	r1, r3
 800260e:	68b8      	ldr	r0, [r7, #8]
 8002610:	f7fe fb1c 	bl	8000c4c <__addsf3>
 8002614:	4603      	mov	r3, r0
 8002616:	60bb      	str	r3, [r7, #8]

	return temperature;
 8002618:	68bb      	ldr	r3, [r7, #8]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	42c80000 	.word	0x42c80000

08002628 <HC_SRO4_Mutex_Pend>:
 * @brief   pend the mutex to protect tim.
 * @param   none
 * @return  none
 * @note    it will be need if you use rtos
 */
static void HC_SRO4_Mutex_Pend() {
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
	//add your code here
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr

08002634 <HC_SRO4_Mutex_Post>:
 * @brief   post the mutex to protect tim.
 * @param   none
 * @return  none
 * @note    it will be need if you use rtos
 */
static void HC_SRO4_Mutex_Post() {
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
	//add your code here
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <HC_SR04_Init>:
/**
 * @brief   hc_sr04_device object initialization.
 * @param   hc_sr04_device  the pointer of the hc_sr04_device_t object
 * @return  none
 */
void HC_SR04_Init(hc_sr04_device_t *hc_sr04_device) {
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
	// the gpio and tim is initialized in main
	//可根据实际情况更改
	hc_sr04_device->trig_port = Trig_GPIO_Port;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a09      	ldr	r2, [pc, #36]	; (8002670 <HC_SR04_Init+0x30>)
 800264c:	601a      	str	r2, [r3, #0]
	hc_sr04_device->trig_pin = Trig_Pin;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2240      	movs	r2, #64	; 0x40
 8002652:	809a      	strh	r2, [r3, #4]
	hc_sr04_device->echo_port = Echo_GPIO_Port;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a06      	ldr	r2, [pc, #24]	; (8002670 <HC_SR04_Init+0x30>)
 8002658:	609a      	str	r2, [r3, #8]
	hc_sr04_device->echo_pin = Echo_Pin;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2280      	movs	r2, #128	; 0x80
 800265e:	819a      	strh	r2, [r3, #12]
	hc_sr04_device->tim = &htim2;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a04      	ldr	r2, [pc, #16]	; (8002674 <HC_SR04_Init+0x34>)
 8002664:	611a      	str	r2, [r3, #16]
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr
 8002670:	40010800 	.word	0x40010800
 8002674:	2000038c 	.word	0x2000038c

08002678 <HC_SR04_Start>:
/**
 * @brief   Send trig signal.
 * @param   hc_sr04_device  the pointer of the hc_sr04_device_t object
 * @return  none
 */
static void HC_SR04_Start(hc_sr04_device_t *hc_sr04_device) {
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	/* output high level */
	HAL_GPIO_WritePin(hc_sr04_device->trig_port, hc_sr04_device->trig_pin,
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6818      	ldr	r0, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	889b      	ldrh	r3, [r3, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	4619      	mov	r1, r3
 800268c:	f005 f81d 	bl	80076ca <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/* maintain high level at least 10us */
	delay_us(10);
 8002690:	200a      	movs	r0, #10
 8002692:	f7ff fd75 	bl	8002180 <delay_us>

	/* resume low level */
	HAL_GPIO_WritePin(hc_sr04_device->trig_port, hc_sr04_device->trig_pin,
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6818      	ldr	r0, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	889b      	ldrh	r3, [r3, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	4619      	mov	r1, r3
 80026a2:	f005 f812 	bl	80076ca <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <HC_SR04_Measure>:
 * @param   hc_sr04_device  the pointer of the hc_sr04_device_t object
 * @return  errcode
 * @retval  0 success
 * @retval -1 fail
 */
int HC_SR04_Measure(hc_sr04_device_t *hc_sr04_device) {
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
	uint32_t tick_us;

	HC_SRO4_Mutex_Pend();
 80026b8:	f7ff ffb6 	bl	8002628 <HC_SRO4_Mutex_Pend>

	HC_SR04_Start(hc_sr04_device);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f7ff ffdb 	bl	8002678 <HC_SR04_Start>

	__HAL_TIM_SetCounter(hc_sr04_device->tim, 0);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2200      	movs	r2, #0
 80026ca:	625a      	str	r2, [r3, #36]	; 0x24

	/* waitting for start of the high level through echo pin */
	while (HAL_GPIO_ReadPin(hc_sr04_device->echo_port, hc_sr04_device->echo_pin)
 80026cc:	bf00      	nop
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	899b      	ldrh	r3, [r3, #12]
 80026d6:	4619      	mov	r1, r3
 80026d8:	4610      	mov	r0, r2
 80026da:	f004 ffdf 	bl	800769c <HAL_GPIO_ReadPin>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0f4      	beq.n	80026ce <HC_SR04_Measure+0x1e>
			== GPIO_PIN_RESET)
		;

	/* start the tim and enable the interrupt */
	HAL_TIM_Base_Start(hc_sr04_device->tim);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f005 ff89 	bl	8008600 <HAL_TIM_Base_Start>

	/* waitting for end of the high level through echo pin */
	while (HAL_GPIO_ReadPin(hc_sr04_device->echo_port, hc_sr04_device->echo_pin)
 80026ee:	bf00      	nop
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	899b      	ldrh	r3, [r3, #12]
 80026f8:	4619      	mov	r1, r3
 80026fa:	4610      	mov	r0, r2
 80026fc:	f004 ffce 	bl	800769c <HAL_GPIO_ReadPin>
 8002700:	4603      	mov	r3, r0
 8002702:	2b01      	cmp	r3, #1
 8002704:	d0f4      	beq.n	80026f0 <HC_SR04_Measure+0x40>
			== GPIO_PIN_SET)
		;

	/* stop the tim */
	HAL_TIM_Base_Stop(hc_sr04_device->tim);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	4618      	mov	r0, r3
 800270c:	f005 ffd0 	bl	80086b0 <HAL_TIM_Base_Stop>

	/* get the time of high level */
	tick_us = __HAL_TIM_GetCounter(hc_sr04_device->tim);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	60fb      	str	r3, [r7, #12]

	/* calc distance in unit cm */
	hc_sr04_device->distance = (double) (tick_us / 1000000.0) * 340.0 / 2.0
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f7fd fece 	bl	80004bc <__aeabi_ui2d>
 8002720:	a319      	add	r3, pc, #100	; (adr r3, 8002788 <HC_SR04_Measure+0xd8>)
 8002722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002726:	f7fe f86d 	bl	8000804 <__aeabi_ddiv>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	4610      	mov	r0, r2
 8002730:	4619      	mov	r1, r3
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	4b16      	ldr	r3, [pc, #88]	; (8002790 <HC_SR04_Measure+0xe0>)
 8002738:	f7fd ff3a 	bl	80005b0 <__aeabi_dmul>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4610      	mov	r0, r2
 8002742:	4619      	mov	r1, r3
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800274c:	f7fe f85a 	bl	8000804 <__aeabi_ddiv>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4610      	mov	r0, r2
 8002756:	4619      	mov	r1, r3
			* 100.0;
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	4b0d      	ldr	r3, [pc, #52]	; (8002794 <HC_SR04_Measure+0xe4>)
 800275e:	f7fd ff27 	bl	80005b0 <__aeabi_dmul>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4610      	mov	r0, r2
 8002768:	4619      	mov	r1, r3
 800276a:	f7fe fa19 	bl	8000ba0 <__aeabi_d2f>
 800276e:	4602      	mov	r2, r0
	hc_sr04_device->distance = (double) (tick_us / 1000000.0) * 340.0 / 2.0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	615a      	str	r2, [r3, #20]

	HC_SRO4_Mutex_Post();
 8002774:	f7ff ff5e 	bl	8002634 <HC_SRO4_Mutex_Post>

	return 0;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	f3af 8000 	nop.w
 8002788:	00000000 	.word	0x00000000
 800278c:	412e8480 	.word	0x412e8480
 8002790:	40754000 	.word	0x40754000
 8002794:	40590000 	.word	0x40590000

08002798 <KeyScan>:

//按键扫描函数
//mode==1时，按键按下亮，松开灭
//mode==0时，按键按下亮，再次按下灭
uint8_t KeyScan(uint8_t mode)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	71fb      	strb	r3, [r7, #7]
	static uint8_t key_up = 1;
	if(mode == 1){
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d102      	bne.n	80027ae <KeyScan+0x16>
		key_up = 1;
 80027a8:	4b2f      	ldr	r3, [pc, #188]	; (8002868 <KeyScan+0xd0>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	701a      	strb	r2, [r3, #0]
	}

	if(key_up && (KEY0 == GPIO_PIN_RESET || KEY1 == GPIO_PIN_RESET || KY_UP == GPIO_PIN_SET)){
 80027ae:	4b2e      	ldr	r3, [pc, #184]	; (8002868 <KeyScan+0xd0>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d035      	beq.n	8002822 <KeyScan+0x8a>
 80027b6:	2110      	movs	r1, #16
 80027b8:	482c      	ldr	r0, [pc, #176]	; (800286c <KeyScan+0xd4>)
 80027ba:	f004 ff6f 	bl	800769c <HAL_GPIO_ReadPin>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00d      	beq.n	80027e0 <KeyScan+0x48>
 80027c4:	2108      	movs	r1, #8
 80027c6:	4829      	ldr	r0, [pc, #164]	; (800286c <KeyScan+0xd4>)
 80027c8:	f004 ff68 	bl	800769c <HAL_GPIO_ReadPin>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d006      	beq.n	80027e0 <KeyScan+0x48>
 80027d2:	2101      	movs	r1, #1
 80027d4:	4826      	ldr	r0, [pc, #152]	; (8002870 <KeyScan+0xd8>)
 80027d6:	f004 ff61 	bl	800769c <HAL_GPIO_ReadPin>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d120      	bne.n	8002822 <KeyScan+0x8a>
		HAL_Delay(10);
 80027e0:	200a      	movs	r0, #10
 80027e2:	f004 fcbf 	bl	8007164 <HAL_Delay>
		key_up = 0;
 80027e6:	4b20      	ldr	r3, [pc, #128]	; (8002868 <KeyScan+0xd0>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	701a      	strb	r2, [r3, #0]
		if(KEY0 == GPIO_PIN_RESET){
 80027ec:	2110      	movs	r1, #16
 80027ee:	481f      	ldr	r0, [pc, #124]	; (800286c <KeyScan+0xd4>)
 80027f0:	f004 ff54 	bl	800769c <HAL_GPIO_ReadPin>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <KeyScan+0x66>
			return KEY0_PRES;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e030      	b.n	8002860 <KeyScan+0xc8>
		}else if(KEY1 == GPIO_PIN_RESET){
 80027fe:	2108      	movs	r1, #8
 8002800:	481a      	ldr	r0, [pc, #104]	; (800286c <KeyScan+0xd4>)
 8002802:	f004 ff4b 	bl	800769c <HAL_GPIO_ReadPin>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <KeyScan+0x78>
			return KEY1_PRES;
 800280c:	2302      	movs	r3, #2
 800280e:	e027      	b.n	8002860 <KeyScan+0xc8>
		}else if(KY_UP == GPIO_PIN_SET){
 8002810:	2101      	movs	r1, #1
 8002812:	4817      	ldr	r0, [pc, #92]	; (8002870 <KeyScan+0xd8>)
 8002814:	f004 ff42 	bl	800769c <HAL_GPIO_ReadPin>
 8002818:	4603      	mov	r3, r0
 800281a:	2b01      	cmp	r3, #1
 800281c:	d11e      	bne.n	800285c <KeyScan+0xc4>
			return KY_UP_PRES;
 800281e:	2303      	movs	r3, #3
 8002820:	e01e      	b.n	8002860 <KeyScan+0xc8>
		}
	}else if(KEY0 == GPIO_PIN_SET && KEY1 == GPIO_PIN_SET && KY_UP == GPIO_PIN_RESET){
 8002822:	2110      	movs	r1, #16
 8002824:	4811      	ldr	r0, [pc, #68]	; (800286c <KeyScan+0xd4>)
 8002826:	f004 ff39 	bl	800769c <HAL_GPIO_ReadPin>
 800282a:	4603      	mov	r3, r0
 800282c:	2b01      	cmp	r3, #1
 800282e:	d116      	bne.n	800285e <KeyScan+0xc6>
 8002830:	2108      	movs	r1, #8
 8002832:	480e      	ldr	r0, [pc, #56]	; (800286c <KeyScan+0xd4>)
 8002834:	f004 ff32 	bl	800769c <HAL_GPIO_ReadPin>
 8002838:	4603      	mov	r3, r0
 800283a:	2b01      	cmp	r3, #1
 800283c:	d10f      	bne.n	800285e <KeyScan+0xc6>
 800283e:	2101      	movs	r1, #1
 8002840:	480b      	ldr	r0, [pc, #44]	; (8002870 <KeyScan+0xd8>)
 8002842:	f004 ff2b 	bl	800769c <HAL_GPIO_ReadPin>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d108      	bne.n	800285e <KeyScan+0xc6>
		key_up = 1;
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <KeyScan+0xd0>)
 800284e:	2201      	movs	r2, #1
 8002850:	701a      	strb	r2, [r3, #0]
		if(mode)
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <KeyScan+0xc6>
		{
			return NO_PRES;
 8002858:	2304      	movs	r3, #4
 800285a:	e001      	b.n	8002860 <KeyScan+0xc8>
		if(KEY0 == GPIO_PIN_RESET){
 800285c:	bf00      	nop
		}
	}
	return 0;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	20000008 	.word	0x20000008
 800286c:	40011800 	.word	0x40011800
 8002870:	40010800 	.word	0x40010800

08002874 <LCD_WR_REG>:
_lcd_dev lcddev;

//写寄存器函数
//regval:寄存器值
void LCD_WR_REG(uint16_t regval)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=regval;//写入要写的寄存器序号
 800287e:	4a04      	ldr	r2, [pc, #16]	; (8002890 <LCD_WR_REG+0x1c>)
 8002880:	88fb      	ldrh	r3, [r7, #6]
 8002882:	8013      	strh	r3, [r2, #0]
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	6c0007fe 	.word	0x6c0007fe

08002894 <LCD_WR_DATA>:
//写LCD数据
//data:要写入的值
void LCD_WR_DATA(uint16_t data)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800289e:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <LCD_WR_DATA+0x1c>)
 80028a0:	88fb      	ldrh	r3, [r7, #6]
 80028a2:	8053      	strh	r3, [r2, #2]
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	6c0007fe 	.word	0x6c0007fe

080028b4 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
	uint16_t ram;			//防止被优化
	ram=LCD->LCD_RAM;
 80028ba:	4b04      	ldr	r3, [pc, #16]	; (80028cc <LCD_RD_DATA+0x18>)
 80028bc:	885b      	ldrh	r3, [r3, #2]
 80028be:	80fb      	strh	r3, [r7, #6]
	return ram;
 80028c0:	88fb      	ldrh	r3, [r7, #6]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr
 80028cc:	6c0007fe 	.word	0x6c0007fe

080028d0 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器地址
//LCD_RegValue:要写入的数据
void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	460a      	mov	r2, r1
 80028da:	80fb      	strh	r3, [r7, #6]
 80028dc:	4613      	mov	r3, r2
 80028de:	80bb      	strh	r3, [r7, #4]
	LCD->LCD_REG = LCD_Reg;		//写入要写的寄存器序号
 80028e0:	4a05      	ldr	r2, [pc, #20]	; (80028f8 <LCD_WriteReg+0x28>)
 80028e2:	88fb      	ldrh	r3, [r7, #6]
 80028e4:	8013      	strh	r3, [r2, #0]
	LCD->LCD_RAM = LCD_RegValue;//写入数据
 80028e6:	4a04      	ldr	r2, [pc, #16]	; (80028f8 <LCD_WriteReg+0x28>)
 80028e8:	88bb      	ldrh	r3, [r7, #4]
 80028ea:	8053      	strh	r3, [r2, #2]
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	6c0007fe 	.word	0x6c0007fe

080028fc <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器地址
//返回值:读到的数据
uint16_t LCD_ReadReg(uint16_t LCD_Reg)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);		//写入要读的寄存器序号
 8002906:	88fb      	ldrh	r3, [r7, #6]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ffb3 	bl	8002874 <LCD_WR_REG>
	delay_us(5);
 800290e:	2005      	movs	r0, #5
 8002910:	f7ff fc36 	bl	8002180 <delay_us>
	return LCD_RD_DATA();		//返回读到的值
 8002914:	f7ff ffce 	bl	80028b4 <LCD_RD_DATA>
 8002918:	4603      	mov	r3, r0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
 	LCD->LCD_REG=lcddev.wramcmd;
 8002928:	4b03      	ldr	r3, [pc, #12]	; (8002938 <LCD_WriteRAM_Prepare+0x14>)
 800292a:	4a04      	ldr	r2, [pc, #16]	; (800293c <LCD_WriteRAM_Prepare+0x18>)
 800292c:	8912      	ldrh	r2, [r2, #8]
 800292e:	801a      	strh	r2, [r3, #0]
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr
 8002938:	6c0007fe 	.word	0x6c0007fe
 800293c:	2000045c 	.word	0x2000045c

08002940 <LCD_SetCursor>:
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	460a      	mov	r2, r1
 800294a:	80fb      	strh	r3, [r7, #6]
 800294c:	4613      	mov	r3, r2
 800294e:	80bb      	strh	r3, [r7, #4]
 	if(lcddev.id==0X9341||lcddev.id==0X5310)
 8002950:	4b92      	ldr	r3, [pc, #584]	; (8002b9c <LCD_SetCursor+0x25c>)
 8002952:	889b      	ldrh	r3, [r3, #4]
 8002954:	f249 3241 	movw	r2, #37697	; 0x9341
 8002958:	4293      	cmp	r3, r2
 800295a:	d005      	beq.n	8002968 <LCD_SetCursor+0x28>
 800295c:	4b8f      	ldr	r3, [pc, #572]	; (8002b9c <LCD_SetCursor+0x25c>)
 800295e:	889b      	ldrh	r3, [r3, #4]
 8002960:	f245 3210 	movw	r2, #21264	; 0x5310
 8002964:	4293      	cmp	r3, r2
 8002966:	d122      	bne.n	80029ae <LCD_SetCursor+0x6e>
	{
		LCD_WR_REG(lcddev.setxcmd);
 8002968:	4b8c      	ldr	r3, [pc, #560]	; (8002b9c <LCD_SetCursor+0x25c>)
 800296a:	895b      	ldrh	r3, [r3, #10]
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff ff81 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8002972:	88fb      	ldrh	r3, [r7, #6]
 8002974:	0a1b      	lsrs	r3, r3, #8
 8002976:	b29b      	uxth	r3, r3
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ff8b 	bl	8002894 <LCD_WR_DATA>
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	b29b      	uxth	r3, r3
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff85 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 800298a:	4b84      	ldr	r3, [pc, #528]	; (8002b9c <LCD_SetCursor+0x25c>)
 800298c:	899b      	ldrh	r3, [r3, #12]
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff ff70 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 8002994:	88bb      	ldrh	r3, [r7, #4]
 8002996:	0a1b      	lsrs	r3, r3, #8
 8002998:	b29b      	uxth	r3, r3
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff ff7a 	bl	8002894 <LCD_WR_DATA>
 80029a0:	88bb      	ldrh	r3, [r7, #4]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff ff74 	bl	8002894 <LCD_WR_DATA>
	{
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 80029ac:	e0f1      	b.n	8002b92 <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X6804)
 80029ae:	4b7b      	ldr	r3, [pc, #492]	; (8002b9c <LCD_SetCursor+0x25c>)
 80029b0:	889b      	ldrh	r3, [r3, #4]
 80029b2:	f646 0204 	movw	r2, #26628	; 0x6804
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d12d      	bne.n	8002a16 <LCD_SetCursor+0xd6>
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏时处理
 80029ba:	4b78      	ldr	r3, [pc, #480]	; (8002b9c <LCD_SetCursor+0x25c>)
 80029bc:	799b      	ldrb	r3, [r3, #6]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d106      	bne.n	80029d0 <LCD_SetCursor+0x90>
 80029c2:	4b76      	ldr	r3, [pc, #472]	; (8002b9c <LCD_SetCursor+0x25c>)
 80029c4:	881a      	ldrh	r2, [r3, #0]
 80029c6:	88fb      	ldrh	r3, [r7, #6]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	3b01      	subs	r3, #1
 80029ce:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 80029d0:	4b72      	ldr	r3, [pc, #456]	; (8002b9c <LCD_SetCursor+0x25c>)
 80029d2:	895b      	ldrh	r3, [r3, #10]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff ff4d 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 80029da:	88fb      	ldrh	r3, [r7, #6]
 80029dc:	0a1b      	lsrs	r3, r3, #8
 80029de:	b29b      	uxth	r3, r3
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff57 	bl	8002894 <LCD_WR_DATA>
 80029e6:	88fb      	ldrh	r3, [r7, #6]
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff ff51 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 80029f2:	4b6a      	ldr	r3, [pc, #424]	; (8002b9c <LCD_SetCursor+0x25c>)
 80029f4:	899b      	ldrh	r3, [r3, #12]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff ff3c 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 80029fc:	88bb      	ldrh	r3, [r7, #4]
 80029fe:	0a1b      	lsrs	r3, r3, #8
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff ff46 	bl	8002894 <LCD_WR_DATA>
 8002a08:	88bb      	ldrh	r3, [r7, #4]
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff ff40 	bl	8002894 <LCD_WR_DATA>
}
 8002a14:	e0bd      	b.n	8002b92 <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X1963)
 8002a16:	4b61      	ldr	r3, [pc, #388]	; (8002b9c <LCD_SetCursor+0x25c>)
 8002a18:	889b      	ldrh	r3, [r3, #4]
 8002a1a:	f641 1263 	movw	r2, #6499	; 0x1963
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d167      	bne.n	8002af2 <LCD_SetCursor+0x1b2>
		if(lcddev.dir==0)//x坐标需要变换
 8002a22:	4b5e      	ldr	r3, [pc, #376]	; (8002b9c <LCD_SetCursor+0x25c>)
 8002a24:	799b      	ldrb	r3, [r3, #6]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d11e      	bne.n	8002a68 <LCD_SetCursor+0x128>
			Xpos=lcddev.width-1-Xpos;
 8002a2a:	4b5c      	ldr	r3, [pc, #368]	; (8002b9c <LCD_SetCursor+0x25c>)
 8002a2c:	881a      	ldrh	r2, [r3, #0]
 8002a2e:	88fb      	ldrh	r3, [r7, #6]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	3b01      	subs	r3, #1
 8002a36:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8002a38:	4b58      	ldr	r3, [pc, #352]	; (8002b9c <LCD_SetCursor+0x25c>)
 8002a3a:	895b      	ldrh	r3, [r3, #10]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff ff19 	bl	8002874 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 8002a42:	2000      	movs	r0, #0
 8002a44:	f7ff ff26 	bl	8002894 <LCD_WR_DATA>
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f7ff ff23 	bl	8002894 <LCD_WR_DATA>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8002a4e:	88fb      	ldrh	r3, [r7, #6]
 8002a50:	0a1b      	lsrs	r3, r3, #8
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff ff1d 	bl	8002894 <LCD_WR_DATA>
 8002a5a:	88fb      	ldrh	r3, [r7, #6]
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff ff17 	bl	8002894 <LCD_WR_DATA>
 8002a66:	e021      	b.n	8002aac <LCD_SetCursor+0x16c>
			LCD_WR_REG(lcddev.setxcmd);
 8002a68:	4b4c      	ldr	r3, [pc, #304]	; (8002b9c <LCD_SetCursor+0x25c>)
 8002a6a:	895b      	ldrh	r3, [r3, #10]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff ff01 	bl	8002874 <LCD_WR_REG>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	0a1b      	lsrs	r3, r3, #8
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff ff0b 	bl	8002894 <LCD_WR_DATA>
 8002a7e:	88fb      	ldrh	r3, [r7, #6]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff ff05 	bl	8002894 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8002a8a:	4b44      	ldr	r3, [pc, #272]	; (8002b9c <LCD_SetCursor+0x25c>)
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	121b      	asrs	r3, r3, #8
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff fefd 	bl	8002894 <LCD_WR_DATA>
 8002a9a:	4b40      	ldr	r3, [pc, #256]	; (8002b9c <LCD_SetCursor+0x25c>)
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff fef4 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8002aac:	4b3b      	ldr	r3, [pc, #236]	; (8002b9c <LCD_SetCursor+0x25c>)
 8002aae:	899b      	ldrh	r3, [r3, #12]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff fedf 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 8002ab6:	88bb      	ldrh	r3, [r7, #4]
 8002ab8:	0a1b      	lsrs	r3, r3, #8
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff fee9 	bl	8002894 <LCD_WR_DATA>
 8002ac2:	88bb      	ldrh	r3, [r7, #4]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fee3 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 8002ace:	4b33      	ldr	r3, [pc, #204]	; (8002b9c <LCD_SetCursor+0x25c>)
 8002ad0:	885b      	ldrh	r3, [r3, #2]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	121b      	asrs	r3, r3, #8
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fedb 	bl	8002894 <LCD_WR_DATA>
 8002ade:	4b2f      	ldr	r3, [pc, #188]	; (8002b9c <LCD_SetCursor+0x25c>)
 8002ae0:	885b      	ldrh	r3, [r3, #2]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff fed2 	bl	8002894 <LCD_WR_DATA>
}
 8002af0:	e04f      	b.n	8002b92 <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X5510)
 8002af2:	4b2a      	ldr	r3, [pc, #168]	; (8002b9c <LCD_SetCursor+0x25c>)
 8002af4:	889b      	ldrh	r3, [r3, #4]
 8002af6:	f245 5210 	movw	r2, #21776	; 0x5510
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d130      	bne.n	8002b60 <LCD_SetCursor+0x220>
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(Xpos>>8);
 8002afe:	4b27      	ldr	r3, [pc, #156]	; (8002b9c <LCD_SetCursor+0x25c>)
 8002b00:	895b      	ldrh	r3, [r3, #10]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff feb6 	bl	8002874 <LCD_WR_REG>
 8002b08:	88fb      	ldrh	r3, [r7, #6]
 8002b0a:	0a1b      	lsrs	r3, r3, #8
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff fec0 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(Xpos&0XFF);
 8002b14:	4b21      	ldr	r3, [pc, #132]	; (8002b9c <LCD_SetCursor+0x25c>)
 8002b16:	895b      	ldrh	r3, [r3, #10]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff fea9 	bl	8002874 <LCD_WR_REG>
 8002b22:	88fb      	ldrh	r3, [r7, #6]
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff feb3 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(Ypos>>8);
 8002b2e:	4b1b      	ldr	r3, [pc, #108]	; (8002b9c <LCD_SetCursor+0x25c>)
 8002b30:	899b      	ldrh	r3, [r3, #12]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff fe9e 	bl	8002874 <LCD_WR_REG>
 8002b38:	88bb      	ldrh	r3, [r7, #4]
 8002b3a:	0a1b      	lsrs	r3, r3, #8
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff fea8 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(Ypos&0XFF);
 8002b44:	4b15      	ldr	r3, [pc, #84]	; (8002b9c <LCD_SetCursor+0x25c>)
 8002b46:	899b      	ldrh	r3, [r3, #12]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fe91 	bl	8002874 <LCD_WR_REG>
 8002b52:	88bb      	ldrh	r3, [r7, #4]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fe9b 	bl	8002894 <LCD_WR_DATA>
}
 8002b5e:	e018      	b.n	8002b92 <LCD_SetCursor+0x252>
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏其实就是调转x,y坐标
 8002b60:	4b0e      	ldr	r3, [pc, #56]	; (8002b9c <LCD_SetCursor+0x25c>)
 8002b62:	799b      	ldrb	r3, [r3, #6]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d106      	bne.n	8002b76 <LCD_SetCursor+0x236>
 8002b68:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <LCD_SetCursor+0x25c>)
 8002b6a:	881a      	ldrh	r2, [r3, #0]
 8002b6c:	88fb      	ldrh	r3, [r7, #6]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	3b01      	subs	r3, #1
 8002b74:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8002b76:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <LCD_SetCursor+0x25c>)
 8002b78:	895b      	ldrh	r3, [r3, #10]
 8002b7a:	88fa      	ldrh	r2, [r7, #6]
 8002b7c:	4611      	mov	r1, r2
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff fea6 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8002b84:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <LCD_SetCursor+0x25c>)
 8002b86:	899b      	ldrh	r3, [r3, #12]
 8002b88:	88ba      	ldrh	r2, [r7, #4]
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff fe9f 	bl	80028d0 <LCD_WriteReg>
}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	2000045c 	.word	0x2000045c

08002ba0 <LCD_Scan_Dir>:
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试
void LCD_Scan_Dir(uint8_t dir)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	71fb      	strb	r3, [r7, #7]
	uint16_t regval=0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg=0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if((lcddev.dir==1&&lcddev.id!=0X6804&&lcddev.id!=0X1963)||(lcddev.dir==0&&lcddev.id==0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 8002bb2:	4b78      	ldr	r3, [pc, #480]	; (8002d94 <LCD_Scan_Dir+0x1f4>)
 8002bb4:	799b      	ldrb	r3, [r3, #6]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d10b      	bne.n	8002bd2 <LCD_Scan_Dir+0x32>
 8002bba:	4b76      	ldr	r3, [pc, #472]	; (8002d94 <LCD_Scan_Dir+0x1f4>)
 8002bbc:	889b      	ldrh	r3, [r3, #4]
 8002bbe:	f646 0204 	movw	r2, #26628	; 0x6804
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d005      	beq.n	8002bd2 <LCD_Scan_Dir+0x32>
 8002bc6:	4b73      	ldr	r3, [pc, #460]	; (8002d94 <LCD_Scan_Dir+0x1f4>)
 8002bc8:	889b      	ldrh	r3, [r3, #4]
 8002bca:	f641 1263 	movw	r2, #6499	; 0x1963
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d109      	bne.n	8002be6 <LCD_Scan_Dir+0x46>
 8002bd2:	4b70      	ldr	r3, [pc, #448]	; (8002d94 <LCD_Scan_Dir+0x1f4>)
 8002bd4:	799b      	ldrb	r3, [r3, #6]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d134      	bne.n	8002c44 <LCD_Scan_Dir+0xa4>
 8002bda:	4b6e      	ldr	r3, [pc, #440]	; (8002d94 <LCD_Scan_Dir+0x1f4>)
 8002bdc:	889b      	ldrh	r3, [r3, #4]
 8002bde:	f641 1263 	movw	r2, #6499	; 0x1963
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d12e      	bne.n	8002c44 <LCD_Scan_Dir+0xa4>
	{
		switch(dir)//方向转换
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	2b07      	cmp	r3, #7
 8002bea:	d82c      	bhi.n	8002c46 <LCD_Scan_Dir+0xa6>
 8002bec:	a201      	add	r2, pc, #4	; (adr r2, 8002bf4 <LCD_Scan_Dir+0x54>)
 8002bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf2:	bf00      	nop
 8002bf4:	08002c15 	.word	0x08002c15
 8002bf8:	08002c1b 	.word	0x08002c1b
 8002bfc:	08002c21 	.word	0x08002c21
 8002c00:	08002c27 	.word	0x08002c27
 8002c04:	08002c2d 	.word	0x08002c2d
 8002c08:	08002c33 	.word	0x08002c33
 8002c0c:	08002c39 	.word	0x08002c39
 8002c10:	08002c3f 	.word	0x08002c3f
		{
			case 0:dir=6;break;
 8002c14:	2306      	movs	r3, #6
 8002c16:	71fb      	strb	r3, [r7, #7]
 8002c18:	e015      	b.n	8002c46 <LCD_Scan_Dir+0xa6>
			case 1:dir=7;break;
 8002c1a:	2307      	movs	r3, #7
 8002c1c:	71fb      	strb	r3, [r7, #7]
 8002c1e:	e012      	b.n	8002c46 <LCD_Scan_Dir+0xa6>
			case 2:dir=4;break;
 8002c20:	2304      	movs	r3, #4
 8002c22:	71fb      	strb	r3, [r7, #7]
 8002c24:	e00f      	b.n	8002c46 <LCD_Scan_Dir+0xa6>
			case 3:dir=5;break;
 8002c26:	2305      	movs	r3, #5
 8002c28:	71fb      	strb	r3, [r7, #7]
 8002c2a:	e00c      	b.n	8002c46 <LCD_Scan_Dir+0xa6>
			case 4:dir=1;break;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	71fb      	strb	r3, [r7, #7]
 8002c30:	e009      	b.n	8002c46 <LCD_Scan_Dir+0xa6>
			case 5:dir=0;break;
 8002c32:	2300      	movs	r3, #0
 8002c34:	71fb      	strb	r3, [r7, #7]
 8002c36:	e006      	b.n	8002c46 <LCD_Scan_Dir+0xa6>
			case 6:dir=3;break;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	71fb      	strb	r3, [r7, #7]
 8002c3c:	e003      	b.n	8002c46 <LCD_Scan_Dir+0xa6>
			case 7:dir=2;break;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	71fb      	strb	r3, [r7, #7]
 8002c42:	e000      	b.n	8002c46 <LCD_Scan_Dir+0xa6>
		}
	}
 8002c44:	bf00      	nop
	if(lcddev.id==0x9341||lcddev.id==0X6804||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//9341/6804/5310/5510/1963,特殊处理
 8002c46:	4b53      	ldr	r3, [pc, #332]	; (8002d94 <LCD_Scan_Dir+0x1f4>)
 8002c48:	889b      	ldrh	r3, [r3, #4]
 8002c4a:	f249 3241 	movw	r2, #37697	; 0x9341
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d018      	beq.n	8002c84 <LCD_Scan_Dir+0xe4>
 8002c52:	4b50      	ldr	r3, [pc, #320]	; (8002d94 <LCD_Scan_Dir+0x1f4>)
 8002c54:	889b      	ldrh	r3, [r3, #4]
 8002c56:	f646 0204 	movw	r2, #26628	; 0x6804
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d012      	beq.n	8002c84 <LCD_Scan_Dir+0xe4>
 8002c5e:	4b4d      	ldr	r3, [pc, #308]	; (8002d94 <LCD_Scan_Dir+0x1f4>)
 8002c60:	889b      	ldrh	r3, [r3, #4]
 8002c62:	f245 3210 	movw	r2, #21264	; 0x5310
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00c      	beq.n	8002c84 <LCD_Scan_Dir+0xe4>
 8002c6a:	4b4a      	ldr	r3, [pc, #296]	; (8002d94 <LCD_Scan_Dir+0x1f4>)
 8002c6c:	889b      	ldrh	r3, [r3, #4]
 8002c6e:	f245 5210 	movw	r2, #21776	; 0x5510
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d006      	beq.n	8002c84 <LCD_Scan_Dir+0xe4>
 8002c76:	4b47      	ldr	r3, [pc, #284]	; (8002d94 <LCD_Scan_Dir+0x1f4>)
 8002c78:	889b      	ldrh	r3, [r3, #4]
 8002c7a:	f641 1263 	movw	r2, #6499	; 0x1963
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	f040 813c 	bne.w	8002efc <LCD_Scan_Dir+0x35c>
	{
		switch(dir)
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	2b07      	cmp	r3, #7
 8002c88:	d835      	bhi.n	8002cf6 <LCD_Scan_Dir+0x156>
 8002c8a:	a201      	add	r2, pc, #4	; (adr r2, 8002c90 <LCD_Scan_Dir+0xf0>)
 8002c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c90:	08002cf7 	.word	0x08002cf7
 8002c94:	08002cb1 	.word	0x08002cb1
 8002c98:	08002cbb 	.word	0x08002cbb
 8002c9c:	08002cc5 	.word	0x08002cc5
 8002ca0:	08002ccf 	.word	0x08002ccf
 8002ca4:	08002cd9 	.word	0x08002cd9
 8002ca8:	08002ce3 	.word	0x08002ce3
 8002cac:	08002ced 	.word	0x08002ced
		{
			case L2R_U2D://从左到右,从上到下
				regval|=(0<<7)|(0<<6)|(0<<5);
				break;
			case L2R_D2U://从左到右,从下到上
				regval|=(1<<7)|(0<<6)|(0<<5);
 8002cb0:	89fb      	ldrh	r3, [r7, #14]
 8002cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cb6:	81fb      	strh	r3, [r7, #14]
				break;
 8002cb8:	e01d      	b.n	8002cf6 <LCD_Scan_Dir+0x156>
			case R2L_U2D://从右到左,从上到下
				regval|=(0<<7)|(1<<6)|(0<<5);
 8002cba:	89fb      	ldrh	r3, [r7, #14]
 8002cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cc0:	81fb      	strh	r3, [r7, #14]
				break;
 8002cc2:	e018      	b.n	8002cf6 <LCD_Scan_Dir+0x156>
			case R2L_D2U://从右到左,从下到上
				regval|=(1<<7)|(1<<6)|(0<<5);
 8002cc4:	89fb      	ldrh	r3, [r7, #14]
 8002cc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cca:	81fb      	strh	r3, [r7, #14]
				break;
 8002ccc:	e013      	b.n	8002cf6 <LCD_Scan_Dir+0x156>
			case U2D_L2R://从上到下,从左到右
				regval|=(0<<7)|(0<<6)|(1<<5);
 8002cce:	89fb      	ldrh	r3, [r7, #14]
 8002cd0:	f043 0320 	orr.w	r3, r3, #32
 8002cd4:	81fb      	strh	r3, [r7, #14]
				break;
 8002cd6:	e00e      	b.n	8002cf6 <LCD_Scan_Dir+0x156>
			case U2D_R2L://从上到下,从右到左
				regval|=(0<<7)|(1<<6)|(1<<5);
 8002cd8:	89fb      	ldrh	r3, [r7, #14]
 8002cda:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002cde:	81fb      	strh	r3, [r7, #14]
				break;
 8002ce0:	e009      	b.n	8002cf6 <LCD_Scan_Dir+0x156>
			case D2U_L2R://从下到上,从左到右
				regval|=(1<<7)|(0<<6)|(1<<5);
 8002ce2:	89fb      	ldrh	r3, [r7, #14]
 8002ce4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8002ce8:	81fb      	strh	r3, [r7, #14]
				break;
 8002cea:	e004      	b.n	8002cf6 <LCD_Scan_Dir+0x156>
			case D2U_R2L://从下到上,从右到左
				regval|=(1<<7)|(1<<6)|(1<<5);
 8002cec:	89fb      	ldrh	r3, [r7, #14]
 8002cee:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8002cf2:	81fb      	strh	r3, [r7, #14]
				break;
 8002cf4:	bf00      	nop
		}
		if(lcddev.id==0X5510)dirreg=0X3600;
 8002cf6:	4b27      	ldr	r3, [pc, #156]	; (8002d94 <LCD_Scan_Dir+0x1f4>)
 8002cf8:	889b      	ldrh	r3, [r3, #4]
 8002cfa:	f245 5210 	movw	r2, #21776	; 0x5510
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d103      	bne.n	8002d0a <LCD_Scan_Dir+0x16a>
 8002d02:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 8002d06:	81bb      	strh	r3, [r7, #12]
 8002d08:	e001      	b.n	8002d0e <LCD_Scan_Dir+0x16e>
		else dirreg=0X36;
 8002d0a:	2336      	movs	r3, #54	; 0x36
 8002d0c:	81bb      	strh	r3, [r7, #12]
 		if((lcddev.id!=0X5310)&&(lcddev.id!=0X5510)&&(lcddev.id!=0X1963))regval|=0X08;//5310/5510/1963不需要BGR
 8002d0e:	4b21      	ldr	r3, [pc, #132]	; (8002d94 <LCD_Scan_Dir+0x1f4>)
 8002d10:	889b      	ldrh	r3, [r3, #4]
 8002d12:	f245 3210 	movw	r2, #21264	; 0x5310
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d00f      	beq.n	8002d3a <LCD_Scan_Dir+0x19a>
 8002d1a:	4b1e      	ldr	r3, [pc, #120]	; (8002d94 <LCD_Scan_Dir+0x1f4>)
 8002d1c:	889b      	ldrh	r3, [r3, #4]
 8002d1e:	f245 5210 	movw	r2, #21776	; 0x5510
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d009      	beq.n	8002d3a <LCD_Scan_Dir+0x19a>
 8002d26:	4b1b      	ldr	r3, [pc, #108]	; (8002d94 <LCD_Scan_Dir+0x1f4>)
 8002d28:	889b      	ldrh	r3, [r3, #4]
 8002d2a:	f641 1263 	movw	r2, #6499	; 0x1963
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d003      	beq.n	8002d3a <LCD_Scan_Dir+0x19a>
 8002d32:	89fb      	ldrh	r3, [r7, #14]
 8002d34:	f043 0308 	orr.w	r3, r3, #8
 8002d38:	81fb      	strh	r3, [r7, #14]
		if(lcddev.id==0X6804)regval|=0x02;//6804的BIT6和9341的反了
 8002d3a:	4b16      	ldr	r3, [pc, #88]	; (8002d94 <LCD_Scan_Dir+0x1f4>)
 8002d3c:	889b      	ldrh	r3, [r3, #4]
 8002d3e:	f646 0204 	movw	r2, #26628	; 0x6804
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d103      	bne.n	8002d4e <LCD_Scan_Dir+0x1ae>
 8002d46:	89fb      	ldrh	r3, [r7, #14]
 8002d48:	f043 0302 	orr.w	r3, r3, #2
 8002d4c:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg,regval);
 8002d4e:	89fa      	ldrh	r2, [r7, #14]
 8002d50:	89bb      	ldrh	r3, [r7, #12]
 8002d52:	4611      	mov	r1, r2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff fdbb 	bl	80028d0 <LCD_WriteReg>
		if(lcddev.id!=0X1963)//1963不做坐标处理
 8002d5a:	4b0e      	ldr	r3, [pc, #56]	; (8002d94 <LCD_Scan_Dir+0x1f4>)
 8002d5c:	889b      	ldrh	r3, [r3, #4]
 8002d5e:	f641 1263 	movw	r2, #6499	; 0x1963
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d028      	beq.n	8002db8 <LCD_Scan_Dir+0x218>
		{
			if(regval&0X20)
 8002d66:	89fb      	ldrh	r3, [r7, #14]
 8002d68:	f003 0320 	and.w	r3, r3, #32
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d013      	beq.n	8002d98 <LCD_Scan_Dir+0x1f8>
			{
				if(lcddev.width<lcddev.height)//交换X,Y
 8002d70:	4b08      	ldr	r3, [pc, #32]	; (8002d94 <LCD_Scan_Dir+0x1f4>)
 8002d72:	881a      	ldrh	r2, [r3, #0]
 8002d74:	4b07      	ldr	r3, [pc, #28]	; (8002d94 <LCD_Scan_Dir+0x1f4>)
 8002d76:	885b      	ldrh	r3, [r3, #2]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d21d      	bcs.n	8002db8 <LCD_Scan_Dir+0x218>
				{
					temp=lcddev.width;
 8002d7c:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <LCD_Scan_Dir+0x1f4>)
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 8002d82:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <LCD_Scan_Dir+0x1f4>)
 8002d84:	885a      	ldrh	r2, [r3, #2]
 8002d86:	4b03      	ldr	r3, [pc, #12]	; (8002d94 <LCD_Scan_Dir+0x1f4>)
 8002d88:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 8002d8a:	4a02      	ldr	r2, [pc, #8]	; (8002d94 <LCD_Scan_Dir+0x1f4>)
 8002d8c:	897b      	ldrh	r3, [r7, #10]
 8002d8e:	8053      	strh	r3, [r2, #2]
 8002d90:	e012      	b.n	8002db8 <LCD_Scan_Dir+0x218>
 8002d92:	bf00      	nop
 8002d94:	2000045c 	.word	0x2000045c
				}
			}else
			{
				if(lcddev.width>lcddev.height)//交换X,Y
 8002d98:	4b7d      	ldr	r3, [pc, #500]	; (8002f90 <LCD_Scan_Dir+0x3f0>)
 8002d9a:	881a      	ldrh	r2, [r3, #0]
 8002d9c:	4b7c      	ldr	r3, [pc, #496]	; (8002f90 <LCD_Scan_Dir+0x3f0>)
 8002d9e:	885b      	ldrh	r3, [r3, #2]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d909      	bls.n	8002db8 <LCD_Scan_Dir+0x218>
				{
					temp=lcddev.width;
 8002da4:	4b7a      	ldr	r3, [pc, #488]	; (8002f90 <LCD_Scan_Dir+0x3f0>)
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 8002daa:	4b79      	ldr	r3, [pc, #484]	; (8002f90 <LCD_Scan_Dir+0x3f0>)
 8002dac:	885a      	ldrh	r2, [r3, #2]
 8002dae:	4b78      	ldr	r3, [pc, #480]	; (8002f90 <LCD_Scan_Dir+0x3f0>)
 8002db0:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 8002db2:	4a77      	ldr	r2, [pc, #476]	; (8002f90 <LCD_Scan_Dir+0x3f0>)
 8002db4:	897b      	ldrh	r3, [r7, #10]
 8002db6:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if(lcddev.id==0X5510)
 8002db8:	4b75      	ldr	r3, [pc, #468]	; (8002f90 <LCD_Scan_Dir+0x3f0>)
 8002dba:	889b      	ldrh	r3, [r3, #4]
 8002dbc:	f245 5210 	movw	r2, #21776	; 0x5510
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d162      	bne.n	8002e8a <LCD_Scan_Dir+0x2ea>
		{
			LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(0);
 8002dc4:	4b72      	ldr	r3, [pc, #456]	; (8002f90 <LCD_Scan_Dir+0x3f0>)
 8002dc6:	895b      	ldrh	r3, [r3, #10]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff fd53 	bl	8002874 <LCD_WR_REG>
 8002dce:	2000      	movs	r0, #0
 8002dd0:	f7ff fd60 	bl	8002894 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(0);
 8002dd4:	4b6e      	ldr	r3, [pc, #440]	; (8002f90 <LCD_Scan_Dir+0x3f0>)
 8002dd6:	895b      	ldrh	r3, [r3, #10]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fd49 	bl	8002874 <LCD_WR_REG>
 8002de2:	2000      	movs	r0, #0
 8002de4:	f7ff fd56 	bl	8002894 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+2);LCD_WR_DATA((lcddev.width-1)>>8);
 8002de8:	4b69      	ldr	r3, [pc, #420]	; (8002f90 <LCD_Scan_Dir+0x3f0>)
 8002dea:	895b      	ldrh	r3, [r3, #10]
 8002dec:	3302      	adds	r3, #2
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff fd3f 	bl	8002874 <LCD_WR_REG>
 8002df6:	4b66      	ldr	r3, [pc, #408]	; (8002f90 <LCD_Scan_Dir+0x3f0>)
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	121b      	asrs	r3, r3, #8
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fd47 	bl	8002894 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+3);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8002e06:	4b62      	ldr	r3, [pc, #392]	; (8002f90 <LCD_Scan_Dir+0x3f0>)
 8002e08:	895b      	ldrh	r3, [r3, #10]
 8002e0a:	3303      	adds	r3, #3
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff fd30 	bl	8002874 <LCD_WR_REG>
 8002e14:	4b5e      	ldr	r3, [pc, #376]	; (8002f90 <LCD_Scan_Dir+0x3f0>)
 8002e16:	881b      	ldrh	r3, [r3, #0]
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff fd37 	bl	8002894 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(0);
 8002e26:	4b5a      	ldr	r3, [pc, #360]	; (8002f90 <LCD_Scan_Dir+0x3f0>)
 8002e28:	899b      	ldrh	r3, [r3, #12]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff fd22 	bl	8002874 <LCD_WR_REG>
 8002e30:	2000      	movs	r0, #0
 8002e32:	f7ff fd2f 	bl	8002894 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(0);
 8002e36:	4b56      	ldr	r3, [pc, #344]	; (8002f90 <LCD_Scan_Dir+0x3f0>)
 8002e38:	899b      	ldrh	r3, [r3, #12]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff fd18 	bl	8002874 <LCD_WR_REG>
 8002e44:	2000      	movs	r0, #0
 8002e46:	f7ff fd25 	bl	8002894 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+2);LCD_WR_DATA((lcddev.height-1)>>8);
 8002e4a:	4b51      	ldr	r3, [pc, #324]	; (8002f90 <LCD_Scan_Dir+0x3f0>)
 8002e4c:	899b      	ldrh	r3, [r3, #12]
 8002e4e:	3302      	adds	r3, #2
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff fd0e 	bl	8002874 <LCD_WR_REG>
 8002e58:	4b4d      	ldr	r3, [pc, #308]	; (8002f90 <LCD_Scan_Dir+0x3f0>)
 8002e5a:	885b      	ldrh	r3, [r3, #2]
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	121b      	asrs	r3, r3, #8
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff fd16 	bl	8002894 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+3);LCD_WR_DATA((lcddev.height-1)&0XFF);
 8002e68:	4b49      	ldr	r3, [pc, #292]	; (8002f90 <LCD_Scan_Dir+0x3f0>)
 8002e6a:	899b      	ldrh	r3, [r3, #12]
 8002e6c:	3303      	adds	r3, #3
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff fcff 	bl	8002874 <LCD_WR_REG>
 8002e76:	4b46      	ldr	r3, [pc, #280]	; (8002f90 <LCD_Scan_Dir+0x3f0>)
 8002e78:	885b      	ldrh	r3, [r3, #2]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff fd06 	bl	8002894 <LCD_WR_DATA>
		if(lcddev.id==0X5510)
 8002e88:	e07e      	b.n	8002f88 <LCD_Scan_Dir+0x3e8>
		}else
		{
			LCD_WR_REG(lcddev.setxcmd);
 8002e8a:	4b41      	ldr	r3, [pc, #260]	; (8002f90 <LCD_Scan_Dir+0x3f0>)
 8002e8c:	895b      	ldrh	r3, [r3, #10]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff fcf0 	bl	8002874 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 8002e94:	2000      	movs	r0, #0
 8002e96:	f7ff fcfd 	bl	8002894 <LCD_WR_DATA>
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	f7ff fcfa 	bl	8002894 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8002ea0:	4b3b      	ldr	r3, [pc, #236]	; (8002f90 <LCD_Scan_Dir+0x3f0>)
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	121b      	asrs	r3, r3, #8
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff fcf2 	bl	8002894 <LCD_WR_DATA>
 8002eb0:	4b37      	ldr	r3, [pc, #220]	; (8002f90 <LCD_Scan_Dir+0x3f0>)
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff fce9 	bl	8002894 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);
 8002ec2:	4b33      	ldr	r3, [pc, #204]	; (8002f90 <LCD_Scan_Dir+0x3f0>)
 8002ec4:	899b      	ldrh	r3, [r3, #12]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff fcd4 	bl	8002874 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 8002ecc:	2000      	movs	r0, #0
 8002ece:	f7ff fce1 	bl	8002894 <LCD_WR_DATA>
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	f7ff fcde 	bl	8002894 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 8002ed8:	4b2d      	ldr	r3, [pc, #180]	; (8002f90 <LCD_Scan_Dir+0x3f0>)
 8002eda:	885b      	ldrh	r3, [r3, #2]
 8002edc:	3b01      	subs	r3, #1
 8002ede:	121b      	asrs	r3, r3, #8
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff fcd6 	bl	8002894 <LCD_WR_DATA>
 8002ee8:	4b29      	ldr	r3, [pc, #164]	; (8002f90 <LCD_Scan_Dir+0x3f0>)
 8002eea:	885b      	ldrh	r3, [r3, #2]
 8002eec:	3b01      	subs	r3, #1
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff fccd 	bl	8002894 <LCD_WR_DATA>
		if(lcddev.id==0X5510)
 8002efa:	e045      	b.n	8002f88 <LCD_Scan_Dir+0x3e8>
		}
  	}else
	{
		switch(dir)
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	2b07      	cmp	r3, #7
 8002f00:	d835      	bhi.n	8002f6e <LCD_Scan_Dir+0x3ce>
 8002f02:	a201      	add	r2, pc, #4	; (adr r2, 8002f08 <LCD_Scan_Dir+0x368>)
 8002f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f08:	08002f29 	.word	0x08002f29
 8002f0c:	08002f33 	.word	0x08002f33
 8002f10:	08002f3d 	.word	0x08002f3d
 8002f14:	08002f6f 	.word	0x08002f6f
 8002f18:	08002f47 	.word	0x08002f47
 8002f1c:	08002f51 	.word	0x08002f51
 8002f20:	08002f5b 	.word	0x08002f5b
 8002f24:	08002f65 	.word	0x08002f65
		{
			case L2R_U2D://从左到右,从上到下
				regval|=(1<<5)|(1<<4)|(0<<3);
 8002f28:	89fb      	ldrh	r3, [r7, #14]
 8002f2a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002f2e:	81fb      	strh	r3, [r7, #14]
				break;
 8002f30:	e01d      	b.n	8002f6e <LCD_Scan_Dir+0x3ce>
			case L2R_D2U://从左到右,从下到上
				regval|=(0<<5)|(1<<4)|(0<<3);
 8002f32:	89fb      	ldrh	r3, [r7, #14]
 8002f34:	f043 0310 	orr.w	r3, r3, #16
 8002f38:	81fb      	strh	r3, [r7, #14]
				break;
 8002f3a:	e018      	b.n	8002f6e <LCD_Scan_Dir+0x3ce>
			case R2L_U2D://从右到左,从上到下
				regval|=(1<<5)|(0<<4)|(0<<3);
 8002f3c:	89fb      	ldrh	r3, [r7, #14]
 8002f3e:	f043 0320 	orr.w	r3, r3, #32
 8002f42:	81fb      	strh	r3, [r7, #14]
				break;
 8002f44:	e013      	b.n	8002f6e <LCD_Scan_Dir+0x3ce>
			case R2L_D2U://从右到左,从下到上
				regval|=(0<<5)|(0<<4)|(0<<3);
				break;
			case U2D_L2R://从上到下,从左到右
				regval|=(1<<5)|(1<<4)|(1<<3);
 8002f46:	89fb      	ldrh	r3, [r7, #14]
 8002f48:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002f4c:	81fb      	strh	r3, [r7, #14]
				break;
 8002f4e:	e00e      	b.n	8002f6e <LCD_Scan_Dir+0x3ce>
			case U2D_R2L://从上到下,从右到左
				regval|=(1<<5)|(0<<4)|(1<<3);
 8002f50:	89fb      	ldrh	r3, [r7, #14]
 8002f52:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8002f56:	81fb      	strh	r3, [r7, #14]
				break;
 8002f58:	e009      	b.n	8002f6e <LCD_Scan_Dir+0x3ce>
			case D2U_L2R://从下到上,从左到右
				regval|=(0<<5)|(1<<4)|(1<<3);
 8002f5a:	89fb      	ldrh	r3, [r7, #14]
 8002f5c:	f043 0318 	orr.w	r3, r3, #24
 8002f60:	81fb      	strh	r3, [r7, #14]
				break;
 8002f62:	e004      	b.n	8002f6e <LCD_Scan_Dir+0x3ce>
			case D2U_R2L://从下到上,从右到左
				regval|=(0<<5)|(0<<4)|(1<<3);
 8002f64:	89fb      	ldrh	r3, [r7, #14]
 8002f66:	f043 0308 	orr.w	r3, r3, #8
 8002f6a:	81fb      	strh	r3, [r7, #14]
				break;
 8002f6c:	bf00      	nop
		}
		dirreg=0X03;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	81bb      	strh	r3, [r7, #12]
		regval|=1<<12;
 8002f72:	89fb      	ldrh	r3, [r7, #14]
 8002f74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f78:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg,regval);
 8002f7a:	89fa      	ldrh	r2, [r7, #14]
 8002f7c:	89bb      	ldrh	r3, [r7, #12]
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fca5 	bl	80028d0 <LCD_WriteReg>
	}
}
 8002f86:	bf00      	nop
 8002f88:	bf00      	nop
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	2000045c 	.word	0x2000045c

08002f94 <LCD_Fast_DrawPoint>:
}
//快速画点
//x,y:坐标
//color:颜色
void LCD_Fast_DrawPoint(uint16_t x,uint16_t y,uint16_t color)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	80fb      	strh	r3, [r7, #6]
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	80bb      	strh	r3, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	807b      	strh	r3, [r7, #2]
	if(lcddev.id==0X9341||lcddev.id==0X5310)
 8002fa6:	4b85      	ldr	r3, [pc, #532]	; (80031bc <LCD_Fast_DrawPoint+0x228>)
 8002fa8:	889b      	ldrh	r3, [r3, #4]
 8002faa:	f249 3241 	movw	r2, #37697	; 0x9341
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d005      	beq.n	8002fbe <LCD_Fast_DrawPoint+0x2a>
 8002fb2:	4b82      	ldr	r3, [pc, #520]	; (80031bc <LCD_Fast_DrawPoint+0x228>)
 8002fb4:	889b      	ldrh	r3, [r3, #4]
 8002fb6:	f245 3210 	movw	r2, #21264	; 0x5310
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d122      	bne.n	8003004 <LCD_Fast_DrawPoint+0x70>
	{
		LCD_WR_REG(lcddev.setxcmd);
 8002fbe:	4b7f      	ldr	r3, [pc, #508]	; (80031bc <LCD_Fast_DrawPoint+0x228>)
 8002fc0:	895b      	ldrh	r3, [r3, #10]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff fc56 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	0a1b      	lsrs	r3, r3, #8
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff fc60 	bl	8002894 <LCD_WR_DATA>
 8002fd4:	88fb      	ldrh	r3, [r7, #6]
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff fc5a 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8002fe0:	4b76      	ldr	r3, [pc, #472]	; (80031bc <LCD_Fast_DrawPoint+0x228>)
 8002fe2:	899b      	ldrh	r3, [r3, #12]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff fc45 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8002fea:	88bb      	ldrh	r3, [r7, #4]
 8002fec:	0a1b      	lsrs	r3, r3, #8
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff fc4f 	bl	8002894 <LCD_WR_DATA>
 8002ff6:	88bb      	ldrh	r3, [r7, #4]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff fc49 	bl	8002894 <LCD_WR_DATA>
 8003002:	e0cf      	b.n	80031a4 <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X5510)
 8003004:	4b6d      	ldr	r3, [pc, #436]	; (80031bc <LCD_Fast_DrawPoint+0x228>)
 8003006:	889b      	ldrh	r3, [r3, #4]
 8003008:	f245 5210 	movw	r2, #21776	; 0x5510
 800300c:	4293      	cmp	r3, r2
 800300e:	d130      	bne.n	8003072 <LCD_Fast_DrawPoint+0xde>
	{
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(x>>8);
 8003010:	4b6a      	ldr	r3, [pc, #424]	; (80031bc <LCD_Fast_DrawPoint+0x228>)
 8003012:	895b      	ldrh	r3, [r3, #10]
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff fc2d 	bl	8002874 <LCD_WR_REG>
 800301a:	88fb      	ldrh	r3, [r7, #6]
 800301c:	0a1b      	lsrs	r3, r3, #8
 800301e:	b29b      	uxth	r3, r3
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff fc37 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(x&0XFF);
 8003026:	4b65      	ldr	r3, [pc, #404]	; (80031bc <LCD_Fast_DrawPoint+0x228>)
 8003028:	895b      	ldrh	r3, [r3, #10]
 800302a:	3301      	adds	r3, #1
 800302c:	b29b      	uxth	r3, r3
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fc20 	bl	8002874 <LCD_WR_REG>
 8003034:	88fb      	ldrh	r3, [r7, #6]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	b29b      	uxth	r3, r3
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff fc2a 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(y>>8);
 8003040:	4b5e      	ldr	r3, [pc, #376]	; (80031bc <LCD_Fast_DrawPoint+0x228>)
 8003042:	899b      	ldrh	r3, [r3, #12]
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff fc15 	bl	8002874 <LCD_WR_REG>
 800304a:	88bb      	ldrh	r3, [r7, #4]
 800304c:	0a1b      	lsrs	r3, r3, #8
 800304e:	b29b      	uxth	r3, r3
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff fc1f 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(y&0XFF);
 8003056:	4b59      	ldr	r3, [pc, #356]	; (80031bc <LCD_Fast_DrawPoint+0x228>)
 8003058:	899b      	ldrh	r3, [r3, #12]
 800305a:	3301      	adds	r3, #1
 800305c:	b29b      	uxth	r3, r3
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff fc08 	bl	8002874 <LCD_WR_REG>
 8003064:	88bb      	ldrh	r3, [r7, #4]
 8003066:	b2db      	uxtb	r3, r3
 8003068:	b29b      	uxth	r3, r3
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff fc12 	bl	8002894 <LCD_WR_DATA>
 8003070:	e098      	b.n	80031a4 <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X1963)
 8003072:	4b52      	ldr	r3, [pc, #328]	; (80031bc <LCD_Fast_DrawPoint+0x228>)
 8003074:	889b      	ldrh	r3, [r3, #4]
 8003076:	f641 1263 	movw	r2, #6499	; 0x1963
 800307a:	4293      	cmp	r3, r2
 800307c:	d145      	bne.n	800310a <LCD_Fast_DrawPoint+0x176>
	{
		if(lcddev.dir==0)x=lcddev.width-1-x;
 800307e:	4b4f      	ldr	r3, [pc, #316]	; (80031bc <LCD_Fast_DrawPoint+0x228>)
 8003080:	799b      	ldrb	r3, [r3, #6]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d106      	bne.n	8003094 <LCD_Fast_DrawPoint+0x100>
 8003086:	4b4d      	ldr	r3, [pc, #308]	; (80031bc <LCD_Fast_DrawPoint+0x228>)
 8003088:	881a      	ldrh	r2, [r3, #0]
 800308a:	88fb      	ldrh	r3, [r7, #6]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	b29b      	uxth	r3, r3
 8003090:	3b01      	subs	r3, #1
 8003092:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8003094:	4b49      	ldr	r3, [pc, #292]	; (80031bc <LCD_Fast_DrawPoint+0x228>)
 8003096:	895b      	ldrh	r3, [r3, #10]
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff fbeb 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 800309e:	88fb      	ldrh	r3, [r7, #6]
 80030a0:	0a1b      	lsrs	r3, r3, #8
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff fbf5 	bl	8002894 <LCD_WR_DATA>
 80030aa:	88fb      	ldrh	r3, [r7, #6]
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff fbef 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 80030b6:	88fb      	ldrh	r3, [r7, #6]
 80030b8:	0a1b      	lsrs	r3, r3, #8
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff fbe9 	bl	8002894 <LCD_WR_DATA>
 80030c2:	88fb      	ldrh	r3, [r7, #6]
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff fbe3 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 80030ce:	4b3b      	ldr	r3, [pc, #236]	; (80031bc <LCD_Fast_DrawPoint+0x228>)
 80030d0:	899b      	ldrh	r3, [r3, #12]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff fbce 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 80030d8:	88bb      	ldrh	r3, [r7, #4]
 80030da:	0a1b      	lsrs	r3, r3, #8
 80030dc:	b29b      	uxth	r3, r3
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff fbd8 	bl	8002894 <LCD_WR_DATA>
 80030e4:	88bb      	ldrh	r3, [r7, #4]
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff fbd2 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 80030f0:	88bb      	ldrh	r3, [r7, #4]
 80030f2:	0a1b      	lsrs	r3, r3, #8
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff fbcc 	bl	8002894 <LCD_WR_DATA>
 80030fc:	88bb      	ldrh	r3, [r7, #4]
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	b29b      	uxth	r3, r3
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff fbc6 	bl	8002894 <LCD_WR_DATA>
 8003108:	e04c      	b.n	80031a4 <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X6804)
 800310a:	4b2c      	ldr	r3, [pc, #176]	; (80031bc <LCD_Fast_DrawPoint+0x228>)
 800310c:	889b      	ldrh	r3, [r3, #4]
 800310e:	f646 0204 	movw	r2, #26628	; 0x6804
 8003112:	4293      	cmp	r3, r2
 8003114:	d12d      	bne.n	8003172 <LCD_Fast_DrawPoint+0x1de>
	{
		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏时处理
 8003116:	4b29      	ldr	r3, [pc, #164]	; (80031bc <LCD_Fast_DrawPoint+0x228>)
 8003118:	799b      	ldrb	r3, [r3, #6]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d106      	bne.n	800312c <LCD_Fast_DrawPoint+0x198>
 800311e:	4b27      	ldr	r3, [pc, #156]	; (80031bc <LCD_Fast_DrawPoint+0x228>)
 8003120:	881a      	ldrh	r2, [r3, #0]
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	b29b      	uxth	r3, r3
 8003128:	3b01      	subs	r3, #1
 800312a:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 800312c:	4b23      	ldr	r3, [pc, #140]	; (80031bc <LCD_Fast_DrawPoint+0x228>)
 800312e:	895b      	ldrh	r3, [r3, #10]
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff fb9f 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8003136:	88fb      	ldrh	r3, [r7, #6]
 8003138:	0a1b      	lsrs	r3, r3, #8
 800313a:	b29b      	uxth	r3, r3
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff fba9 	bl	8002894 <LCD_WR_DATA>
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	b2db      	uxtb	r3, r3
 8003146:	b29b      	uxth	r3, r3
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff fba3 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 800314e:	4b1b      	ldr	r3, [pc, #108]	; (80031bc <LCD_Fast_DrawPoint+0x228>)
 8003150:	899b      	ldrh	r3, [r3, #12]
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff fb8e 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8003158:	88bb      	ldrh	r3, [r7, #4]
 800315a:	0a1b      	lsrs	r3, r3, #8
 800315c:	b29b      	uxth	r3, r3
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff fb98 	bl	8002894 <LCD_WR_DATA>
 8003164:	88bb      	ldrh	r3, [r7, #4]
 8003166:	b2db      	uxtb	r3, r3
 8003168:	b29b      	uxth	r3, r3
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff fb92 	bl	8002894 <LCD_WR_DATA>
 8003170:	e018      	b.n	80031a4 <LCD_Fast_DrawPoint+0x210>
	}else
	{
 		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏其实就是调转x,y坐标
 8003172:	4b12      	ldr	r3, [pc, #72]	; (80031bc <LCD_Fast_DrawPoint+0x228>)
 8003174:	799b      	ldrb	r3, [r3, #6]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d106      	bne.n	8003188 <LCD_Fast_DrawPoint+0x1f4>
 800317a:	4b10      	ldr	r3, [pc, #64]	; (80031bc <LCD_Fast_DrawPoint+0x228>)
 800317c:	881a      	ldrh	r2, [r3, #0]
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	b29b      	uxth	r3, r3
 8003184:	3b01      	subs	r3, #1
 8003186:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd,x);
 8003188:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <LCD_Fast_DrawPoint+0x228>)
 800318a:	895b      	ldrh	r3, [r3, #10]
 800318c:	88fa      	ldrh	r2, [r7, #6]
 800318e:	4611      	mov	r1, r2
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff fb9d 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd,y);
 8003196:	4b09      	ldr	r3, [pc, #36]	; (80031bc <LCD_Fast_DrawPoint+0x228>)
 8003198:	899b      	ldrh	r3, [r3, #12]
 800319a:	88ba      	ldrh	r2, [r7, #4]
 800319c:	4611      	mov	r1, r2
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff fb96 	bl	80028d0 <LCD_WriteReg>
	}
	LCD->LCD_REG=lcddev.wramcmd;
 80031a4:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <LCD_Fast_DrawPoint+0x22c>)
 80031a6:	4a05      	ldr	r2, [pc, #20]	; (80031bc <LCD_Fast_DrawPoint+0x228>)
 80031a8:	8912      	ldrh	r2, [r2, #8]
 80031aa:	801a      	strh	r2, [r3, #0]
	LCD->LCD_RAM=color;
 80031ac:	4a04      	ldr	r2, [pc, #16]	; (80031c0 <LCD_Fast_DrawPoint+0x22c>)
 80031ae:	887b      	ldrh	r3, [r7, #2]
 80031b0:	8053      	strh	r3, [r2, #2]
}
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	2000045c 	.word	0x2000045c
 80031c0:	6c0007fe 	.word	0x6c0007fe
 80031c4:	00000000 	.word	0x00000000

080031c8 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 80031d2:	20be      	movs	r0, #190	; 0xbe
 80031d4:	f7ff fb4e 	bl	8002874 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 80031d8:	2005      	movs	r0, #5
 80031da:	f7ff fb5b 	bl	8002894 <LCD_WR_DATA>
	LCD_WR_DATA(pwm*2.55);//2设置PWM占空比
 80031de:	79fb      	ldrb	r3, [r7, #7]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fd f97b 	bl	80004dc <__aeabi_i2d>
 80031e6:	a310      	add	r3, pc, #64	; (adr r3, 8003228 <LCD_SSD_BackLightSet+0x60>)
 80031e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ec:	f7fd f9e0 	bl	80005b0 <__aeabi_dmul>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4610      	mov	r0, r2
 80031f6:	4619      	mov	r1, r3
 80031f8:	f7fd fcb2 	bl	8000b60 <__aeabi_d2uiz>
 80031fc:	4603      	mov	r3, r0
 80031fe:	b29b      	uxth	r3, r3
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff fb47 	bl	8002894 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);	//3设置C
 8003206:	2001      	movs	r0, #1
 8003208:	f7ff fb44 	bl	8002894 <LCD_WR_DATA>
	LCD_WR_DATA(0xFF);	//4设置D
 800320c:	20ff      	movs	r0, #255	; 0xff
 800320e:	f7ff fb41 	bl	8002894 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//5设置E
 8003212:	2000      	movs	r0, #0
 8003214:	f7ff fb3e 	bl	8002894 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//6设置F
 8003218:	2000      	movs	r0, #0
 800321a:	f7ff fb3b 	bl	8002894 <LCD_WR_DATA>
}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	66666666 	.word	0x66666666
 800322c:	40046666 	.word	0x40046666

08003230 <LCD_Display_Dir>:

//设置LCD显示方向
//dir:0,竖屏；1,横屏
void LCD_Display_Dir(uint8_t dir)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	4603      	mov	r3, r0
 8003238:	71fb      	strb	r3, [r7, #7]
	if(dir==0)			//竖屏
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d177      	bne.n	8003330 <LCD_Display_Dir+0x100>
	{
		lcddev.dir=0;	//竖屏
 8003240:	4b80      	ldr	r3, [pc, #512]	; (8003444 <LCD_Display_Dir+0x214>)
 8003242:	2200      	movs	r2, #0
 8003244:	719a      	strb	r2, [r3, #6]
		lcddev.width=240;
 8003246:	4b7f      	ldr	r3, [pc, #508]	; (8003444 <LCD_Display_Dir+0x214>)
 8003248:	22f0      	movs	r2, #240	; 0xf0
 800324a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 800324c:	4b7d      	ldr	r3, [pc, #500]	; (8003444 <LCD_Display_Dir+0x214>)
 800324e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003252:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X6804||lcddev.id==0X5310)
 8003254:	4b7b      	ldr	r3, [pc, #492]	; (8003444 <LCD_Display_Dir+0x214>)
 8003256:	889b      	ldrh	r3, [r3, #4]
 8003258:	f249 3241 	movw	r2, #37697	; 0x9341
 800325c:	4293      	cmp	r3, r2
 800325e:	d00b      	beq.n	8003278 <LCD_Display_Dir+0x48>
 8003260:	4b78      	ldr	r3, [pc, #480]	; (8003444 <LCD_Display_Dir+0x214>)
 8003262:	889b      	ldrh	r3, [r3, #4]
 8003264:	f646 0204 	movw	r2, #26628	; 0x6804
 8003268:	4293      	cmp	r3, r2
 800326a:	d005      	beq.n	8003278 <LCD_Display_Dir+0x48>
 800326c:	4b75      	ldr	r3, [pc, #468]	; (8003444 <LCD_Display_Dir+0x214>)
 800326e:	889b      	ldrh	r3, [r3, #4]
 8003270:	f245 3210 	movw	r2, #21264	; 0x5310
 8003274:	4293      	cmp	r3, r2
 8003276:	d11e      	bne.n	80032b6 <LCD_Display_Dir+0x86>
		{
			lcddev.wramcmd=0X2C;
 8003278:	4b72      	ldr	r3, [pc, #456]	; (8003444 <LCD_Display_Dir+0x214>)
 800327a:	222c      	movs	r2, #44	; 0x2c
 800327c:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 800327e:	4b71      	ldr	r3, [pc, #452]	; (8003444 <LCD_Display_Dir+0x214>)
 8003280:	222a      	movs	r2, #42	; 0x2a
 8003282:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8003284:	4b6f      	ldr	r3, [pc, #444]	; (8003444 <LCD_Display_Dir+0x214>)
 8003286:	222b      	movs	r2, #43	; 0x2b
 8003288:	819a      	strh	r2, [r3, #12]
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 800328a:	4b6e      	ldr	r3, [pc, #440]	; (8003444 <LCD_Display_Dir+0x214>)
 800328c:	889b      	ldrh	r3, [r3, #4]
 800328e:	f646 0204 	movw	r2, #26628	; 0x6804
 8003292:	4293      	cmp	r3, r2
 8003294:	d006      	beq.n	80032a4 <LCD_Display_Dir+0x74>
 8003296:	4b6b      	ldr	r3, [pc, #428]	; (8003444 <LCD_Display_Dir+0x214>)
 8003298:	889b      	ldrh	r3, [r3, #4]
 800329a:	f245 3210 	movw	r2, #21264	; 0x5310
 800329e:	4293      	cmp	r3, r2
 80032a0:	f040 80c7 	bne.w	8003432 <LCD_Display_Dir+0x202>
			{
				lcddev.width=320;
 80032a4:	4b67      	ldr	r3, [pc, #412]	; (8003444 <LCD_Display_Dir+0x214>)
 80032a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80032aa:	801a      	strh	r2, [r3, #0]
				lcddev.height=480;
 80032ac:	4b65      	ldr	r3, [pc, #404]	; (8003444 <LCD_Display_Dir+0x214>)
 80032ae:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80032b2:	805a      	strh	r2, [r3, #2]
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 80032b4:	e0bd      	b.n	8003432 <LCD_Display_Dir+0x202>
			}
		}else if(lcddev.id==0x5510)
 80032b6:	4b63      	ldr	r3, [pc, #396]	; (8003444 <LCD_Display_Dir+0x214>)
 80032b8:	889b      	ldrh	r3, [r3, #4]
 80032ba:	f245 5210 	movw	r2, #21776	; 0x5510
 80032be:	4293      	cmp	r3, r2
 80032c0:	d114      	bne.n	80032ec <LCD_Display_Dir+0xbc>
		{
			lcddev.wramcmd=0X2C00;
 80032c2:	4b60      	ldr	r3, [pc, #384]	; (8003444 <LCD_Display_Dir+0x214>)
 80032c4:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80032c8:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 80032ca:	4b5e      	ldr	r3, [pc, #376]	; (8003444 <LCD_Display_Dir+0x214>)
 80032cc:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 80032d0:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 80032d2:	4b5c      	ldr	r3, [pc, #368]	; (8003444 <LCD_Display_Dir+0x214>)
 80032d4:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 80032d8:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;
 80032da:	4b5a      	ldr	r3, [pc, #360]	; (8003444 <LCD_Display_Dir+0x214>)
 80032dc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80032e0:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;
 80032e2:	4b58      	ldr	r3, [pc, #352]	; (8003444 <LCD_Display_Dir+0x214>)
 80032e4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80032e8:	805a      	strh	r2, [r3, #2]
 80032ea:	e0a3      	b.n	8003434 <LCD_Display_Dir+0x204>
		}else if(lcddev.id==0X1963)
 80032ec:	4b55      	ldr	r3, [pc, #340]	; (8003444 <LCD_Display_Dir+0x214>)
 80032ee:	889b      	ldrh	r3, [r3, #4]
 80032f0:	f641 1263 	movw	r2, #6499	; 0x1963
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d111      	bne.n	800331c <LCD_Display_Dir+0xec>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 80032f8:	4b52      	ldr	r3, [pc, #328]	; (8003444 <LCD_Display_Dir+0x214>)
 80032fa:	222c      	movs	r2, #44	; 0x2c
 80032fc:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2B;	//设置写X坐标指令
 80032fe:	4b51      	ldr	r3, [pc, #324]	; (8003444 <LCD_Display_Dir+0x214>)
 8003300:	222b      	movs	r2, #43	; 0x2b
 8003302:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A;	//设置写Y坐标指令
 8003304:	4b4f      	ldr	r3, [pc, #316]	; (8003444 <LCD_Display_Dir+0x214>)
 8003306:	222a      	movs	r2, #42	; 0x2a
 8003308:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;		//设置宽度480
 800330a:	4b4e      	ldr	r3, [pc, #312]	; (8003444 <LCD_Display_Dir+0x214>)
 800330c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003310:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;		//设置高度800
 8003312:	4b4c      	ldr	r3, [pc, #304]	; (8003444 <LCD_Display_Dir+0x214>)
 8003314:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003318:	805a      	strh	r2, [r3, #2]
 800331a:	e08b      	b.n	8003434 <LCD_Display_Dir+0x204>
		}else
		{
			lcddev.wramcmd=0X22;
 800331c:	4b49      	ldr	r3, [pc, #292]	; (8003444 <LCD_Display_Dir+0x214>)
 800331e:	2222      	movs	r2, #34	; 0x22
 8003320:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X20;
 8003322:	4b48      	ldr	r3, [pc, #288]	; (8003444 <LCD_Display_Dir+0x214>)
 8003324:	2220      	movs	r2, #32
 8003326:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X21;
 8003328:	4b46      	ldr	r3, [pc, #280]	; (8003444 <LCD_Display_Dir+0x214>)
 800332a:	2221      	movs	r2, #33	; 0x21
 800332c:	819a      	strh	r2, [r3, #12]
 800332e:	e081      	b.n	8003434 <LCD_Display_Dir+0x204>
		}
	}else 				//横屏
	{
		lcddev.dir=1;	//横屏
 8003330:	4b44      	ldr	r3, [pc, #272]	; (8003444 <LCD_Display_Dir+0x214>)
 8003332:	2201      	movs	r2, #1
 8003334:	719a      	strb	r2, [r3, #6]
		lcddev.width=320;
 8003336:	4b43      	ldr	r3, [pc, #268]	; (8003444 <LCD_Display_Dir+0x214>)
 8003338:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800333c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 800333e:	4b41      	ldr	r3, [pc, #260]	; (8003444 <LCD_Display_Dir+0x214>)
 8003340:	22f0      	movs	r2, #240	; 0xf0
 8003342:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X5310)
 8003344:	4b3f      	ldr	r3, [pc, #252]	; (8003444 <LCD_Display_Dir+0x214>)
 8003346:	889b      	ldrh	r3, [r3, #4]
 8003348:	f249 3241 	movw	r2, #37697	; 0x9341
 800334c:	4293      	cmp	r3, r2
 800334e:	d005      	beq.n	800335c <LCD_Display_Dir+0x12c>
 8003350:	4b3c      	ldr	r3, [pc, #240]	; (8003444 <LCD_Display_Dir+0x214>)
 8003352:	889b      	ldrh	r3, [r3, #4]
 8003354:	f245 3210 	movw	r2, #21264	; 0x5310
 8003358:	4293      	cmp	r3, r2
 800335a:	d109      	bne.n	8003370 <LCD_Display_Dir+0x140>
		{
			lcddev.wramcmd=0X2C;
 800335c:	4b39      	ldr	r3, [pc, #228]	; (8003444 <LCD_Display_Dir+0x214>)
 800335e:	222c      	movs	r2, #44	; 0x2c
 8003360:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 8003362:	4b38      	ldr	r3, [pc, #224]	; (8003444 <LCD_Display_Dir+0x214>)
 8003364:	222a      	movs	r2, #42	; 0x2a
 8003366:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8003368:	4b36      	ldr	r3, [pc, #216]	; (8003444 <LCD_Display_Dir+0x214>)
 800336a:	222b      	movs	r2, #43	; 0x2b
 800336c:	819a      	strh	r2, [r3, #12]
 800336e:	e04b      	b.n	8003408 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0X6804)
 8003370:	4b34      	ldr	r3, [pc, #208]	; (8003444 <LCD_Display_Dir+0x214>)
 8003372:	889b      	ldrh	r3, [r3, #4]
 8003374:	f646 0204 	movw	r2, #26628	; 0x6804
 8003378:	4293      	cmp	r3, r2
 800337a:	d109      	bne.n	8003390 <LCD_Display_Dir+0x160>
		{
 			lcddev.wramcmd=0X2C;
 800337c:	4b31      	ldr	r3, [pc, #196]	; (8003444 <LCD_Display_Dir+0x214>)
 800337e:	222c      	movs	r2, #44	; 0x2c
 8003380:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2B;
 8003382:	4b30      	ldr	r3, [pc, #192]	; (8003444 <LCD_Display_Dir+0x214>)
 8003384:	222b      	movs	r2, #43	; 0x2b
 8003386:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A;
 8003388:	4b2e      	ldr	r3, [pc, #184]	; (8003444 <LCD_Display_Dir+0x214>)
 800338a:	222a      	movs	r2, #42	; 0x2a
 800338c:	819a      	strh	r2, [r3, #12]
 800338e:	e03b      	b.n	8003408 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0x5510)
 8003390:	4b2c      	ldr	r3, [pc, #176]	; (8003444 <LCD_Display_Dir+0x214>)
 8003392:	889b      	ldrh	r3, [r3, #4]
 8003394:	f245 5210 	movw	r2, #21776	; 0x5510
 8003398:	4293      	cmp	r3, r2
 800339a:	d114      	bne.n	80033c6 <LCD_Display_Dir+0x196>
		{
			lcddev.wramcmd=0X2C00;
 800339c:	4b29      	ldr	r3, [pc, #164]	; (8003444 <LCD_Display_Dir+0x214>)
 800339e:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80033a2:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 80033a4:	4b27      	ldr	r3, [pc, #156]	; (8003444 <LCD_Display_Dir+0x214>)
 80033a6:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 80033aa:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 80033ac:	4b25      	ldr	r3, [pc, #148]	; (8003444 <LCD_Display_Dir+0x214>)
 80033ae:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 80033b2:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;
 80033b4:	4b23      	ldr	r3, [pc, #140]	; (8003444 <LCD_Display_Dir+0x214>)
 80033b6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80033ba:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;
 80033bc:	4b21      	ldr	r3, [pc, #132]	; (8003444 <LCD_Display_Dir+0x214>)
 80033be:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80033c2:	805a      	strh	r2, [r3, #2]
 80033c4:	e020      	b.n	8003408 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0X1963)
 80033c6:	4b1f      	ldr	r3, [pc, #124]	; (8003444 <LCD_Display_Dir+0x214>)
 80033c8:	889b      	ldrh	r3, [r3, #4]
 80033ca:	f641 1263 	movw	r2, #6499	; 0x1963
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d111      	bne.n	80033f6 <LCD_Display_Dir+0x1c6>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 80033d2:	4b1c      	ldr	r3, [pc, #112]	; (8003444 <LCD_Display_Dir+0x214>)
 80033d4:	222c      	movs	r2, #44	; 0x2c
 80033d6:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2A;	//设置写X坐标指令
 80033d8:	4b1a      	ldr	r3, [pc, #104]	; (8003444 <LCD_Display_Dir+0x214>)
 80033da:	222a      	movs	r2, #42	; 0x2a
 80033dc:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;	//设置写Y坐标指令
 80033de:	4b19      	ldr	r3, [pc, #100]	; (8003444 <LCD_Display_Dir+0x214>)
 80033e0:	222b      	movs	r2, #43	; 0x2b
 80033e2:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;		//设置宽度800
 80033e4:	4b17      	ldr	r3, [pc, #92]	; (8003444 <LCD_Display_Dir+0x214>)
 80033e6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80033ea:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;		//设置高度480
 80033ec:	4b15      	ldr	r3, [pc, #84]	; (8003444 <LCD_Display_Dir+0x214>)
 80033ee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80033f2:	805a      	strh	r2, [r3, #2]
 80033f4:	e008      	b.n	8003408 <LCD_Display_Dir+0x1d8>
		}else
		{
			lcddev.wramcmd=0X22;
 80033f6:	4b13      	ldr	r3, [pc, #76]	; (8003444 <LCD_Display_Dir+0x214>)
 80033f8:	2222      	movs	r2, #34	; 0x22
 80033fa:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X21;
 80033fc:	4b11      	ldr	r3, [pc, #68]	; (8003444 <LCD_Display_Dir+0x214>)
 80033fe:	2221      	movs	r2, #33	; 0x21
 8003400:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X20;
 8003402:	4b10      	ldr	r3, [pc, #64]	; (8003444 <LCD_Display_Dir+0x214>)
 8003404:	2220      	movs	r2, #32
 8003406:	819a      	strh	r2, [r3, #12]
		}
		if(lcddev.id==0X6804||lcddev.id==0X5310)
 8003408:	4b0e      	ldr	r3, [pc, #56]	; (8003444 <LCD_Display_Dir+0x214>)
 800340a:	889b      	ldrh	r3, [r3, #4]
 800340c:	f646 0204 	movw	r2, #26628	; 0x6804
 8003410:	4293      	cmp	r3, r2
 8003412:	d005      	beq.n	8003420 <LCD_Display_Dir+0x1f0>
 8003414:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <LCD_Display_Dir+0x214>)
 8003416:	889b      	ldrh	r3, [r3, #4]
 8003418:	f245 3210 	movw	r2, #21264	; 0x5310
 800341c:	4293      	cmp	r3, r2
 800341e:	d109      	bne.n	8003434 <LCD_Display_Dir+0x204>
		{
			lcddev.width=480;
 8003420:	4b08      	ldr	r3, [pc, #32]	; (8003444 <LCD_Display_Dir+0x214>)
 8003422:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003426:	801a      	strh	r2, [r3, #0]
			lcddev.height=320;
 8003428:	4b06      	ldr	r3, [pc, #24]	; (8003444 <LCD_Display_Dir+0x214>)
 800342a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800342e:	805a      	strh	r2, [r3, #2]
 8003430:	e000      	b.n	8003434 <LCD_Display_Dir+0x204>
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 8003432:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8003434:	2000      	movs	r0, #0
 8003436:	f7ff fbb3 	bl	8002ba0 <LCD_Scan_Dir>
}
 800343a:	bf00      	nop
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	2000045c 	.word	0x2000045c

08003448 <LCD_Init>:
}
//初始化lcd
//该初始化函数可以初始化各种ILI93XX液晶,但是其他函数是基于ILI9320的!!!
//在其他型号的驱动芯片上没有测试!
void LCD_Init(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af02      	add	r7, sp, #8
	RCC->AHBENR|=1<<8;     	 	//使能FSMC时钟
 800344e:	4bab      	ldr	r3, [pc, #684]	; (80036fc <LCD_Init+0x2b4>)
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	4aaa      	ldr	r2, [pc, #680]	; (80036fc <LCD_Init+0x2b4>)
 8003454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003458:	6153      	str	r3, [r2, #20]
  	RCC->APB2ENR|=1<<3;     	//使能PORTB时钟
 800345a:	4ba8      	ldr	r3, [pc, #672]	; (80036fc <LCD_Init+0x2b4>)
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	4aa7      	ldr	r2, [pc, #668]	; (80036fc <LCD_Init+0x2b4>)
 8003460:	f043 0308 	orr.w	r3, r3, #8
 8003464:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR|=1<<5;     	//使能PORTD时钟
 8003466:	4ba5      	ldr	r3, [pc, #660]	; (80036fc <LCD_Init+0x2b4>)
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	4aa4      	ldr	r2, [pc, #656]	; (80036fc <LCD_Init+0x2b4>)
 800346c:	f043 0320 	orr.w	r3, r3, #32
 8003470:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR|=1<<6;     	//使能PORTE时钟
 8003472:	4ba2      	ldr	r3, [pc, #648]	; (80036fc <LCD_Init+0x2b4>)
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	4aa1      	ldr	r2, [pc, #644]	; (80036fc <LCD_Init+0x2b4>)
 8003478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800347c:	6193      	str	r3, [r2, #24]
 	RCC->APB2ENR|=1<<8;      	//使能PORTG时钟
 800347e:	4b9f      	ldr	r3, [pc, #636]	; (80036fc <LCD_Init+0x2b4>)
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	4a9e      	ldr	r2, [pc, #632]	; (80036fc <LCD_Init+0x2b4>)
 8003484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003488:	6193      	str	r3, [r2, #24]
	GPIOB->CRL&=0XFFFFFFF0;		//PB0 推挽输出 背光
 800348a:	4b9d      	ldr	r3, [pc, #628]	; (8003700 <LCD_Init+0x2b8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a9c      	ldr	r2, [pc, #624]	; (8003700 <LCD_Init+0x2b8>)
 8003490:	f023 030f 	bic.w	r3, r3, #15
 8003494:	6013      	str	r3, [r2, #0]
	GPIOB->CRL|=0X00000003;
 8003496:	4b9a      	ldr	r3, [pc, #616]	; (8003700 <LCD_Init+0x2b8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a99      	ldr	r2, [pc, #612]	; (8003700 <LCD_Init+0x2b8>)
 800349c:	f043 0303 	orr.w	r3, r3, #3
 80034a0:	6013      	str	r3, [r2, #0]
	//PORTD复用推挽输出
	GPIOD->CRH&=0X00FFF000;
 80034a2:	4b98      	ldr	r3, [pc, #608]	; (8003704 <LCD_Init+0x2bc>)
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	4997      	ldr	r1, [pc, #604]	; (8003704 <LCD_Init+0x2bc>)
 80034a8:	4b97      	ldr	r3, [pc, #604]	; (8003708 <LCD_Init+0x2c0>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	604b      	str	r3, [r1, #4]
	GPIOD->CRH|=0XBB000BBB;
 80034ae:	4b95      	ldr	r3, [pc, #596]	; (8003704 <LCD_Init+0x2bc>)
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	4994      	ldr	r1, [pc, #592]	; (8003704 <LCD_Init+0x2bc>)
 80034b4:	4b95      	ldr	r3, [pc, #596]	; (800370c <LCD_Init+0x2c4>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	604b      	str	r3, [r1, #4]
	GPIOD->CRL&=0XFF00FF00;
 80034ba:	4b92      	ldr	r3, [pc, #584]	; (8003704 <LCD_Init+0x2bc>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a91      	ldr	r2, [pc, #580]	; (8003704 <LCD_Init+0x2bc>)
 80034c0:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80034c4:	6013      	str	r3, [r2, #0]
	GPIOD->CRL|=0X00BB00BB;
 80034c6:	4b8f      	ldr	r3, [pc, #572]	; (8003704 <LCD_Init+0x2bc>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a8e      	ldr	r2, [pc, #568]	; (8003704 <LCD_Init+0x2bc>)
 80034cc:	f043 13bb 	orr.w	r3, r3, #12255419	; 0xbb00bb
 80034d0:	6013      	str	r3, [r2, #0]
	//PORTE复用推挽输出
	GPIOE->CRH&=0X00000000;
 80034d2:	4b8f      	ldr	r3, [pc, #572]	; (8003710 <LCD_Init+0x2c8>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	4b8e      	ldr	r3, [pc, #568]	; (8003710 <LCD_Init+0x2c8>)
 80034d8:	2200      	movs	r2, #0
 80034da:	605a      	str	r2, [r3, #4]
	GPIOE->CRH|=0XBBBBBBBB;
 80034dc:	4b8c      	ldr	r3, [pc, #560]	; (8003710 <LCD_Init+0x2c8>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	4a8b      	ldr	r2, [pc, #556]	; (8003710 <LCD_Init+0x2c8>)
 80034e2:	f043 33bb 	orr.w	r3, r3, #3149642683	; 0xbbbbbbbb
 80034e6:	6053      	str	r3, [r2, #4]
	GPIOE->CRL&=0X0FFFFFFF;
 80034e8:	4b89      	ldr	r3, [pc, #548]	; (8003710 <LCD_Init+0x2c8>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a88      	ldr	r2, [pc, #544]	; (8003710 <LCD_Init+0x2c8>)
 80034ee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80034f2:	6013      	str	r3, [r2, #0]
	GPIOE->CRL|=0XB0000000;
 80034f4:	4b86      	ldr	r3, [pc, #536]	; (8003710 <LCD_Init+0x2c8>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a85      	ldr	r2, [pc, #532]	; (8003710 <LCD_Init+0x2c8>)
 80034fa:	f043 4330 	orr.w	r3, r3, #2952790016	; 0xb0000000
 80034fe:	6013      	str	r3, [r2, #0]
	//PORTG12复用推挽输出
	GPIOG->CRH&=0XFFF0FFFF;
 8003500:	4b84      	ldr	r3, [pc, #528]	; (8003714 <LCD_Init+0x2cc>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	4a83      	ldr	r2, [pc, #524]	; (8003714 <LCD_Init+0x2cc>)
 8003506:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800350a:	6053      	str	r3, [r2, #4]
	GPIOG->CRH|=0X000B0000;
 800350c:	4b81      	ldr	r3, [pc, #516]	; (8003714 <LCD_Init+0x2cc>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	4a80      	ldr	r2, [pc, #512]	; (8003714 <LCD_Init+0x2cc>)
 8003512:	f443 2330 	orr.w	r3, r3, #720896	; 0xb0000
 8003516:	6053      	str	r3, [r2, #4]
	GPIOG->CRL&=0XFFFFFFF0;//PG0->RS
 8003518:	4b7e      	ldr	r3, [pc, #504]	; (8003714 <LCD_Init+0x2cc>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a7d      	ldr	r2, [pc, #500]	; (8003714 <LCD_Init+0x2cc>)
 800351e:	f023 030f 	bic.w	r3, r3, #15
 8003522:	6013      	str	r3, [r2, #0]
	GPIOG->CRL|=0X0000000B;
 8003524:	4b7b      	ldr	r3, [pc, #492]	; (8003714 <LCD_Init+0x2cc>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a7a      	ldr	r2, [pc, #488]	; (8003714 <LCD_Init+0x2cc>)
 800352a:	f043 030b 	orr.w	r3, r3, #11
 800352e:	6013      	str	r3, [r2, #0]

	//寄存器清零
	//bank1有NE1~4,每一个有一个BCR+TCR，所以总共八个寄存器。
	//这里我们使用NE4 ，也就对应BTCR[6],[7]。
	FSMC_Bank1->BTCR[6]=0X00000000;
 8003530:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8003534:	2200      	movs	r2, #0
 8003536:	619a      	str	r2, [r3, #24]
	FSMC_Bank1->BTCR[7]=0X00000000;
 8003538:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800353c:	2200      	movs	r2, #0
 800353e:	61da      	str	r2, [r3, #28]
	FSMC_Bank1E->BWTR[6]=0X00000000;
 8003540:	4b75      	ldr	r3, [pc, #468]	; (8003718 <LCD_Init+0x2d0>)
 8003542:	2200      	movs	r2, #0
 8003544:	619a      	str	r2, [r3, #24]
	//操作BCR寄存器	使用异步模式
	FSMC_Bank1->BTCR[6]|=1<<12;		//存储器写使能
 8003546:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8003550:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003554:	6193      	str	r3, [r2, #24]
	FSMC_Bank1->BTCR[6]|=1<<14;		//读写使用不同的时序
 8003556:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8003560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003564:	6193      	str	r3, [r2, #24]
	FSMC_Bank1->BTCR[6]|=1<<4; 		//存储器数据宽度为16bit
 8003566:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8003570:	f043 0310 	orr.w	r3, r3, #16
 8003574:	6193      	str	r3, [r2, #24]
	//操作BTR寄存器
	//读时序控制寄存器
	FSMC_Bank1->BTCR[7]|=0<<28;		//模式A
 8003576:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800357a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	61d3      	str	r3, [r2, #28]
	FSMC_Bank1->BTCR[7]|=1<<0; 		//地址建立时间（ADDSET）为2个HCLK 1/36M=27ns(实际>200ns)
 8003582:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	61d3      	str	r3, [r2, #28]
	//因为液晶驱动IC的读数据的时候，速度不能太快，尤其对1289这个IC。
	FSMC_Bank1->BTCR[7]|=0XF<<8;  	//数据保存时间为16个HCLK
 8003592:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800359c:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80035a0:	61d3      	str	r3, [r2, #28]
	//写时序控制寄存器
	FSMC_Bank1E->BWTR[6]|=0<<28; 	//模式A
 80035a2:	4b5d      	ldr	r3, [pc, #372]	; (8003718 <LCD_Init+0x2d0>)
 80035a4:	4a5c      	ldr	r2, [pc, #368]	; (8003718 <LCD_Init+0x2d0>)
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	6193      	str	r3, [r2, #24]
	FSMC_Bank1E->BWTR[6]|=0<<0;		//地址建立时间（ADDSET）为1个HCLK
 80035aa:	4b5b      	ldr	r3, [pc, #364]	; (8003718 <LCD_Init+0x2d0>)
 80035ac:	4a5a      	ldr	r2, [pc, #360]	; (8003718 <LCD_Init+0x2d0>)
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	6193      	str	r3, [r2, #24]
 	//4个HCLK（HCLK=72M）因为液晶驱动IC的写信号脉宽，最少也得50ns。72M/4=24M=55ns
	FSMC_Bank1E->BWTR[6]|=3<<8; 	//数据保存时间为4个HCLK
 80035b2:	4b59      	ldr	r3, [pc, #356]	; (8003718 <LCD_Init+0x2d0>)
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	4a58      	ldr	r2, [pc, #352]	; (8003718 <LCD_Init+0x2d0>)
 80035b8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80035bc:	6193      	str	r3, [r2, #24]
	//使能BANK1,区域4
	FSMC_Bank1->BTCR[6]|=1<<0;		//使能BANK1，区域4
 80035be:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	6193      	str	r3, [r2, #24]
	HAL_Delay(50); 					// delay 50 ms
 80035ce:	2032      	movs	r0, #50	; 0x32
 80035d0:	f003 fdc8 	bl	8007164 <HAL_Delay>
  	lcddev.id=LCD_ReadReg(0x0000);	//读ID（9320/9325/9328/4531/4535等IC）
 80035d4:	2000      	movs	r0, #0
 80035d6:	f7ff f991 	bl	80028fc <LCD_ReadReg>
 80035da:	4603      	mov	r3, r0
 80035dc:	461a      	mov	r2, r3
 80035de:	4b4f      	ldr	r3, [pc, #316]	; (800371c <LCD_Init+0x2d4>)
 80035e0:	809a      	strh	r2, [r3, #4]
  	if(lcddev.id<0XFF||lcddev.id==0XFFFF||lcddev.id==0X9300)//读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 80035e2:	4b4e      	ldr	r3, [pc, #312]	; (800371c <LCD_Init+0x2d4>)
 80035e4:	889b      	ldrh	r3, [r3, #4]
 80035e6:	2bfe      	cmp	r3, #254	; 0xfe
 80035e8:	d90b      	bls.n	8003602 <LCD_Init+0x1ba>
 80035ea:	4b4c      	ldr	r3, [pc, #304]	; (800371c <LCD_Init+0x2d4>)
 80035ec:	889b      	ldrh	r3, [r3, #4]
 80035ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d005      	beq.n	8003602 <LCD_Init+0x1ba>
 80035f6:	4b49      	ldr	r3, [pc, #292]	; (800371c <LCD_Init+0x2d4>)
 80035f8:	889b      	ldrh	r3, [r3, #4]
 80035fa:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 80035fe:	f040 80fd 	bne.w	80037fc <LCD_Init+0x3b4>
	{
 		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8003602:	20d3      	movs	r0, #211	; 0xd3
 8003604:	f7ff f936 	bl	8002874 <LCD_WR_REG>
		lcddev.id=LCD_RD_DATA();	//dummy read
 8003608:	f7ff f954 	bl	80028b4 <LCD_RD_DATA>
 800360c:	4603      	mov	r3, r0
 800360e:	461a      	mov	r2, r3
 8003610:	4b42      	ldr	r3, [pc, #264]	; (800371c <LCD_Init+0x2d4>)
 8003612:	809a      	strh	r2, [r3, #4]
 		lcddev.id=LCD_RD_DATA();	//读到0X00
 8003614:	f7ff f94e 	bl	80028b4 <LCD_RD_DATA>
 8003618:	4603      	mov	r3, r0
 800361a:	461a      	mov	r2, r3
 800361c:	4b3f      	ldr	r3, [pc, #252]	; (800371c <LCD_Init+0x2d4>)
 800361e:	809a      	strh	r2, [r3, #4]
  		lcddev.id=LCD_RD_DATA();   	//读取93
 8003620:	f7ff f948 	bl	80028b4 <LCD_RD_DATA>
 8003624:	4603      	mov	r3, r0
 8003626:	461a      	mov	r2, r3
 8003628:	4b3c      	ldr	r3, [pc, #240]	; (800371c <LCD_Init+0x2d4>)
 800362a:	809a      	strh	r2, [r3, #4]
 		lcddev.id<<=8;
 800362c:	4b3b      	ldr	r3, [pc, #236]	; (800371c <LCD_Init+0x2d4>)
 800362e:	889b      	ldrh	r3, [r3, #4]
 8003630:	021b      	lsls	r3, r3, #8
 8003632:	b29a      	uxth	r2, r3
 8003634:	4b39      	ldr	r3, [pc, #228]	; (800371c <LCD_Init+0x2d4>)
 8003636:	809a      	strh	r2, [r3, #4]
		lcddev.id|=LCD_RD_DATA();  	//读取41
 8003638:	f7ff f93c 	bl	80028b4 <LCD_RD_DATA>
 800363c:	4603      	mov	r3, r0
 800363e:	461a      	mov	r2, r3
 8003640:	4b36      	ldr	r3, [pc, #216]	; (800371c <LCD_Init+0x2d4>)
 8003642:	889b      	ldrh	r3, [r3, #4]
 8003644:	4313      	orrs	r3, r2
 8003646:	b29a      	uxth	r2, r3
 8003648:	4b34      	ldr	r3, [pc, #208]	; (800371c <LCD_Init+0x2d4>)
 800364a:	809a      	strh	r2, [r3, #4]
 		if(lcddev.id!=0X9341)		//非9341,尝试是不是6804
 800364c:	4b33      	ldr	r3, [pc, #204]	; (800371c <LCD_Init+0x2d4>)
 800364e:	889b      	ldrh	r3, [r3, #4]
 8003650:	f249 3241 	movw	r2, #37697	; 0x9341
 8003654:	4293      	cmp	r3, r2
 8003656:	f000 80d1 	beq.w	80037fc <LCD_Init+0x3b4>
		{
 			LCD_WR_REG(0XBF);
 800365a:	20bf      	movs	r0, #191	; 0xbf
 800365c:	f7ff f90a 	bl	8002874 <LCD_WR_REG>
			lcddev.id=LCD_RD_DATA(); 	//dummy read
 8003660:	f7ff f928 	bl	80028b4 <LCD_RD_DATA>
 8003664:	4603      	mov	r3, r0
 8003666:	461a      	mov	r2, r3
 8003668:	4b2c      	ldr	r3, [pc, #176]	; (800371c <LCD_Init+0x2d4>)
 800366a:	809a      	strh	r2, [r3, #4]
	 		lcddev.id=LCD_RD_DATA();   	//读回0X01
 800366c:	f7ff f922 	bl	80028b4 <LCD_RD_DATA>
 8003670:	4603      	mov	r3, r0
 8003672:	461a      	mov	r2, r3
 8003674:	4b29      	ldr	r3, [pc, #164]	; (800371c <LCD_Init+0x2d4>)
 8003676:	809a      	strh	r2, [r3, #4]
	 		lcddev.id=LCD_RD_DATA(); 	//读回0XD0
 8003678:	f7ff f91c 	bl	80028b4 <LCD_RD_DATA>
 800367c:	4603      	mov	r3, r0
 800367e:	461a      	mov	r2, r3
 8003680:	4b26      	ldr	r3, [pc, #152]	; (800371c <LCD_Init+0x2d4>)
 8003682:	809a      	strh	r2, [r3, #4]
	  		lcddev.id=LCD_RD_DATA();	//这里读回0X68
 8003684:	f7ff f916 	bl	80028b4 <LCD_RD_DATA>
 8003688:	4603      	mov	r3, r0
 800368a:	461a      	mov	r2, r3
 800368c:	4b23      	ldr	r3, [pc, #140]	; (800371c <LCD_Init+0x2d4>)
 800368e:	809a      	strh	r2, [r3, #4]
			lcddev.id<<=8;
 8003690:	4b22      	ldr	r3, [pc, #136]	; (800371c <LCD_Init+0x2d4>)
 8003692:	889b      	ldrh	r3, [r3, #4]
 8003694:	021b      	lsls	r3, r3, #8
 8003696:	b29a      	uxth	r2, r3
 8003698:	4b20      	ldr	r3, [pc, #128]	; (800371c <LCD_Init+0x2d4>)
 800369a:	809a      	strh	r2, [r3, #4]
	  		lcddev.id|=LCD_RD_DATA();	//这里读回0X04
 800369c:	f7ff f90a 	bl	80028b4 <LCD_RD_DATA>
 80036a0:	4603      	mov	r3, r0
 80036a2:	461a      	mov	r2, r3
 80036a4:	4b1d      	ldr	r3, [pc, #116]	; (800371c <LCD_Init+0x2d4>)
 80036a6:	889b      	ldrh	r3, [r3, #4]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	4b1b      	ldr	r3, [pc, #108]	; (800371c <LCD_Init+0x2d4>)
 80036ae:	809a      	strh	r2, [r3, #4]
			if(lcddev.id!=0X6804)		//也不是6804,尝试看看是不是NT35310
 80036b0:	4b1a      	ldr	r3, [pc, #104]	; (800371c <LCD_Init+0x2d4>)
 80036b2:	889b      	ldrh	r3, [r3, #4]
 80036b4:	f646 0204 	movw	r2, #26628	; 0x6804
 80036b8:	4293      	cmp	r3, r2
 80036ba:	f000 809f 	beq.w	80037fc <LCD_Init+0x3b4>
			{
				LCD_WR_REG(0XD4);
 80036be:	20d4      	movs	r0, #212	; 0xd4
 80036c0:	f7ff f8d8 	bl	8002874 <LCD_WR_REG>
				lcddev.id=LCD_RD_DATA();//dummy read
 80036c4:	f7ff f8f6 	bl	80028b4 <LCD_RD_DATA>
 80036c8:	4603      	mov	r3, r0
 80036ca:	461a      	mov	r2, r3
 80036cc:	4b13      	ldr	r3, [pc, #76]	; (800371c <LCD_Init+0x2d4>)
 80036ce:	809a      	strh	r2, [r3, #4]
				lcddev.id=LCD_RD_DATA();//读回0X01
 80036d0:	f7ff f8f0 	bl	80028b4 <LCD_RD_DATA>
 80036d4:	4603      	mov	r3, r0
 80036d6:	461a      	mov	r2, r3
 80036d8:	4b10      	ldr	r3, [pc, #64]	; (800371c <LCD_Init+0x2d4>)
 80036da:	809a      	strh	r2, [r3, #4]
				lcddev.id=LCD_RD_DATA();//读回0X53
 80036dc:	f7ff f8ea 	bl	80028b4 <LCD_RD_DATA>
 80036e0:	4603      	mov	r3, r0
 80036e2:	461a      	mov	r2, r3
 80036e4:	4b0d      	ldr	r3, [pc, #52]	; (800371c <LCD_Init+0x2d4>)
 80036e6:	809a      	strh	r2, [r3, #4]
				lcddev.id<<=8;
 80036e8:	4b0c      	ldr	r3, [pc, #48]	; (800371c <LCD_Init+0x2d4>)
 80036ea:	889b      	ldrh	r3, [r3, #4]
 80036ec:	021b      	lsls	r3, r3, #8
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	4b0a      	ldr	r3, [pc, #40]	; (800371c <LCD_Init+0x2d4>)
 80036f2:	809a      	strh	r2, [r3, #4]
				lcddev.id|=LCD_RD_DATA();	//这里读回0X10
 80036f4:	f7ff f8de 	bl	80028b4 <LCD_RD_DATA>
 80036f8:	e012      	b.n	8003720 <LCD_Init+0x2d8>
 80036fa:	bf00      	nop
 80036fc:	40021000 	.word	0x40021000
 8003700:	40010c00 	.word	0x40010c00
 8003704:	40011400 	.word	0x40011400
 8003708:	00fff000 	.word	0x00fff000
 800370c:	bb000bbb 	.word	0xbb000bbb
 8003710:	40011800 	.word	0x40011800
 8003714:	40012000 	.word	0x40012000
 8003718:	a0000104 	.word	0xa0000104
 800371c:	2000045c 	.word	0x2000045c
 8003720:	4603      	mov	r3, r0
 8003722:	461a      	mov	r2, r3
 8003724:	4bc9      	ldr	r3, [pc, #804]	; (8003a4c <LCD_Init+0x604>)
 8003726:	889b      	ldrh	r3, [r3, #4]
 8003728:	4313      	orrs	r3, r2
 800372a:	b29a      	uxth	r2, r3
 800372c:	4bc7      	ldr	r3, [pc, #796]	; (8003a4c <LCD_Init+0x604>)
 800372e:	809a      	strh	r2, [r3, #4]
				if(lcddev.id!=0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8003730:	4bc6      	ldr	r3, [pc, #792]	; (8003a4c <LCD_Init+0x604>)
 8003732:	889b      	ldrh	r3, [r3, #4]
 8003734:	f245 3210 	movw	r2, #21264	; 0x5310
 8003738:	4293      	cmp	r3, r2
 800373a:	d05f      	beq.n	80037fc <LCD_Init+0x3b4>
				{
					LCD_WR_REG(0XDA00);
 800373c:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8003740:	f7ff f898 	bl	8002874 <LCD_WR_REG>
					lcddev.id=LCD_RD_DATA();		//读回0X00
 8003744:	f7ff f8b6 	bl	80028b4 <LCD_RD_DATA>
 8003748:	4603      	mov	r3, r0
 800374a:	461a      	mov	r2, r3
 800374c:	4bbf      	ldr	r3, [pc, #764]	; (8003a4c <LCD_Init+0x604>)
 800374e:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDB00);
 8003750:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8003754:	f7ff f88e 	bl	8002874 <LCD_WR_REG>
					lcddev.id=LCD_RD_DATA();		//读回0X80
 8003758:	f7ff f8ac 	bl	80028b4 <LCD_RD_DATA>
 800375c:	4603      	mov	r3, r0
 800375e:	461a      	mov	r2, r3
 8003760:	4bba      	ldr	r3, [pc, #744]	; (8003a4c <LCD_Init+0x604>)
 8003762:	809a      	strh	r2, [r3, #4]
					lcddev.id<<=8;
 8003764:	4bb9      	ldr	r3, [pc, #740]	; (8003a4c <LCD_Init+0x604>)
 8003766:	889b      	ldrh	r3, [r3, #4]
 8003768:	021b      	lsls	r3, r3, #8
 800376a:	b29a      	uxth	r2, r3
 800376c:	4bb7      	ldr	r3, [pc, #732]	; (8003a4c <LCD_Init+0x604>)
 800376e:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8003770:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8003774:	f7ff f87e 	bl	8002874 <LCD_WR_REG>
					lcddev.id|=LCD_RD_DATA();		//读回0X00
 8003778:	f7ff f89c 	bl	80028b4 <LCD_RD_DATA>
 800377c:	4603      	mov	r3, r0
 800377e:	461a      	mov	r2, r3
 8003780:	4bb2      	ldr	r3, [pc, #712]	; (8003a4c <LCD_Init+0x604>)
 8003782:	889b      	ldrh	r3, [r3, #4]
 8003784:	4313      	orrs	r3, r2
 8003786:	b29a      	uxth	r2, r3
 8003788:	4bb0      	ldr	r3, [pc, #704]	; (8003a4c <LCD_Init+0x604>)
 800378a:	809a      	strh	r2, [r3, #4]
					if(lcddev.id==0x8000)lcddev.id=0x5510;//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 800378c:	4baf      	ldr	r3, [pc, #700]	; (8003a4c <LCD_Init+0x604>)
 800378e:	889b      	ldrh	r3, [r3, #4]
 8003790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003794:	d103      	bne.n	800379e <LCD_Init+0x356>
 8003796:	4bad      	ldr	r3, [pc, #692]	; (8003a4c <LCD_Init+0x604>)
 8003798:	f245 5210 	movw	r2, #21776	; 0x5510
 800379c:	809a      	strh	r2, [r3, #4]
					if(lcddev.id!=0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 800379e:	4bab      	ldr	r3, [pc, #684]	; (8003a4c <LCD_Init+0x604>)
 80037a0:	889b      	ldrh	r3, [r3, #4]
 80037a2:	f245 5210 	movw	r2, #21776	; 0x5510
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d028      	beq.n	80037fc <LCD_Init+0x3b4>
					{
						LCD_WR_REG(0XA1);
 80037aa:	20a1      	movs	r0, #161	; 0xa1
 80037ac:	f7ff f862 	bl	8002874 <LCD_WR_REG>
						lcddev.id=LCD_RD_DATA();
 80037b0:	f7ff f880 	bl	80028b4 <LCD_RD_DATA>
 80037b4:	4603      	mov	r3, r0
 80037b6:	461a      	mov	r2, r3
 80037b8:	4ba4      	ldr	r3, [pc, #656]	; (8003a4c <LCD_Init+0x604>)
 80037ba:	809a      	strh	r2, [r3, #4]
						lcddev.id=LCD_RD_DATA();	//读回0X57
 80037bc:	f7ff f87a 	bl	80028b4 <LCD_RD_DATA>
 80037c0:	4603      	mov	r3, r0
 80037c2:	461a      	mov	r2, r3
 80037c4:	4ba1      	ldr	r3, [pc, #644]	; (8003a4c <LCD_Init+0x604>)
 80037c6:	809a      	strh	r2, [r3, #4]
						lcddev.id<<=8;
 80037c8:	4ba0      	ldr	r3, [pc, #640]	; (8003a4c <LCD_Init+0x604>)
 80037ca:	889b      	ldrh	r3, [r3, #4]
 80037cc:	021b      	lsls	r3, r3, #8
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	4b9e      	ldr	r3, [pc, #632]	; (8003a4c <LCD_Init+0x604>)
 80037d2:	809a      	strh	r2, [r3, #4]
						lcddev.id|=LCD_RD_DATA();	//读回0X61
 80037d4:	f7ff f86e 	bl	80028b4 <LCD_RD_DATA>
 80037d8:	4603      	mov	r3, r0
 80037da:	461a      	mov	r2, r3
 80037dc:	4b9b      	ldr	r3, [pc, #620]	; (8003a4c <LCD_Init+0x604>)
 80037de:	889b      	ldrh	r3, [r3, #4]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	4b99      	ldr	r3, [pc, #612]	; (8003a4c <LCD_Init+0x604>)
 80037e6:	809a      	strh	r2, [r3, #4]
						if(lcddev.id==0X5761)lcddev.id=0X1963;//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 80037e8:	4b98      	ldr	r3, [pc, #608]	; (8003a4c <LCD_Init+0x604>)
 80037ea:	889b      	ldrh	r3, [r3, #4]
 80037ec:	f245 7261 	movw	r2, #22369	; 0x5761
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d103      	bne.n	80037fc <LCD_Init+0x3b4>
 80037f4:	4b95      	ldr	r3, [pc, #596]	; (8003a4c <LCD_Init+0x604>)
 80037f6:	f641 1263 	movw	r2, #6499	; 0x1963
 80037fa:	809a      	strh	r2, [r3, #4]
					}
				}
			}
 		}
	}
 	print(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
 80037fc:	4b93      	ldr	r3, [pc, #588]	; (8003a4c <LCD_Init+0x604>)
 80037fe:	889b      	ldrh	r3, [r3, #4]
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	4b93      	ldr	r3, [pc, #588]	; (8003a50 <LCD_Init+0x608>)
 8003804:	4a93      	ldr	r2, [pc, #588]	; (8003a54 <LCD_Init+0x60c>)
 8003806:	f44f 711d 	mov.w	r1, #628	; 0x274
 800380a:	4893      	ldr	r0, [pc, #588]	; (8003a58 <LCD_Init+0x610>)
 800380c:	f006 fc02 	bl	800a014 <iprintf>
	if(lcddev.id==0X9341)	//9341初始化
 8003810:	4b8e      	ldr	r3, [pc, #568]	; (8003a4c <LCD_Init+0x604>)
 8003812:	889b      	ldrh	r3, [r3, #4]
 8003814:	f249 3241 	movw	r2, #37697	; 0x9341
 8003818:	4293      	cmp	r3, r2
 800381a:	f040 811f 	bne.w	8003a5c <LCD_Init+0x614>
	{
		LCD_WR_REG(0xCF);
 800381e:	20cf      	movs	r0, #207	; 0xcf
 8003820:	f7ff f828 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003824:	2000      	movs	r0, #0
 8003826:	f7ff f835 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xC1);
 800382a:	20c1      	movs	r0, #193	; 0xc1
 800382c:	f7ff f832 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0X30);
 8003830:	2030      	movs	r0, #48	; 0x30
 8003832:	f7ff f82f 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0xED);
 8003836:	20ed      	movs	r0, #237	; 0xed
 8003838:	f7ff f81c 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x64);
 800383c:	2064      	movs	r0, #100	; 0x64
 800383e:	f7ff f829 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8003842:	2003      	movs	r0, #3
 8003844:	f7ff f826 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0X12);
 8003848:	2012      	movs	r0, #18
 800384a:	f7ff f823 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0X81);
 800384e:	2081      	movs	r0, #129	; 0x81
 8003850:	f7ff f820 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0xE8);
 8003854:	20e8      	movs	r0, #232	; 0xe8
 8003856:	f7ff f80d 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x85);
 800385a:	2085      	movs	r0, #133	; 0x85
 800385c:	f7ff f81a 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8003860:	2010      	movs	r0, #16
 8003862:	f7ff f817 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8003866:	207a      	movs	r0, #122	; 0x7a
 8003868:	f7ff f814 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0xCB);
 800386c:	20cb      	movs	r0, #203	; 0xcb
 800386e:	f7ff f801 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x39);
 8003872:	2039      	movs	r0, #57	; 0x39
 8003874:	f7ff f80e 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8003878:	202c      	movs	r0, #44	; 0x2c
 800387a:	f7ff f80b 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800387e:	2000      	movs	r0, #0
 8003880:	f7ff f808 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8003884:	2034      	movs	r0, #52	; 0x34
 8003886:	f7ff f805 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 800388a:	2002      	movs	r0, #2
 800388c:	f7ff f802 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0xF7);
 8003890:	20f7      	movs	r0, #247	; 0xf7
 8003892:	f7fe ffef 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8003896:	2020      	movs	r0, #32
 8003898:	f7fe fffc 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0xEA);
 800389c:	20ea      	movs	r0, #234	; 0xea
 800389e:	f7fe ffe9 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80038a2:	2000      	movs	r0, #0
 80038a4:	f7fe fff6 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80038a8:	2000      	movs	r0, #0
 80038aa:	f7fe fff3 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0xC0);    //Power control
 80038ae:	20c0      	movs	r0, #192	; 0xc0
 80038b0:	f7fe ffe0 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x1B);   //VRH[5:0]
 80038b4:	201b      	movs	r0, #27
 80038b6:	f7fe ffed 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0xC1);    //Power control
 80038ba:	20c1      	movs	r0, #193	; 0xc1
 80038bc:	f7fe ffda 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80038c0:	2001      	movs	r0, #1
 80038c2:	f7fe ffe7 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0xC5);    //VCM control
 80038c6:	20c5      	movs	r0, #197	; 0xc5
 80038c8:	f7fe ffd4 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x30); 	 //3F
 80038cc:	2030      	movs	r0, #48	; 0x30
 80038ce:	f7fe ffe1 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x30); 	 //3C
 80038d2:	2030      	movs	r0, #48	; 0x30
 80038d4:	f7fe ffde 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0xC7);    //VCM control2
 80038d8:	20c7      	movs	r0, #199	; 0xc7
 80038da:	f7fe ffcb 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0XB7);
 80038de:	20b7      	movs	r0, #183	; 0xb7
 80038e0:	f7fe ffd8 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0x36);    // Memory Access Control
 80038e4:	2036      	movs	r0, #54	; 0x36
 80038e6:	f7fe ffc5 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x48);
 80038ea:	2048      	movs	r0, #72	; 0x48
 80038ec:	f7fe ffd2 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0x3A);
 80038f0:	203a      	movs	r0, #58	; 0x3a
 80038f2:	f7fe ffbf 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x55);
 80038f6:	2055      	movs	r0, #85	; 0x55
 80038f8:	f7fe ffcc 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0xB1);
 80038fc:	20b1      	movs	r0, #177	; 0xb1
 80038fe:	f7fe ffb9 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003902:	2000      	movs	r0, #0
 8003904:	f7fe ffc6 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x1A);
 8003908:	201a      	movs	r0, #26
 800390a:	f7fe ffc3 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);    // Display Function Control
 800390e:	20b6      	movs	r0, #182	; 0xb6
 8003910:	f7fe ffb0 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 8003914:	200a      	movs	r0, #10
 8003916:	f7fe ffbd 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 800391a:	20a2      	movs	r0, #162	; 0xa2
 800391c:	f7fe ffba 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8003920:	20f2      	movs	r0, #242	; 0xf2
 8003922:	f7fe ffa7 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003926:	2000      	movs	r0, #0
 8003928:	f7fe ffb4 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0x26);    //Gamma curve selected
 800392c:	2026      	movs	r0, #38	; 0x26
 800392e:	f7fe ffa1 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8003932:	2001      	movs	r0, #1
 8003934:	f7fe ffae 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0xE0);    //Set Gamma
 8003938:	20e0      	movs	r0, #224	; 0xe0
 800393a:	f7fe ff9b 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x0F);
 800393e:	200f      	movs	r0, #15
 8003940:	f7fe ffa8 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 8003944:	202a      	movs	r0, #42	; 0x2a
 8003946:	f7fe ffa5 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x28);
 800394a:	2028      	movs	r0, #40	; 0x28
 800394c:	f7fe ffa2 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 8003950:	2008      	movs	r0, #8
 8003952:	f7fe ff9f 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x0E);
 8003956:	200e      	movs	r0, #14
 8003958:	f7fe ff9c 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 800395c:	2008      	movs	r0, #8
 800395e:	f7fe ff99 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 8003962:	2054      	movs	r0, #84	; 0x54
 8003964:	f7fe ff96 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0XA9);
 8003968:	20a9      	movs	r0, #169	; 0xa9
 800396a:	f7fe ff93 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 800396e:	2043      	movs	r0, #67	; 0x43
 8003970:	f7fe ff90 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x0A);
 8003974:	200a      	movs	r0, #10
 8003976:	f7fe ff8d 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 800397a:	200f      	movs	r0, #15
 800397c:	f7fe ff8a 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003980:	2000      	movs	r0, #0
 8003982:	f7fe ff87 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003986:	2000      	movs	r0, #0
 8003988:	f7fe ff84 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800398c:	2000      	movs	r0, #0
 800398e:	f7fe ff81 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003992:	2000      	movs	r0, #0
 8003994:	f7fe ff7e 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0XE1);    //Set Gamma
 8003998:	20e1      	movs	r0, #225	; 0xe1
 800399a:	f7fe ff6b 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800399e:	2000      	movs	r0, #0
 80039a0:	f7fe ff78 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x15);
 80039a4:	2015      	movs	r0, #21
 80039a6:	f7fe ff75 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 80039aa:	2017      	movs	r0, #23
 80039ac:	f7fe ff72 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x07);
 80039b0:	2007      	movs	r0, #7
 80039b2:	f7fe ff6f 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 80039b6:	2011      	movs	r0, #17
 80039b8:	f7fe ff6c 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x06);
 80039bc:	2006      	movs	r0, #6
 80039be:	f7fe ff69 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x2B);
 80039c2:	202b      	movs	r0, #43	; 0x2b
 80039c4:	f7fe ff66 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 80039c8:	2056      	movs	r0, #86	; 0x56
 80039ca:	f7fe ff63 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 80039ce:	203c      	movs	r0, #60	; 0x3c
 80039d0:	f7fe ff60 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 80039d4:	2005      	movs	r0, #5
 80039d6:	f7fe ff5d 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 80039da:	2010      	movs	r0, #16
 80039dc:	f7fe ff5a 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 80039e0:	200f      	movs	r0, #15
 80039e2:	f7fe ff57 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 80039e6:	203f      	movs	r0, #63	; 0x3f
 80039e8:	f7fe ff54 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 80039ec:	203f      	movs	r0, #63	; 0x3f
 80039ee:	f7fe ff51 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 80039f2:	200f      	movs	r0, #15
 80039f4:	f7fe ff4e 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0x2B);
 80039f8:	202b      	movs	r0, #43	; 0x2b
 80039fa:	f7fe ff3b 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80039fe:	2000      	movs	r0, #0
 8003a00:	f7fe ff48 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003a04:	2000      	movs	r0, #0
 8003a06:	f7fe ff45 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8003a0a:	2001      	movs	r0, #1
 8003a0c:	f7fe ff42 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x3f);
 8003a10:	203f      	movs	r0, #63	; 0x3f
 8003a12:	f7fe ff3f 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0x2A);
 8003a16:	202a      	movs	r0, #42	; 0x2a
 8003a18:	f7fe ff2c 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003a1c:	2000      	movs	r0, #0
 8003a1e:	f7fe ff39 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003a22:	2000      	movs	r0, #0
 8003a24:	f7fe ff36 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003a28:	2000      	movs	r0, #0
 8003a2a:	f7fe ff33 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xef);
 8003a2e:	20ef      	movs	r0, #239	; 0xef
 8003a30:	f7fe ff30 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0x11); //Exit Sleep
 8003a34:	2011      	movs	r0, #17
 8003a36:	f7fe ff1d 	bl	8002874 <LCD_WR_REG>
		HAL_Delay(20);
 8003a3a:	2014      	movs	r0, #20
 8003a3c:	f003 fb92 	bl	8007164 <HAL_Delay>
		LCD_WR_REG(0x29); //display on
 8003a40:	2029      	movs	r0, #41	; 0x29
 8003a42:	f7fe ff17 	bl	8002874 <LCD_WR_REG>
 8003a46:	f003 b928 	b.w	8006c9a <LCD_Init+0x3852>
 8003a4a:	bf00      	nop
 8003a4c:	2000045c 	.word	0x2000045c
 8003a50:	0801ab24 	.word	0x0801ab24
 8003a54:	0800dde0 	.word	0x0800dde0
 8003a58:	0800ddf8 	.word	0x0800ddf8
	}else if(lcddev.id==0x6804) //6804初始化
 8003a5c:	4b58      	ldr	r3, [pc, #352]	; (8003bc0 <LCD_Init+0x778>)
 8003a5e:	889b      	ldrh	r3, [r3, #4]
 8003a60:	f646 0204 	movw	r2, #26628	; 0x6804
 8003a64:	4293      	cmp	r3, r2
 8003a66:	f040 80ad 	bne.w	8003bc4 <LCD_Init+0x77c>
	{
		LCD_WR_REG(0X11);
 8003a6a:	2011      	movs	r0, #17
 8003a6c:	f7fe ff02 	bl	8002874 <LCD_WR_REG>
		HAL_Delay(20);
 8003a70:	2014      	movs	r0, #20
 8003a72:	f003 fb77 	bl	8007164 <HAL_Delay>
		LCD_WR_REG(0XD0);//VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8003a76:	20d0      	movs	r0, #208	; 0xd0
 8003a78:	f7fe fefc 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0X07);
 8003a7c:	2007      	movs	r0, #7
 8003a7e:	f7fe ff09 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0X42);
 8003a82:	2042      	movs	r0, #66	; 0x42
 8003a84:	f7fe ff06 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0X1D);
 8003a88:	201d      	movs	r0, #29
 8003a8a:	f7fe ff03 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0XD1);//VCOMH VCOM_AC amplitude setting
 8003a8e:	20d1      	movs	r0, #209	; 0xd1
 8003a90:	f7fe fef0 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8003a94:	2000      	movs	r0, #0
 8003a96:	f7fe fefd 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0X1a);
 8003a9a:	201a      	movs	r0, #26
 8003a9c:	f7fe fefa 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0X09);
 8003aa0:	2009      	movs	r0, #9
 8003aa2:	f7fe fef7 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0XD2);//Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8003aa6:	20d2      	movs	r0, #210	; 0xd2
 8003aa8:	f7fe fee4 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0X01);
 8003aac:	2001      	movs	r0, #1
 8003aae:	f7fe fef1 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0X22);
 8003ab2:	2022      	movs	r0, #34	; 0x22
 8003ab4:	f7fe feee 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0XC0);//REV SM GS
 8003ab8:	20c0      	movs	r0, #192	; 0xc0
 8003aba:	f7fe fedb 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0X10);
 8003abe:	2010      	movs	r0, #16
 8003ac0:	f7fe fee8 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0X3B);
 8003ac4:	203b      	movs	r0, #59	; 0x3b
 8003ac6:	f7fe fee5 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8003aca:	2000      	movs	r0, #0
 8003acc:	f7fe fee2 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0X02);
 8003ad0:	2002      	movs	r0, #2
 8003ad2:	f7fe fedf 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0X11);
 8003ad6:	2011      	movs	r0, #17
 8003ad8:	f7fe fedc 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0XC5);// Frame rate setting = 72HZ  when setting 0x03
 8003adc:	20c5      	movs	r0, #197	; 0xc5
 8003ade:	f7fe fec9 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0X03);
 8003ae2:	2003      	movs	r0, #3
 8003ae4:	f7fe fed6 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0XC8);//Gamma setting
 8003ae8:	20c8      	movs	r0, #200	; 0xc8
 8003aea:	f7fe fec3 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8003aee:	2000      	movs	r0, #0
 8003af0:	f7fe fed0 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0X25);
 8003af4:	2025      	movs	r0, #37	; 0x25
 8003af6:	f7fe fecd 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0X21);
 8003afa:	2021      	movs	r0, #33	; 0x21
 8003afc:	f7fe feca 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0X05);
 8003b00:	2005      	movs	r0, #5
 8003b02:	f7fe fec7 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8003b06:	2000      	movs	r0, #0
 8003b08:	f7fe fec4 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0X0a);
 8003b0c:	200a      	movs	r0, #10
 8003b0e:	f7fe fec1 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0X65);
 8003b12:	2065      	movs	r0, #101	; 0x65
 8003b14:	f7fe febe 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0X25);
 8003b18:	2025      	movs	r0, #37	; 0x25
 8003b1a:	f7fe febb 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0X77);
 8003b1e:	2077      	movs	r0, #119	; 0x77
 8003b20:	f7fe feb8 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0X50);
 8003b24:	2050      	movs	r0, #80	; 0x50
 8003b26:	f7fe feb5 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0X0f);
 8003b2a:	200f      	movs	r0, #15
 8003b2c:	f7fe feb2 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8003b30:	2000      	movs	r0, #0
 8003b32:	f7fe feaf 	bl	8002894 <LCD_WR_DATA>

   		LCD_WR_REG(0XF8);
 8003b36:	20f8      	movs	r0, #248	; 0xf8
 8003b38:	f7fe fe9c 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0X01);
 8003b3c:	2001      	movs	r0, #1
 8003b3e:	f7fe fea9 	bl	8002894 <LCD_WR_DATA>

 		LCD_WR_REG(0XFE);
 8003b42:	20fe      	movs	r0, #254	; 0xfe
 8003b44:	f7fe fe96 	bl	8002874 <LCD_WR_REG>
 		LCD_WR_DATA(0X00);
 8003b48:	2000      	movs	r0, #0
 8003b4a:	f7fe fea3 	bl	8002894 <LCD_WR_DATA>
 		LCD_WR_DATA(0X02);
 8003b4e:	2002      	movs	r0, #2
 8003b50:	f7fe fea0 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0X20);//Exit invert mode
 8003b54:	2020      	movs	r0, #32
 8003b56:	f7fe fe8d 	bl	8002874 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 8003b5a:	2036      	movs	r0, #54	; 0x36
 8003b5c:	f7fe fe8a 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0X08);//原来是a
 8003b60:	2008      	movs	r0, #8
 8003b62:	f7fe fe97 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0X3A);
 8003b66:	203a      	movs	r0, #58	; 0x3a
 8003b68:	f7fe fe84 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0X55);//16位模式
 8003b6c:	2055      	movs	r0, #85	; 0x55
 8003b6e:	f7fe fe91 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0X2B);
 8003b72:	202b      	movs	r0, #43	; 0x2b
 8003b74:	f7fe fe7e 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8003b78:	2000      	movs	r0, #0
 8003b7a:	f7fe fe8b 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8003b7e:	2000      	movs	r0, #0
 8003b80:	f7fe fe88 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0X01);
 8003b84:	2001      	movs	r0, #1
 8003b86:	f7fe fe85 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0X3F);
 8003b8a:	203f      	movs	r0, #63	; 0x3f
 8003b8c:	f7fe fe82 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0X2A);
 8003b90:	202a      	movs	r0, #42	; 0x2a
 8003b92:	f7fe fe6f 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8003b96:	2000      	movs	r0, #0
 8003b98:	f7fe fe7c 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	f7fe fe79 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0X01);
 8003ba2:	2001      	movs	r0, #1
 8003ba4:	f7fe fe76 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0XDF);
 8003ba8:	20df      	movs	r0, #223	; 0xdf
 8003baa:	f7fe fe73 	bl	8002894 <LCD_WR_DATA>
		HAL_Delay(120);
 8003bae:	2078      	movs	r0, #120	; 0x78
 8003bb0:	f003 fad8 	bl	8007164 <HAL_Delay>
		LCD_WR_REG(0X29);
 8003bb4:	2029      	movs	r0, #41	; 0x29
 8003bb6:	f7fe fe5d 	bl	8002874 <LCD_WR_REG>
 8003bba:	f003 b86e 	b.w	8006c9a <LCD_Init+0x3852>
 8003bbe:	bf00      	nop
 8003bc0:	2000045c 	.word	0x2000045c
 	}else if(lcddev.id==0x5310)
 8003bc4:	4b03      	ldr	r3, [pc, #12]	; (8003bd4 <LCD_Init+0x78c>)
 8003bc6:	889b      	ldrh	r3, [r3, #4]
 8003bc8:	f245 3210 	movw	r2, #21264	; 0x5310
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	f040 877c 	bne.w	8004aca <LCD_Init+0x1682>
 8003bd2:	e001      	b.n	8003bd8 <LCD_Init+0x790>
 8003bd4:	2000045c 	.word	0x2000045c
	{
		LCD_WR_REG(0xED);
 8003bd8:	20ed      	movs	r0, #237	; 0xed
 8003bda:	f7fe fe4b 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8003bde:	2001      	movs	r0, #1
 8003be0:	f7fe fe58 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);
 8003be4:	20fe      	movs	r0, #254	; 0xfe
 8003be6:	f7fe fe55 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xEE);
 8003bea:	20ee      	movs	r0, #238	; 0xee
 8003bec:	f7fe fe42 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0xDE);
 8003bf0:	20de      	movs	r0, #222	; 0xde
 8003bf2:	f7fe fe4f 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8003bf6:	2021      	movs	r0, #33	; 0x21
 8003bf8:	f7fe fe4c 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xF1);
 8003bfc:	20f1      	movs	r0, #241	; 0xf1
 8003bfe:	f7fe fe39 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8003c02:	2001      	movs	r0, #1
 8003c04:	f7fe fe46 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0xDF);
 8003c08:	20df      	movs	r0, #223	; 0xdf
 8003c0a:	f7fe fe33 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x10);
 8003c0e:	2010      	movs	r0, #16
 8003c10:	f7fe fe40 	bl	8002894 <LCD_WR_DATA>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 8003c14:	20c4      	movs	r0, #196	; 0xc4
 8003c16:	f7fe fe2d 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x8F);	  //5f
 8003c1a:	208f      	movs	r0, #143	; 0x8f
 8003c1c:	f7fe fe3a 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 8003c20:	20c6      	movs	r0, #198	; 0xc6
 8003c22:	f7fe fe27 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003c26:	2000      	movs	r0, #0
 8003c28:	f7fe fe34 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8003c2c:	20e2      	movs	r0, #226	; 0xe2
 8003c2e:	f7fe fe31 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8003c32:	20e2      	movs	r0, #226	; 0xe2
 8003c34:	f7fe fe2e 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8003c38:	20e2      	movs	r0, #226	; 0xe2
 8003c3a:	f7fe fe2b 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0xBF);
 8003c3e:	20bf      	movs	r0, #191	; 0xbf
 8003c40:	f7fe fe18 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8003c44:	20aa      	movs	r0, #170	; 0xaa
 8003c46:	f7fe fe25 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);
 8003c4a:	20b0      	movs	r0, #176	; 0xb0
 8003c4c:	f7fe fe12 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x0D);
 8003c50:	200d      	movs	r0, #13
 8003c52:	f7fe fe1f 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c56:	2000      	movs	r0, #0
 8003c58:	f7fe fe1c 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x0D);
 8003c5c:	200d      	movs	r0, #13
 8003c5e:	f7fe fe19 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c62:	2000      	movs	r0, #0
 8003c64:	f7fe fe16 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 8003c68:	2011      	movs	r0, #17
 8003c6a:	f7fe fe13 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c6e:	2000      	movs	r0, #0
 8003c70:	f7fe fe10 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x19);
 8003c74:	2019      	movs	r0, #25
 8003c76:	f7fe fe0d 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	f7fe fe0a 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8003c80:	2021      	movs	r0, #33	; 0x21
 8003c82:	f7fe fe07 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c86:	2000      	movs	r0, #0
 8003c88:	f7fe fe04 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x2D);
 8003c8c:	202d      	movs	r0, #45	; 0x2d
 8003c8e:	f7fe fe01 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c92:	2000      	movs	r0, #0
 8003c94:	f7fe fdfe 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x3D);
 8003c98:	203d      	movs	r0, #61	; 0x3d
 8003c9a:	f7fe fdfb 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c9e:	2000      	movs	r0, #0
 8003ca0:	f7fe fdf8 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8003ca4:	205d      	movs	r0, #93	; 0x5d
 8003ca6:	f7fe fdf5 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003caa:	2000      	movs	r0, #0
 8003cac:	f7fe fdf2 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8003cb0:	205d      	movs	r0, #93	; 0x5d
 8003cb2:	f7fe fdef 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003cb6:	2000      	movs	r0, #0
 8003cb8:	f7fe fdec 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xB1);
 8003cbc:	20b1      	movs	r0, #177	; 0xb1
 8003cbe:	f7fe fdd9 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x80);
 8003cc2:	2080      	movs	r0, #128	; 0x80
 8003cc4:	f7fe fde6 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003cc8:	2000      	movs	r0, #0
 8003cca:	f7fe fde3 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 8003cce:	208b      	movs	r0, #139	; 0x8b
 8003cd0:	f7fe fde0 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	f7fe fddd 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 8003cda:	2096      	movs	r0, #150	; 0x96
 8003cdc:	f7fe fdda 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	f7fe fdd7 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xB2);
 8003ce6:	20b2      	movs	r0, #178	; 0xb2
 8003ce8:	f7fe fdc4 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003cec:	2000      	movs	r0, #0
 8003cee:	f7fe fdd1 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003cf2:	2000      	movs	r0, #0
 8003cf4:	f7fe fdce 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8003cf8:	2002      	movs	r0, #2
 8003cfa:	f7fe fdcb 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003cfe:	2000      	movs	r0, #0
 8003d00:	f7fe fdc8 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8003d04:	2003      	movs	r0, #3
 8003d06:	f7fe fdc5 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d0a:	2000      	movs	r0, #0
 8003d0c:	f7fe fdc2 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xB3);
 8003d10:	20b3      	movs	r0, #179	; 0xb3
 8003d12:	f7fe fdaf 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003d16:	2000      	movs	r0, #0
 8003d18:	f7fe fdbc 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d1c:	2000      	movs	r0, #0
 8003d1e:	f7fe fdb9 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d22:	2000      	movs	r0, #0
 8003d24:	f7fe fdb6 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d28:	2000      	movs	r0, #0
 8003d2a:	f7fe fdb3 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d2e:	2000      	movs	r0, #0
 8003d30:	f7fe fdb0 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d34:	2000      	movs	r0, #0
 8003d36:	f7fe fdad 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d3a:	2000      	movs	r0, #0
 8003d3c:	f7fe fdaa 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d40:	2000      	movs	r0, #0
 8003d42:	f7fe fda7 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d46:	2000      	movs	r0, #0
 8003d48:	f7fe fda4 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	f7fe fda1 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d52:	2000      	movs	r0, #0
 8003d54:	f7fe fd9e 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d58:	2000      	movs	r0, #0
 8003d5a:	f7fe fd9b 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d5e:	2000      	movs	r0, #0
 8003d60:	f7fe fd98 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d64:	2000      	movs	r0, #0
 8003d66:	f7fe fd95 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d6a:	2000      	movs	r0, #0
 8003d6c:	f7fe fd92 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d70:	2000      	movs	r0, #0
 8003d72:	f7fe fd8f 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d76:	2000      	movs	r0, #0
 8003d78:	f7fe fd8c 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	f7fe fd89 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d82:	2000      	movs	r0, #0
 8003d84:	f7fe fd86 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d88:	2000      	movs	r0, #0
 8003d8a:	f7fe fd83 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d8e:	2000      	movs	r0, #0
 8003d90:	f7fe fd80 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d94:	2000      	movs	r0, #0
 8003d96:	f7fe fd7d 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d9a:	2000      	movs	r0, #0
 8003d9c:	f7fe fd7a 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003da0:	2000      	movs	r0, #0
 8003da2:	f7fe fd77 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);
 8003da6:	20b4      	movs	r0, #180	; 0xb4
 8003da8:	f7fe fd64 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x8B);
 8003dac:	208b      	movs	r0, #139	; 0x8b
 8003dae:	f7fe fd71 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003db2:	2000      	movs	r0, #0
 8003db4:	f7fe fd6e 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 8003db8:	2096      	movs	r0, #150	; 0x96
 8003dba:	f7fe fd6b 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	f7fe fd68 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xA1);
 8003dc4:	20a1      	movs	r0, #161	; 0xa1
 8003dc6:	f7fe fd65 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003dca:	2000      	movs	r0, #0
 8003dcc:	f7fe fd62 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xB5);
 8003dd0:	20b5      	movs	r0, #181	; 0xb5
 8003dd2:	f7fe fd4f 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x02);
 8003dd6:	2002      	movs	r0, #2
 8003dd8:	f7fe fd5c 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ddc:	2000      	movs	r0, #0
 8003dde:	f7fe fd59 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8003de2:	2003      	movs	r0, #3
 8003de4:	f7fe fd56 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003de8:	2000      	movs	r0, #0
 8003dea:	f7fe fd53 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 8003dee:	2004      	movs	r0, #4
 8003df0:	f7fe fd50 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003df4:	2000      	movs	r0, #0
 8003df6:	f7fe fd4d 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xB6);
 8003dfa:	20b6      	movs	r0, #182	; 0xb6
 8003dfc:	f7fe fd3a 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003e00:	2000      	movs	r0, #0
 8003e02:	f7fe fd47 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e06:	2000      	movs	r0, #0
 8003e08:	f7fe fd44 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xB7);
 8003e0c:	20b7      	movs	r0, #183	; 0xb7
 8003e0e:	f7fe fd31 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003e12:	2000      	movs	r0, #0
 8003e14:	f7fe fd3e 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e18:	2000      	movs	r0, #0
 8003e1a:	f7fe fd3b 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8003e1e:	203f      	movs	r0, #63	; 0x3f
 8003e20:	f7fe fd38 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e24:	2000      	movs	r0, #0
 8003e26:	f7fe fd35 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x5E);
 8003e2a:	205e      	movs	r0, #94	; 0x5e
 8003e2c:	f7fe fd32 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e30:	2000      	movs	r0, #0
 8003e32:	f7fe fd2f 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8003e36:	2064      	movs	r0, #100	; 0x64
 8003e38:	f7fe fd2c 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e3c:	2000      	movs	r0, #0
 8003e3e:	f7fe fd29 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x8C);
 8003e42:	208c      	movs	r0, #140	; 0x8c
 8003e44:	f7fe fd26 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e48:	2000      	movs	r0, #0
 8003e4a:	f7fe fd23 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xAC);
 8003e4e:	20ac      	movs	r0, #172	; 0xac
 8003e50:	f7fe fd20 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e54:	2000      	movs	r0, #0
 8003e56:	f7fe fd1d 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8003e5a:	20dc      	movs	r0, #220	; 0xdc
 8003e5c:	f7fe fd1a 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e60:	2000      	movs	r0, #0
 8003e62:	f7fe fd17 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x70);
 8003e66:	2070      	movs	r0, #112	; 0x70
 8003e68:	f7fe fd14 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e6c:	2000      	movs	r0, #0
 8003e6e:	f7fe fd11 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x90);
 8003e72:	2090      	movs	r0, #144	; 0x90
 8003e74:	f7fe fd0e 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e78:	2000      	movs	r0, #0
 8003e7a:	f7fe fd0b 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xEB);
 8003e7e:	20eb      	movs	r0, #235	; 0xeb
 8003e80:	f7fe fd08 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e84:	2000      	movs	r0, #0
 8003e86:	f7fe fd05 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8003e8a:	20dc      	movs	r0, #220	; 0xdc
 8003e8c:	f7fe fd02 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e90:	2000      	movs	r0, #0
 8003e92:	f7fe fcff 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);
 8003e96:	20b8      	movs	r0, #184	; 0xb8
 8003e98:	f7fe fcec 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003e9c:	2000      	movs	r0, #0
 8003e9e:	f7fe fcf9 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ea2:	2000      	movs	r0, #0
 8003ea4:	f7fe fcf6 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	f7fe fcf3 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003eae:	2000      	movs	r0, #0
 8003eb0:	f7fe fcf0 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	f7fe fced 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003eba:	2000      	movs	r0, #0
 8003ebc:	f7fe fcea 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	f7fe fce7 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	f7fe fce4 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xBA);
 8003ecc:	20ba      	movs	r0, #186	; 0xba
 8003ece:	f7fe fcd1 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x24);
 8003ed2:	2024      	movs	r0, #36	; 0x24
 8003ed4:	f7fe fcde 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ed8:	2000      	movs	r0, #0
 8003eda:	f7fe fcdb 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ede:	2000      	movs	r0, #0
 8003ee0:	f7fe fcd8 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ee4:	2000      	movs	r0, #0
 8003ee6:	f7fe fcd5 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xC1);
 8003eea:	20c1      	movs	r0, #193	; 0xc1
 8003eec:	f7fe fcc2 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8003ef0:	2020      	movs	r0, #32
 8003ef2:	f7fe fccf 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ef6:	2000      	movs	r0, #0
 8003ef8:	f7fe fccc 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 8003efc:	2054      	movs	r0, #84	; 0x54
 8003efe:	f7fe fcc9 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f02:	2000      	movs	r0, #0
 8003f04:	f7fe fcc6 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8003f08:	20ff      	movs	r0, #255	; 0xff
 8003f0a:	f7fe fcc3 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f0e:	2000      	movs	r0, #0
 8003f10:	f7fe fcc0 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xC2);
 8003f14:	20c2      	movs	r0, #194	; 0xc2
 8003f16:	f7fe fcad 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 8003f1a:	200a      	movs	r0, #10
 8003f1c:	f7fe fcba 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f20:	2000      	movs	r0, #0
 8003f22:	f7fe fcb7 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 8003f26:	2004      	movs	r0, #4
 8003f28:	f7fe fcb4 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f2c:	2000      	movs	r0, #0
 8003f2e:	f7fe fcb1 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xC3);
 8003f32:	20c3      	movs	r0, #195	; 0xc3
 8003f34:	f7fe fc9e 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x3C);
 8003f38:	203c      	movs	r0, #60	; 0x3c
 8003f3a:	f7fe fcab 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f3e:	2000      	movs	r0, #0
 8003f40:	f7fe fca8 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x3A);
 8003f44:	203a      	movs	r0, #58	; 0x3a
 8003f46:	f7fe fca5 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	f7fe fca2 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x39);
 8003f50:	2039      	movs	r0, #57	; 0x39
 8003f52:	f7fe fc9f 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f56:	2000      	movs	r0, #0
 8003f58:	f7fe fc9c 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x37);
 8003f5c:	2037      	movs	r0, #55	; 0x37
 8003f5e:	f7fe fc99 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f62:	2000      	movs	r0, #0
 8003f64:	f7fe fc96 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8003f68:	203c      	movs	r0, #60	; 0x3c
 8003f6a:	f7fe fc93 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f6e:	2000      	movs	r0, #0
 8003f70:	f7fe fc90 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8003f74:	2036      	movs	r0, #54	; 0x36
 8003f76:	f7fe fc8d 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	f7fe fc8a 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 8003f80:	2032      	movs	r0, #50	; 0x32
 8003f82:	f7fe fc87 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f86:	2000      	movs	r0, #0
 8003f88:	f7fe fc84 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 8003f8c:	202f      	movs	r0, #47	; 0x2f
 8003f8e:	f7fe fc81 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f92:	2000      	movs	r0, #0
 8003f94:	f7fe fc7e 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8003f98:	202c      	movs	r0, #44	; 0x2c
 8003f9a:	f7fe fc7b 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	f7fe fc78 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8003fa4:	2029      	movs	r0, #41	; 0x29
 8003fa6:	f7fe fc75 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003faa:	2000      	movs	r0, #0
 8003fac:	f7fe fc72 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 8003fb0:	2026      	movs	r0, #38	; 0x26
 8003fb2:	f7fe fc6f 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003fb6:	2000      	movs	r0, #0
 8003fb8:	f7fe fc6c 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8003fbc:	2024      	movs	r0, #36	; 0x24
 8003fbe:	f7fe fc69 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003fc2:	2000      	movs	r0, #0
 8003fc4:	f7fe fc66 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8003fc8:	2024      	movs	r0, #36	; 0x24
 8003fca:	f7fe fc63 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003fce:	2000      	movs	r0, #0
 8003fd0:	f7fe fc60 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8003fd4:	2023      	movs	r0, #35	; 0x23
 8003fd6:	f7fe fc5d 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003fda:	2000      	movs	r0, #0
 8003fdc:	f7fe fc5a 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8003fe0:	203c      	movs	r0, #60	; 0x3c
 8003fe2:	f7fe fc57 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003fe6:	2000      	movs	r0, #0
 8003fe8:	f7fe fc54 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8003fec:	2036      	movs	r0, #54	; 0x36
 8003fee:	f7fe fc51 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ff2:	2000      	movs	r0, #0
 8003ff4:	f7fe fc4e 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 8003ff8:	2032      	movs	r0, #50	; 0x32
 8003ffa:	f7fe fc4b 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ffe:	2000      	movs	r0, #0
 8004000:	f7fe fc48 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 8004004:	202f      	movs	r0, #47	; 0x2f
 8004006:	f7fe fc45 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800400a:	2000      	movs	r0, #0
 800400c:	f7fe fc42 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8004010:	202c      	movs	r0, #44	; 0x2c
 8004012:	f7fe fc3f 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004016:	2000      	movs	r0, #0
 8004018:	f7fe fc3c 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 800401c:	2029      	movs	r0, #41	; 0x29
 800401e:	f7fe fc39 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004022:	2000      	movs	r0, #0
 8004024:	f7fe fc36 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 8004028:	2026      	movs	r0, #38	; 0x26
 800402a:	f7fe fc33 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800402e:	2000      	movs	r0, #0
 8004030:	f7fe fc30 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8004034:	2024      	movs	r0, #36	; 0x24
 8004036:	f7fe fc2d 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800403a:	2000      	movs	r0, #0
 800403c:	f7fe fc2a 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8004040:	2024      	movs	r0, #36	; 0x24
 8004042:	f7fe fc27 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004046:	2000      	movs	r0, #0
 8004048:	f7fe fc24 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 800404c:	2023      	movs	r0, #35	; 0x23
 800404e:	f7fe fc21 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004052:	2000      	movs	r0, #0
 8004054:	f7fe fc1e 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xC4);
 8004058:	20c4      	movs	r0, #196	; 0xc4
 800405a:	f7fe fc0b 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x62);
 800405e:	2062      	movs	r0, #98	; 0x62
 8004060:	f7fe fc18 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004064:	2000      	movs	r0, #0
 8004066:	f7fe fc15 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 800406a:	2005      	movs	r0, #5
 800406c:	f7fe fc12 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004070:	2000      	movs	r0, #0
 8004072:	f7fe fc0f 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8004076:	2084      	movs	r0, #132	; 0x84
 8004078:	f7fe fc0c 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800407c:	2000      	movs	r0, #0
 800407e:	f7fe fc09 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xF0);
 8004082:	20f0      	movs	r0, #240	; 0xf0
 8004084:	f7fe fc06 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004088:	2000      	movs	r0, #0
 800408a:	f7fe fc03 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 800408e:	2018      	movs	r0, #24
 8004090:	f7fe fc00 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004094:	2000      	movs	r0, #0
 8004096:	f7fe fbfd 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xA4);
 800409a:	20a4      	movs	r0, #164	; 0xa4
 800409c:	f7fe fbfa 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80040a0:	2000      	movs	r0, #0
 80040a2:	f7fe fbf7 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 80040a6:	2018      	movs	r0, #24
 80040a8:	f7fe fbf4 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80040ac:	2000      	movs	r0, #0
 80040ae:	f7fe fbf1 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 80040b2:	2050      	movs	r0, #80	; 0x50
 80040b4:	f7fe fbee 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80040b8:	2000      	movs	r0, #0
 80040ba:	f7fe fbeb 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x0C);
 80040be:	200c      	movs	r0, #12
 80040c0:	f7fe fbe8 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80040c4:	2000      	movs	r0, #0
 80040c6:	f7fe fbe5 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 80040ca:	2017      	movs	r0, #23
 80040cc:	f7fe fbe2 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80040d0:	2000      	movs	r0, #0
 80040d2:	f7fe fbdf 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x95);
 80040d6:	2095      	movs	r0, #149	; 0x95
 80040d8:	f7fe fbdc 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80040dc:	2000      	movs	r0, #0
 80040de:	f7fe fbd9 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80040e2:	20f3      	movs	r0, #243	; 0xf3
 80040e4:	f7fe fbd6 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80040e8:	2000      	movs	r0, #0
 80040ea:	f7fe fbd3 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xE6);
 80040ee:	20e6      	movs	r0, #230	; 0xe6
 80040f0:	f7fe fbd0 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80040f4:	2000      	movs	r0, #0
 80040f6:	f7fe fbcd 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xC5);
 80040fa:	20c5      	movs	r0, #197	; 0xc5
 80040fc:	f7fe fbba 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 8004100:	2032      	movs	r0, #50	; 0x32
 8004102:	f7fe fbc7 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004106:	2000      	movs	r0, #0
 8004108:	f7fe fbc4 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 800410c:	2044      	movs	r0, #68	; 0x44
 800410e:	f7fe fbc1 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004112:	2000      	movs	r0, #0
 8004114:	f7fe fbbe 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x65);
 8004118:	2065      	movs	r0, #101	; 0x65
 800411a:	f7fe fbbb 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800411e:	2000      	movs	r0, #0
 8004120:	f7fe fbb8 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8004124:	2076      	movs	r0, #118	; 0x76
 8004126:	f7fe fbb5 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800412a:	2000      	movs	r0, #0
 800412c:	f7fe fbb2 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8004130:	2088      	movs	r0, #136	; 0x88
 8004132:	f7fe fbaf 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004136:	2000      	movs	r0, #0
 8004138:	f7fe fbac 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 800413c:	20c6      	movs	r0, #198	; 0xc6
 800413e:	f7fe fb99 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8004142:	2020      	movs	r0, #32
 8004144:	f7fe fba6 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004148:	2000      	movs	r0, #0
 800414a:	f7fe fba3 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 800414e:	2017      	movs	r0, #23
 8004150:	f7fe fba0 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004154:	2000      	movs	r0, #0
 8004156:	f7fe fb9d 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 800415a:	2001      	movs	r0, #1
 800415c:	f7fe fb9a 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004160:	2000      	movs	r0, #0
 8004162:	f7fe fb97 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xC7);
 8004166:	20c7      	movs	r0, #199	; 0xc7
 8004168:	f7fe fb84 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800416c:	2000      	movs	r0, #0
 800416e:	f7fe fb91 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004172:	2000      	movs	r0, #0
 8004174:	f7fe fb8e 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004178:	2000      	movs	r0, #0
 800417a:	f7fe fb8b 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800417e:	2000      	movs	r0, #0
 8004180:	f7fe fb88 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xC8);
 8004184:	20c8      	movs	r0, #200	; 0xc8
 8004186:	f7fe fb75 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800418a:	2000      	movs	r0, #0
 800418c:	f7fe fb82 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004190:	2000      	movs	r0, #0
 8004192:	f7fe fb7f 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004196:	2000      	movs	r0, #0
 8004198:	f7fe fb7c 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800419c:	2000      	movs	r0, #0
 800419e:	f7fe fb79 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xC9);
 80041a2:	20c9      	movs	r0, #201	; 0xc9
 80041a4:	f7fe fb66 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80041a8:	2000      	movs	r0, #0
 80041aa:	f7fe fb73 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80041ae:	2000      	movs	r0, #0
 80041b0:	f7fe fb70 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80041b4:	2000      	movs	r0, #0
 80041b6:	f7fe fb6d 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80041ba:	2000      	movs	r0, #0
 80041bc:	f7fe fb6a 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80041c0:	2000      	movs	r0, #0
 80041c2:	f7fe fb67 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80041c6:	2000      	movs	r0, #0
 80041c8:	f7fe fb64 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80041cc:	2000      	movs	r0, #0
 80041ce:	f7fe fb61 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80041d2:	2000      	movs	r0, #0
 80041d4:	f7fe fb5e 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80041d8:	2000      	movs	r0, #0
 80041da:	f7fe fb5b 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80041de:	2000      	movs	r0, #0
 80041e0:	f7fe fb58 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80041e4:	2000      	movs	r0, #0
 80041e6:	f7fe fb55 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80041ea:	2000      	movs	r0, #0
 80041ec:	f7fe fb52 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80041f0:	2000      	movs	r0, #0
 80041f2:	f7fe fb4f 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80041f6:	2000      	movs	r0, #0
 80041f8:	f7fe fb4c 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80041fc:	2000      	movs	r0, #0
 80041fe:	f7fe fb49 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004202:	2000      	movs	r0, #0
 8004204:	f7fe fb46 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xE0);
 8004208:	20e0      	movs	r0, #224	; 0xe0
 800420a:	f7fe fb33 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 800420e:	2016      	movs	r0, #22
 8004210:	f7fe fb40 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004214:	2000      	movs	r0, #0
 8004216:	f7fe fb3d 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 800421a:	201c      	movs	r0, #28
 800421c:	f7fe fb3a 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004220:	2000      	movs	r0, #0
 8004222:	f7fe fb37 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8004226:	2021      	movs	r0, #33	; 0x21
 8004228:	f7fe fb34 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800422c:	2000      	movs	r0, #0
 800422e:	f7fe fb31 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8004232:	2036      	movs	r0, #54	; 0x36
 8004234:	f7fe fb2e 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004238:	2000      	movs	r0, #0
 800423a:	f7fe fb2b 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x46);
 800423e:	2046      	movs	r0, #70	; 0x46
 8004240:	f7fe fb28 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004244:	2000      	movs	r0, #0
 8004246:	f7fe fb25 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 800424a:	2052      	movs	r0, #82	; 0x52
 800424c:	f7fe fb22 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004250:	2000      	movs	r0, #0
 8004252:	f7fe fb1f 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8004256:	2064      	movs	r0, #100	; 0x64
 8004258:	f7fe fb1c 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800425c:	2000      	movs	r0, #0
 800425e:	f7fe fb19 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8004262:	207a      	movs	r0, #122	; 0x7a
 8004264:	f7fe fb16 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004268:	2000      	movs	r0, #0
 800426a:	f7fe fb13 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 800426e:	208b      	movs	r0, #139	; 0x8b
 8004270:	f7fe fb10 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004274:	2000      	movs	r0, #0
 8004276:	f7fe fb0d 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 800427a:	2099      	movs	r0, #153	; 0x99
 800427c:	f7fe fb0a 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004280:	2000      	movs	r0, #0
 8004282:	f7fe fb07 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 8004286:	20a8      	movs	r0, #168	; 0xa8
 8004288:	f7fe fb04 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800428c:	2000      	movs	r0, #0
 800428e:	f7fe fb01 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 8004292:	20b9      	movs	r0, #185	; 0xb9
 8004294:	f7fe fafe 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004298:	2000      	movs	r0, #0
 800429a:	f7fe fafb 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 800429e:	20c4      	movs	r0, #196	; 0xc4
 80042a0:	f7fe faf8 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80042a4:	2000      	movs	r0, #0
 80042a6:	f7fe faf5 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 80042aa:	20ca      	movs	r0, #202	; 0xca
 80042ac:	f7fe faf2 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80042b0:	2000      	movs	r0, #0
 80042b2:	f7fe faef 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 80042b6:	20d2      	movs	r0, #210	; 0xd2
 80042b8:	f7fe faec 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80042bc:	2000      	movs	r0, #0
 80042be:	f7fe fae9 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xD9);
 80042c2:	20d9      	movs	r0, #217	; 0xd9
 80042c4:	f7fe fae6 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80042c8:	2000      	movs	r0, #0
 80042ca:	f7fe fae3 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 80042ce:	20e0      	movs	r0, #224	; 0xe0
 80042d0:	f7fe fae0 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80042d4:	2000      	movs	r0, #0
 80042d6:	f7fe fadd 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80042da:	20f3      	movs	r0, #243	; 0xf3
 80042dc:	f7fe fada 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80042e0:	2000      	movs	r0, #0
 80042e2:	f7fe fad7 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xE1);
 80042e6:	20e1      	movs	r0, #225	; 0xe1
 80042e8:	f7fe fac4 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 80042ec:	2016      	movs	r0, #22
 80042ee:	f7fe fad1 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80042f2:	2000      	movs	r0, #0
 80042f4:	f7fe face 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 80042f8:	201c      	movs	r0, #28
 80042fa:	f7fe facb 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80042fe:	2000      	movs	r0, #0
 8004300:	f7fe fac8 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x22);
 8004304:	2022      	movs	r0, #34	; 0x22
 8004306:	f7fe fac5 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800430a:	2000      	movs	r0, #0
 800430c:	f7fe fac2 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8004310:	2036      	movs	r0, #54	; 0x36
 8004312:	f7fe fabf 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004316:	2000      	movs	r0, #0
 8004318:	f7fe fabc 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 800431c:	2045      	movs	r0, #69	; 0x45
 800431e:	f7fe fab9 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004322:	2000      	movs	r0, #0
 8004324:	f7fe fab6 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 8004328:	2052      	movs	r0, #82	; 0x52
 800432a:	f7fe fab3 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800432e:	2000      	movs	r0, #0
 8004330:	f7fe fab0 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8004334:	2064      	movs	r0, #100	; 0x64
 8004336:	f7fe faad 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800433a:	2000      	movs	r0, #0
 800433c:	f7fe faaa 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8004340:	207a      	movs	r0, #122	; 0x7a
 8004342:	f7fe faa7 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004346:	2000      	movs	r0, #0
 8004348:	f7fe faa4 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 800434c:	208b      	movs	r0, #139	; 0x8b
 800434e:	f7fe faa1 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004352:	2000      	movs	r0, #0
 8004354:	f7fe fa9e 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8004358:	2099      	movs	r0, #153	; 0x99
 800435a:	f7fe fa9b 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800435e:	2000      	movs	r0, #0
 8004360:	f7fe fa98 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 8004364:	20a8      	movs	r0, #168	; 0xa8
 8004366:	f7fe fa95 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800436a:	2000      	movs	r0, #0
 800436c:	f7fe fa92 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 8004370:	20b9      	movs	r0, #185	; 0xb9
 8004372:	f7fe fa8f 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004376:	2000      	movs	r0, #0
 8004378:	f7fe fa8c 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 800437c:	20c4      	movs	r0, #196	; 0xc4
 800437e:	f7fe fa89 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004382:	2000      	movs	r0, #0
 8004384:	f7fe fa86 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 8004388:	20ca      	movs	r0, #202	; 0xca
 800438a:	f7fe fa83 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800438e:	2000      	movs	r0, #0
 8004390:	f7fe fa80 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8004394:	20d2      	movs	r0, #210	; 0xd2
 8004396:	f7fe fa7d 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800439a:	2000      	movs	r0, #0
 800439c:	f7fe fa7a 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xD8);
 80043a0:	20d8      	movs	r0, #216	; 0xd8
 80043a2:	f7fe fa77 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80043a6:	2000      	movs	r0, #0
 80043a8:	f7fe fa74 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 80043ac:	20e0      	movs	r0, #224	; 0xe0
 80043ae:	f7fe fa71 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80043b2:	2000      	movs	r0, #0
 80043b4:	f7fe fa6e 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80043b8:	20f3      	movs	r0, #243	; 0xf3
 80043ba:	f7fe fa6b 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80043be:	2000      	movs	r0, #0
 80043c0:	f7fe fa68 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xE2);
 80043c4:	20e2      	movs	r0, #226	; 0xe2
 80043c6:	f7fe fa55 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 80043ca:	2005      	movs	r0, #5
 80043cc:	f7fe fa62 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80043d0:	2000      	movs	r0, #0
 80043d2:	f7fe fa5f 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x0B);
 80043d6:	200b      	movs	r0, #11
 80043d8:	f7fe fa5c 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80043dc:	2000      	movs	r0, #0
 80043de:	f7fe fa59 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x1B);
 80043e2:	201b      	movs	r0, #27
 80043e4:	f7fe fa56 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80043e8:	2000      	movs	r0, #0
 80043ea:	f7fe fa53 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 80043ee:	2034      	movs	r0, #52	; 0x34
 80043f0:	f7fe fa50 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80043f4:	2000      	movs	r0, #0
 80043f6:	f7fe fa4d 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80043fa:	2044      	movs	r0, #68	; 0x44
 80043fc:	f7fe fa4a 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004400:	2000      	movs	r0, #0
 8004402:	f7fe fa47 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x4F);
 8004406:	204f      	movs	r0, #79	; 0x4f
 8004408:	f7fe fa44 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800440c:	2000      	movs	r0, #0
 800440e:	f7fe fa41 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x61);
 8004412:	2061      	movs	r0, #97	; 0x61
 8004414:	f7fe fa3e 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004418:	2000      	movs	r0, #0
 800441a:	f7fe fa3b 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x79);
 800441e:	2079      	movs	r0, #121	; 0x79
 8004420:	f7fe fa38 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004424:	2000      	movs	r0, #0
 8004426:	f7fe fa35 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 800442a:	2088      	movs	r0, #136	; 0x88
 800442c:	f7fe fa32 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004430:	2000      	movs	r0, #0
 8004432:	f7fe fa2f 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 8004436:	2097      	movs	r0, #151	; 0x97
 8004438:	f7fe fa2c 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800443c:	2000      	movs	r0, #0
 800443e:	f7fe fa29 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 8004442:	20a6      	movs	r0, #166	; 0xa6
 8004444:	f7fe fa26 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004448:	2000      	movs	r0, #0
 800444a:	f7fe fa23 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 800444e:	20b7      	movs	r0, #183	; 0xb7
 8004450:	f7fe fa20 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004454:	2000      	movs	r0, #0
 8004456:	f7fe fa1d 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 800445a:	20c2      	movs	r0, #194	; 0xc2
 800445c:	f7fe fa1a 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004460:	2000      	movs	r0, #0
 8004462:	f7fe fa17 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 8004466:	20c7      	movs	r0, #199	; 0xc7
 8004468:	f7fe fa14 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800446c:	2000      	movs	r0, #0
 800446e:	f7fe fa11 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 8004472:	20d1      	movs	r0, #209	; 0xd1
 8004474:	f7fe fa0e 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004478:	2000      	movs	r0, #0
 800447a:	f7fe fa0b 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xD6);
 800447e:	20d6      	movs	r0, #214	; 0xd6
 8004480:	f7fe fa08 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004484:	2000      	movs	r0, #0
 8004486:	f7fe fa05 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 800448a:	20dd      	movs	r0, #221	; 0xdd
 800448c:	f7fe fa02 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004490:	2000      	movs	r0, #0
 8004492:	f7fe f9ff 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8004496:	20f3      	movs	r0, #243	; 0xf3
 8004498:	f7fe f9fc 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800449c:	2000      	movs	r0, #0
 800449e:	f7fe f9f9 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0xE3);
 80044a2:	20e3      	movs	r0, #227	; 0xe3
 80044a4:	f7fe f9e6 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 80044a8:	2005      	movs	r0, #5
 80044aa:	f7fe f9f3 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80044ae:	2000      	movs	r0, #0
 80044b0:	f7fe f9f0 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xA);
 80044b4:	200a      	movs	r0, #10
 80044b6:	f7fe f9ed 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80044ba:	2000      	movs	r0, #0
 80044bc:	f7fe f9ea 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 80044c0:	201c      	movs	r0, #28
 80044c2:	f7fe f9e7 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80044c6:	2000      	movs	r0, #0
 80044c8:	f7fe f9e4 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 80044cc:	2033      	movs	r0, #51	; 0x33
 80044ce:	f7fe f9e1 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80044d2:	2000      	movs	r0, #0
 80044d4:	f7fe f9de 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80044d8:	2044      	movs	r0, #68	; 0x44
 80044da:	f7fe f9db 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80044de:	2000      	movs	r0, #0
 80044e0:	f7fe f9d8 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 80044e4:	2050      	movs	r0, #80	; 0x50
 80044e6:	f7fe f9d5 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80044ea:	2000      	movs	r0, #0
 80044ec:	f7fe f9d2 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x62);
 80044f0:	2062      	movs	r0, #98	; 0x62
 80044f2:	f7fe f9cf 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80044f6:	2000      	movs	r0, #0
 80044f8:	f7fe f9cc 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x78);
 80044fc:	2078      	movs	r0, #120	; 0x78
 80044fe:	f7fe f9c9 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004502:	2000      	movs	r0, #0
 8004504:	f7fe f9c6 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8004508:	2088      	movs	r0, #136	; 0x88
 800450a:	f7fe f9c3 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800450e:	2000      	movs	r0, #0
 8004510:	f7fe f9c0 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 8004514:	2097      	movs	r0, #151	; 0x97
 8004516:	f7fe f9bd 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800451a:	2000      	movs	r0, #0
 800451c:	f7fe f9ba 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 8004520:	20a6      	movs	r0, #166	; 0xa6
 8004522:	f7fe f9b7 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004526:	2000      	movs	r0, #0
 8004528:	f7fe f9b4 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 800452c:	20b7      	movs	r0, #183	; 0xb7
 800452e:	f7fe f9b1 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004532:	2000      	movs	r0, #0
 8004534:	f7fe f9ae 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 8004538:	20c2      	movs	r0, #194	; 0xc2
 800453a:	f7fe f9ab 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800453e:	2000      	movs	r0, #0
 8004540:	f7fe f9a8 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 8004544:	20c7      	movs	r0, #199	; 0xc7
 8004546:	f7fe f9a5 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800454a:	2000      	movs	r0, #0
 800454c:	f7fe f9a2 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 8004550:	20d1      	movs	r0, #209	; 0xd1
 8004552:	f7fe f99f 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004556:	2000      	movs	r0, #0
 8004558:	f7fe f99c 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xD5);
 800455c:	20d5      	movs	r0, #213	; 0xd5
 800455e:	f7fe f999 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004562:	2000      	movs	r0, #0
 8004564:	f7fe f996 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8004568:	20dd      	movs	r0, #221	; 0xdd
 800456a:	f7fe f993 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800456e:	2000      	movs	r0, #0
 8004570:	f7fe f990 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8004574:	20f3      	movs	r0, #243	; 0xf3
 8004576:	f7fe f98d 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800457a:	2000      	movs	r0, #0
 800457c:	f7fe f98a 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xE4);
 8004580:	20e4      	movs	r0, #228	; 0xe4
 8004582:	f7fe f977 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8004586:	2001      	movs	r0, #1
 8004588:	f7fe f984 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800458c:	2000      	movs	r0, #0
 800458e:	f7fe f981 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8004592:	2001      	movs	r0, #1
 8004594:	f7fe f97e 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004598:	2000      	movs	r0, #0
 800459a:	f7fe f97b 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 800459e:	2002      	movs	r0, #2
 80045a0:	f7fe f978 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80045a4:	2000      	movs	r0, #0
 80045a6:	f7fe f975 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 80045aa:	202a      	movs	r0, #42	; 0x2a
 80045ac:	f7fe f972 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80045b0:	2000      	movs	r0, #0
 80045b2:	f7fe f96f 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 80045b6:	203c      	movs	r0, #60	; 0x3c
 80045b8:	f7fe f96c 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80045bc:	2000      	movs	r0, #0
 80045be:	f7fe f969 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 80045c2:	204b      	movs	r0, #75	; 0x4b
 80045c4:	f7fe f966 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80045c8:	2000      	movs	r0, #0
 80045ca:	f7fe f963 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 80045ce:	205d      	movs	r0, #93	; 0x5d
 80045d0:	f7fe f960 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80045d4:	2000      	movs	r0, #0
 80045d6:	f7fe f95d 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 80045da:	2074      	movs	r0, #116	; 0x74
 80045dc:	f7fe f95a 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80045e0:	2000      	movs	r0, #0
 80045e2:	f7fe f957 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 80045e6:	2084      	movs	r0, #132	; 0x84
 80045e8:	f7fe f954 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80045ec:	2000      	movs	r0, #0
 80045ee:	f7fe f951 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 80045f2:	2093      	movs	r0, #147	; 0x93
 80045f4:	f7fe f94e 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80045f8:	2000      	movs	r0, #0
 80045fa:	f7fe f94b 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 80045fe:	20a2      	movs	r0, #162	; 0xa2
 8004600:	f7fe f948 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004604:	2000      	movs	r0, #0
 8004606:	f7fe f945 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 800460a:	20b3      	movs	r0, #179	; 0xb3
 800460c:	f7fe f942 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004610:	2000      	movs	r0, #0
 8004612:	f7fe f93f 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 8004616:	20be      	movs	r0, #190	; 0xbe
 8004618:	f7fe f93c 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800461c:	2000      	movs	r0, #0
 800461e:	f7fe f939 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8004622:	20c4      	movs	r0, #196	; 0xc4
 8004624:	f7fe f936 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004628:	2000      	movs	r0, #0
 800462a:	f7fe f933 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 800462e:	20cd      	movs	r0, #205	; 0xcd
 8004630:	f7fe f930 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004634:	2000      	movs	r0, #0
 8004636:	f7fe f92d 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 800463a:	20d3      	movs	r0, #211	; 0xd3
 800463c:	f7fe f92a 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004640:	2000      	movs	r0, #0
 8004642:	f7fe f927 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8004646:	20dd      	movs	r0, #221	; 0xdd
 8004648:	f7fe f924 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800464c:	2000      	movs	r0, #0
 800464e:	f7fe f921 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8004652:	20f3      	movs	r0, #243	; 0xf3
 8004654:	f7fe f91e 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004658:	2000      	movs	r0, #0
 800465a:	f7fe f91b 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0xE5);
 800465e:	20e5      	movs	r0, #229	; 0xe5
 8004660:	f7fe f908 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8004664:	2000      	movs	r0, #0
 8004666:	f7fe f915 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800466a:	2000      	movs	r0, #0
 800466c:	f7fe f912 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004670:	2000      	movs	r0, #0
 8004672:	f7fe f90f 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004676:	2000      	movs	r0, #0
 8004678:	f7fe f90c 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 800467c:	2002      	movs	r0, #2
 800467e:	f7fe f909 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004682:	2000      	movs	r0, #0
 8004684:	f7fe f906 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8004688:	2029      	movs	r0, #41	; 0x29
 800468a:	f7fe f903 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800468e:	2000      	movs	r0, #0
 8004690:	f7fe f900 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8004694:	203c      	movs	r0, #60	; 0x3c
 8004696:	f7fe f8fd 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800469a:	2000      	movs	r0, #0
 800469c:	f7fe f8fa 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 80046a0:	204b      	movs	r0, #75	; 0x4b
 80046a2:	f7fe f8f7 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80046a6:	2000      	movs	r0, #0
 80046a8:	f7fe f8f4 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 80046ac:	205d      	movs	r0, #93	; 0x5d
 80046ae:	f7fe f8f1 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80046b2:	2000      	movs	r0, #0
 80046b4:	f7fe f8ee 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 80046b8:	2074      	movs	r0, #116	; 0x74
 80046ba:	f7fe f8eb 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80046be:	2000      	movs	r0, #0
 80046c0:	f7fe f8e8 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 80046c4:	2084      	movs	r0, #132	; 0x84
 80046c6:	f7fe f8e5 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80046ca:	2000      	movs	r0, #0
 80046cc:	f7fe f8e2 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 80046d0:	2093      	movs	r0, #147	; 0x93
 80046d2:	f7fe f8df 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80046d6:	2000      	movs	r0, #0
 80046d8:	f7fe f8dc 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 80046dc:	20a2      	movs	r0, #162	; 0xa2
 80046de:	f7fe f8d9 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80046e2:	2000      	movs	r0, #0
 80046e4:	f7fe f8d6 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 80046e8:	20b3      	movs	r0, #179	; 0xb3
 80046ea:	f7fe f8d3 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80046ee:	2000      	movs	r0, #0
 80046f0:	f7fe f8d0 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 80046f4:	20be      	movs	r0, #190	; 0xbe
 80046f6:	f7fe f8cd 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80046fa:	2000      	movs	r0, #0
 80046fc:	f7fe f8ca 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8004700:	20c4      	movs	r0, #196	; 0xc4
 8004702:	f7fe f8c7 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004706:	2000      	movs	r0, #0
 8004708:	f7fe f8c4 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 800470c:	20cd      	movs	r0, #205	; 0xcd
 800470e:	f7fe f8c1 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004712:	2000      	movs	r0, #0
 8004714:	f7fe f8be 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 8004718:	20d3      	movs	r0, #211	; 0xd3
 800471a:	f7fe f8bb 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800471e:	2000      	movs	r0, #0
 8004720:	f7fe f8b8 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8004724:	20dc      	movs	r0, #220	; 0xdc
 8004726:	f7fe f8b5 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800472a:	2000      	movs	r0, #0
 800472c:	f7fe f8b2 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8004730:	20f3      	movs	r0, #243	; 0xf3
 8004732:	f7fe f8af 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004736:	2000      	movs	r0, #0
 8004738:	f7fe f8ac 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xE6);
 800473c:	20e6      	movs	r0, #230	; 0xe6
 800473e:	f7fe f899 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x11);
 8004742:	2011      	movs	r0, #17
 8004744:	f7fe f8a6 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004748:	2000      	movs	r0, #0
 800474a:	f7fe f8a3 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 800474e:	2034      	movs	r0, #52	; 0x34
 8004750:	f7fe f8a0 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004754:	2000      	movs	r0, #0
 8004756:	f7fe f89d 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 800475a:	2056      	movs	r0, #86	; 0x56
 800475c:	f7fe f89a 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004760:	2000      	movs	r0, #0
 8004762:	f7fe f897 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8004766:	2076      	movs	r0, #118	; 0x76
 8004768:	f7fe f894 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800476c:	2000      	movs	r0, #0
 800476e:	f7fe f891 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8004772:	2077      	movs	r0, #119	; 0x77
 8004774:	f7fe f88e 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004778:	2000      	movs	r0, #0
 800477a:	f7fe f88b 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 800477e:	2066      	movs	r0, #102	; 0x66
 8004780:	f7fe f888 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004784:	2000      	movs	r0, #0
 8004786:	f7fe f885 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 800478a:	2088      	movs	r0, #136	; 0x88
 800478c:	f7fe f882 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004790:	2000      	movs	r0, #0
 8004792:	f7fe f87f 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8004796:	2099      	movs	r0, #153	; 0x99
 8004798:	f7fe f87c 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800479c:	2000      	movs	r0, #0
 800479e:	f7fe f879 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 80047a2:	20bb      	movs	r0, #187	; 0xbb
 80047a4:	f7fe f876 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80047a8:	2000      	movs	r0, #0
 80047aa:	f7fe f873 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 80047ae:	2099      	movs	r0, #153	; 0x99
 80047b0:	f7fe f870 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80047b4:	2000      	movs	r0, #0
 80047b6:	f7fe f86d 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 80047ba:	2066      	movs	r0, #102	; 0x66
 80047bc:	f7fe f86a 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80047c0:	2000      	movs	r0, #0
 80047c2:	f7fe f867 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 80047c6:	2055      	movs	r0, #85	; 0x55
 80047c8:	f7fe f864 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80047cc:	2000      	movs	r0, #0
 80047ce:	f7fe f861 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 80047d2:	2055      	movs	r0, #85	; 0x55
 80047d4:	f7fe f85e 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80047d8:	2000      	movs	r0, #0
 80047da:	f7fe f85b 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 80047de:	2045      	movs	r0, #69	; 0x45
 80047e0:	f7fe f858 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80047e4:	2000      	movs	r0, #0
 80047e6:	f7fe f855 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 80047ea:	2043      	movs	r0, #67	; 0x43
 80047ec:	f7fe f852 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80047f0:	2000      	movs	r0, #0
 80047f2:	f7fe f84f 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80047f6:	2044      	movs	r0, #68	; 0x44
 80047f8:	f7fe f84c 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80047fc:	2000      	movs	r0, #0
 80047fe:	f7fe f849 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xE7);
 8004802:	20e7      	movs	r0, #231	; 0xe7
 8004804:	f7fe f836 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 8004808:	2032      	movs	r0, #50	; 0x32
 800480a:	f7fe f843 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800480e:	2000      	movs	r0, #0
 8004810:	f7fe f840 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8004814:	2055      	movs	r0, #85	; 0x55
 8004816:	f7fe f83d 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800481a:	2000      	movs	r0, #0
 800481c:	f7fe f83a 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8004820:	2076      	movs	r0, #118	; 0x76
 8004822:	f7fe f837 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004826:	2000      	movs	r0, #0
 8004828:	f7fe f834 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 800482c:	2066      	movs	r0, #102	; 0x66
 800482e:	f7fe f831 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004832:	2000      	movs	r0, #0
 8004834:	f7fe f82e 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 8004838:	2067      	movs	r0, #103	; 0x67
 800483a:	f7fe f82b 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800483e:	2000      	movs	r0, #0
 8004840:	f7fe f828 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 8004844:	2067      	movs	r0, #103	; 0x67
 8004846:	f7fe f825 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800484a:	2000      	movs	r0, #0
 800484c:	f7fe f822 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 8004850:	2087      	movs	r0, #135	; 0x87
 8004852:	f7fe f81f 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004856:	2000      	movs	r0, #0
 8004858:	f7fe f81c 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 800485c:	2099      	movs	r0, #153	; 0x99
 800485e:	f7fe f819 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004862:	2000      	movs	r0, #0
 8004864:	f7fe f816 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8004868:	20bb      	movs	r0, #187	; 0xbb
 800486a:	f7fe f813 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800486e:	2000      	movs	r0, #0
 8004870:	f7fe f810 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8004874:	2099      	movs	r0, #153	; 0x99
 8004876:	f7fe f80d 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800487a:	2000      	movs	r0, #0
 800487c:	f7fe f80a 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8004880:	2077      	movs	r0, #119	; 0x77
 8004882:	f7fe f807 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004886:	2000      	movs	r0, #0
 8004888:	f7fe f804 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 800488c:	2044      	movs	r0, #68	; 0x44
 800488e:	f7fe f801 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004892:	2000      	movs	r0, #0
 8004894:	f7fd fffe 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8004898:	2056      	movs	r0, #86	; 0x56
 800489a:	f7fd fffb 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800489e:	2000      	movs	r0, #0
 80048a0:	f7fd fff8 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 80048a4:	2023      	movs	r0, #35	; 0x23
 80048a6:	f7fd fff5 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80048aa:	2000      	movs	r0, #0
 80048ac:	f7fd fff2 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 80048b0:	2033      	movs	r0, #51	; 0x33
 80048b2:	f7fd ffef 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80048b6:	2000      	movs	r0, #0
 80048b8:	f7fd ffec 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 80048bc:	2045      	movs	r0, #69	; 0x45
 80048be:	f7fd ffe9 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80048c2:	2000      	movs	r0, #0
 80048c4:	f7fd ffe6 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xE8);
 80048c8:	20e8      	movs	r0, #232	; 0xe8
 80048ca:	f7fd ffd3 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80048ce:	2000      	movs	r0, #0
 80048d0:	f7fd ffe0 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80048d4:	2000      	movs	r0, #0
 80048d6:	f7fd ffdd 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 80048da:	2099      	movs	r0, #153	; 0x99
 80048dc:	f7fd ffda 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80048e0:	2000      	movs	r0, #0
 80048e2:	f7fd ffd7 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 80048e6:	2087      	movs	r0, #135	; 0x87
 80048e8:	f7fd ffd4 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80048ec:	2000      	movs	r0, #0
 80048ee:	f7fd ffd1 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80048f2:	2088      	movs	r0, #136	; 0x88
 80048f4:	f7fd ffce 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80048f8:	2000      	movs	r0, #0
 80048fa:	f7fd ffcb 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 80048fe:	2077      	movs	r0, #119	; 0x77
 8004900:	f7fd ffc8 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004904:	2000      	movs	r0, #0
 8004906:	f7fd ffc5 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 800490a:	2066      	movs	r0, #102	; 0x66
 800490c:	f7fd ffc2 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004910:	2000      	movs	r0, #0
 8004912:	f7fd ffbf 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8004916:	2088      	movs	r0, #136	; 0x88
 8004918:	f7fd ffbc 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800491c:	2000      	movs	r0, #0
 800491e:	f7fd ffb9 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xAA);
 8004922:	20aa      	movs	r0, #170	; 0xaa
 8004924:	f7fd ffb6 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004928:	2000      	movs	r0, #0
 800492a:	f7fd ffb3 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 800492e:	20bb      	movs	r0, #187	; 0xbb
 8004930:	f7fd ffb0 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004934:	2000      	movs	r0, #0
 8004936:	f7fd ffad 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 800493a:	2099      	movs	r0, #153	; 0x99
 800493c:	f7fd ffaa 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004940:	2000      	movs	r0, #0
 8004942:	f7fd ffa7 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8004946:	2066      	movs	r0, #102	; 0x66
 8004948:	f7fd ffa4 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800494c:	2000      	movs	r0, #0
 800494e:	f7fd ffa1 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8004952:	2055      	movs	r0, #85	; 0x55
 8004954:	f7fd ff9e 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004958:	2000      	movs	r0, #0
 800495a:	f7fd ff9b 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 800495e:	2055      	movs	r0, #85	; 0x55
 8004960:	f7fd ff98 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004964:	2000      	movs	r0, #0
 8004966:	f7fd ff95 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 800496a:	2044      	movs	r0, #68	; 0x44
 800496c:	f7fd ff92 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004970:	2000      	movs	r0, #0
 8004972:	f7fd ff8f 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8004976:	2044      	movs	r0, #68	; 0x44
 8004978:	f7fd ff8c 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800497c:	2000      	movs	r0, #0
 800497e:	f7fd ff89 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8004982:	2055      	movs	r0, #85	; 0x55
 8004984:	f7fd ff86 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004988:	2000      	movs	r0, #0
 800498a:	f7fd ff83 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xE9);
 800498e:	20e9      	movs	r0, #233	; 0xe9
 8004990:	f7fd ff70 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8004994:	20aa      	movs	r0, #170	; 0xaa
 8004996:	f7fd ff7d 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800499a:	2000      	movs	r0, #0
 800499c:	f7fd ff7a 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80049a0:	2000      	movs	r0, #0
 80049a2:	f7fd ff77 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80049a6:	2000      	movs	r0, #0
 80049a8:	f7fd ff74 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0x00);
 80049ac:	2000      	movs	r0, #0
 80049ae:	f7fd ff61 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 80049b2:	20aa      	movs	r0, #170	; 0xaa
 80049b4:	f7fd ff6e 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xCF);
 80049b8:	20cf      	movs	r0, #207	; 0xcf
 80049ba:	f7fd ff5b 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80049be:	2000      	movs	r0, #0
 80049c0:	f7fd ff68 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80049c4:	2000      	movs	r0, #0
 80049c6:	f7fd ff65 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80049ca:	2000      	movs	r0, #0
 80049cc:	f7fd ff62 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80049d0:	2000      	movs	r0, #0
 80049d2:	f7fd ff5f 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80049d6:	2000      	movs	r0, #0
 80049d8:	f7fd ff5c 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80049dc:	2000      	movs	r0, #0
 80049de:	f7fd ff59 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80049e2:	2000      	movs	r0, #0
 80049e4:	f7fd ff56 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80049e8:	2000      	movs	r0, #0
 80049ea:	f7fd ff53 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80049ee:	2000      	movs	r0, #0
 80049f0:	f7fd ff50 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80049f4:	2000      	movs	r0, #0
 80049f6:	f7fd ff4d 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80049fa:	2000      	movs	r0, #0
 80049fc:	f7fd ff4a 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004a00:	2000      	movs	r0, #0
 8004a02:	f7fd ff47 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004a06:	2000      	movs	r0, #0
 8004a08:	f7fd ff44 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	f7fd ff41 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004a12:	2000      	movs	r0, #0
 8004a14:	f7fd ff3e 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004a18:	2000      	movs	r0, #0
 8004a1a:	f7fd ff3b 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004a1e:	2000      	movs	r0, #0
 8004a20:	f7fd ff38 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);
 8004a24:	20f0      	movs	r0, #240	; 0xf0
 8004a26:	f7fd ff25 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	f7fd ff32 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8004a30:	2050      	movs	r0, #80	; 0x50
 8004a32:	f7fd ff2f 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004a36:	2000      	movs	r0, #0
 8004a38:	f7fd ff2c 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	f7fd ff29 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004a42:	2000      	movs	r0, #0
 8004a44:	f7fd ff26 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xF3);
 8004a48:	20f3      	movs	r0, #243	; 0xf3
 8004a4a:	f7fd ff13 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8004a4e:	2000      	movs	r0, #0
 8004a50:	f7fd ff20 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xF9);
 8004a54:	20f9      	movs	r0, #249	; 0xf9
 8004a56:	f7fd ff0d 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x06);
 8004a5a:	2006      	movs	r0, #6
 8004a5c:	f7fd ff1a 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8004a60:	2010      	movs	r0, #16
 8004a62:	f7fd ff17 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8004a66:	2029      	movs	r0, #41	; 0x29
 8004a68:	f7fd ff14 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004a6c:	2000      	movs	r0, #0
 8004a6e:	f7fd ff11 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0x3A);
 8004a72:	203a      	movs	r0, #58	; 0x3a
 8004a74:	f7fd fefe 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x55);	//66
 8004a78:	2055      	movs	r0, #85	; 0x55
 8004a7a:	f7fd ff0b 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0x11);
 8004a7e:	2011      	movs	r0, #17
 8004a80:	f7fd fef8 	bl	8002874 <LCD_WR_REG>
		HAL_Delay(100);
 8004a84:	2064      	movs	r0, #100	; 0x64
 8004a86:	f002 fb6d 	bl	8007164 <HAL_Delay>
		LCD_WR_REG(0x29);
 8004a8a:	2029      	movs	r0, #41	; 0x29
 8004a8c:	f7fd fef2 	bl	8002874 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8004a90:	2035      	movs	r0, #53	; 0x35
 8004a92:	f7fd feef 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8004a96:	2000      	movs	r0, #0
 8004a98:	f7fd fefc 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0x51);
 8004a9c:	2051      	movs	r0, #81	; 0x51
 8004a9e:	f7fd fee9 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0xFF);
 8004aa2:	20ff      	movs	r0, #255	; 0xff
 8004aa4:	f7fd fef6 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0x53);
 8004aa8:	2053      	movs	r0, #83	; 0x53
 8004aaa:	f7fd fee3 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x2C);
 8004aae:	202c      	movs	r0, #44	; 0x2c
 8004ab0:	f7fd fef0 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0x55);
 8004ab4:	2055      	movs	r0, #85	; 0x55
 8004ab6:	f7fd fedd 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x82);
 8004aba:	2082      	movs	r0, #130	; 0x82
 8004abc:	f7fd feea 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8004ac0:	202c      	movs	r0, #44	; 0x2c
 8004ac2:	f7fd fed7 	bl	8002874 <LCD_WR_REG>
 8004ac6:	f002 b8e8 	b.w	8006c9a <LCD_Init+0x3852>
	}else if(lcddev.id==0x5510)
 8004aca:	4b04      	ldr	r3, [pc, #16]	; (8004adc <LCD_Init+0x1694>)
 8004acc:	889b      	ldrh	r3, [r3, #4]
 8004ace:	f245 5210 	movw	r2, #21776	; 0x5510
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	f040 8782 	bne.w	80059dc <LCD_Init+0x2594>
 8004ad8:	e002      	b.n	8004ae0 <LCD_Init+0x1698>
 8004ada:	bf00      	nop
 8004adc:	2000045c 	.word	0x2000045c
	{
		LCD_WriteReg(0xF000,0x55);
 8004ae0:	2155      	movs	r1, #85	; 0x55
 8004ae2:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8004ae6:	f7fd fef3 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 8004aea:	21aa      	movs	r1, #170	; 0xaa
 8004aec:	f24f 0001 	movw	r0, #61441	; 0xf001
 8004af0:	f7fd feee 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 8004af4:	2152      	movs	r1, #82	; 0x52
 8004af6:	f24f 0002 	movw	r0, #61442	; 0xf002
 8004afa:	f7fd fee9 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 8004afe:	2108      	movs	r1, #8
 8004b00:	f24f 0003 	movw	r0, #61443	; 0xf003
 8004b04:	f7fd fee4 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x01);
 8004b08:	2101      	movs	r1, #1
 8004b0a:	f24f 0004 	movw	r0, #61444	; 0xf004
 8004b0e:	f7fd fedf 	bl	80028d0 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000,0x0D);
 8004b12:	210d      	movs	r1, #13
 8004b14:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8004b18:	f7fd feda 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xB001,0x0D);
 8004b1c:	210d      	movs	r1, #13
 8004b1e:	f24b 0001 	movw	r0, #45057	; 0xb001
 8004b22:	f7fd fed5 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xB002,0x0D);
 8004b26:	210d      	movs	r1, #13
 8004b28:	f24b 0002 	movw	r0, #45058	; 0xb002
 8004b2c:	f7fd fed0 	bl	80028d0 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600,0x34);
 8004b30:	2134      	movs	r1, #52	; 0x34
 8004b32:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8004b36:	f7fd fecb 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xB601,0x34);
 8004b3a:	2134      	movs	r1, #52	; 0x34
 8004b3c:	f24b 6001 	movw	r0, #46593	; 0xb601
 8004b40:	f7fd fec6 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xB602,0x34);
 8004b44:	2134      	movs	r1, #52	; 0x34
 8004b46:	f24b 6002 	movw	r0, #46594	; 0xb602
 8004b4a:	f7fd fec1 	bl	80028d0 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100,0x0D);
 8004b4e:	210d      	movs	r1, #13
 8004b50:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8004b54:	f7fd febc 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xB101,0x0D);
 8004b58:	210d      	movs	r1, #13
 8004b5a:	f24b 1001 	movw	r0, #45313	; 0xb101
 8004b5e:	f7fd feb7 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xB102,0x0D);
 8004b62:	210d      	movs	r1, #13
 8004b64:	f24b 1002 	movw	r0, #45314	; 0xb102
 8004b68:	f7fd feb2 	bl	80028d0 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700,0x34);
 8004b6c:	2134      	movs	r1, #52	; 0x34
 8004b6e:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8004b72:	f7fd fead 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x34);
 8004b76:	2134      	movs	r1, #52	; 0x34
 8004b78:	f24b 7001 	movw	r0, #46849	; 0xb701
 8004b7c:	f7fd fea8 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xB702,0x34);
 8004b80:	2134      	movs	r1, #52	; 0x34
 8004b82:	f24b 7002 	movw	r0, #46850	; 0xb702
 8004b86:	f7fd fea3 	bl	80028d0 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200,0x00);
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8004b90:	f7fd fe9e 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xB201,0x00);
 8004b94:	2100      	movs	r1, #0
 8004b96:	f24b 2001 	movw	r0, #45569	; 0xb201
 8004b9a:	f7fd fe99 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xB202,0x00);
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	f24b 2002 	movw	r0, #45570	; 0xb202
 8004ba4:	f7fd fe94 	bl	80028d0 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800,0x24);
 8004ba8:	2124      	movs	r1, #36	; 0x24
 8004baa:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8004bae:	f7fd fe8f 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x24);
 8004bb2:	2124      	movs	r1, #36	; 0x24
 8004bb4:	f64b 0001 	movw	r0, #47105	; 0xb801
 8004bb8:	f7fd fe8a 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x24);
 8004bbc:	2124      	movs	r1, #36	; 0x24
 8004bbe:	f64b 0002 	movw	r0, #47106	; 0xb802
 8004bc2:	f7fd fe85 	bl	80028d0 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00,0x01);
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8004bcc:	f7fd fe80 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xB300,0x0F);
 8004bd0:	210f      	movs	r1, #15
 8004bd2:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8004bd6:	f7fd fe7b 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xB301,0x0F);
 8004bda:	210f      	movs	r1, #15
 8004bdc:	f24b 3001 	movw	r0, #45825	; 0xb301
 8004be0:	f7fd fe76 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xB302,0x0F);
 8004be4:	210f      	movs	r1, #15
 8004be6:	f24b 3002 	movw	r0, #45826	; 0xb302
 8004bea:	f7fd fe71 	bl	80028d0 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900,0x34);
 8004bee:	2134      	movs	r1, #52	; 0x34
 8004bf0:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8004bf4:	f7fd fe6c 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xB901,0x34);
 8004bf8:	2134      	movs	r1, #52	; 0x34
 8004bfa:	f64b 1001 	movw	r0, #47361	; 0xb901
 8004bfe:	f7fd fe67 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xB902,0x34);
 8004c02:	2134      	movs	r1, #52	; 0x34
 8004c04:	f64b 1002 	movw	r0, #47362	; 0xb902
 8004c08:	f7fd fe62 	bl	80028d0 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500,0x08);
 8004c0c:	2108      	movs	r1, #8
 8004c0e:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8004c12:	f7fd fe5d 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xB501,0x08);
 8004c16:	2108      	movs	r1, #8
 8004c18:	f24b 5001 	movw	r0, #46337	; 0xb501
 8004c1c:	f7fd fe58 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xB502,0x08);
 8004c20:	2108      	movs	r1, #8
 8004c22:	f24b 5002 	movw	r0, #46338	; 0xb502
 8004c26:	f7fd fe53 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xC200,0x03);
 8004c2a:	2103      	movs	r1, #3
 8004c2c:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8004c30:	f7fd fe4e 	bl	80028d0 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00,0x24);
 8004c34:	2124      	movs	r1, #36	; 0x24
 8004c36:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8004c3a:	f7fd fe49 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xBA01,0x24);
 8004c3e:	2124      	movs	r1, #36	; 0x24
 8004c40:	f64b 2001 	movw	r0, #47617	; 0xba01
 8004c44:	f7fd fe44 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xBA02,0x24);
 8004c48:	2124      	movs	r1, #36	; 0x24
 8004c4a:	f64b 2002 	movw	r0, #47618	; 0xba02
 8004c4e:	f7fd fe3f 	bl	80028d0 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00,0x00);
 8004c52:	2100      	movs	r1, #0
 8004c54:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8004c58:	f7fd fe3a 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x78);
 8004c5c:	2178      	movs	r1, #120	; 0x78
 8004c5e:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8004c62:	f7fd fe35 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 8004c66:	2100      	movs	r1, #0
 8004c68:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8004c6c:	f7fd fe30 	bl	80028d0 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00,0x00);
 8004c70:	2100      	movs	r1, #0
 8004c72:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8004c76:	f7fd fe2b 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xBD01,0x78);
 8004c7a:	2178      	movs	r1, #120	; 0x78
 8004c7c:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8004c80:	f7fd fe26 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xBD02,0x00);
 8004c84:	2100      	movs	r1, #0
 8004c86:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8004c8a:	f7fd fe21 	bl	80028d0 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00,0x00);
 8004c8e:	2100      	movs	r1, #0
 8004c90:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8004c94:	f7fd fe1c 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xBE01,0x64);
 8004c98:	2164      	movs	r1, #100	; 0x64
 8004c9a:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8004c9e:	f7fd fe17 	bl	80028d0 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100,0x00);
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8004ca8:	f7fd fe12 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD101,0x33);
 8004cac:	2133      	movs	r1, #51	; 0x33
 8004cae:	f24d 1001 	movw	r0, #53505	; 0xd101
 8004cb2:	f7fd fe0d 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD102,0x00);
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	f24d 1002 	movw	r0, #53506	; 0xd102
 8004cbc:	f7fd fe08 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD103,0x34);
 8004cc0:	2134      	movs	r1, #52	; 0x34
 8004cc2:	f24d 1003 	movw	r0, #53507	; 0xd103
 8004cc6:	f7fd fe03 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD104,0x00);
 8004cca:	2100      	movs	r1, #0
 8004ccc:	f24d 1004 	movw	r0, #53508	; 0xd104
 8004cd0:	f7fd fdfe 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD105,0x3A);
 8004cd4:	213a      	movs	r1, #58	; 0x3a
 8004cd6:	f24d 1005 	movw	r0, #53509	; 0xd105
 8004cda:	f7fd fdf9 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD106,0x00);
 8004cde:	2100      	movs	r1, #0
 8004ce0:	f24d 1006 	movw	r0, #53510	; 0xd106
 8004ce4:	f7fd fdf4 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD107,0x4A);
 8004ce8:	214a      	movs	r1, #74	; 0x4a
 8004cea:	f24d 1007 	movw	r0, #53511	; 0xd107
 8004cee:	f7fd fdef 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD108,0x00);
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	f24d 1008 	movw	r0, #53512	; 0xd108
 8004cf8:	f7fd fdea 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD109,0x5C);
 8004cfc:	215c      	movs	r1, #92	; 0x5c
 8004cfe:	f24d 1009 	movw	r0, #53513	; 0xd109
 8004d02:	f7fd fde5 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD10A,0x00);
 8004d06:	2100      	movs	r1, #0
 8004d08:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8004d0c:	f7fd fde0 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD10B,0x81);
 8004d10:	2181      	movs	r1, #129	; 0x81
 8004d12:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8004d16:	f7fd fddb 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD10C,0x00);
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8004d20:	f7fd fdd6 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD10D,0xA6);
 8004d24:	21a6      	movs	r1, #166	; 0xa6
 8004d26:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8004d2a:	f7fd fdd1 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD10E,0x00);
 8004d2e:	2100      	movs	r1, #0
 8004d30:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8004d34:	f7fd fdcc 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD10F,0xE5);
 8004d38:	21e5      	movs	r1, #229	; 0xe5
 8004d3a:	f24d 100f 	movw	r0, #53519	; 0xd10f
 8004d3e:	f7fd fdc7 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD110,0x01);
 8004d42:	2101      	movs	r1, #1
 8004d44:	f24d 1010 	movw	r0, #53520	; 0xd110
 8004d48:	f7fd fdc2 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD111,0x13);
 8004d4c:	2113      	movs	r1, #19
 8004d4e:	f24d 1011 	movw	r0, #53521	; 0xd111
 8004d52:	f7fd fdbd 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD112,0x01);
 8004d56:	2101      	movs	r1, #1
 8004d58:	f24d 1012 	movw	r0, #53522	; 0xd112
 8004d5c:	f7fd fdb8 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD113,0x54);
 8004d60:	2154      	movs	r1, #84	; 0x54
 8004d62:	f24d 1013 	movw	r0, #53523	; 0xd113
 8004d66:	f7fd fdb3 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD114,0x01);
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	f24d 1014 	movw	r0, #53524	; 0xd114
 8004d70:	f7fd fdae 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD115,0x82);
 8004d74:	2182      	movs	r1, #130	; 0x82
 8004d76:	f24d 1015 	movw	r0, #53525	; 0xd115
 8004d7a:	f7fd fda9 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD116,0x01);
 8004d7e:	2101      	movs	r1, #1
 8004d80:	f24d 1016 	movw	r0, #53526	; 0xd116
 8004d84:	f7fd fda4 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD117,0xCA);
 8004d88:	21ca      	movs	r1, #202	; 0xca
 8004d8a:	f24d 1017 	movw	r0, #53527	; 0xd117
 8004d8e:	f7fd fd9f 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD118,0x02);
 8004d92:	2102      	movs	r1, #2
 8004d94:	f24d 1018 	movw	r0, #53528	; 0xd118
 8004d98:	f7fd fd9a 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD119,0x00);
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	f24d 1019 	movw	r0, #53529	; 0xd119
 8004da2:	f7fd fd95 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD11A,0x02);
 8004da6:	2102      	movs	r1, #2
 8004da8:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8004dac:	f7fd fd90 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD11B,0x01);
 8004db0:	2101      	movs	r1, #1
 8004db2:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8004db6:	f7fd fd8b 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD11C,0x02);
 8004dba:	2102      	movs	r1, #2
 8004dbc:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8004dc0:	f7fd fd86 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD11D,0x34);
 8004dc4:	2134      	movs	r1, #52	; 0x34
 8004dc6:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8004dca:	f7fd fd81 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD11E,0x02);
 8004dce:	2102      	movs	r1, #2
 8004dd0:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8004dd4:	f7fd fd7c 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD11F,0x67);
 8004dd8:	2167      	movs	r1, #103	; 0x67
 8004dda:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8004dde:	f7fd fd77 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD120,0x02);
 8004de2:	2102      	movs	r1, #2
 8004de4:	f24d 1020 	movw	r0, #53536	; 0xd120
 8004de8:	f7fd fd72 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD121,0x84);
 8004dec:	2184      	movs	r1, #132	; 0x84
 8004dee:	f24d 1021 	movw	r0, #53537	; 0xd121
 8004df2:	f7fd fd6d 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD122,0x02);
 8004df6:	2102      	movs	r1, #2
 8004df8:	f24d 1022 	movw	r0, #53538	; 0xd122
 8004dfc:	f7fd fd68 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD123,0xA4);
 8004e00:	21a4      	movs	r1, #164	; 0xa4
 8004e02:	f24d 1023 	movw	r0, #53539	; 0xd123
 8004e06:	f7fd fd63 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD124,0x02);
 8004e0a:	2102      	movs	r1, #2
 8004e0c:	f24d 1024 	movw	r0, #53540	; 0xd124
 8004e10:	f7fd fd5e 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD125,0xB7);
 8004e14:	21b7      	movs	r1, #183	; 0xb7
 8004e16:	f24d 1025 	movw	r0, #53541	; 0xd125
 8004e1a:	f7fd fd59 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD126,0x02);
 8004e1e:	2102      	movs	r1, #2
 8004e20:	f24d 1026 	movw	r0, #53542	; 0xd126
 8004e24:	f7fd fd54 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD127,0xCF);
 8004e28:	21cf      	movs	r1, #207	; 0xcf
 8004e2a:	f24d 1027 	movw	r0, #53543	; 0xd127
 8004e2e:	f7fd fd4f 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD128,0x02);
 8004e32:	2102      	movs	r1, #2
 8004e34:	f24d 1028 	movw	r0, #53544	; 0xd128
 8004e38:	f7fd fd4a 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD129,0xDE);
 8004e3c:	21de      	movs	r1, #222	; 0xde
 8004e3e:	f24d 1029 	movw	r0, #53545	; 0xd129
 8004e42:	f7fd fd45 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD12A,0x02);
 8004e46:	2102      	movs	r1, #2
 8004e48:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8004e4c:	f7fd fd40 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD12B,0xF2);
 8004e50:	21f2      	movs	r1, #242	; 0xf2
 8004e52:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8004e56:	f7fd fd3b 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD12C,0x02);
 8004e5a:	2102      	movs	r1, #2
 8004e5c:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8004e60:	f7fd fd36 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD12D,0xFE);
 8004e64:	21fe      	movs	r1, #254	; 0xfe
 8004e66:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8004e6a:	f7fd fd31 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD12E,0x03);
 8004e6e:	2103      	movs	r1, #3
 8004e70:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8004e74:	f7fd fd2c 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD12F,0x10);
 8004e78:	2110      	movs	r1, #16
 8004e7a:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8004e7e:	f7fd fd27 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD130,0x03);
 8004e82:	2103      	movs	r1, #3
 8004e84:	f24d 1030 	movw	r0, #53552	; 0xd130
 8004e88:	f7fd fd22 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD131,0x33);
 8004e8c:	2133      	movs	r1, #51	; 0x33
 8004e8e:	f24d 1031 	movw	r0, #53553	; 0xd131
 8004e92:	f7fd fd1d 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD132,0x03);
 8004e96:	2103      	movs	r1, #3
 8004e98:	f24d 1032 	movw	r0, #53554	; 0xd132
 8004e9c:	f7fd fd18 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD133,0x6D);
 8004ea0:	216d      	movs	r1, #109	; 0x6d
 8004ea2:	f24d 1033 	movw	r0, #53555	; 0xd133
 8004ea6:	f7fd fd13 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD200,0x00);
 8004eaa:	2100      	movs	r1, #0
 8004eac:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8004eb0:	f7fd fd0e 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD201,0x33);
 8004eb4:	2133      	movs	r1, #51	; 0x33
 8004eb6:	f24d 2001 	movw	r0, #53761	; 0xd201
 8004eba:	f7fd fd09 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD202,0x00);
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	f24d 2002 	movw	r0, #53762	; 0xd202
 8004ec4:	f7fd fd04 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD203,0x34);
 8004ec8:	2134      	movs	r1, #52	; 0x34
 8004eca:	f24d 2003 	movw	r0, #53763	; 0xd203
 8004ece:	f7fd fcff 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD204,0x00);
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	f24d 2004 	movw	r0, #53764	; 0xd204
 8004ed8:	f7fd fcfa 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD205,0x3A);
 8004edc:	213a      	movs	r1, #58	; 0x3a
 8004ede:	f24d 2005 	movw	r0, #53765	; 0xd205
 8004ee2:	f7fd fcf5 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD206,0x00);
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	f24d 2006 	movw	r0, #53766	; 0xd206
 8004eec:	f7fd fcf0 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD207,0x4A);
 8004ef0:	214a      	movs	r1, #74	; 0x4a
 8004ef2:	f24d 2007 	movw	r0, #53767	; 0xd207
 8004ef6:	f7fd fceb 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD208,0x00);
 8004efa:	2100      	movs	r1, #0
 8004efc:	f24d 2008 	movw	r0, #53768	; 0xd208
 8004f00:	f7fd fce6 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD209,0x5C);
 8004f04:	215c      	movs	r1, #92	; 0x5c
 8004f06:	f24d 2009 	movw	r0, #53769	; 0xd209
 8004f0a:	f7fd fce1 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD20A,0x00);
 8004f0e:	2100      	movs	r1, #0
 8004f10:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8004f14:	f7fd fcdc 	bl	80028d0 <LCD_WriteReg>

		LCD_WriteReg(0xD20B,0x81);
 8004f18:	2181      	movs	r1, #129	; 0x81
 8004f1a:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8004f1e:	f7fd fcd7 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD20C,0x00);
 8004f22:	2100      	movs	r1, #0
 8004f24:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8004f28:	f7fd fcd2 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD20D,0xA6);
 8004f2c:	21a6      	movs	r1, #166	; 0xa6
 8004f2e:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8004f32:	f7fd fccd 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD20E,0x00);
 8004f36:	2100      	movs	r1, #0
 8004f38:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8004f3c:	f7fd fcc8 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD20F,0xE5);
 8004f40:	21e5      	movs	r1, #229	; 0xe5
 8004f42:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8004f46:	f7fd fcc3 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD210,0x01);
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	f24d 2010 	movw	r0, #53776	; 0xd210
 8004f50:	f7fd fcbe 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD211,0x13);
 8004f54:	2113      	movs	r1, #19
 8004f56:	f24d 2011 	movw	r0, #53777	; 0xd211
 8004f5a:	f7fd fcb9 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD212,0x01);
 8004f5e:	2101      	movs	r1, #1
 8004f60:	f24d 2012 	movw	r0, #53778	; 0xd212
 8004f64:	f7fd fcb4 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD213,0x54);
 8004f68:	2154      	movs	r1, #84	; 0x54
 8004f6a:	f24d 2013 	movw	r0, #53779	; 0xd213
 8004f6e:	f7fd fcaf 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD214,0x01);
 8004f72:	2101      	movs	r1, #1
 8004f74:	f24d 2014 	movw	r0, #53780	; 0xd214
 8004f78:	f7fd fcaa 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD215,0x82);
 8004f7c:	2182      	movs	r1, #130	; 0x82
 8004f7e:	f24d 2015 	movw	r0, #53781	; 0xd215
 8004f82:	f7fd fca5 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD216,0x01);
 8004f86:	2101      	movs	r1, #1
 8004f88:	f24d 2016 	movw	r0, #53782	; 0xd216
 8004f8c:	f7fd fca0 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD217,0xCA);
 8004f90:	21ca      	movs	r1, #202	; 0xca
 8004f92:	f24d 2017 	movw	r0, #53783	; 0xd217
 8004f96:	f7fd fc9b 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD218,0x02);
 8004f9a:	2102      	movs	r1, #2
 8004f9c:	f24d 2018 	movw	r0, #53784	; 0xd218
 8004fa0:	f7fd fc96 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD219,0x00);
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	f24d 2019 	movw	r0, #53785	; 0xd219
 8004faa:	f7fd fc91 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD21A,0x02);
 8004fae:	2102      	movs	r1, #2
 8004fb0:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8004fb4:	f7fd fc8c 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD21B,0x01);
 8004fb8:	2101      	movs	r1, #1
 8004fba:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8004fbe:	f7fd fc87 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD21C,0x02);
 8004fc2:	2102      	movs	r1, #2
 8004fc4:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8004fc8:	f7fd fc82 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD21D,0x34);
 8004fcc:	2134      	movs	r1, #52	; 0x34
 8004fce:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8004fd2:	f7fd fc7d 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD21E,0x02);
 8004fd6:	2102      	movs	r1, #2
 8004fd8:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8004fdc:	f7fd fc78 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD21F,0x67);
 8004fe0:	2167      	movs	r1, #103	; 0x67
 8004fe2:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8004fe6:	f7fd fc73 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD220,0x02);
 8004fea:	2102      	movs	r1, #2
 8004fec:	f24d 2020 	movw	r0, #53792	; 0xd220
 8004ff0:	f7fd fc6e 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD221,0x84);
 8004ff4:	2184      	movs	r1, #132	; 0x84
 8004ff6:	f24d 2021 	movw	r0, #53793	; 0xd221
 8004ffa:	f7fd fc69 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD222,0x02);
 8004ffe:	2102      	movs	r1, #2
 8005000:	f24d 2022 	movw	r0, #53794	; 0xd222
 8005004:	f7fd fc64 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD223,0xA4);
 8005008:	21a4      	movs	r1, #164	; 0xa4
 800500a:	f24d 2023 	movw	r0, #53795	; 0xd223
 800500e:	f7fd fc5f 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD224,0x02);
 8005012:	2102      	movs	r1, #2
 8005014:	f24d 2024 	movw	r0, #53796	; 0xd224
 8005018:	f7fd fc5a 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD225,0xB7);
 800501c:	21b7      	movs	r1, #183	; 0xb7
 800501e:	f24d 2025 	movw	r0, #53797	; 0xd225
 8005022:	f7fd fc55 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD226,0x02);
 8005026:	2102      	movs	r1, #2
 8005028:	f24d 2026 	movw	r0, #53798	; 0xd226
 800502c:	f7fd fc50 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD227,0xCF);
 8005030:	21cf      	movs	r1, #207	; 0xcf
 8005032:	f24d 2027 	movw	r0, #53799	; 0xd227
 8005036:	f7fd fc4b 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD228,0x02);
 800503a:	2102      	movs	r1, #2
 800503c:	f24d 2028 	movw	r0, #53800	; 0xd228
 8005040:	f7fd fc46 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD229,0xDE);
 8005044:	21de      	movs	r1, #222	; 0xde
 8005046:	f24d 2029 	movw	r0, #53801	; 0xd229
 800504a:	f7fd fc41 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD22A,0x02);
 800504e:	2102      	movs	r1, #2
 8005050:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8005054:	f7fd fc3c 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD22B,0xF2);
 8005058:	21f2      	movs	r1, #242	; 0xf2
 800505a:	f24d 202b 	movw	r0, #53803	; 0xd22b
 800505e:	f7fd fc37 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD22C,0x02);
 8005062:	2102      	movs	r1, #2
 8005064:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8005068:	f7fd fc32 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD22D,0xFE);
 800506c:	21fe      	movs	r1, #254	; 0xfe
 800506e:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8005072:	f7fd fc2d 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD22E,0x03);
 8005076:	2103      	movs	r1, #3
 8005078:	f24d 202e 	movw	r0, #53806	; 0xd22e
 800507c:	f7fd fc28 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD22F,0x10);
 8005080:	2110      	movs	r1, #16
 8005082:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8005086:	f7fd fc23 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD230,0x03);
 800508a:	2103      	movs	r1, #3
 800508c:	f24d 2030 	movw	r0, #53808	; 0xd230
 8005090:	f7fd fc1e 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD231,0x33);
 8005094:	2133      	movs	r1, #51	; 0x33
 8005096:	f24d 2031 	movw	r0, #53809	; 0xd231
 800509a:	f7fd fc19 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD232,0x03);
 800509e:	2103      	movs	r1, #3
 80050a0:	f24d 2032 	movw	r0, #53810	; 0xd232
 80050a4:	f7fd fc14 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD233,0x6D);
 80050a8:	216d      	movs	r1, #109	; 0x6d
 80050aa:	f24d 2033 	movw	r0, #53811	; 0xd233
 80050ae:	f7fd fc0f 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD300,0x00);
 80050b2:	2100      	movs	r1, #0
 80050b4:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 80050b8:	f7fd fc0a 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD301,0x33);
 80050bc:	2133      	movs	r1, #51	; 0x33
 80050be:	f24d 3001 	movw	r0, #54017	; 0xd301
 80050c2:	f7fd fc05 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD302,0x00);
 80050c6:	2100      	movs	r1, #0
 80050c8:	f24d 3002 	movw	r0, #54018	; 0xd302
 80050cc:	f7fd fc00 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD303,0x34);
 80050d0:	2134      	movs	r1, #52	; 0x34
 80050d2:	f24d 3003 	movw	r0, #54019	; 0xd303
 80050d6:	f7fd fbfb 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD304,0x00);
 80050da:	2100      	movs	r1, #0
 80050dc:	f24d 3004 	movw	r0, #54020	; 0xd304
 80050e0:	f7fd fbf6 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD305,0x3A);
 80050e4:	213a      	movs	r1, #58	; 0x3a
 80050e6:	f24d 3005 	movw	r0, #54021	; 0xd305
 80050ea:	f7fd fbf1 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD306,0x00);
 80050ee:	2100      	movs	r1, #0
 80050f0:	f24d 3006 	movw	r0, #54022	; 0xd306
 80050f4:	f7fd fbec 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD307,0x4A);
 80050f8:	214a      	movs	r1, #74	; 0x4a
 80050fa:	f24d 3007 	movw	r0, #54023	; 0xd307
 80050fe:	f7fd fbe7 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD308,0x00);
 8005102:	2100      	movs	r1, #0
 8005104:	f24d 3008 	movw	r0, #54024	; 0xd308
 8005108:	f7fd fbe2 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD309,0x5C);
 800510c:	215c      	movs	r1, #92	; 0x5c
 800510e:	f24d 3009 	movw	r0, #54025	; 0xd309
 8005112:	f7fd fbdd 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD30A,0x00);
 8005116:	2100      	movs	r1, #0
 8005118:	f24d 300a 	movw	r0, #54026	; 0xd30a
 800511c:	f7fd fbd8 	bl	80028d0 <LCD_WriteReg>

		LCD_WriteReg(0xD30B,0x81);
 8005120:	2181      	movs	r1, #129	; 0x81
 8005122:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8005126:	f7fd fbd3 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD30C,0x00);
 800512a:	2100      	movs	r1, #0
 800512c:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8005130:	f7fd fbce 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD30D,0xA6);
 8005134:	21a6      	movs	r1, #166	; 0xa6
 8005136:	f24d 300d 	movw	r0, #54029	; 0xd30d
 800513a:	f7fd fbc9 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD30E,0x00);
 800513e:	2100      	movs	r1, #0
 8005140:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8005144:	f7fd fbc4 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD30F,0xE5);
 8005148:	21e5      	movs	r1, #229	; 0xe5
 800514a:	f24d 300f 	movw	r0, #54031	; 0xd30f
 800514e:	f7fd fbbf 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD310,0x01);
 8005152:	2101      	movs	r1, #1
 8005154:	f24d 3010 	movw	r0, #54032	; 0xd310
 8005158:	f7fd fbba 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD311,0x13);
 800515c:	2113      	movs	r1, #19
 800515e:	f24d 3011 	movw	r0, #54033	; 0xd311
 8005162:	f7fd fbb5 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD312,0x01);
 8005166:	2101      	movs	r1, #1
 8005168:	f24d 3012 	movw	r0, #54034	; 0xd312
 800516c:	f7fd fbb0 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD313,0x54);
 8005170:	2154      	movs	r1, #84	; 0x54
 8005172:	f24d 3013 	movw	r0, #54035	; 0xd313
 8005176:	f7fd fbab 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD314,0x01);
 800517a:	2101      	movs	r1, #1
 800517c:	f24d 3014 	movw	r0, #54036	; 0xd314
 8005180:	f7fd fba6 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD315,0x82);
 8005184:	2182      	movs	r1, #130	; 0x82
 8005186:	f24d 3015 	movw	r0, #54037	; 0xd315
 800518a:	f7fd fba1 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD316,0x01);
 800518e:	2101      	movs	r1, #1
 8005190:	f24d 3016 	movw	r0, #54038	; 0xd316
 8005194:	f7fd fb9c 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD317,0xCA);
 8005198:	21ca      	movs	r1, #202	; 0xca
 800519a:	f24d 3017 	movw	r0, #54039	; 0xd317
 800519e:	f7fd fb97 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD318,0x02);
 80051a2:	2102      	movs	r1, #2
 80051a4:	f24d 3018 	movw	r0, #54040	; 0xd318
 80051a8:	f7fd fb92 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD319,0x00);
 80051ac:	2100      	movs	r1, #0
 80051ae:	f24d 3019 	movw	r0, #54041	; 0xd319
 80051b2:	f7fd fb8d 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD31A,0x02);
 80051b6:	2102      	movs	r1, #2
 80051b8:	f24d 301a 	movw	r0, #54042	; 0xd31a
 80051bc:	f7fd fb88 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD31B,0x01);
 80051c0:	2101      	movs	r1, #1
 80051c2:	f24d 301b 	movw	r0, #54043	; 0xd31b
 80051c6:	f7fd fb83 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD31C,0x02);
 80051ca:	2102      	movs	r1, #2
 80051cc:	f24d 301c 	movw	r0, #54044	; 0xd31c
 80051d0:	f7fd fb7e 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD31D,0x34);
 80051d4:	2134      	movs	r1, #52	; 0x34
 80051d6:	f24d 301d 	movw	r0, #54045	; 0xd31d
 80051da:	f7fd fb79 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD31E,0x02);
 80051de:	2102      	movs	r1, #2
 80051e0:	f24d 301e 	movw	r0, #54046	; 0xd31e
 80051e4:	f7fd fb74 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD31F,0x67);
 80051e8:	2167      	movs	r1, #103	; 0x67
 80051ea:	f24d 301f 	movw	r0, #54047	; 0xd31f
 80051ee:	f7fd fb6f 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD320,0x02);
 80051f2:	2102      	movs	r1, #2
 80051f4:	f24d 3020 	movw	r0, #54048	; 0xd320
 80051f8:	f7fd fb6a 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD321,0x84);
 80051fc:	2184      	movs	r1, #132	; 0x84
 80051fe:	f24d 3021 	movw	r0, #54049	; 0xd321
 8005202:	f7fd fb65 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD322,0x02);
 8005206:	2102      	movs	r1, #2
 8005208:	f24d 3022 	movw	r0, #54050	; 0xd322
 800520c:	f7fd fb60 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD323,0xA4);
 8005210:	21a4      	movs	r1, #164	; 0xa4
 8005212:	f24d 3023 	movw	r0, #54051	; 0xd323
 8005216:	f7fd fb5b 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD324,0x02);
 800521a:	2102      	movs	r1, #2
 800521c:	f24d 3024 	movw	r0, #54052	; 0xd324
 8005220:	f7fd fb56 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD325,0xB7);
 8005224:	21b7      	movs	r1, #183	; 0xb7
 8005226:	f24d 3025 	movw	r0, #54053	; 0xd325
 800522a:	f7fd fb51 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD326,0x02);
 800522e:	2102      	movs	r1, #2
 8005230:	f24d 3026 	movw	r0, #54054	; 0xd326
 8005234:	f7fd fb4c 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD327,0xCF);
 8005238:	21cf      	movs	r1, #207	; 0xcf
 800523a:	f24d 3027 	movw	r0, #54055	; 0xd327
 800523e:	f7fd fb47 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD328,0x02);
 8005242:	2102      	movs	r1, #2
 8005244:	f24d 3028 	movw	r0, #54056	; 0xd328
 8005248:	f7fd fb42 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD329,0xDE);
 800524c:	21de      	movs	r1, #222	; 0xde
 800524e:	f24d 3029 	movw	r0, #54057	; 0xd329
 8005252:	f7fd fb3d 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD32A,0x02);
 8005256:	2102      	movs	r1, #2
 8005258:	f24d 302a 	movw	r0, #54058	; 0xd32a
 800525c:	f7fd fb38 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD32B,0xF2);
 8005260:	21f2      	movs	r1, #242	; 0xf2
 8005262:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8005266:	f7fd fb33 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD32C,0x02);
 800526a:	2102      	movs	r1, #2
 800526c:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8005270:	f7fd fb2e 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD32D,0xFE);
 8005274:	21fe      	movs	r1, #254	; 0xfe
 8005276:	f24d 302d 	movw	r0, #54061	; 0xd32d
 800527a:	f7fd fb29 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD32E,0x03);
 800527e:	2103      	movs	r1, #3
 8005280:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8005284:	f7fd fb24 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD32F,0x10);
 8005288:	2110      	movs	r1, #16
 800528a:	f24d 302f 	movw	r0, #54063	; 0xd32f
 800528e:	f7fd fb1f 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD330,0x03);
 8005292:	2103      	movs	r1, #3
 8005294:	f24d 3030 	movw	r0, #54064	; 0xd330
 8005298:	f7fd fb1a 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD331,0x33);
 800529c:	2133      	movs	r1, #51	; 0x33
 800529e:	f24d 3031 	movw	r0, #54065	; 0xd331
 80052a2:	f7fd fb15 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD332,0x03);
 80052a6:	2103      	movs	r1, #3
 80052a8:	f24d 3032 	movw	r0, #54066	; 0xd332
 80052ac:	f7fd fb10 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD333,0x6D);
 80052b0:	216d      	movs	r1, #109	; 0x6d
 80052b2:	f24d 3033 	movw	r0, #54067	; 0xd333
 80052b6:	f7fd fb0b 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD400,0x00);
 80052ba:	2100      	movs	r1, #0
 80052bc:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 80052c0:	f7fd fb06 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD401,0x33);
 80052c4:	2133      	movs	r1, #51	; 0x33
 80052c6:	f24d 4001 	movw	r0, #54273	; 0xd401
 80052ca:	f7fd fb01 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD402,0x00);
 80052ce:	2100      	movs	r1, #0
 80052d0:	f24d 4002 	movw	r0, #54274	; 0xd402
 80052d4:	f7fd fafc 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD403,0x34);
 80052d8:	2134      	movs	r1, #52	; 0x34
 80052da:	f24d 4003 	movw	r0, #54275	; 0xd403
 80052de:	f7fd faf7 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD404,0x00);
 80052e2:	2100      	movs	r1, #0
 80052e4:	f24d 4004 	movw	r0, #54276	; 0xd404
 80052e8:	f7fd faf2 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD405,0x3A);
 80052ec:	213a      	movs	r1, #58	; 0x3a
 80052ee:	f24d 4005 	movw	r0, #54277	; 0xd405
 80052f2:	f7fd faed 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD406,0x00);
 80052f6:	2100      	movs	r1, #0
 80052f8:	f24d 4006 	movw	r0, #54278	; 0xd406
 80052fc:	f7fd fae8 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD407,0x4A);
 8005300:	214a      	movs	r1, #74	; 0x4a
 8005302:	f24d 4007 	movw	r0, #54279	; 0xd407
 8005306:	f7fd fae3 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD408,0x00);
 800530a:	2100      	movs	r1, #0
 800530c:	f24d 4008 	movw	r0, #54280	; 0xd408
 8005310:	f7fd fade 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD409,0x5C);
 8005314:	215c      	movs	r1, #92	; 0x5c
 8005316:	f24d 4009 	movw	r0, #54281	; 0xd409
 800531a:	f7fd fad9 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD40A,0x00);
 800531e:	2100      	movs	r1, #0
 8005320:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8005324:	f7fd fad4 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD40B,0x81);
 8005328:	2181      	movs	r1, #129	; 0x81
 800532a:	f24d 400b 	movw	r0, #54283	; 0xd40b
 800532e:	f7fd facf 	bl	80028d0 <LCD_WriteReg>

		LCD_WriteReg(0xD40C,0x00);
 8005332:	2100      	movs	r1, #0
 8005334:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8005338:	f7fd faca 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD40D,0xA6);
 800533c:	21a6      	movs	r1, #166	; 0xa6
 800533e:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8005342:	f7fd fac5 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD40E,0x00);
 8005346:	2100      	movs	r1, #0
 8005348:	f24d 400e 	movw	r0, #54286	; 0xd40e
 800534c:	f7fd fac0 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD40F,0xE5);
 8005350:	21e5      	movs	r1, #229	; 0xe5
 8005352:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8005356:	f7fd fabb 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD410,0x01);
 800535a:	2101      	movs	r1, #1
 800535c:	f24d 4010 	movw	r0, #54288	; 0xd410
 8005360:	f7fd fab6 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD411,0x13);
 8005364:	2113      	movs	r1, #19
 8005366:	f24d 4011 	movw	r0, #54289	; 0xd411
 800536a:	f7fd fab1 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD412,0x01);
 800536e:	2101      	movs	r1, #1
 8005370:	f24d 4012 	movw	r0, #54290	; 0xd412
 8005374:	f7fd faac 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD413,0x54);
 8005378:	2154      	movs	r1, #84	; 0x54
 800537a:	f24d 4013 	movw	r0, #54291	; 0xd413
 800537e:	f7fd faa7 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD414,0x01);
 8005382:	2101      	movs	r1, #1
 8005384:	f24d 4014 	movw	r0, #54292	; 0xd414
 8005388:	f7fd faa2 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD415,0x82);
 800538c:	2182      	movs	r1, #130	; 0x82
 800538e:	f24d 4015 	movw	r0, #54293	; 0xd415
 8005392:	f7fd fa9d 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD416,0x01);
 8005396:	2101      	movs	r1, #1
 8005398:	f24d 4016 	movw	r0, #54294	; 0xd416
 800539c:	f7fd fa98 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD417,0xCA);
 80053a0:	21ca      	movs	r1, #202	; 0xca
 80053a2:	f24d 4017 	movw	r0, #54295	; 0xd417
 80053a6:	f7fd fa93 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD418,0x02);
 80053aa:	2102      	movs	r1, #2
 80053ac:	f24d 4018 	movw	r0, #54296	; 0xd418
 80053b0:	f7fd fa8e 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD419,0x00);
 80053b4:	2100      	movs	r1, #0
 80053b6:	f24d 4019 	movw	r0, #54297	; 0xd419
 80053ba:	f7fd fa89 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD41A,0x02);
 80053be:	2102      	movs	r1, #2
 80053c0:	f24d 401a 	movw	r0, #54298	; 0xd41a
 80053c4:	f7fd fa84 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD41B,0x01);
 80053c8:	2101      	movs	r1, #1
 80053ca:	f24d 401b 	movw	r0, #54299	; 0xd41b
 80053ce:	f7fd fa7f 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD41C,0x02);
 80053d2:	2102      	movs	r1, #2
 80053d4:	f24d 401c 	movw	r0, #54300	; 0xd41c
 80053d8:	f7fd fa7a 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD41D,0x34);
 80053dc:	2134      	movs	r1, #52	; 0x34
 80053de:	f24d 401d 	movw	r0, #54301	; 0xd41d
 80053e2:	f7fd fa75 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD41E,0x02);
 80053e6:	2102      	movs	r1, #2
 80053e8:	f24d 401e 	movw	r0, #54302	; 0xd41e
 80053ec:	f7fd fa70 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD41F,0x67);
 80053f0:	2167      	movs	r1, #103	; 0x67
 80053f2:	f24d 401f 	movw	r0, #54303	; 0xd41f
 80053f6:	f7fd fa6b 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD420,0x02);
 80053fa:	2102      	movs	r1, #2
 80053fc:	f24d 4020 	movw	r0, #54304	; 0xd420
 8005400:	f7fd fa66 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD421,0x84);
 8005404:	2184      	movs	r1, #132	; 0x84
 8005406:	f24d 4021 	movw	r0, #54305	; 0xd421
 800540a:	f7fd fa61 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD422,0x02);
 800540e:	2102      	movs	r1, #2
 8005410:	f24d 4022 	movw	r0, #54306	; 0xd422
 8005414:	f7fd fa5c 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD423,0xA4);
 8005418:	21a4      	movs	r1, #164	; 0xa4
 800541a:	f24d 4023 	movw	r0, #54307	; 0xd423
 800541e:	f7fd fa57 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD424,0x02);
 8005422:	2102      	movs	r1, #2
 8005424:	f24d 4024 	movw	r0, #54308	; 0xd424
 8005428:	f7fd fa52 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD425,0xB7);
 800542c:	21b7      	movs	r1, #183	; 0xb7
 800542e:	f24d 4025 	movw	r0, #54309	; 0xd425
 8005432:	f7fd fa4d 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD426,0x02);
 8005436:	2102      	movs	r1, #2
 8005438:	f24d 4026 	movw	r0, #54310	; 0xd426
 800543c:	f7fd fa48 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD427,0xCF);
 8005440:	21cf      	movs	r1, #207	; 0xcf
 8005442:	f24d 4027 	movw	r0, #54311	; 0xd427
 8005446:	f7fd fa43 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD428,0x02);
 800544a:	2102      	movs	r1, #2
 800544c:	f24d 4028 	movw	r0, #54312	; 0xd428
 8005450:	f7fd fa3e 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD429,0xDE);
 8005454:	21de      	movs	r1, #222	; 0xde
 8005456:	f24d 4029 	movw	r0, #54313	; 0xd429
 800545a:	f7fd fa39 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD42A,0x02);
 800545e:	2102      	movs	r1, #2
 8005460:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8005464:	f7fd fa34 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD42B,0xF2);
 8005468:	21f2      	movs	r1, #242	; 0xf2
 800546a:	f24d 402b 	movw	r0, #54315	; 0xd42b
 800546e:	f7fd fa2f 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD42C,0x02);
 8005472:	2102      	movs	r1, #2
 8005474:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8005478:	f7fd fa2a 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD42D,0xFE);
 800547c:	21fe      	movs	r1, #254	; 0xfe
 800547e:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8005482:	f7fd fa25 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD42E,0x03);
 8005486:	2103      	movs	r1, #3
 8005488:	f24d 402e 	movw	r0, #54318	; 0xd42e
 800548c:	f7fd fa20 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD42F,0x10);
 8005490:	2110      	movs	r1, #16
 8005492:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8005496:	f7fd fa1b 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD430,0x03);
 800549a:	2103      	movs	r1, #3
 800549c:	f24d 4030 	movw	r0, #54320	; 0xd430
 80054a0:	f7fd fa16 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD431,0x33);
 80054a4:	2133      	movs	r1, #51	; 0x33
 80054a6:	f24d 4031 	movw	r0, #54321	; 0xd431
 80054aa:	f7fd fa11 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD432,0x03);
 80054ae:	2103      	movs	r1, #3
 80054b0:	f24d 4032 	movw	r0, #54322	; 0xd432
 80054b4:	f7fd fa0c 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD433,0x6D);
 80054b8:	216d      	movs	r1, #109	; 0x6d
 80054ba:	f24d 4033 	movw	r0, #54323	; 0xd433
 80054be:	f7fd fa07 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD500,0x00);
 80054c2:	2100      	movs	r1, #0
 80054c4:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 80054c8:	f7fd fa02 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD501,0x33);
 80054cc:	2133      	movs	r1, #51	; 0x33
 80054ce:	f24d 5001 	movw	r0, #54529	; 0xd501
 80054d2:	f7fd f9fd 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD502,0x00);
 80054d6:	2100      	movs	r1, #0
 80054d8:	f24d 5002 	movw	r0, #54530	; 0xd502
 80054dc:	f7fd f9f8 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD503,0x34);
 80054e0:	2134      	movs	r1, #52	; 0x34
 80054e2:	f24d 5003 	movw	r0, #54531	; 0xd503
 80054e6:	f7fd f9f3 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD504,0x00);
 80054ea:	2100      	movs	r1, #0
 80054ec:	f24d 5004 	movw	r0, #54532	; 0xd504
 80054f0:	f7fd f9ee 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD505,0x3A);
 80054f4:	213a      	movs	r1, #58	; 0x3a
 80054f6:	f24d 5005 	movw	r0, #54533	; 0xd505
 80054fa:	f7fd f9e9 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD506,0x00);
 80054fe:	2100      	movs	r1, #0
 8005500:	f24d 5006 	movw	r0, #54534	; 0xd506
 8005504:	f7fd f9e4 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD507,0x4A);
 8005508:	214a      	movs	r1, #74	; 0x4a
 800550a:	f24d 5007 	movw	r0, #54535	; 0xd507
 800550e:	f7fd f9df 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD508,0x00);
 8005512:	2100      	movs	r1, #0
 8005514:	f24d 5008 	movw	r0, #54536	; 0xd508
 8005518:	f7fd f9da 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD509,0x5C);
 800551c:	215c      	movs	r1, #92	; 0x5c
 800551e:	f24d 5009 	movw	r0, #54537	; 0xd509
 8005522:	f7fd f9d5 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD50A,0x00);
 8005526:	2100      	movs	r1, #0
 8005528:	f24d 500a 	movw	r0, #54538	; 0xd50a
 800552c:	f7fd f9d0 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD50B,0x81);
 8005530:	2181      	movs	r1, #129	; 0x81
 8005532:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8005536:	f7fd f9cb 	bl	80028d0 <LCD_WriteReg>

		LCD_WriteReg(0xD50C,0x00);
 800553a:	2100      	movs	r1, #0
 800553c:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8005540:	f7fd f9c6 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD50D,0xA6);
 8005544:	21a6      	movs	r1, #166	; 0xa6
 8005546:	f24d 500d 	movw	r0, #54541	; 0xd50d
 800554a:	f7fd f9c1 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD50E,0x00);
 800554e:	2100      	movs	r1, #0
 8005550:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8005554:	f7fd f9bc 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD50F,0xE5);
 8005558:	21e5      	movs	r1, #229	; 0xe5
 800555a:	f24d 500f 	movw	r0, #54543	; 0xd50f
 800555e:	f7fd f9b7 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD510,0x01);
 8005562:	2101      	movs	r1, #1
 8005564:	f24d 5010 	movw	r0, #54544	; 0xd510
 8005568:	f7fd f9b2 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD511,0x13);
 800556c:	2113      	movs	r1, #19
 800556e:	f24d 5011 	movw	r0, #54545	; 0xd511
 8005572:	f7fd f9ad 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD512,0x01);
 8005576:	2101      	movs	r1, #1
 8005578:	f24d 5012 	movw	r0, #54546	; 0xd512
 800557c:	f7fd f9a8 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD513,0x54);
 8005580:	2154      	movs	r1, #84	; 0x54
 8005582:	f24d 5013 	movw	r0, #54547	; 0xd513
 8005586:	f7fd f9a3 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD514,0x01);
 800558a:	2101      	movs	r1, #1
 800558c:	f24d 5014 	movw	r0, #54548	; 0xd514
 8005590:	f7fd f99e 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD515,0x82);
 8005594:	2182      	movs	r1, #130	; 0x82
 8005596:	f24d 5015 	movw	r0, #54549	; 0xd515
 800559a:	f7fd f999 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD516,0x01);
 800559e:	2101      	movs	r1, #1
 80055a0:	f24d 5016 	movw	r0, #54550	; 0xd516
 80055a4:	f7fd f994 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD517,0xCA);
 80055a8:	21ca      	movs	r1, #202	; 0xca
 80055aa:	f24d 5017 	movw	r0, #54551	; 0xd517
 80055ae:	f7fd f98f 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD518,0x02);
 80055b2:	2102      	movs	r1, #2
 80055b4:	f24d 5018 	movw	r0, #54552	; 0xd518
 80055b8:	f7fd f98a 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD519,0x00);
 80055bc:	2100      	movs	r1, #0
 80055be:	f24d 5019 	movw	r0, #54553	; 0xd519
 80055c2:	f7fd f985 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD51A,0x02);
 80055c6:	2102      	movs	r1, #2
 80055c8:	f24d 501a 	movw	r0, #54554	; 0xd51a
 80055cc:	f7fd f980 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD51B,0x01);
 80055d0:	2101      	movs	r1, #1
 80055d2:	f24d 501b 	movw	r0, #54555	; 0xd51b
 80055d6:	f7fd f97b 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD51C,0x02);
 80055da:	2102      	movs	r1, #2
 80055dc:	f24d 501c 	movw	r0, #54556	; 0xd51c
 80055e0:	f7fd f976 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD51D,0x34);
 80055e4:	2134      	movs	r1, #52	; 0x34
 80055e6:	f24d 501d 	movw	r0, #54557	; 0xd51d
 80055ea:	f7fd f971 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD51E,0x02);
 80055ee:	2102      	movs	r1, #2
 80055f0:	f24d 501e 	movw	r0, #54558	; 0xd51e
 80055f4:	f7fd f96c 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD51F,0x67);
 80055f8:	2167      	movs	r1, #103	; 0x67
 80055fa:	f24d 501f 	movw	r0, #54559	; 0xd51f
 80055fe:	f7fd f967 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD520,0x02);
 8005602:	2102      	movs	r1, #2
 8005604:	f24d 5020 	movw	r0, #54560	; 0xd520
 8005608:	f7fd f962 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD521,0x84);
 800560c:	2184      	movs	r1, #132	; 0x84
 800560e:	f24d 5021 	movw	r0, #54561	; 0xd521
 8005612:	f7fd f95d 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD522,0x02);
 8005616:	2102      	movs	r1, #2
 8005618:	f24d 5022 	movw	r0, #54562	; 0xd522
 800561c:	f7fd f958 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD523,0xA4);
 8005620:	21a4      	movs	r1, #164	; 0xa4
 8005622:	f24d 5023 	movw	r0, #54563	; 0xd523
 8005626:	f7fd f953 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD524,0x02);
 800562a:	2102      	movs	r1, #2
 800562c:	f24d 5024 	movw	r0, #54564	; 0xd524
 8005630:	f7fd f94e 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD525,0xB7);
 8005634:	21b7      	movs	r1, #183	; 0xb7
 8005636:	f24d 5025 	movw	r0, #54565	; 0xd525
 800563a:	f7fd f949 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD526,0x02);
 800563e:	2102      	movs	r1, #2
 8005640:	f24d 5026 	movw	r0, #54566	; 0xd526
 8005644:	f7fd f944 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD527,0xCF);
 8005648:	21cf      	movs	r1, #207	; 0xcf
 800564a:	f24d 5027 	movw	r0, #54567	; 0xd527
 800564e:	f7fd f93f 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD528,0x02);
 8005652:	2102      	movs	r1, #2
 8005654:	f24d 5028 	movw	r0, #54568	; 0xd528
 8005658:	f7fd f93a 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD529,0xDE);
 800565c:	21de      	movs	r1, #222	; 0xde
 800565e:	f24d 5029 	movw	r0, #54569	; 0xd529
 8005662:	f7fd f935 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD52A,0x02);
 8005666:	2102      	movs	r1, #2
 8005668:	f24d 502a 	movw	r0, #54570	; 0xd52a
 800566c:	f7fd f930 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD52B,0xF2);
 8005670:	21f2      	movs	r1, #242	; 0xf2
 8005672:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8005676:	f7fd f92b 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD52C,0x02);
 800567a:	2102      	movs	r1, #2
 800567c:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8005680:	f7fd f926 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD52D,0xFE);
 8005684:	21fe      	movs	r1, #254	; 0xfe
 8005686:	f24d 502d 	movw	r0, #54573	; 0xd52d
 800568a:	f7fd f921 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD52E,0x03);
 800568e:	2103      	movs	r1, #3
 8005690:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8005694:	f7fd f91c 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD52F,0x10);
 8005698:	2110      	movs	r1, #16
 800569a:	f24d 502f 	movw	r0, #54575	; 0xd52f
 800569e:	f7fd f917 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD530,0x03);
 80056a2:	2103      	movs	r1, #3
 80056a4:	f24d 5030 	movw	r0, #54576	; 0xd530
 80056a8:	f7fd f912 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD531,0x33);
 80056ac:	2133      	movs	r1, #51	; 0x33
 80056ae:	f24d 5031 	movw	r0, #54577	; 0xd531
 80056b2:	f7fd f90d 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD532,0x03);
 80056b6:	2103      	movs	r1, #3
 80056b8:	f24d 5032 	movw	r0, #54578	; 0xd532
 80056bc:	f7fd f908 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD533,0x6D);
 80056c0:	216d      	movs	r1, #109	; 0x6d
 80056c2:	f24d 5033 	movw	r0, #54579	; 0xd533
 80056c6:	f7fd f903 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD600,0x00);
 80056ca:	2100      	movs	r1, #0
 80056cc:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 80056d0:	f7fd f8fe 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD601,0x33);
 80056d4:	2133      	movs	r1, #51	; 0x33
 80056d6:	f24d 6001 	movw	r0, #54785	; 0xd601
 80056da:	f7fd f8f9 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD602,0x00);
 80056de:	2100      	movs	r1, #0
 80056e0:	f24d 6002 	movw	r0, #54786	; 0xd602
 80056e4:	f7fd f8f4 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD603,0x34);
 80056e8:	2134      	movs	r1, #52	; 0x34
 80056ea:	f24d 6003 	movw	r0, #54787	; 0xd603
 80056ee:	f7fd f8ef 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD604,0x00);
 80056f2:	2100      	movs	r1, #0
 80056f4:	f24d 6004 	movw	r0, #54788	; 0xd604
 80056f8:	f7fd f8ea 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD605,0x3A);
 80056fc:	213a      	movs	r1, #58	; 0x3a
 80056fe:	f24d 6005 	movw	r0, #54789	; 0xd605
 8005702:	f7fd f8e5 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD606,0x00);
 8005706:	2100      	movs	r1, #0
 8005708:	f24d 6006 	movw	r0, #54790	; 0xd606
 800570c:	f7fd f8e0 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD607,0x4A);
 8005710:	214a      	movs	r1, #74	; 0x4a
 8005712:	f24d 6007 	movw	r0, #54791	; 0xd607
 8005716:	f7fd f8db 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD608,0x00);
 800571a:	2100      	movs	r1, #0
 800571c:	f24d 6008 	movw	r0, #54792	; 0xd608
 8005720:	f7fd f8d6 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD609,0x5C);
 8005724:	215c      	movs	r1, #92	; 0x5c
 8005726:	f24d 6009 	movw	r0, #54793	; 0xd609
 800572a:	f7fd f8d1 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD60A,0x00);
 800572e:	2100      	movs	r1, #0
 8005730:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8005734:	f7fd f8cc 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD60B,0x81);
 8005738:	2181      	movs	r1, #129	; 0x81
 800573a:	f24d 600b 	movw	r0, #54795	; 0xd60b
 800573e:	f7fd f8c7 	bl	80028d0 <LCD_WriteReg>

		LCD_WriteReg(0xD60C,0x00);
 8005742:	2100      	movs	r1, #0
 8005744:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8005748:	f7fd f8c2 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD60D,0xA6);
 800574c:	21a6      	movs	r1, #166	; 0xa6
 800574e:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8005752:	f7fd f8bd 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD60E,0x00);
 8005756:	2100      	movs	r1, #0
 8005758:	f24d 600e 	movw	r0, #54798	; 0xd60e
 800575c:	f7fd f8b8 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD60F,0xE5);
 8005760:	21e5      	movs	r1, #229	; 0xe5
 8005762:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8005766:	f7fd f8b3 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD610,0x01);
 800576a:	2101      	movs	r1, #1
 800576c:	f24d 6010 	movw	r0, #54800	; 0xd610
 8005770:	f7fd f8ae 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD611,0x13);
 8005774:	2113      	movs	r1, #19
 8005776:	f24d 6011 	movw	r0, #54801	; 0xd611
 800577a:	f7fd f8a9 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD612,0x01);
 800577e:	2101      	movs	r1, #1
 8005780:	f24d 6012 	movw	r0, #54802	; 0xd612
 8005784:	f7fd f8a4 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD613,0x54);
 8005788:	2154      	movs	r1, #84	; 0x54
 800578a:	f24d 6013 	movw	r0, #54803	; 0xd613
 800578e:	f7fd f89f 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD614,0x01);
 8005792:	2101      	movs	r1, #1
 8005794:	f24d 6014 	movw	r0, #54804	; 0xd614
 8005798:	f7fd f89a 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD615,0x82);
 800579c:	2182      	movs	r1, #130	; 0x82
 800579e:	f24d 6015 	movw	r0, #54805	; 0xd615
 80057a2:	f7fd f895 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD616,0x01);
 80057a6:	2101      	movs	r1, #1
 80057a8:	f24d 6016 	movw	r0, #54806	; 0xd616
 80057ac:	f7fd f890 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD617,0xCA);
 80057b0:	21ca      	movs	r1, #202	; 0xca
 80057b2:	f24d 6017 	movw	r0, #54807	; 0xd617
 80057b6:	f7fd f88b 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD618,0x02);
 80057ba:	2102      	movs	r1, #2
 80057bc:	f24d 6018 	movw	r0, #54808	; 0xd618
 80057c0:	f7fd f886 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD619,0x00);
 80057c4:	2100      	movs	r1, #0
 80057c6:	f24d 6019 	movw	r0, #54809	; 0xd619
 80057ca:	f7fd f881 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD61A,0x02);
 80057ce:	2102      	movs	r1, #2
 80057d0:	f24d 601a 	movw	r0, #54810	; 0xd61a
 80057d4:	f7fd f87c 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD61B,0x01);
 80057d8:	2101      	movs	r1, #1
 80057da:	f24d 601b 	movw	r0, #54811	; 0xd61b
 80057de:	f7fd f877 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD61C,0x02);
 80057e2:	2102      	movs	r1, #2
 80057e4:	f24d 601c 	movw	r0, #54812	; 0xd61c
 80057e8:	f7fd f872 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD61D,0x34);
 80057ec:	2134      	movs	r1, #52	; 0x34
 80057ee:	f24d 601d 	movw	r0, #54813	; 0xd61d
 80057f2:	f7fd f86d 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD61E,0x02);
 80057f6:	2102      	movs	r1, #2
 80057f8:	f24d 601e 	movw	r0, #54814	; 0xd61e
 80057fc:	f7fd f868 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD61F,0x67);
 8005800:	2167      	movs	r1, #103	; 0x67
 8005802:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8005806:	f7fd f863 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD620,0x02);
 800580a:	2102      	movs	r1, #2
 800580c:	f24d 6020 	movw	r0, #54816	; 0xd620
 8005810:	f7fd f85e 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD621,0x84);
 8005814:	2184      	movs	r1, #132	; 0x84
 8005816:	f24d 6021 	movw	r0, #54817	; 0xd621
 800581a:	f7fd f859 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD622,0x02);
 800581e:	2102      	movs	r1, #2
 8005820:	f24d 6022 	movw	r0, #54818	; 0xd622
 8005824:	f7fd f854 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD623,0xA4);
 8005828:	21a4      	movs	r1, #164	; 0xa4
 800582a:	f24d 6023 	movw	r0, #54819	; 0xd623
 800582e:	f7fd f84f 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD624,0x02);
 8005832:	2102      	movs	r1, #2
 8005834:	f24d 6024 	movw	r0, #54820	; 0xd624
 8005838:	f7fd f84a 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD625,0xB7);
 800583c:	21b7      	movs	r1, #183	; 0xb7
 800583e:	f24d 6025 	movw	r0, #54821	; 0xd625
 8005842:	f7fd f845 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD626,0x02);
 8005846:	2102      	movs	r1, #2
 8005848:	f24d 6026 	movw	r0, #54822	; 0xd626
 800584c:	f7fd f840 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD627,0xCF);
 8005850:	21cf      	movs	r1, #207	; 0xcf
 8005852:	f24d 6027 	movw	r0, #54823	; 0xd627
 8005856:	f7fd f83b 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD628,0x02);
 800585a:	2102      	movs	r1, #2
 800585c:	f24d 6028 	movw	r0, #54824	; 0xd628
 8005860:	f7fd f836 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD629,0xDE);
 8005864:	21de      	movs	r1, #222	; 0xde
 8005866:	f24d 6029 	movw	r0, #54825	; 0xd629
 800586a:	f7fd f831 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD62A,0x02);
 800586e:	2102      	movs	r1, #2
 8005870:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8005874:	f7fd f82c 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD62B,0xF2);
 8005878:	21f2      	movs	r1, #242	; 0xf2
 800587a:	f24d 602b 	movw	r0, #54827	; 0xd62b
 800587e:	f7fd f827 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD62C,0x02);
 8005882:	2102      	movs	r1, #2
 8005884:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8005888:	f7fd f822 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD62D,0xFE);
 800588c:	21fe      	movs	r1, #254	; 0xfe
 800588e:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8005892:	f7fd f81d 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD62E,0x03);
 8005896:	2103      	movs	r1, #3
 8005898:	f24d 602e 	movw	r0, #54830	; 0xd62e
 800589c:	f7fd f818 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD62F,0x10);
 80058a0:	2110      	movs	r1, #16
 80058a2:	f24d 602f 	movw	r0, #54831	; 0xd62f
 80058a6:	f7fd f813 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD630,0x03);
 80058aa:	2103      	movs	r1, #3
 80058ac:	f24d 6030 	movw	r0, #54832	; 0xd630
 80058b0:	f7fd f80e 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD631,0x33);
 80058b4:	2133      	movs	r1, #51	; 0x33
 80058b6:	f24d 6031 	movw	r0, #54833	; 0xd631
 80058ba:	f7fd f809 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD632,0x03);
 80058be:	2103      	movs	r1, #3
 80058c0:	f24d 6032 	movw	r0, #54834	; 0xd632
 80058c4:	f7fd f804 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xD633,0x6D);
 80058c8:	216d      	movs	r1, #109	; 0x6d
 80058ca:	f24d 6033 	movw	r0, #54835	; 0xd633
 80058ce:	f7fc ffff 	bl	80028d0 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000,0x55);
 80058d2:	2155      	movs	r1, #85	; 0x55
 80058d4:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80058d8:	f7fc fffa 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 80058dc:	21aa      	movs	r1, #170	; 0xaa
 80058de:	f24f 0001 	movw	r0, #61441	; 0xf001
 80058e2:	f7fc fff5 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 80058e6:	2152      	movs	r1, #82	; 0x52
 80058e8:	f24f 0002 	movw	r0, #61442	; 0xf002
 80058ec:	f7fc fff0 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 80058f0:	2108      	movs	r1, #8
 80058f2:	f24f 0003 	movw	r0, #61443	; 0xf003
 80058f6:	f7fc ffeb 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x00);
 80058fa:	2100      	movs	r1, #0
 80058fc:	f24f 0004 	movw	r0, #61444	; 0xf004
 8005900:	f7fc ffe6 	bl	80028d0 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8005904:	21cc      	movs	r1, #204	; 0xcc
 8005906:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 800590a:	f7fc ffe1 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 800590e:	2100      	movs	r1, #0
 8005910:	f24b 1001 	movw	r0, #45313	; 0xb101
 8005914:	f7fc ffdc 	bl	80028d0 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600,0x05);
 8005918:	2105      	movs	r1, #5
 800591a:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 800591e:	f7fc ffd7 	bl	80028d0 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700,0x70);
 8005922:	2170      	movs	r1, #112	; 0x70
 8005924:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8005928:	f7fc ffd2 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x70);
 800592c:	2170      	movs	r1, #112	; 0x70
 800592e:	f24b 7001 	movw	r0, #46849	; 0xb701
 8005932:	f7fc ffcd 	bl	80028d0 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800,0x01);
 8005936:	2101      	movs	r1, #1
 8005938:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 800593c:	f7fc ffc8 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x03);
 8005940:	2103      	movs	r1, #3
 8005942:	f64b 0001 	movw	r0, #47105	; 0xb801
 8005946:	f7fc ffc3 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x03);
 800594a:	2103      	movs	r1, #3
 800594c:	f64b 0002 	movw	r0, #47106	; 0xb802
 8005950:	f7fc ffbe 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xB803,0x03);
 8005954:	2103      	movs	r1, #3
 8005956:	f64b 0003 	movw	r0, #47107	; 0xb803
 800595a:	f7fc ffb9 	bl	80028d0 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00,0x02);
 800595e:	2102      	movs	r1, #2
 8005960:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8005964:	f7fc ffb4 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x00);
 8005968:	2100      	movs	r1, #0
 800596a:	f64b 4001 	movw	r0, #48129	; 0xbc01
 800596e:	f7fc ffaf 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 8005972:	2100      	movs	r1, #0
 8005974:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8005978:	f7fc ffaa 	bl	80028d0 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900,0xD0);
 800597c:	21d0      	movs	r1, #208	; 0xd0
 800597e:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8005982:	f7fc ffa5 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xC901,0x02);
 8005986:	2102      	movs	r1, #2
 8005988:	f64c 1001 	movw	r0, #51457	; 0xc901
 800598c:	f7fc ffa0 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xC902,0x50);
 8005990:	2150      	movs	r1, #80	; 0x50
 8005992:	f64c 1002 	movw	r0, #51458	; 0xc902
 8005996:	f7fc ff9b 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xC903,0x50);
 800599a:	2150      	movs	r1, #80	; 0x50
 800599c:	f64c 1003 	movw	r0, #51459	; 0xc903
 80059a0:	f7fc ff96 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xC904,0x50);
 80059a4:	2150      	movs	r1, #80	; 0x50
 80059a6:	f64c 1004 	movw	r0, #51460	; 0xc904
 80059aa:	f7fc ff91 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x3500,0x00);
 80059ae:	2100      	movs	r1, #0
 80059b0:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 80059b4:	f7fc ff8c 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x3A00,0x55);  //16-bit/pixel
 80059b8:	2155      	movs	r1, #85	; 0x55
 80059ba:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 80059be:	f7fc ff87 	bl	80028d0 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 80059c2:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 80059c6:	f7fc ff55 	bl	8002874 <LCD_WR_REG>
		delay_us(120);
 80059ca:	2078      	movs	r0, #120	; 0x78
 80059cc:	f7fc fbd8 	bl	8002180 <delay_us>
		LCD_WR_REG(0x2900);
 80059d0:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 80059d4:	f7fc ff4e 	bl	8002874 <LCD_WR_REG>
 80059d8:	f001 b95f 	b.w	8006c9a <LCD_Init+0x3852>
	}else if(lcddev.id==0x9325)//9325
 80059dc:	4bec      	ldr	r3, [pc, #944]	; (8005d90 <LCD_Init+0x2948>)
 80059de:	889b      	ldrh	r3, [r3, #4]
 80059e0:	f249 3225 	movw	r2, #37669	; 0x9325
 80059e4:	4293      	cmp	r3, r2
 80059e6:	f040 80d7 	bne.w	8005b98 <LCD_Init+0x2750>
	{
		LCD_WriteReg(0x00E5,0x78F0);
 80059ea:	f647 01f0 	movw	r1, #30960	; 0x78f0
 80059ee:	20e5      	movs	r0, #229	; 0xe5
 80059f0:	f7fc ff6e 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0001,0x0100);
 80059f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059f8:	2001      	movs	r0, #1
 80059fa:	f7fc ff69 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0002,0x0700);
 80059fe:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005a02:	2002      	movs	r0, #2
 8005a04:	f7fc ff64 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0003,0x1030);
 8005a08:	f241 0130 	movw	r1, #4144	; 0x1030
 8005a0c:	2003      	movs	r0, #3
 8005a0e:	f7fc ff5f 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0004,0x0000);
 8005a12:	2100      	movs	r1, #0
 8005a14:	2004      	movs	r0, #4
 8005a16:	f7fc ff5b 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 8005a1a:	f240 2102 	movw	r1, #514	; 0x202
 8005a1e:	2008      	movs	r0, #8
 8005a20:	f7fc ff56 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0009,0x0000);
 8005a24:	2100      	movs	r1, #0
 8005a26:	2009      	movs	r0, #9
 8005a28:	f7fc ff52 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x000A,0x0000);
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	200a      	movs	r0, #10
 8005a30:	f7fc ff4e 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x000C,0x0000);
 8005a34:	2100      	movs	r1, #0
 8005a36:	200c      	movs	r0, #12
 8005a38:	f7fc ff4a 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x000D,0x0000);
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	200d      	movs	r0, #13
 8005a40:	f7fc ff46 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x000F,0x0000);
 8005a44:	2100      	movs	r1, #0
 8005a46:	200f      	movs	r0, #15
 8005a48:	f7fc ff42 	bl	80028d0 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010,0x0000);
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	2010      	movs	r0, #16
 8005a50:	f7fc ff3e 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0007);
 8005a54:	2107      	movs	r1, #7
 8005a56:	2011      	movs	r0, #17
 8005a58:	f7fc ff3a 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0012,0x0000);
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	2012      	movs	r0, #18
 8005a60:	f7fc ff36 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0013,0x0000);
 8005a64:	2100      	movs	r1, #0
 8005a66:	2013      	movs	r0, #19
 8005a68:	f7fc ff32 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0007,0x0000);
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	2007      	movs	r0, #7
 8005a70:	f7fc ff2e 	bl	80028d0 <LCD_WriteReg>
		//vgh
		LCD_WriteReg(0x0010,0x1690);
 8005a74:	f241 6190 	movw	r1, #5776	; 0x1690
 8005a78:	2010      	movs	r0, #16
 8005a7a:	f7fc ff29 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0227);
 8005a7e:	f240 2127 	movw	r1, #551	; 0x227
 8005a82:	2011      	movs	r0, #17
 8005a84:	f7fc ff24 	bl	80028d0 <LCD_WriteReg>
		//delayms(100);
		//vregiout
		LCD_WriteReg(0x0012,0x009D); //0x001b
 8005a88:	219d      	movs	r1, #157	; 0x9d
 8005a8a:	2012      	movs	r0, #18
 8005a8c:	f7fc ff20 	bl	80028d0 <LCD_WriteReg>
		//delayms(100);
		//vom amplitude
		LCD_WriteReg(0x0013,0x1900);
 8005a90:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8005a94:	2013      	movs	r0, #19
 8005a96:	f7fc ff1b 	bl	80028d0 <LCD_WriteReg>
		//delayms(100);
		//vom H
		LCD_WriteReg(0x0029,0x0025);
 8005a9a:	2125      	movs	r1, #37	; 0x25
 8005a9c:	2029      	movs	r0, #41	; 0x29
 8005a9e:	f7fc ff17 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x002B,0x000D);
 8005aa2:	210d      	movs	r1, #13
 8005aa4:	202b      	movs	r0, #43	; 0x2b
 8005aa6:	f7fc ff13 	bl	80028d0 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030,0x0007);
 8005aaa:	2107      	movs	r1, #7
 8005aac:	2030      	movs	r0, #48	; 0x30
 8005aae:	f7fc ff0f 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x0303);
 8005ab2:	f240 3103 	movw	r1, #771	; 0x303
 8005ab6:	2031      	movs	r0, #49	; 0x31
 8005ab8:	f7fc ff0a 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0003);// 0006
 8005abc:	2103      	movs	r1, #3
 8005abe:	2032      	movs	r0, #50	; 0x32
 8005ac0:	f7fc ff06 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x0206);
 8005ac4:	f240 2106 	movw	r1, #518	; 0x206
 8005ac8:	2035      	movs	r0, #53	; 0x35
 8005aca:	f7fc ff01 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x0008);
 8005ace:	2108      	movs	r1, #8
 8005ad0:	2036      	movs	r0, #54	; 0x36
 8005ad2:	f7fc fefd 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x0406);
 8005ad6:	f240 4106 	movw	r1, #1030	; 0x406
 8005ada:	2037      	movs	r0, #55	; 0x37
 8005adc:	f7fc fef8 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x0304);//0200
 8005ae0:	f44f 7141 	mov.w	r1, #772	; 0x304
 8005ae4:	2038      	movs	r0, #56	; 0x38
 8005ae6:	f7fc fef3 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0007);
 8005aea:	2107      	movs	r1, #7
 8005aec:	2039      	movs	r0, #57	; 0x39
 8005aee:	f7fc feef 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x003C,0x0602);// 0504
 8005af2:	f240 6102 	movw	r1, #1538	; 0x602
 8005af6:	203c      	movs	r0, #60	; 0x3c
 8005af8:	f7fc feea 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x003D,0x0008);
 8005afc:	2108      	movs	r1, #8
 8005afe:	203d      	movs	r0, #61	; 0x3d
 8005b00:	f7fc fee6 	bl	80028d0 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050,0x0000);
 8005b04:	2100      	movs	r1, #0
 8005b06:	2050      	movs	r0, #80	; 0x50
 8005b08:	f7fc fee2 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0051,0x00EF);
 8005b0c:	21ef      	movs	r1, #239	; 0xef
 8005b0e:	2051      	movs	r0, #81	; 0x51
 8005b10:	f7fc fede 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0052,0x0000);
 8005b14:	2100      	movs	r1, #0
 8005b16:	2052      	movs	r0, #82	; 0x52
 8005b18:	f7fc feda 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0053,0x013F);
 8005b1c:	f240 113f 	movw	r1, #319	; 0x13f
 8005b20:	2053      	movs	r0, #83	; 0x53
 8005b22:	f7fc fed5 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0060,0xA700);
 8005b26:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8005b2a:	2060      	movs	r0, #96	; 0x60
 8005b2c:	f7fc fed0 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0061,0x0001);
 8005b30:	2101      	movs	r1, #1
 8005b32:	2061      	movs	r0, #97	; 0x61
 8005b34:	f7fc fecc 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x006A,0x0000);
 8005b38:	2100      	movs	r1, #0
 8005b3a:	206a      	movs	r0, #106	; 0x6a
 8005b3c:	f7fc fec8 	bl	80028d0 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080,0x0000);
 8005b40:	2100      	movs	r1, #0
 8005b42:	2080      	movs	r0, #128	; 0x80
 8005b44:	f7fc fec4 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0081,0x0000);
 8005b48:	2100      	movs	r1, #0
 8005b4a:	2081      	movs	r0, #129	; 0x81
 8005b4c:	f7fc fec0 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0082,0x0000);
 8005b50:	2100      	movs	r1, #0
 8005b52:	2082      	movs	r0, #130	; 0x82
 8005b54:	f7fc febc 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0083,0x0000);
 8005b58:	2100      	movs	r1, #0
 8005b5a:	2083      	movs	r0, #131	; 0x83
 8005b5c:	f7fc feb8 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0084,0x0000);
 8005b60:	2100      	movs	r1, #0
 8005b62:	2084      	movs	r0, #132	; 0x84
 8005b64:	f7fc feb4 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0085,0x0000);
 8005b68:	2100      	movs	r1, #0
 8005b6a:	2085      	movs	r0, #133	; 0x85
 8005b6c:	f7fc feb0 	bl	80028d0 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090,0x0010);
 8005b70:	2110      	movs	r1, #16
 8005b72:	2090      	movs	r0, #144	; 0x90
 8005b74:	f7fc feac 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0600);
 8005b78:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005b7c:	2092      	movs	r0, #146	; 0x92
 8005b7e:	f7fc fea7 	bl	80028d0 <LCD_WriteReg>

		LCD_WriteReg(0x0007,0x0133);
 8005b82:	f240 1133 	movw	r1, #307	; 0x133
 8005b86:	2007      	movs	r0, #7
 8005b88:	f7fc fea2 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x00,0x0022);//
 8005b8c:	2122      	movs	r1, #34	; 0x22
 8005b8e:	2000      	movs	r0, #0
 8005b90:	f7fc fe9e 	bl	80028d0 <LCD_WriteReg>
 8005b94:	f001 b881 	b.w	8006c9a <LCD_Init+0x3852>
	}else if(lcddev.id==0x9328)//ILI9328   OK
 8005b98:	4b7d      	ldr	r3, [pc, #500]	; (8005d90 <LCD_Init+0x2948>)
 8005b9a:	889b      	ldrh	r3, [r3, #4]
 8005b9c:	f249 3228 	movw	r2, #37672	; 0x9328
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	f040 80f7 	bne.w	8005d94 <LCD_Init+0x294c>
	{
  		LCD_WriteReg(0x00EC,0x108F);// internal timeing
 8005ba6:	f241 018f 	movw	r1, #4239	; 0x108f
 8005baa:	20ec      	movs	r0, #236	; 0xec
 8005bac:	f7fc fe90 	bl	80028d0 <LCD_WriteReg>
 		LCD_WriteReg(0x00EF,0x1234);// ADD
 8005bb0:	f241 2134 	movw	r1, #4660	; 0x1234
 8005bb4:	20ef      	movs	r0, #239	; 0xef
 8005bb6:	f7fc fe8b 	bl	80028d0 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);
        //LCD_WriteReg(0x0000,0x0001);//开启内部时钟
        LCD_WriteReg(0x0001,0x0100);
 8005bba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005bbe:	2001      	movs	r0, #1
 8005bc0:	f7fc fe86 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0002,0x0700);//电源开启
 8005bc4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005bc8:	2002      	movs	r0, #2
 8005bca:	f7fc fe81 	bl	80028d0 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
        LCD_WriteReg(0x0003,(1<<12)|(3<<4)|(0<<3) );//65K
 8005bce:	f241 0130 	movw	r1, #4144	; 0x1030
 8005bd2:	2003      	movs	r0, #3
 8005bd4:	f7fc fe7c 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0004,0x0000);
 8005bd8:	2100      	movs	r1, #0
 8005bda:	2004      	movs	r0, #4
 8005bdc:	f7fc fe78 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0008,0x0202);
 8005be0:	f240 2102 	movw	r1, #514	; 0x202
 8005be4:	2008      	movs	r0, #8
 8005be6:	f7fc fe73 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0009,0x0000);
 8005bea:	2100      	movs	r1, #0
 8005bec:	2009      	movs	r0, #9
 8005bee:	f7fc fe6f 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x000a,0x0000);//display setting
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	200a      	movs	r0, #10
 8005bf6:	f7fc fe6b 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x000c,0x0001);//display setting
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	200c      	movs	r0, #12
 8005bfe:	f7fc fe67 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x000d,0x0000);//0f3c
 8005c02:	2100      	movs	r1, #0
 8005c04:	200d      	movs	r0, #13
 8005c06:	f7fc fe63 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x000f,0x0000);
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	200f      	movs	r0, #15
 8005c0e:	f7fc fe5f 	bl	80028d0 <LCD_WriteReg>
		//电源配置
        LCD_WriteReg(0x0010,0x0000);
 8005c12:	2100      	movs	r1, #0
 8005c14:	2010      	movs	r0, #16
 8005c16:	f7fc fe5b 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0007);
 8005c1a:	2107      	movs	r1, #7
 8005c1c:	2011      	movs	r0, #17
 8005c1e:	f7fc fe57 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x0000);
 8005c22:	2100      	movs	r1, #0
 8005c24:	2012      	movs	r0, #18
 8005c26:	f7fc fe53 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0013,0x0000);
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	2013      	movs	r0, #19
 8005c2e:	f7fc fe4f 	bl	80028d0 <LCD_WriteReg>
     	LCD_WriteReg(0x0007,0x0001);
 8005c32:	2101      	movs	r1, #1
 8005c34:	2007      	movs	r0, #7
 8005c36:	f7fc fe4b 	bl	80028d0 <LCD_WriteReg>
     	HAL_Delay(50);
 8005c3a:	2032      	movs	r0, #50	; 0x32
 8005c3c:	f001 fa92 	bl	8007164 <HAL_Delay>
        LCD_WriteReg(0x0010,0x1490);
 8005c40:	f241 4190 	movw	r1, #5264	; 0x1490
 8005c44:	2010      	movs	r0, #16
 8005c46:	f7fc fe43 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0227);
 8005c4a:	f240 2127 	movw	r1, #551	; 0x227
 8005c4e:	2011      	movs	r0, #17
 8005c50:	f7fc fe3e 	bl	80028d0 <LCD_WriteReg>
        HAL_Delay(50);
 8005c54:	2032      	movs	r0, #50	; 0x32
 8005c56:	f001 fa85 	bl	8007164 <HAL_Delay>
        LCD_WriteReg(0x0012,0x008A);
 8005c5a:	218a      	movs	r1, #138	; 0x8a
 8005c5c:	2012      	movs	r0, #18
 8005c5e:	f7fc fe37 	bl	80028d0 <LCD_WriteReg>
        HAL_Delay(50);
 8005c62:	2032      	movs	r0, #50	; 0x32
 8005c64:	f001 fa7e 	bl	8007164 <HAL_Delay>
        LCD_WriteReg(0x0013,0x1a00);
 8005c68:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8005c6c:	2013      	movs	r0, #19
 8005c6e:	f7fc fe2f 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0029,0x0006);
 8005c72:	2106      	movs	r1, #6
 8005c74:	2029      	movs	r0, #41	; 0x29
 8005c76:	f7fc fe2b 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x002b,0x000d);
 8005c7a:	210d      	movs	r1, #13
 8005c7c:	202b      	movs	r0, #43	; 0x2b
 8005c7e:	f7fc fe27 	bl	80028d0 <LCD_WriteReg>
        HAL_Delay(50);
 8005c82:	2032      	movs	r0, #50	; 0x32
 8005c84:	f001 fa6e 	bl	8007164 <HAL_Delay>
        LCD_WriteReg(0x0020,0x0000);
 8005c88:	2100      	movs	r1, #0
 8005c8a:	2020      	movs	r0, #32
 8005c8c:	f7fc fe20 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0021,0x0000);
 8005c90:	2100      	movs	r1, #0
 8005c92:	2021      	movs	r0, #33	; 0x21
 8005c94:	f7fc fe1c 	bl	80028d0 <LCD_WriteReg>
        HAL_Delay(50);
 8005c98:	2032      	movs	r0, #50	; 0x32
 8005c9a:	f001 fa63 	bl	8007164 <HAL_Delay>
		//伽马校正
        LCD_WriteReg(0x0030,0x0000);
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	2030      	movs	r0, #48	; 0x30
 8005ca2:	f7fc fe15 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0031,0x0604);
 8005ca6:	f240 6104 	movw	r1, #1540	; 0x604
 8005caa:	2031      	movs	r0, #49	; 0x31
 8005cac:	f7fc fe10 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0032,0x0305);
 8005cb0:	f240 3105 	movw	r1, #773	; 0x305
 8005cb4:	2032      	movs	r0, #50	; 0x32
 8005cb6:	f7fc fe0b 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0035,0x0000);
 8005cba:	2100      	movs	r1, #0
 8005cbc:	2035      	movs	r0, #53	; 0x35
 8005cbe:	f7fc fe07 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0036,0x0C09);
 8005cc2:	f640 4109 	movw	r1, #3081	; 0xc09
 8005cc6:	2036      	movs	r0, #54	; 0x36
 8005cc8:	f7fc fe02 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0037,0x0204);
 8005ccc:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005cd0:	2037      	movs	r0, #55	; 0x37
 8005cd2:	f7fc fdfd 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0038,0x0301);
 8005cd6:	f240 3101 	movw	r1, #769	; 0x301
 8005cda:	2038      	movs	r0, #56	; 0x38
 8005cdc:	f7fc fdf8 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0039,0x0707);
 8005ce0:	f240 7107 	movw	r1, #1799	; 0x707
 8005ce4:	2039      	movs	r0, #57	; 0x39
 8005ce6:	f7fc fdf3 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x003c,0x0000);
 8005cea:	2100      	movs	r1, #0
 8005cec:	203c      	movs	r0, #60	; 0x3c
 8005cee:	f7fc fdef 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x003d,0x0a0a);
 8005cf2:	f640 210a 	movw	r1, #2570	; 0xa0a
 8005cf6:	203d      	movs	r0, #61	; 0x3d
 8005cf8:	f7fc fdea 	bl	80028d0 <LCD_WriteReg>
        HAL_Delay(50);
 8005cfc:	2032      	movs	r0, #50	; 0x32
 8005cfe:	f001 fa31 	bl	8007164 <HAL_Delay>
        LCD_WriteReg(0x0050,0x0000); //水平GRAM起始位置
 8005d02:	2100      	movs	r1, #0
 8005d04:	2050      	movs	r0, #80	; 0x50
 8005d06:	f7fc fde3 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0051,0x00ef); //水平GRAM终止位置
 8005d0a:	21ef      	movs	r1, #239	; 0xef
 8005d0c:	2051      	movs	r0, #81	; 0x51
 8005d0e:	f7fc fddf 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0052,0x0000); //垂直GRAM起始位置
 8005d12:	2100      	movs	r1, #0
 8005d14:	2052      	movs	r0, #82	; 0x52
 8005d16:	f7fc fddb 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0053,0x013f); //垂直GRAM终止位置
 8005d1a:	f240 113f 	movw	r1, #319	; 0x13f
 8005d1e:	2053      	movs	r0, #83	; 0x53
 8005d20:	f7fc fdd6 	bl	80028d0 <LCD_WriteReg>

         LCD_WriteReg(0x0060,0xa700);
 8005d24:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8005d28:	2060      	movs	r0, #96	; 0x60
 8005d2a:	f7fc fdd1 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0061,0x0001);
 8005d2e:	2101      	movs	r1, #1
 8005d30:	2061      	movs	r0, #97	; 0x61
 8005d32:	f7fc fdcd 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x006a,0x0000);
 8005d36:	2100      	movs	r1, #0
 8005d38:	206a      	movs	r0, #106	; 0x6a
 8005d3a:	f7fc fdc9 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0080,0x0000);
 8005d3e:	2100      	movs	r1, #0
 8005d40:	2080      	movs	r0, #128	; 0x80
 8005d42:	f7fc fdc5 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0081,0x0000);
 8005d46:	2100      	movs	r1, #0
 8005d48:	2081      	movs	r0, #129	; 0x81
 8005d4a:	f7fc fdc1 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0082,0x0000);
 8005d4e:	2100      	movs	r1, #0
 8005d50:	2082      	movs	r0, #130	; 0x82
 8005d52:	f7fc fdbd 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0083,0x0000);
 8005d56:	2100      	movs	r1, #0
 8005d58:	2083      	movs	r0, #131	; 0x83
 8005d5a:	f7fc fdb9 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0084,0x0000);
 8005d5e:	2100      	movs	r1, #0
 8005d60:	2084      	movs	r0, #132	; 0x84
 8005d62:	f7fc fdb5 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0085,0x0000);
 8005d66:	2100      	movs	r1, #0
 8005d68:	2085      	movs	r0, #133	; 0x85
 8005d6a:	f7fc fdb1 	bl	80028d0 <LCD_WriteReg>

        LCD_WriteReg(0x0090,0x0010);
 8005d6e:	2110      	movs	r1, #16
 8005d70:	2090      	movs	r0, #144	; 0x90
 8005d72:	f7fc fdad 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0092,0x0600);
 8005d76:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005d7a:	2092      	movs	r0, #146	; 0x92
 8005d7c:	f7fc fda8 	bl	80028d0 <LCD_WriteReg>
        //开启显示设置
        LCD_WriteReg(0x0007,0x0133);
 8005d80:	f240 1133 	movw	r1, #307	; 0x133
 8005d84:	2007      	movs	r0, #7
 8005d86:	f7fc fda3 	bl	80028d0 <LCD_WriteReg>
 8005d8a:	f000 bf86 	b.w	8006c9a <LCD_Init+0x3852>
 8005d8e:	bf00      	nop
 8005d90:	2000045c 	.word	0x2000045c
	}else if(lcddev.id==0x9320)//测试OK.
 8005d94:	4bce      	ldr	r3, [pc, #824]	; (80060d0 <LCD_Init+0x2c88>)
 8005d96:	889b      	ldrh	r3, [r3, #4]
 8005d98:	f249 3220 	movw	r2, #37664	; 0x9320
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	f040 80ad 	bne.w	8005efc <LCD_Init+0x2ab4>
	{
		LCD_WriteReg(0x00,0x0000);
 8005da2:	2100      	movs	r1, #0
 8005da4:	2000      	movs	r0, #0
 8005da6:	f7fc fd93 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x01,0x0100);	//Driver Output Contral.
 8005daa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005dae:	2001      	movs	r0, #1
 8005db0:	f7fc fd8e 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x02,0x0700);	//LCD Driver Waveform Contral.
 8005db4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005db8:	2002      	movs	r0, #2
 8005dba:	f7fc fd89 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x03,0x1030);//Entry Mode Set.
 8005dbe:	f241 0130 	movw	r1, #4144	; 0x1030
 8005dc2:	2003      	movs	r0, #3
 8005dc4:	f7fc fd84 	bl	80028d0 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04,0x0000);	//Scalling Contral.
 8005dc8:	2100      	movs	r1, #0
 8005dca:	2004      	movs	r0, #4
 8005dcc:	f7fc fd80 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x08,0x0202);	//Display Contral 2.(0x0207)
 8005dd0:	f240 2102 	movw	r1, #514	; 0x202
 8005dd4:	2008      	movs	r0, #8
 8005dd6:	f7fc fd7b 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x09,0x0000);	//Display Contral 3.(0x0000)
 8005dda:	2100      	movs	r1, #0
 8005ddc:	2009      	movs	r0, #9
 8005dde:	f7fc fd77 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0a,0x0000);	//Frame Cycle Contal.(0x0000)
 8005de2:	2100      	movs	r1, #0
 8005de4:	200a      	movs	r0, #10
 8005de6:	f7fc fd73 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0c,(1<<0));	//Extern Display Interface Contral 1.(0x0000)
 8005dea:	2101      	movs	r1, #1
 8005dec:	200c      	movs	r0, #12
 8005dee:	f7fc fd6f 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0d,0x0000);	//Frame Maker Position.
 8005df2:	2100      	movs	r1, #0
 8005df4:	200d      	movs	r0, #13
 8005df6:	f7fc fd6b 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0f,0x0000);	//Extern Display Interface Contral 2.
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	200f      	movs	r0, #15
 8005dfe:	f7fc fd67 	bl	80028d0 <LCD_WriteReg>
		HAL_Delay(50);
 8005e02:	2032      	movs	r0, #50	; 0x32
 8005e04:	f001 f9ae 	bl	8007164 <HAL_Delay>
		LCD_WriteReg(0x07,0x0101);	//Display Contral.
 8005e08:	f240 1101 	movw	r1, #257	; 0x101
 8005e0c:	2007      	movs	r0, #7
 8005e0e:	f7fc fd5f 	bl	80028d0 <LCD_WriteReg>
		HAL_Delay(50);
 8005e12:	2032      	movs	r0, #50	; 0x32
 8005e14:	f001 f9a6 	bl	8007164 <HAL_Delay>
		LCD_WriteReg(0x10,(1<<12)|(0<<8)|(1<<7)|(1<<6)|(0<<4));	//Power Control 1.(0x16b0)
 8005e18:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8005e1c:	2010      	movs	r0, #16
 8005e1e:	f7fc fd57 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x11,0x0007);								//Power Control 2.(0x0001)
 8005e22:	2107      	movs	r1, #7
 8005e24:	2011      	movs	r0, #17
 8005e26:	f7fc fd53 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x12,(1<<8)|(1<<4)|(0<<0));				//Power Control 3.(0x0138)
 8005e2a:	f44f 7188 	mov.w	r1, #272	; 0x110
 8005e2e:	2012      	movs	r0, #18
 8005e30:	f7fc fd4e 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x13,0x0b00);								//Power Control 4.
 8005e34:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8005e38:	2013      	movs	r0, #19
 8005e3a:	f7fc fd49 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x29,0x0000);								//Power Control 7.
 8005e3e:	2100      	movs	r1, #0
 8005e40:	2029      	movs	r0, #41	; 0x29
 8005e42:	f7fc fd45 	bl	80028d0 <LCD_WriteReg>

		LCD_WriteReg(0x2b,(1<<14)|(1<<4));
 8005e46:	f244 0110 	movw	r1, #16400	; 0x4010
 8005e4a:	202b      	movs	r0, #43	; 0x2b
 8005e4c:	f7fc fd40 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x50,0);	//Set X Star
 8005e50:	2100      	movs	r1, #0
 8005e52:	2050      	movs	r0, #80	; 0x50
 8005e54:	f7fc fd3c 	bl	80028d0 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51,239);	//Set Y Star
 8005e58:	21ef      	movs	r1, #239	; 0xef
 8005e5a:	2051      	movs	r0, #81	; 0x51
 8005e5c:	f7fc fd38 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x52,0);	//Set Y End.t.
 8005e60:	2100      	movs	r1, #0
 8005e62:	2052      	movs	r0, #82	; 0x52
 8005e64:	f7fc fd34 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x53,319);	//
 8005e68:	f240 113f 	movw	r1, #319	; 0x13f
 8005e6c:	2053      	movs	r0, #83	; 0x53
 8005e6e:	f7fc fd2f 	bl	80028d0 <LCD_WriteReg>

		LCD_WriteReg(0x60,0x2700);	//Driver Output Control.
 8005e72:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005e76:	2060      	movs	r0, #96	; 0x60
 8005e78:	f7fc fd2a 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x61,0x0001);	//Driver Output Control.
 8005e7c:	2101      	movs	r1, #1
 8005e7e:	2061      	movs	r0, #97	; 0x61
 8005e80:	f7fc fd26 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x6a,0x0000);	//Vertical Srcoll Control.
 8005e84:	2100      	movs	r1, #0
 8005e86:	206a      	movs	r0, #106	; 0x6a
 8005e88:	f7fc fd22 	bl	80028d0 <LCD_WriteReg>

		LCD_WriteReg(0x80,0x0000);	//Display Position? Partial Display 1.
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	2080      	movs	r0, #128	; 0x80
 8005e90:	f7fc fd1e 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x81,0x0000);	//RAM Address Start? Partial Display 1.
 8005e94:	2100      	movs	r1, #0
 8005e96:	2081      	movs	r0, #129	; 0x81
 8005e98:	f7fc fd1a 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x82,0x0000);	//RAM Address End-Partial Display 1.
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	2082      	movs	r0, #130	; 0x82
 8005ea0:	f7fc fd16 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x83,0x0000);	//Displsy Position? Partial Display 2.
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	2083      	movs	r0, #131	; 0x83
 8005ea8:	f7fc fd12 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x84,0x0000);	//RAM Address Start? Partial Display 2.
 8005eac:	2100      	movs	r1, #0
 8005eae:	2084      	movs	r0, #132	; 0x84
 8005eb0:	f7fc fd0e 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x85,0x0000);	//RAM Address End? Partial Display 2.
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	2085      	movs	r0, #133	; 0x85
 8005eb8:	f7fc fd0a 	bl	80028d0 <LCD_WriteReg>

		LCD_WriteReg(0x90,(0<<7)|(16<<0));	//Frame Cycle Contral.(0x0013)
 8005ebc:	2110      	movs	r1, #16
 8005ebe:	2090      	movs	r0, #144	; 0x90
 8005ec0:	f7fc fd06 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x92,0x0000);	//Panel Interface Contral 2.(0x0000)
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	2092      	movs	r0, #146	; 0x92
 8005ec8:	f7fc fd02 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x93,0x0001);	//Panel Interface Contral 3.
 8005ecc:	2101      	movs	r1, #1
 8005ece:	2093      	movs	r0, #147	; 0x93
 8005ed0:	f7fc fcfe 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x95,0x0110);	//Frame Cycle Contral.(0x0110)
 8005ed4:	f44f 7188 	mov.w	r1, #272	; 0x110
 8005ed8:	2095      	movs	r0, #149	; 0x95
 8005eda:	f7fc fcf9 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x97,(0<<8));	//
 8005ede:	2100      	movs	r1, #0
 8005ee0:	2097      	movs	r0, #151	; 0x97
 8005ee2:	f7fc fcf5 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x98,0x0000);	//Frame Cycle Contral.
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	2098      	movs	r0, #152	; 0x98
 8005eea:	f7fc fcf1 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x07,0x0173);	//(0x0173)
 8005eee:	f240 1173 	movw	r1, #371	; 0x173
 8005ef2:	2007      	movs	r0, #7
 8005ef4:	f7fc fcec 	bl	80028d0 <LCD_WriteReg>
 8005ef8:	f000 becf 	b.w	8006c9a <LCD_Init+0x3852>
	}else if(lcddev.id==0X9331)//OK |/|/|
 8005efc:	4b74      	ldr	r3, [pc, #464]	; (80060d0 <LCD_Init+0x2c88>)
 8005efe:	889b      	ldrh	r3, [r3, #4]
 8005f00:	f249 3231 	movw	r2, #37681	; 0x9331
 8005f04:	4293      	cmp	r3, r2
 8005f06:	f040 80e5 	bne.w	80060d4 <LCD_Init+0x2c8c>
	{
		LCD_WriteReg(0x00E7, 0x1014);
 8005f0a:	f241 0114 	movw	r1, #4116	; 0x1014
 8005f0e:	20e7      	movs	r0, #231	; 0xe7
 8005f10:	f7fc fcde 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8005f14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f18:	2001      	movs	r0, #1
 8005f1a:	f7fc fcd9 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 8005f1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f22:	2002      	movs	r0, #2
 8005f24:	f7fc fcd4 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0003,(1<<12)|(3<<4)|(1<<3));//65K
 8005f28:	f241 0138 	movw	r1, #4152	; 0x1038
 8005f2c:	2003      	movs	r0, #3
 8005f2e:	f7fc fccf 	bl	80028d0 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8005f32:	f240 2102 	movw	r1, #514	; 0x202
 8005f36:	2008      	movs	r0, #8
 8005f38:	f7fc fcca 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	2009      	movs	r0, #9
 8005f40:	f7fc fcc6 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8005f44:	2100      	movs	r1, #0
 8005f46:	200a      	movs	r0, #10
 8005f48:	f7fc fcc2 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	200c      	movs	r0, #12
 8005f50:	f7fc fcbe 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8005f54:	2100      	movs	r1, #0
 8005f56:	200d      	movs	r0, #13
 8005f58:	f7fc fcba 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	200f      	movs	r0, #15
 8005f60:	f7fc fcb6 	bl	80028d0 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8005f64:	2100      	movs	r1, #0
 8005f66:	2010      	movs	r0, #16
 8005f68:	f7fc fcb2 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 8005f6c:	2107      	movs	r1, #7
 8005f6e:	2011      	movs	r0, #17
 8005f70:	f7fc fcae 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8005f74:	2100      	movs	r1, #0
 8005f76:	2012      	movs	r0, #18
 8005f78:	f7fc fcaa 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	2013      	movs	r0, #19
 8005f80:	f7fc fca6 	bl	80028d0 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8005f84:	20c8      	movs	r0, #200	; 0xc8
 8005f86:	f001 f8ed 	bl	8007164 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8005f8a:	f241 6190 	movw	r1, #5776	; 0x1690
 8005f8e:	2010      	movs	r0, #16
 8005f90:	f7fc fc9e 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8005f94:	f240 2127 	movw	r1, #551	; 0x227
 8005f98:	2011      	movs	r0, #17
 8005f9a:	f7fc fc99 	bl	80028d0 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8005f9e:	2032      	movs	r0, #50	; 0x32
 8005fa0:	f001 f8e0 	bl	8007164 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8005fa4:	210c      	movs	r1, #12
 8005fa6:	2012      	movs	r0, #18
 8005fa8:	f7fc fc92 	bl	80028d0 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8005fac:	2032      	movs	r0, #50	; 0x32
 8005fae:	f001 f8d9 	bl	8007164 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8005fb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005fb6:	2013      	movs	r0, #19
 8005fb8:	f7fc fc8a 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8005fbc:	2111      	movs	r1, #17
 8005fbe:	2029      	movs	r0, #41	; 0x29
 8005fc0:	f7fc fc86 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8005fc4:	210b      	movs	r1, #11
 8005fc6:	202b      	movs	r0, #43	; 0x2b
 8005fc8:	f7fc fc82 	bl	80028d0 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8005fcc:	2032      	movs	r0, #50	; 0x32
 8005fce:	f001 f8c9 	bl	8007164 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	2020      	movs	r0, #32
 8005fd6:	f7fc fc7b 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 8005fda:	f240 113f 	movw	r1, #319	; 0x13f
 8005fde:	2021      	movs	r0, #33	; 0x21
 8005fe0:	f7fc fc76 	bl	80028d0 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	2030      	movs	r0, #48	; 0x30
 8005fe8:	f7fc fc72 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 8005fec:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005ff0:	2031      	movs	r0, #49	; 0x31
 8005ff2:	f7fc fc6d 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	2032      	movs	r0, #50	; 0x32
 8005ffa:	f7fc fc69 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8005ffe:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006002:	2035      	movs	r0, #53	; 0x35
 8006004:	f7fc fc64 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8006008:	f241 610a 	movw	r1, #5642	; 0x160a
 800600c:	2036      	movs	r0, #54	; 0x36
 800600e:	f7fc fc5f 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8006012:	f240 7107 	movw	r1, #1799	; 0x707
 8006016:	2037      	movs	r0, #55	; 0x37
 8006018:	f7fc fc5a 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 800601c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8006020:	2038      	movs	r0, #56	; 0x38
 8006022:	f7fc fc55 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8006026:	f240 7107 	movw	r1, #1799	; 0x707
 800602a:	2039      	movs	r0, #57	; 0x39
 800602c:	f7fc fc50 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8006030:	f240 4102 	movw	r1, #1026	; 0x402
 8006034:	203c      	movs	r0, #60	; 0x3c
 8006036:	f7fc fc4b 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 800603a:	f640 410f 	movw	r1, #3087	; 0xc0f
 800603e:	203d      	movs	r0, #61	; 0x3d
 8006040:	f7fc fc46 	bl	80028d0 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8006044:	2100      	movs	r1, #0
 8006046:	2050      	movs	r0, #80	; 0x50
 8006048:	f7fc fc42 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 800604c:	21ef      	movs	r1, #239	; 0xef
 800604e:	2051      	movs	r0, #81	; 0x51
 8006050:	f7fc fc3e 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8006054:	2100      	movs	r1, #0
 8006056:	2052      	movs	r0, #82	; 0x52
 8006058:	f7fc fc3a 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 800605c:	f240 113f 	movw	r1, #319	; 0x13f
 8006060:	2053      	movs	r0, #83	; 0x53
 8006062:	f7fc fc35 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8006066:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800606a:	2060      	movs	r0, #96	; 0x60
 800606c:	f7fc fc30 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV
 8006070:	2101      	movs	r1, #1
 8006072:	2061      	movs	r0, #97	; 0x61
 8006074:	f7fc fc2c 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8006078:	2100      	movs	r1, #0
 800607a:	206a      	movs	r0, #106	; 0x6a
 800607c:	f7fc fc28 	bl	80028d0 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8006080:	2100      	movs	r1, #0
 8006082:	2080      	movs	r0, #128	; 0x80
 8006084:	f7fc fc24 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8006088:	2100      	movs	r1, #0
 800608a:	2081      	movs	r0, #129	; 0x81
 800608c:	f7fc fc20 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8006090:	2100      	movs	r1, #0
 8006092:	2082      	movs	r0, #130	; 0x82
 8006094:	f7fc fc1c 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8006098:	2100      	movs	r1, #0
 800609a:	2083      	movs	r0, #131	; 0x83
 800609c:	f7fc fc18 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80060a0:	2100      	movs	r1, #0
 80060a2:	2084      	movs	r0, #132	; 0x84
 80060a4:	f7fc fc14 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80060a8:	2100      	movs	r1, #0
 80060aa:	2085      	movs	r0, #133	; 0x85
 80060ac:	f7fc fc10 	bl	80028d0 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 80060b0:	2110      	movs	r1, #16
 80060b2:	2090      	movs	r0, #144	; 0x90
 80060b4:	f7fc fc0c 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80060b8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80060bc:	2092      	movs	r0, #146	; 0x92
 80060be:	f7fc fc07 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 80060c2:	f240 1133 	movw	r1, #307	; 0x133
 80060c6:	2007      	movs	r0, #7
 80060c8:	f7fc fc02 	bl	80028d0 <LCD_WriteReg>
 80060cc:	f000 bde5 	b.w	8006c9a <LCD_Init+0x3852>
 80060d0:	2000045c 	.word	0x2000045c
	}else if(lcddev.id==0x5408)
 80060d4:	4be2      	ldr	r3, [pc, #904]	; (8006460 <LCD_Init+0x3018>)
 80060d6:	889b      	ldrh	r3, [r3, #4]
 80060d8:	f245 4208 	movw	r2, #21512	; 0x5408
 80060dc:	4293      	cmp	r3, r2
 80060de:	f040 80a3 	bne.w	8006228 <LCD_Init+0x2de0>
	{
		LCD_WriteReg(0x01,0x0100);
 80060e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80060e6:	2001      	movs	r0, #1
 80060e8:	f7fc fbf2 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x02,0x0700);//LCD Driving Waveform Contral
 80060ec:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80060f0:	2002      	movs	r0, #2
 80060f2:	f7fc fbed 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x03,0x1030);//Entry Mode设置
 80060f6:	f241 0130 	movw	r1, #4144	; 0x1030
 80060fa:	2003      	movs	r0, #3
 80060fc:	f7fc fbe8 	bl	80028d0 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04,0x0000); //Scalling Control register
 8006100:	2100      	movs	r1, #0
 8006102:	2004      	movs	r0, #4
 8006104:	f7fc fbe4 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x08,0x0207); //Display Control 2
 8006108:	f240 2107 	movw	r1, #519	; 0x207
 800610c:	2008      	movs	r0, #8
 800610e:	f7fc fbdf 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x09,0x0000); //Display Control 3
 8006112:	2100      	movs	r1, #0
 8006114:	2009      	movs	r0, #9
 8006116:	f7fc fbdb 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0A,0x0000); //Frame Cycle Control
 800611a:	2100      	movs	r1, #0
 800611c:	200a      	movs	r0, #10
 800611e:	f7fc fbd7 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0C,0x0000); //External Display Interface Control 1
 8006122:	2100      	movs	r1, #0
 8006124:	200c      	movs	r0, #12
 8006126:	f7fc fbd3 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0D,0x0000); //Frame Maker Position
 800612a:	2100      	movs	r1, #0
 800612c:	200d      	movs	r0, #13
 800612e:	f7fc fbcf 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0F,0x0000); //External Display Interface Control 2
 8006132:	2100      	movs	r1, #0
 8006134:	200f      	movs	r0, #15
 8006136:	f7fc fbcb 	bl	80028d0 <LCD_WriteReg>
		HAL_Delay(20);
 800613a:	2014      	movs	r0, #20
 800613c:	f001 f812 	bl	8007164 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10,0x16B0); //0x14B0 //Power Control 1
 8006140:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8006144:	2010      	movs	r0, #16
 8006146:	f7fc fbc3 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x11,0x0001); //0x0007 //Power Control 2
 800614a:	2101      	movs	r1, #1
 800614c:	2011      	movs	r0, #17
 800614e:	f7fc fbbf 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x17,0x0001); //0x0000 //Power Control 3
 8006152:	2101      	movs	r1, #1
 8006154:	2017      	movs	r0, #23
 8006156:	f7fc fbbb 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x12,0x0138); //0x013B //Power Control 4
 800615a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800615e:	2012      	movs	r0, #18
 8006160:	f7fc fbb6 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x13,0x0800); //0x0800 //Power Control 5
 8006164:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006168:	2013      	movs	r0, #19
 800616a:	f7fc fbb1 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x29,0x0009); //NVM read data 2
 800616e:	2109      	movs	r1, #9
 8006170:	2029      	movs	r0, #41	; 0x29
 8006172:	f7fc fbad 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x2a,0x0009); //NVM read data 3
 8006176:	2109      	movs	r1, #9
 8006178:	202a      	movs	r0, #42	; 0x2a
 800617a:	f7fc fba9 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0xa4,0x0000);
 800617e:	2100      	movs	r1, #0
 8006180:	20a4      	movs	r0, #164	; 0xa4
 8006182:	f7fc fba5 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x50,0x0000); //设置操作窗口的X轴开始列
 8006186:	2100      	movs	r1, #0
 8006188:	2050      	movs	r0, #80	; 0x50
 800618a:	f7fc fba1 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x51,0x00EF); //设置操作窗口的X轴结束列
 800618e:	21ef      	movs	r1, #239	; 0xef
 8006190:	2051      	movs	r0, #81	; 0x51
 8006192:	f7fc fb9d 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x52,0x0000); //设置操作窗口的Y轴开始行
 8006196:	2100      	movs	r1, #0
 8006198:	2052      	movs	r0, #82	; 0x52
 800619a:	f7fc fb99 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x53,0x013F); //设置操作窗口的Y轴结束行
 800619e:	f240 113f 	movw	r1, #319	; 0x13f
 80061a2:	2053      	movs	r0, #83	; 0x53
 80061a4:	f7fc fb94 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x60,0x2700); //Driver Output Control
 80061a8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80061ac:	2060      	movs	r0, #96	; 0x60
 80061ae:	f7fc fb8f 	bl	80028d0 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61,0x0001); //Driver Output Control
 80061b2:	2101      	movs	r1, #1
 80061b4:	2061      	movs	r0, #97	; 0x61
 80061b6:	f7fc fb8b 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x6A,0x0000); //Vertical Scroll Control
 80061ba:	2100      	movs	r1, #0
 80061bc:	206a      	movs	r0, #106	; 0x6a
 80061be:	f7fc fb87 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x80,0x0000); //Display Position – Partial Display 1
 80061c2:	2100      	movs	r1, #0
 80061c4:	2080      	movs	r0, #128	; 0x80
 80061c6:	f7fc fb83 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x81,0x0000); //RAM Address Start – Partial Display 1
 80061ca:	2100      	movs	r1, #0
 80061cc:	2081      	movs	r0, #129	; 0x81
 80061ce:	f7fc fb7f 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x82,0x0000); //RAM address End - Partial Display 1
 80061d2:	2100      	movs	r1, #0
 80061d4:	2082      	movs	r0, #130	; 0x82
 80061d6:	f7fc fb7b 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x83,0x0000); //Display Position – Partial Display 2
 80061da:	2100      	movs	r1, #0
 80061dc:	2083      	movs	r0, #131	; 0x83
 80061de:	f7fc fb77 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x84,0x0000); //RAM Address Start – Partial Display 2
 80061e2:	2100      	movs	r1, #0
 80061e4:	2084      	movs	r0, #132	; 0x84
 80061e6:	f7fc fb73 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x85,0x0000); //RAM address End – Partail Display2
 80061ea:	2100      	movs	r1, #0
 80061ec:	2085      	movs	r0, #133	; 0x85
 80061ee:	f7fc fb6f 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x90,0x0013); //Frame Cycle Control
 80061f2:	2113      	movs	r1, #19
 80061f4:	2090      	movs	r0, #144	; 0x90
 80061f6:	f7fc fb6b 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x92,0x0000);  //Panel Interface Control 2
 80061fa:	2100      	movs	r1, #0
 80061fc:	2092      	movs	r0, #146	; 0x92
 80061fe:	f7fc fb67 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x93,0x0003); //Panel Interface control 3
 8006202:	2103      	movs	r1, #3
 8006204:	2093      	movs	r0, #147	; 0x93
 8006206:	f7fc fb63 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x95,0x0110);  //Frame Cycle Control
 800620a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800620e:	2095      	movs	r0, #149	; 0x95
 8006210:	f7fc fb5e 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x07,0x0173);
 8006214:	f240 1173 	movw	r1, #371	; 0x173
 8006218:	2007      	movs	r0, #7
 800621a:	f7fc fb59 	bl	80028d0 <LCD_WriteReg>
		HAL_Delay(50);
 800621e:	2032      	movs	r0, #50	; 0x32
 8006220:	f000 ffa0 	bl	8007164 <HAL_Delay>
 8006224:	f000 bd39 	b.w	8006c9a <LCD_Init+0x3852>
	}
	else if(lcddev.id==0x1505)//OK
 8006228:	4b8d      	ldr	r3, [pc, #564]	; (8006460 <LCD_Init+0x3018>)
 800622a:	889b      	ldrh	r3, [r3, #4]
 800622c:	f241 5205 	movw	r2, #5381	; 0x1505
 8006230:	4293      	cmp	r3, r2
 8006232:	f040 8117 	bne.w	8006464 <LCD_Init+0x301c>
	{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
        LCD_WriteReg(0x0007,0x0000);
 8006236:	2100      	movs	r1, #0
 8006238:	2007      	movs	r0, #7
 800623a:	f7fc fb49 	bl	80028d0 <LCD_WriteReg>
        HAL_Delay(50);
 800623e:	2032      	movs	r0, #50	; 0x32
 8006240:	f000 ff90 	bl	8007164 <HAL_Delay>
        LCD_WriteReg(0x0012,0x011C);//0x011A   why need to set several times?
 8006244:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8006248:	2012      	movs	r0, #18
 800624a:	f7fc fb41 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x00A4,0x0001);//NVM
 800624e:	2101      	movs	r1, #1
 8006250:	20a4      	movs	r0, #164	; 0xa4
 8006252:	f7fc fb3d 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0008,0x000F);
 8006256:	210f      	movs	r1, #15
 8006258:	2008      	movs	r0, #8
 800625a:	f7fc fb39 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x000A,0x0008);
 800625e:	2108      	movs	r1, #8
 8006260:	200a      	movs	r0, #10
 8006262:	f7fc fb35 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x000D,0x0008);
 8006266:	2108      	movs	r1, #8
 8006268:	200d      	movs	r0, #13
 800626a:	f7fc fb31 	bl	80028d0 <LCD_WriteReg>
  		//伽马校正
        LCD_WriteReg(0x0030,0x0707);
 800626e:	f240 7107 	movw	r1, #1799	; 0x707
 8006272:	2030      	movs	r0, #48	; 0x30
 8006274:	f7fc fb2c 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0031,0x0007); //0x0707
 8006278:	2107      	movs	r1, #7
 800627a:	2031      	movs	r0, #49	; 0x31
 800627c:	f7fc fb28 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0032,0x0603);
 8006280:	f240 6103 	movw	r1, #1539	; 0x603
 8006284:	2032      	movs	r0, #50	; 0x32
 8006286:	f7fc fb23 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0033,0x0700);
 800628a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800628e:	2033      	movs	r0, #51	; 0x33
 8006290:	f7fc fb1e 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0034,0x0202);
 8006294:	f240 2102 	movw	r1, #514	; 0x202
 8006298:	2034      	movs	r0, #52	; 0x34
 800629a:	f7fc fb19 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0035,0x0002); //?0x0606
 800629e:	2102      	movs	r1, #2
 80062a0:	2035      	movs	r0, #53	; 0x35
 80062a2:	f7fc fb15 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0036,0x1F0F);
 80062a6:	f641 710f 	movw	r1, #7951	; 0x1f0f
 80062aa:	2036      	movs	r0, #54	; 0x36
 80062ac:	f7fc fb10 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0037,0x0707); //0x0f0f  0x0105
 80062b0:	f240 7107 	movw	r1, #1799	; 0x707
 80062b4:	2037      	movs	r0, #55	; 0x37
 80062b6:	f7fc fb0b 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0038,0x0000);
 80062ba:	2100      	movs	r1, #0
 80062bc:	2038      	movs	r0, #56	; 0x38
 80062be:	f7fc fb07 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0039,0x0000);
 80062c2:	2100      	movs	r1, #0
 80062c4:	2039      	movs	r0, #57	; 0x39
 80062c6:	f7fc fb03 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x003A,0x0707);
 80062ca:	f240 7107 	movw	r1, #1799	; 0x707
 80062ce:	203a      	movs	r0, #58	; 0x3a
 80062d0:	f7fc fafe 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x003B,0x0000); //0x0303
 80062d4:	2100      	movs	r1, #0
 80062d6:	203b      	movs	r0, #59	; 0x3b
 80062d8:	f7fc fafa 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x003C,0x0007); //?0x0707
 80062dc:	2107      	movs	r1, #7
 80062de:	203c      	movs	r0, #60	; 0x3c
 80062e0:	f7fc faf6 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x003D,0x0000); //0x1313//0x1f08
 80062e4:	2100      	movs	r1, #0
 80062e6:	203d      	movs	r0, #61	; 0x3d
 80062e8:	f7fc faf2 	bl	80028d0 <LCD_WriteReg>
        HAL_Delay(50);
 80062ec:	2032      	movs	r0, #50	; 0x32
 80062ee:	f000 ff39 	bl	8007164 <HAL_Delay>
        LCD_WriteReg(0x0007,0x0001);
 80062f2:	2101      	movs	r1, #1
 80062f4:	2007      	movs	r0, #7
 80062f6:	f7fc faeb 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0017,0x0001);//开启电源
 80062fa:	2101      	movs	r1, #1
 80062fc:	2017      	movs	r0, #23
 80062fe:	f7fc fae7 	bl	80028d0 <LCD_WriteReg>
        HAL_Delay(50);
 8006302:	2032      	movs	r0, #50	; 0x32
 8006304:	f000 ff2e 	bl	8007164 <HAL_Delay>
  		//电源配置
        LCD_WriteReg(0x0010,0x17A0);
 8006308:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 800630c:	2010      	movs	r0, #16
 800630e:	f7fc fadf 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0217);//reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8006312:	f240 2117 	movw	r1, #535	; 0x217
 8006316:	2011      	movs	r0, #17
 8006318:	f7fc fada 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x011E);//0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 800631c:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8006320:	2012      	movs	r0, #18
 8006322:	f7fc fad5 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0013,0x0F00);//VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8006326:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800632a:	2013      	movs	r0, #19
 800632c:	f7fc fad0 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x002A,0x0000);
 8006330:	2100      	movs	r1, #0
 8006332:	202a      	movs	r0, #42	; 0x2a
 8006334:	f7fc facc 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0029,0x000A);//0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8006338:	210a      	movs	r1, #10
 800633a:	2029      	movs	r0, #41	; 0x29
 800633c:	f7fc fac8 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x013E);// 0x013C  power supply on
 8006340:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8006344:	2012      	movs	r0, #18
 8006346:	f7fc fac3 	bl	80028d0 <LCD_WriteReg>
        //Coordinates Control//
        LCD_WriteReg(0x0050,0x0000);//0x0e00
 800634a:	2100      	movs	r1, #0
 800634c:	2050      	movs	r0, #80	; 0x50
 800634e:	f7fc fabf 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0051,0x00EF);
 8006352:	21ef      	movs	r1, #239	; 0xef
 8006354:	2051      	movs	r0, #81	; 0x51
 8006356:	f7fc fabb 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0052,0x0000);
 800635a:	2100      	movs	r1, #0
 800635c:	2052      	movs	r0, #82	; 0x52
 800635e:	f7fc fab7 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0053,0x013F);
 8006362:	f240 113f 	movw	r1, #319	; 0x13f
 8006366:	2053      	movs	r0, #83	; 0x53
 8006368:	f7fc fab2 	bl	80028d0 <LCD_WriteReg>
    	//Pannel Image Control//
        LCD_WriteReg(0x0060,0x2700);
 800636c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006370:	2060      	movs	r0, #96	; 0x60
 8006372:	f7fc faad 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0061,0x0001);
 8006376:	2101      	movs	r1, #1
 8006378:	2061      	movs	r0, #97	; 0x61
 800637a:	f7fc faa9 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x006A,0x0000);
 800637e:	2100      	movs	r1, #0
 8006380:	206a      	movs	r0, #106	; 0x6a
 8006382:	f7fc faa5 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0080,0x0000);
 8006386:	2100      	movs	r1, #0
 8006388:	2080      	movs	r0, #128	; 0x80
 800638a:	f7fc faa1 	bl	80028d0 <LCD_WriteReg>
    	//Partial Image Control//
        LCD_WriteReg(0x0081,0x0000);
 800638e:	2100      	movs	r1, #0
 8006390:	2081      	movs	r0, #129	; 0x81
 8006392:	f7fc fa9d 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0082,0x0000);
 8006396:	2100      	movs	r1, #0
 8006398:	2082      	movs	r0, #130	; 0x82
 800639a:	f7fc fa99 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0083,0x0000);
 800639e:	2100      	movs	r1, #0
 80063a0:	2083      	movs	r0, #131	; 0x83
 80063a2:	f7fc fa95 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0084,0x0000);
 80063a6:	2100      	movs	r1, #0
 80063a8:	2084      	movs	r0, #132	; 0x84
 80063aa:	f7fc fa91 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0085,0x0000);
 80063ae:	2100      	movs	r1, #0
 80063b0:	2085      	movs	r0, #133	; 0x85
 80063b2:	f7fc fa8d 	bl	80028d0 <LCD_WriteReg>
  		//Panel Interface Control//
        LCD_WriteReg(0x0090,0x0013);//0x0010 frenqucy
 80063b6:	2113      	movs	r1, #19
 80063b8:	2090      	movs	r0, #144	; 0x90
 80063ba:	f7fc fa89 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0092,0x0300);
 80063be:	f44f 7140 	mov.w	r1, #768	; 0x300
 80063c2:	2092      	movs	r0, #146	; 0x92
 80063c4:	f7fc fa84 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0093,0x0005);
 80063c8:	2105      	movs	r1, #5
 80063ca:	2093      	movs	r0, #147	; 0x93
 80063cc:	f7fc fa80 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0095,0x0000);
 80063d0:	2100      	movs	r1, #0
 80063d2:	2095      	movs	r0, #149	; 0x95
 80063d4:	f7fc fa7c 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0097,0x0000);
 80063d8:	2100      	movs	r1, #0
 80063da:	2097      	movs	r0, #151	; 0x97
 80063dc:	f7fc fa78 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0098,0x0000);
 80063e0:	2100      	movs	r1, #0
 80063e2:	2098      	movs	r0, #152	; 0x98
 80063e4:	f7fc fa74 	bl	80028d0 <LCD_WriteReg>

        LCD_WriteReg(0x0001,0x0100);
 80063e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063ec:	2001      	movs	r0, #1
 80063ee:	f7fc fa6f 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0002,0x0700);
 80063f2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80063f6:	2002      	movs	r0, #2
 80063f8:	f7fc fa6a 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0003,0x1038);//扫描方向 上->下  左->右
 80063fc:	f241 0138 	movw	r1, #4152	; 0x1038
 8006400:	2003      	movs	r0, #3
 8006402:	f7fc fa65 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0004,0x0000);
 8006406:	2100      	movs	r1, #0
 8006408:	2004      	movs	r0, #4
 800640a:	f7fc fa61 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x000C,0x0000);
 800640e:	2100      	movs	r1, #0
 8006410:	200c      	movs	r0, #12
 8006412:	f7fc fa5d 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x000F,0x0000);
 8006416:	2100      	movs	r1, #0
 8006418:	200f      	movs	r0, #15
 800641a:	f7fc fa59 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0020,0x0000);
 800641e:	2100      	movs	r1, #0
 8006420:	2020      	movs	r0, #32
 8006422:	f7fc fa55 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0021,0x0000);
 8006426:	2100      	movs	r1, #0
 8006428:	2021      	movs	r0, #33	; 0x21
 800642a:	f7fc fa51 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0007,0x0021);
 800642e:	2121      	movs	r1, #33	; 0x21
 8006430:	2007      	movs	r0, #7
 8006432:	f7fc fa4d 	bl	80028d0 <LCD_WriteReg>
        HAL_Delay(20);
 8006436:	2014      	movs	r0, #20
 8006438:	f000 fe94 	bl	8007164 <HAL_Delay>
        LCD_WriteReg(0x0007,0x0061);
 800643c:	2161      	movs	r1, #97	; 0x61
 800643e:	2007      	movs	r0, #7
 8006440:	f7fc fa46 	bl	80028d0 <LCD_WriteReg>
        HAL_Delay(20);
 8006444:	2014      	movs	r0, #20
 8006446:	f000 fe8d 	bl	8007164 <HAL_Delay>
        LCD_WriteReg(0x0007,0x0173);
 800644a:	f240 1173 	movw	r1, #371	; 0x173
 800644e:	2007      	movs	r0, #7
 8006450:	f7fc fa3e 	bl	80028d0 <LCD_WriteReg>
        HAL_Delay(20);
 8006454:	2014      	movs	r0, #20
 8006456:	f000 fe85 	bl	8007164 <HAL_Delay>
 800645a:	f000 bc1e 	b.w	8006c9a <LCD_Init+0x3852>
 800645e:	bf00      	nop
 8006460:	2000045c 	.word	0x2000045c
	}else if(lcddev.id==0xB505)
 8006464:	4bef      	ldr	r3, [pc, #956]	; (8006824 <LCD_Init+0x33dc>)
 8006466:	889b      	ldrh	r3, [r3, #4]
 8006468:	f24b 5205 	movw	r2, #46341	; 0xb505
 800646c:	4293      	cmp	r3, r2
 800646e:	f040 8102 	bne.w	8006676 <LCD_Init+0x322e>
	{
		LCD_WriteReg(0x0000,0x0000);
 8006472:	2100      	movs	r1, #0
 8006474:	2000      	movs	r0, #0
 8006476:	f7fc fa2b 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 800647a:	2100      	movs	r1, #0
 800647c:	2000      	movs	r0, #0
 800647e:	f7fc fa27 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8006482:	2100      	movs	r1, #0
 8006484:	2000      	movs	r0, #0
 8006486:	f7fc fa23 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 800648a:	2100      	movs	r1, #0
 800648c:	2000      	movs	r0, #0
 800648e:	f7fc fa1f 	bl	80028d0 <LCD_WriteReg>

		LCD_WriteReg(0x00a4,0x0001);
 8006492:	2101      	movs	r1, #1
 8006494:	20a4      	movs	r0, #164	; 0xa4
 8006496:	f7fc fa1b 	bl	80028d0 <LCD_WriteReg>
		HAL_Delay(20);
 800649a:	2014      	movs	r0, #20
 800649c:	f000 fe62 	bl	8007164 <HAL_Delay>
		LCD_WriteReg(0x0060,0x2700);
 80064a0:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80064a4:	2060      	movs	r0, #96	; 0x60
 80064a6:	f7fc fa13 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 80064aa:	f240 2102 	movw	r1, #514	; 0x202
 80064ae:	2008      	movs	r0, #8
 80064b0:	f7fc fa0e 	bl	80028d0 <LCD_WriteReg>

		LCD_WriteReg(0x0030,0x0214);
 80064b4:	f44f 7105 	mov.w	r1, #532	; 0x214
 80064b8:	2030      	movs	r0, #48	; 0x30
 80064ba:	f7fc fa09 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x3715);
 80064be:	f243 7115 	movw	r1, #14101	; 0x3715
 80064c2:	2031      	movs	r0, #49	; 0x31
 80064c4:	f7fc fa04 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0604);
 80064c8:	f240 6104 	movw	r1, #1540	; 0x604
 80064cc:	2032      	movs	r0, #50	; 0x32
 80064ce:	f7fc f9ff 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0033,0x0e16);
 80064d2:	f640 6116 	movw	r1, #3606	; 0xe16
 80064d6:	2033      	movs	r0, #51	; 0x33
 80064d8:	f7fc f9fa 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0034,0x2211);
 80064dc:	f242 2111 	movw	r1, #8721	; 0x2211
 80064e0:	2034      	movs	r0, #52	; 0x34
 80064e2:	f7fc f9f5 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x1500);
 80064e6:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 80064ea:	2035      	movs	r0, #53	; 0x35
 80064ec:	f7fc f9f0 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x8507);
 80064f0:	f248 5107 	movw	r1, #34055	; 0x8507
 80064f4:	2036      	movs	r0, #54	; 0x36
 80064f6:	f7fc f9eb 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x1407);
 80064fa:	f241 4107 	movw	r1, #5127	; 0x1407
 80064fe:	2037      	movs	r0, #55	; 0x37
 8006500:	f7fc f9e6 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x1403);
 8006504:	f241 4103 	movw	r1, #5123	; 0x1403
 8006508:	2038      	movs	r0, #56	; 0x38
 800650a:	f7fc f9e1 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0020);
 800650e:	2120      	movs	r1, #32
 8006510:	2039      	movs	r0, #57	; 0x39
 8006512:	f7fc f9dd 	bl	80028d0 <LCD_WriteReg>

		LCD_WriteReg(0x0090,0x001a);
 8006516:	211a      	movs	r1, #26
 8006518:	2090      	movs	r0, #144	; 0x90
 800651a:	f7fc f9d9 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0010,0x0000);
 800651e:	2100      	movs	r1, #0
 8006520:	2010      	movs	r0, #16
 8006522:	f7fc f9d5 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0007);
 8006526:	2107      	movs	r1, #7
 8006528:	2011      	movs	r0, #17
 800652a:	f7fc f9d1 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0012,0x0000);
 800652e:	2100      	movs	r1, #0
 8006530:	2012      	movs	r0, #18
 8006532:	f7fc f9cd 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0013,0x0000);
 8006536:	2100      	movs	r1, #0
 8006538:	2013      	movs	r0, #19
 800653a:	f7fc f9c9 	bl	80028d0 <LCD_WriteReg>
		HAL_Delay(20);
 800653e:	2014      	movs	r0, #20
 8006540:	f000 fe10 	bl	8007164 <HAL_Delay>

		LCD_WriteReg(0x0010,0x0730);
 8006544:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8006548:	2010      	movs	r0, #16
 800654a:	f7fc f9c1 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0137);
 800654e:	f240 1137 	movw	r1, #311	; 0x137
 8006552:	2011      	movs	r0, #17
 8006554:	f7fc f9bc 	bl	80028d0 <LCD_WriteReg>
		HAL_Delay(20);
 8006558:	2014      	movs	r0, #20
 800655a:	f000 fe03 	bl	8007164 <HAL_Delay>

		LCD_WriteReg(0x0012,0x01b8);
 800655e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8006562:	2012      	movs	r0, #18
 8006564:	f7fc f9b4 	bl	80028d0 <LCD_WriteReg>
		HAL_Delay(20);
 8006568:	2014      	movs	r0, #20
 800656a:	f000 fdfb 	bl	8007164 <HAL_Delay>

		LCD_WriteReg(0x0013,0x0f00);
 800656e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8006572:	2013      	movs	r0, #19
 8006574:	f7fc f9ac 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x002a,0x0080);
 8006578:	2180      	movs	r1, #128	; 0x80
 800657a:	202a      	movs	r0, #42	; 0x2a
 800657c:	f7fc f9a8 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0029,0x0048);
 8006580:	2148      	movs	r1, #72	; 0x48
 8006582:	2029      	movs	r0, #41	; 0x29
 8006584:	f7fc f9a4 	bl	80028d0 <LCD_WriteReg>
		HAL_Delay(20);
 8006588:	2014      	movs	r0, #20
 800658a:	f000 fdeb 	bl	8007164 <HAL_Delay>

		LCD_WriteReg(0x0001,0x0100);
 800658e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006592:	2001      	movs	r0, #1
 8006594:	f7fc f99c 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0002,0x0700);
 8006598:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800659c:	2002      	movs	r0, #2
 800659e:	f7fc f997 	bl	80028d0 <LCD_WriteReg>
        LCD_WriteReg(0x0003,0x1038);//扫描方向 上->下  左->右
 80065a2:	f241 0138 	movw	r1, #4152	; 0x1038
 80065a6:	2003      	movs	r0, #3
 80065a8:	f7fc f992 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 80065ac:	f240 2102 	movw	r1, #514	; 0x202
 80065b0:	2008      	movs	r0, #8
 80065b2:	f7fc f98d 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x000a,0x0000);
 80065b6:	2100      	movs	r1, #0
 80065b8:	200a      	movs	r0, #10
 80065ba:	f7fc f989 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x000c,0x0000);
 80065be:	2100      	movs	r1, #0
 80065c0:	200c      	movs	r0, #12
 80065c2:	f7fc f985 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x000d,0x0000);
 80065c6:	2100      	movs	r1, #0
 80065c8:	200d      	movs	r0, #13
 80065ca:	f7fc f981 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x000e,0x0030);
 80065ce:	2130      	movs	r1, #48	; 0x30
 80065d0:	200e      	movs	r0, #14
 80065d2:	f7fc f97d 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0050,0x0000);
 80065d6:	2100      	movs	r1, #0
 80065d8:	2050      	movs	r0, #80	; 0x50
 80065da:	f7fc f979 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0051,0x00ef);
 80065de:	21ef      	movs	r1, #239	; 0xef
 80065e0:	2051      	movs	r0, #81	; 0x51
 80065e2:	f7fc f975 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0052,0x0000);
 80065e6:	2100      	movs	r1, #0
 80065e8:	2052      	movs	r0, #82	; 0x52
 80065ea:	f7fc f971 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0053,0x013f);
 80065ee:	f240 113f 	movw	r1, #319	; 0x13f
 80065f2:	2053      	movs	r0, #83	; 0x53
 80065f4:	f7fc f96c 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0060,0x2700);
 80065f8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80065fc:	2060      	movs	r0, #96	; 0x60
 80065fe:	f7fc f967 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0061,0x0001);
 8006602:	2101      	movs	r1, #1
 8006604:	2061      	movs	r0, #97	; 0x61
 8006606:	f7fc f963 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x006a,0x0000);
 800660a:	2100      	movs	r1, #0
 800660c:	206a      	movs	r0, #106	; 0x6a
 800660e:	f7fc f95f 	bl	80028d0 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090,0X0011);
 8006612:	2111      	movs	r1, #17
 8006614:	2090      	movs	r0, #144	; 0x90
 8006616:	f7fc f95b 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0600);
 800661a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800661e:	2092      	movs	r0, #146	; 0x92
 8006620:	f7fc f956 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0093,0x0402);
 8006624:	f240 4102 	movw	r1, #1026	; 0x402
 8006628:	2093      	movs	r0, #147	; 0x93
 800662a:	f7fc f951 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0094,0x0002);
 800662e:	2102      	movs	r1, #2
 8006630:	2094      	movs	r0, #148	; 0x94
 8006632:	f7fc f94d 	bl	80028d0 <LCD_WriteReg>
		HAL_Delay(20);
 8006636:	2014      	movs	r0, #20
 8006638:	f000 fd94 	bl	8007164 <HAL_Delay>

		LCD_WriteReg(0x0007,0x0001);
 800663c:	2101      	movs	r1, #1
 800663e:	2007      	movs	r0, #7
 8006640:	f7fc f946 	bl	80028d0 <LCD_WriteReg>
		HAL_Delay(20);
 8006644:	2014      	movs	r0, #20
 8006646:	f000 fd8d 	bl	8007164 <HAL_Delay>
		LCD_WriteReg(0x0007,0x0061);
 800664a:	2161      	movs	r1, #97	; 0x61
 800664c:	2007      	movs	r0, #7
 800664e:	f7fc f93f 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0007,0x0173);
 8006652:	f240 1173 	movw	r1, #371	; 0x173
 8006656:	2007      	movs	r0, #7
 8006658:	f7fc f93a 	bl	80028d0 <LCD_WriteReg>

		LCD_WriteReg(0x0020,0x0000);
 800665c:	2100      	movs	r1, #0
 800665e:	2020      	movs	r0, #32
 8006660:	f7fc f936 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0021,0x0000);
 8006664:	2100      	movs	r1, #0
 8006666:	2021      	movs	r0, #33	; 0x21
 8006668:	f7fc f932 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x00,0x22);
 800666c:	2122      	movs	r1, #34	; 0x22
 800666e:	2000      	movs	r0, #0
 8006670:	f7fc f92e 	bl	80028d0 <LCD_WriteReg>
 8006674:	e311      	b.n	8006c9a <LCD_Init+0x3852>
	}else if(lcddev.id==0xC505)
 8006676:	4b6b      	ldr	r3, [pc, #428]	; (8006824 <LCD_Init+0x33dc>)
 8006678:	889b      	ldrh	r3, [r3, #4]
 800667a:	f24c 5205 	movw	r2, #50437	; 0xc505
 800667e:	4293      	cmp	r3, r2
 8006680:	f040 80d2 	bne.w	8006828 <LCD_Init+0x33e0>
	{
		LCD_WriteReg(0x0000,0x0000);
 8006684:	2100      	movs	r1, #0
 8006686:	2000      	movs	r0, #0
 8006688:	f7fc f922 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 800668c:	2100      	movs	r1, #0
 800668e:	2000      	movs	r0, #0
 8006690:	f7fc f91e 	bl	80028d0 <LCD_WriteReg>
		HAL_Delay(20);
 8006694:	2014      	movs	r0, #20
 8006696:	f000 fd65 	bl	8007164 <HAL_Delay>
		LCD_WriteReg(0x0000,0x0000);
 800669a:	2100      	movs	r1, #0
 800669c:	2000      	movs	r0, #0
 800669e:	f7fc f917 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 80066a2:	2100      	movs	r1, #0
 80066a4:	2000      	movs	r0, #0
 80066a6:	f7fc f913 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 80066aa:	2100      	movs	r1, #0
 80066ac:	2000      	movs	r0, #0
 80066ae:	f7fc f90f 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 80066b2:	2100      	movs	r1, #0
 80066b4:	2000      	movs	r0, #0
 80066b6:	f7fc f90b 	bl	80028d0 <LCD_WriteReg>
 		LCD_WriteReg(0x00a4,0x0001);
 80066ba:	2101      	movs	r1, #1
 80066bc:	20a4      	movs	r0, #164	; 0xa4
 80066be:	f7fc f907 	bl	80028d0 <LCD_WriteReg>
 		HAL_Delay(20);
 80066c2:	2014      	movs	r0, #20
 80066c4:	f000 fd4e 	bl	8007164 <HAL_Delay>
		LCD_WriteReg(0x0060,0x2700);
 80066c8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80066cc:	2060      	movs	r0, #96	; 0x60
 80066ce:	f7fc f8ff 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0806);
 80066d2:	f640 0106 	movw	r1, #2054	; 0x806
 80066d6:	2008      	movs	r0, #8
 80066d8:	f7fc f8fa 	bl	80028d0 <LCD_WriteReg>

		LCD_WriteReg(0x0030,0x0703);//gamma setting
 80066dc:	f240 7103 	movw	r1, #1795	; 0x703
 80066e0:	2030      	movs	r0, #48	; 0x30
 80066e2:	f7fc f8f5 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x0001);
 80066e6:	2101      	movs	r1, #1
 80066e8:	2031      	movs	r0, #49	; 0x31
 80066ea:	f7fc f8f1 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0004);
 80066ee:	2104      	movs	r1, #4
 80066f0:	2032      	movs	r0, #50	; 0x32
 80066f2:	f7fc f8ed 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0033,0x0102);
 80066f6:	f44f 7181 	mov.w	r1, #258	; 0x102
 80066fa:	2033      	movs	r0, #51	; 0x33
 80066fc:	f7fc f8e8 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0034,0x0300);
 8006700:	f44f 7140 	mov.w	r1, #768	; 0x300
 8006704:	2034      	movs	r0, #52	; 0x34
 8006706:	f7fc f8e3 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x0103);
 800670a:	f240 1103 	movw	r1, #259	; 0x103
 800670e:	2035      	movs	r0, #53	; 0x35
 8006710:	f7fc f8de 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x001F);
 8006714:	211f      	movs	r1, #31
 8006716:	2036      	movs	r0, #54	; 0x36
 8006718:	f7fc f8da 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x0703);
 800671c:	f240 7103 	movw	r1, #1795	; 0x703
 8006720:	2037      	movs	r0, #55	; 0x37
 8006722:	f7fc f8d5 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x0001);
 8006726:	2101      	movs	r1, #1
 8006728:	2038      	movs	r0, #56	; 0x38
 800672a:	f7fc f8d1 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0004);
 800672e:	2104      	movs	r1, #4
 8006730:	2039      	movs	r0, #57	; 0x39
 8006732:	f7fc f8cd 	bl	80028d0 <LCD_WriteReg>



		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8006736:	2115      	movs	r1, #21
 8006738:	2090      	movs	r0, #144	; 0x90
 800673a:	f7fc f8c9 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 800673e:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8006742:	2010      	movs	r0, #16
 8006744:	f7fc f8c4 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0247);	//DC1,DC0,VC
 8006748:	f240 2147 	movw	r1, #583	; 0x247
 800674c:	2011      	movs	r0, #17
 800674e:	f7fc f8bf 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 8006752:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8006756:	2012      	movs	r0, #18
 8006758:	f7fc f8ba 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 800675c:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8006760:	2013      	movs	r0, #19
 8006762:	f7fc f8b5 	bl	80028d0 <LCD_WriteReg>
		HAL_Delay(120);
 8006766:	2078      	movs	r0, #120	; 0x78
 8006768:	f000 fcfc 	bl	8007164 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 800676c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006770:	2001      	movs	r0, #1
 8006772:	f7fc f8ad 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8006776:	f44f 7100 	mov.w	r1, #512	; 0x200
 800677a:	2002      	movs	r0, #2
 800677c:	f7fc f8a8 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8006780:	f241 0130 	movw	r1, #4144	; 0x1030
 8006784:	2003      	movs	r0, #3
 8006786:	f7fc f8a3 	bl	80028d0 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 800678a:	2108      	movs	r1, #8
 800678c:	200a      	movs	r0, #10
 800678e:	f7fc f89f 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8006792:	2100      	movs	r1, #0
 8006794:	200c      	movs	r0, #12
 8006796:	f7fc f89b 	bl	80028d0 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 800679a:	2120      	movs	r1, #32
 800679c:	200e      	movs	r0, #14
 800679e:	f7fc f897 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 80067a2:	2100      	movs	r1, #0
 80067a4:	200f      	movs	r0, #15
 80067a6:	f7fc f893 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 80067aa:	2100      	movs	r1, #0
 80067ac:	2020      	movs	r0, #32
 80067ae:	f7fc f88f 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 80067b2:	2100      	movs	r1, #0
 80067b4:	2021      	movs	r0, #33	; 0x21
 80067b6:	f7fc f88b 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x002A,0x003D);	//vcom2
 80067ba:	213d      	movs	r1, #61	; 0x3d
 80067bc:	202a      	movs	r0, #42	; 0x2a
 80067be:	f7fc f887 	bl	80028d0 <LCD_WriteReg>
		HAL_Delay(20);
 80067c2:	2014      	movs	r0, #20
 80067c4:	f000 fcce 	bl	8007164 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 80067c8:	212d      	movs	r1, #45	; 0x2d
 80067ca:	2029      	movs	r0, #41	; 0x29
 80067cc:	f7fc f880 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 80067d0:	2100      	movs	r1, #0
 80067d2:	2050      	movs	r0, #80	; 0x50
 80067d4:	f7fc f87c 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 80067d8:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 80067dc:	2051      	movs	r0, #81	; 0x51
 80067de:	f7fc f877 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80067e2:	2100      	movs	r1, #0
 80067e4:	2052      	movs	r0, #82	; 0x52
 80067e6:	f7fc f873 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80067ea:	f240 113f 	movw	r1, #319	; 0x13f
 80067ee:	2053      	movs	r0, #83	; 0x53
 80067f0:	f7fc f86e 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 80067f4:	2100      	movs	r1, #0
 80067f6:	2061      	movs	r0, #97	; 0x61
 80067f8:	f7fc f86a 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80067fc:	2100      	movs	r1, #0
 80067fe:	206a      	movs	r0, #106	; 0x6a
 8006800:	f7fc f866 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0300);
 8006804:	f44f 7140 	mov.w	r1, #768	; 0x300
 8006808:	2092      	movs	r0, #146	; 0x92
 800680a:	f7fc f861 	bl	80028d0 <LCD_WriteReg>

 		LCD_WriteReg(0x0093, 0x0005);
 800680e:	2105      	movs	r1, #5
 8006810:	2093      	movs	r0, #147	; 0x93
 8006812:	f7fc f85d 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 8006816:	f44f 7180 	mov.w	r1, #256	; 0x100
 800681a:	2007      	movs	r0, #7
 800681c:	f7fc f858 	bl	80028d0 <LCD_WriteReg>
 8006820:	e23b      	b.n	8006c9a <LCD_Init+0x3852>
 8006822:	bf00      	nop
 8006824:	2000045c 	.word	0x2000045c
	}else if(lcddev.id==0x4531)//OK |/|/|
 8006828:	4bbb      	ldr	r3, [pc, #748]	; (8006b18 <LCD_Init+0x36d0>)
 800682a:	889b      	ldrh	r3, [r3, #4]
 800682c:	f244 5231 	movw	r2, #17713	; 0x4531
 8006830:	4293      	cmp	r3, r2
 8006832:	f040 80ba 	bne.w	80069aa <LCD_Init+0x3562>
	{
		LCD_WriteReg(0X00,0X0001);
 8006836:	2101      	movs	r1, #1
 8006838:	2000      	movs	r0, #0
 800683a:	f7fc f849 	bl	80028d0 <LCD_WriteReg>
		HAL_Delay(10);
 800683e:	200a      	movs	r0, #10
 8006840:	f000 fc90 	bl	8007164 <HAL_Delay>
		LCD_WriteReg(0X10,0X1628);
 8006844:	f241 6128 	movw	r1, #5672	; 0x1628
 8006848:	2010      	movs	r0, #16
 800684a:	f7fc f841 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X12,0X000e);//0x0006
 800684e:	210e      	movs	r1, #14
 8006850:	2012      	movs	r0, #18
 8006852:	f7fc f83d 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X13,0X0A39);
 8006856:	f640 2139 	movw	r1, #2617	; 0xa39
 800685a:	2013      	movs	r0, #19
 800685c:	f7fc f838 	bl	80028d0 <LCD_WriteReg>
		HAL_Delay(10);
 8006860:	200a      	movs	r0, #10
 8006862:	f000 fc7f 	bl	8007164 <HAL_Delay>
		LCD_WriteReg(0X11,0X0040);
 8006866:	2140      	movs	r1, #64	; 0x40
 8006868:	2011      	movs	r0, #17
 800686a:	f7fc f831 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X15,0X0050);
 800686e:	2150      	movs	r1, #80	; 0x50
 8006870:	2015      	movs	r0, #21
 8006872:	f7fc f82d 	bl	80028d0 <LCD_WriteReg>
		HAL_Delay(10);
 8006876:	200a      	movs	r0, #10
 8006878:	f000 fc74 	bl	8007164 <HAL_Delay>
		LCD_WriteReg(0X12,0X001e);//16
 800687c:	211e      	movs	r1, #30
 800687e:	2012      	movs	r0, #18
 8006880:	f7fc f826 	bl	80028d0 <LCD_WriteReg>
		HAL_Delay(10);
 8006884:	200a      	movs	r0, #10
 8006886:	f000 fc6d 	bl	8007164 <HAL_Delay>
		LCD_WriteReg(0X10,0X1620);
 800688a:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 800688e:	2010      	movs	r0, #16
 8006890:	f7fc f81e 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X13,0X2A39);
 8006894:	f642 2139 	movw	r1, #10809	; 0x2a39
 8006898:	2013      	movs	r0, #19
 800689a:	f7fc f819 	bl	80028d0 <LCD_WriteReg>
		HAL_Delay(10);
 800689e:	200a      	movs	r0, #10
 80068a0:	f000 fc60 	bl	8007164 <HAL_Delay>
		LCD_WriteReg(0X01,0X0100);
 80068a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068a8:	2001      	movs	r0, #1
 80068aa:	f7fc f811 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X02,0X0300);
 80068ae:	f44f 7140 	mov.w	r1, #768	; 0x300
 80068b2:	2002      	movs	r0, #2
 80068b4:	f7fc f80c 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X03,0X1038);//改变方向的
 80068b8:	f241 0138 	movw	r1, #4152	; 0x1038
 80068bc:	2003      	movs	r0, #3
 80068be:	f7fc f807 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X08,0X0202);
 80068c2:	f240 2102 	movw	r1, #514	; 0x202
 80068c6:	2008      	movs	r0, #8
 80068c8:	f7fc f802 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X0A,0X0008);
 80068cc:	2108      	movs	r1, #8
 80068ce:	200a      	movs	r0, #10
 80068d0:	f7fb fffe 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X30,0X0000);
 80068d4:	2100      	movs	r1, #0
 80068d6:	2030      	movs	r0, #48	; 0x30
 80068d8:	f7fb fffa 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X31,0X0402);
 80068dc:	f240 4102 	movw	r1, #1026	; 0x402
 80068e0:	2031      	movs	r0, #49	; 0x31
 80068e2:	f7fb fff5 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X32,0X0106);
 80068e6:	f44f 7183 	mov.w	r1, #262	; 0x106
 80068ea:	2032      	movs	r0, #50	; 0x32
 80068ec:	f7fb fff0 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X33,0X0503);
 80068f0:	f240 5103 	movw	r1, #1283	; 0x503
 80068f4:	2033      	movs	r0, #51	; 0x33
 80068f6:	f7fb ffeb 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X34,0X0104);
 80068fa:	f44f 7182 	mov.w	r1, #260	; 0x104
 80068fe:	2034      	movs	r0, #52	; 0x34
 8006900:	f7fb ffe6 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X35,0X0301);
 8006904:	f240 3101 	movw	r1, #769	; 0x301
 8006908:	2035      	movs	r0, #53	; 0x35
 800690a:	f7fb ffe1 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X36,0X0707);
 800690e:	f240 7107 	movw	r1, #1799	; 0x707
 8006912:	2036      	movs	r0, #54	; 0x36
 8006914:	f7fb ffdc 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X37,0X0305);
 8006918:	f240 3105 	movw	r1, #773	; 0x305
 800691c:	2037      	movs	r0, #55	; 0x37
 800691e:	f7fb ffd7 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X38,0X0208);
 8006922:	f44f 7102 	mov.w	r1, #520	; 0x208
 8006926:	2038      	movs	r0, #56	; 0x38
 8006928:	f7fb ffd2 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X39,0X0F0B);
 800692c:	f640 710b 	movw	r1, #3851	; 0xf0b
 8006930:	2039      	movs	r0, #57	; 0x39
 8006932:	f7fb ffcd 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X41,0X0002);
 8006936:	2102      	movs	r1, #2
 8006938:	2041      	movs	r0, #65	; 0x41
 800693a:	f7fb ffc9 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X60,0X2700);
 800693e:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006942:	2060      	movs	r0, #96	; 0x60
 8006944:	f7fb ffc4 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X61,0X0001);
 8006948:	2101      	movs	r1, #1
 800694a:	2061      	movs	r0, #97	; 0x61
 800694c:	f7fb ffc0 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X90,0X0210);
 8006950:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006954:	2090      	movs	r0, #144	; 0x90
 8006956:	f7fb ffbb 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X92,0X010A);
 800695a:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800695e:	2092      	movs	r0, #146	; 0x92
 8006960:	f7fb ffb6 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X93,0X0004);
 8006964:	2104      	movs	r1, #4
 8006966:	2093      	movs	r0, #147	; 0x93
 8006968:	f7fb ffb2 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0XA0,0X0100);
 800696c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006970:	20a0      	movs	r0, #160	; 0xa0
 8006972:	f7fb ffad 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0001);
 8006976:	2101      	movs	r1, #1
 8006978:	2007      	movs	r0, #7
 800697a:	f7fb ffa9 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0021);
 800697e:	2121      	movs	r1, #33	; 0x21
 8006980:	2007      	movs	r0, #7
 8006982:	f7fb ffa5 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0023);
 8006986:	2123      	movs	r1, #35	; 0x23
 8006988:	2007      	movs	r0, #7
 800698a:	f7fb ffa1 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0033);
 800698e:	2133      	movs	r1, #51	; 0x33
 8006990:	2007      	movs	r0, #7
 8006992:	f7fb ff9d 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0133);
 8006996:	f240 1133 	movw	r1, #307	; 0x133
 800699a:	2007      	movs	r0, #7
 800699c:	f7fb ff98 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0XA0,0X0000);
 80069a0:	2100      	movs	r1, #0
 80069a2:	20a0      	movs	r0, #160	; 0xa0
 80069a4:	f7fb ff94 	bl	80028d0 <LCD_WriteReg>
 80069a8:	e177      	b.n	8006c9a <LCD_Init+0x3852>
	}else if(lcddev.id==0x4535)
 80069aa:	4b5b      	ldr	r3, [pc, #364]	; (8006b18 <LCD_Init+0x36d0>)
 80069ac:	889b      	ldrh	r3, [r3, #4]
 80069ae:	f244 5235 	movw	r2, #17717	; 0x4535
 80069b2:	4293      	cmp	r3, r2
 80069b4:	f040 80b2 	bne.w	8006b1c <LCD_Init+0x36d4>
	{
		LCD_WriteReg(0X15,0X0030);
 80069b8:	2130      	movs	r1, #48	; 0x30
 80069ba:	2015      	movs	r0, #21
 80069bc:	f7fb ff88 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X9A,0X0010);
 80069c0:	2110      	movs	r1, #16
 80069c2:	209a      	movs	r0, #154	; 0x9a
 80069c4:	f7fb ff84 	bl	80028d0 <LCD_WriteReg>
 		LCD_WriteReg(0X11,0X0020);
 80069c8:	2120      	movs	r1, #32
 80069ca:	2011      	movs	r0, #17
 80069cc:	f7fb ff80 	bl	80028d0 <LCD_WriteReg>
 		LCD_WriteReg(0X10,0X3428);
 80069d0:	f243 4128 	movw	r1, #13352	; 0x3428
 80069d4:	2010      	movs	r0, #16
 80069d6:	f7fb ff7b 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X12,0X0002);//16
 80069da:	2102      	movs	r1, #2
 80069dc:	2012      	movs	r0, #18
 80069de:	f7fb ff77 	bl	80028d0 <LCD_WriteReg>
 		LCD_WriteReg(0X13,0X1038);
 80069e2:	f241 0138 	movw	r1, #4152	; 0x1038
 80069e6:	2013      	movs	r0, #19
 80069e8:	f7fb ff72 	bl	80028d0 <LCD_WriteReg>
 		HAL_Delay(40);
 80069ec:	2028      	movs	r0, #40	; 0x28
 80069ee:	f000 fbb9 	bl	8007164 <HAL_Delay>
		LCD_WriteReg(0X12,0X0012);//16
 80069f2:	2112      	movs	r1, #18
 80069f4:	2012      	movs	r0, #18
 80069f6:	f7fb ff6b 	bl	80028d0 <LCD_WriteReg>
		HAL_Delay(40);
 80069fa:	2028      	movs	r0, #40	; 0x28
 80069fc:	f000 fbb2 	bl	8007164 <HAL_Delay>
  		LCD_WriteReg(0X10,0X3420);
 8006a00:	f243 4120 	movw	r1, #13344	; 0x3420
 8006a04:	2010      	movs	r0, #16
 8006a06:	f7fb ff63 	bl	80028d0 <LCD_WriteReg>
 		LCD_WriteReg(0X13,0X3038);
 8006a0a:	f243 0138 	movw	r1, #12344	; 0x3038
 8006a0e:	2013      	movs	r0, #19
 8006a10:	f7fb ff5e 	bl	80028d0 <LCD_WriteReg>
 		HAL_Delay(70);
 8006a14:	2046      	movs	r0, #70	; 0x46
 8006a16:	f000 fba5 	bl	8007164 <HAL_Delay>
		LCD_WriteReg(0X30,0X0000);
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	2030      	movs	r0, #48	; 0x30
 8006a1e:	f7fb ff57 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X31,0X0402);
 8006a22:	f240 4102 	movw	r1, #1026	; 0x402
 8006a26:	2031      	movs	r0, #49	; 0x31
 8006a28:	f7fb ff52 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X32,0X0307);
 8006a2c:	f240 3107 	movw	r1, #775	; 0x307
 8006a30:	2032      	movs	r0, #50	; 0x32
 8006a32:	f7fb ff4d 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X33,0X0304);
 8006a36:	f44f 7141 	mov.w	r1, #772	; 0x304
 8006a3a:	2033      	movs	r0, #51	; 0x33
 8006a3c:	f7fb ff48 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X34,0X0004);
 8006a40:	2104      	movs	r1, #4
 8006a42:	2034      	movs	r0, #52	; 0x34
 8006a44:	f7fb ff44 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X35,0X0401);
 8006a48:	f240 4101 	movw	r1, #1025	; 0x401
 8006a4c:	2035      	movs	r0, #53	; 0x35
 8006a4e:	f7fb ff3f 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X36,0X0707);
 8006a52:	f240 7107 	movw	r1, #1799	; 0x707
 8006a56:	2036      	movs	r0, #54	; 0x36
 8006a58:	f7fb ff3a 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X37,0X0305);
 8006a5c:	f240 3105 	movw	r1, #773	; 0x305
 8006a60:	2037      	movs	r0, #55	; 0x37
 8006a62:	f7fb ff35 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X38,0X0610);
 8006a66:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8006a6a:	2038      	movs	r0, #56	; 0x38
 8006a6c:	f7fb ff30 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X39,0X0610);
 8006a70:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8006a74:	2039      	movs	r0, #57	; 0x39
 8006a76:	f7fb ff2b 	bl	80028d0 <LCD_WriteReg>

		LCD_WriteReg(0X01,0X0100);
 8006a7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a7e:	2001      	movs	r0, #1
 8006a80:	f7fb ff26 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X02,0X0300);
 8006a84:	f44f 7140 	mov.w	r1, #768	; 0x300
 8006a88:	2002      	movs	r0, #2
 8006a8a:	f7fb ff21 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X03,0X1030);//改变方向的
 8006a8e:	f241 0130 	movw	r1, #4144	; 0x1030
 8006a92:	2003      	movs	r0, #3
 8006a94:	f7fb ff1c 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X08,0X0808);
 8006a98:	f640 0108 	movw	r1, #2056	; 0x808
 8006a9c:	2008      	movs	r0, #8
 8006a9e:	f7fb ff17 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X0A,0X0008);
 8006aa2:	2108      	movs	r1, #8
 8006aa4:	200a      	movs	r0, #10
 8006aa6:	f7fb ff13 	bl	80028d0 <LCD_WriteReg>
 		LCD_WriteReg(0X60,0X2700);
 8006aaa:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006aae:	2060      	movs	r0, #96	; 0x60
 8006ab0:	f7fb ff0e 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X61,0X0001);
 8006ab4:	2101      	movs	r1, #1
 8006ab6:	2061      	movs	r0, #97	; 0x61
 8006ab8:	f7fb ff0a 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X90,0X013E);
 8006abc:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8006ac0:	2090      	movs	r0, #144	; 0x90
 8006ac2:	f7fb ff05 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X92,0X0100);
 8006ac6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006aca:	2092      	movs	r0, #146	; 0x92
 8006acc:	f7fb ff00 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X93,0X0100);
 8006ad0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006ad4:	2093      	movs	r0, #147	; 0x93
 8006ad6:	f7fb fefb 	bl	80028d0 <LCD_WriteReg>
 		LCD_WriteReg(0XA0,0X3000);
 8006ada:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006ade:	20a0      	movs	r0, #160	; 0xa0
 8006ae0:	f7fb fef6 	bl	80028d0 <LCD_WriteReg>
 		LCD_WriteReg(0XA3,0X0010);
 8006ae4:	2110      	movs	r1, #16
 8006ae6:	20a3      	movs	r0, #163	; 0xa3
 8006ae8:	f7fb fef2 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0001);
 8006aec:	2101      	movs	r1, #1
 8006aee:	2007      	movs	r0, #7
 8006af0:	f7fb feee 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0021);
 8006af4:	2121      	movs	r1, #33	; 0x21
 8006af6:	2007      	movs	r0, #7
 8006af8:	f7fb feea 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0023);
 8006afc:	2123      	movs	r1, #35	; 0x23
 8006afe:	2007      	movs	r0, #7
 8006b00:	f7fb fee6 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0033);
 8006b04:	2133      	movs	r1, #51	; 0x33
 8006b06:	2007      	movs	r0, #7
 8006b08:	f7fb fee2 	bl	80028d0 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0133);
 8006b0c:	f240 1133 	movw	r1, #307	; 0x133
 8006b10:	2007      	movs	r0, #7
 8006b12:	f7fb fedd 	bl	80028d0 <LCD_WriteReg>
 8006b16:	e0c0      	b.n	8006c9a <LCD_Init+0x3852>
 8006b18:	2000045c 	.word	0x2000045c
	}else if(lcddev.id==0X1963)
 8006b1c:	4b66      	ldr	r3, [pc, #408]	; (8006cb8 <LCD_Init+0x3870>)
 8006b1e:	889b      	ldrh	r3, [r3, #4]
 8006b20:	f641 1263 	movw	r2, #6499	; 0x1963
 8006b24:	4293      	cmp	r3, r2
 8006b26:	f040 80b8 	bne.w	8006c9a <LCD_Init+0x3852>
	{
		LCD_WR_REG(0xE2);		//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 8006b2a:	20e2      	movs	r0, #226	; 0xe2
 8006b2c:	f7fb fea2 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1
 8006b30:	201d      	movs	r0, #29
 8006b32:	f7fb feaf 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8006b36:	2002      	movs	r0, #2
 8006b38:	f7fb feac 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values
 8006b3c:	2004      	movs	r0, #4
 8006b3e:	f7fb fea9 	bl	8002894 <LCD_WR_DATA>
		delay_us(100);
 8006b42:	2064      	movs	r0, #100	; 0x64
 8006b44:	f7fb fb1c 	bl	8002180 <delay_us>
		LCD_WR_REG(0xE0);		// Start PLL command
 8006b48:	20e0      	movs	r0, #224	; 0xe0
 8006b4a:	f7fb fe93 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 8006b4e:	2001      	movs	r0, #1
 8006b50:	f7fb fea0 	bl	8002894 <LCD_WR_DATA>
		HAL_Delay(10);
 8006b54:	200a      	movs	r0, #10
 8006b56:	f000 fb05 	bl	8007164 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 8006b5a:	20e0      	movs	r0, #224	; 0xe0
 8006b5c:	f7fb fe8a 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock
 8006b60:	2003      	movs	r0, #3
 8006b62:	f7fb fe97 	bl	8002894 <LCD_WR_DATA>
		HAL_Delay(12);
 8006b66:	200c      	movs	r0, #12
 8006b68:	f000 fafc 	bl	8007164 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8006b6c:	2001      	movs	r0, #1
 8006b6e:	f7fb fe81 	bl	8002874 <LCD_WR_REG>
		HAL_Delay(10);
 8006b72:	200a      	movs	r0, #10
 8006b74:	f000 faf6 	bl	8007164 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8006b78:	20e6      	movs	r0, #230	; 0xe6
 8006b7a:	f7fb fe7b 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 8006b7e:	202f      	movs	r0, #47	; 0x2f
 8006b80:	f7fb fe88 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8006b84:	20ff      	movs	r0, #255	; 0xff
 8006b86:	f7fb fe85 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8006b8a:	20ff      	movs	r0, #255	; 0xff
 8006b8c:	f7fb fe82 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);		//设置LCD模式
 8006b90:	20b0      	movs	r0, #176	; 0xb0
 8006b92:	f7fb fe6f 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8006b96:	2020      	movs	r0, #32
 8006b98:	f7fb fe7c 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//TFT 模式
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	f7fb fe79 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);//设置LCD水平像素
 8006ba2:	2001      	movs	r0, #1
 8006ba4:	f7fb fe76 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8006ba8:	f240 10df 	movw	r0, #479	; 0x1df
 8006bac:	f7fb fe72 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);//设置LCD垂直像素
 8006bb0:	2003      	movs	r0, #3
 8006bb2:	f7fb fe6f 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8006bb6:	f240 301f 	movw	r0, #799	; 0x31f
 8006bba:	f7fb fe6b 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//RGB序列
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	f7fb fe68 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);		//Set horizontal period
 8006bc4:	20b4      	movs	r0, #180	; 0xb4
 8006bc6:	f7fb fe55 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8006bca:	2002      	movs	r0, #2
 8006bcc:	f7fb fe62 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HT-1);
 8006bd0:	f240 20df 	movw	r0, #735	; 0x2df
 8006bd4:	f7fb fe5e 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS>>8);
 8006bd8:	2000      	movs	r0, #0
 8006bda:	f7fb fe5b 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS);
 8006bde:	202e      	movs	r0, #46	; 0x2e
 8006be0:	f7fb fe58 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8006be4:	2000      	movs	r0, #0
 8006be6:	f7fb fe55 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006bea:	2000      	movs	r0, #0
 8006bec:	f7fb fe52 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006bf0:	2000      	movs	r0, #0
 8006bf2:	f7fb fe4f 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006bf6:	2000      	movs	r0, #0
 8006bf8:	f7fb fe4c 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);		//Set vertical period
 8006bfc:	20b6      	movs	r0, #182	; 0xb6
 8006bfe:	f7fb fe39 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8006c02:	2003      	movs	r0, #3
 8006c04:	f7fb fe46 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VT-1);
 8006c08:	f44f 7053 	mov.w	r0, #844	; 0x34c
 8006c0c:	f7fb fe42 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS>>8);
 8006c10:	2000      	movs	r0, #0
 8006c12:	f7fb fe3f 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS);
 8006c16:	2017      	movs	r0, #23
 8006c18:	f7fb fe3c 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8006c1c:	2015      	movs	r0, #21
 8006c1e:	f7fb fe39 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006c22:	2000      	movs	r0, #0
 8006c24:	f7fb fe36 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006c28:	2000      	movs	r0, #0
 8006c2a:	f7fb fe33 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit
 8006c2e:	20f0      	movs	r0, #240	; 0xf0
 8006c30:	f7fb fe20 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp
 8006c34:	2003      	movs	r0, #3
 8006c36:	f7fb fe2d 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0x29);	//开启显示
 8006c3a:	2029      	movs	r0, #41	; 0x29
 8006c3c:	f7fb fe1a 	bl	8002874 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8006c40:	20d0      	movs	r0, #208	; 0xd0
 8006c42:	f7fb fe17 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8006c46:	2000      	movs	r0, #0
 8006c48:	f7fb fe24 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xBE);	//配置PWM输出
 8006c4c:	20be      	movs	r0, #190	; 0xbe
 8006c4e:	f7fb fe11 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8006c52:	2005      	movs	r0, #5
 8006c54:	f7fb fe1e 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8006c58:	20fe      	movs	r0, #254	; 0xfe
 8006c5a:	f7fb fe1b 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//3设置C
 8006c5e:	2001      	movs	r0, #1
 8006c60:	f7fb fe18 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//4设置D
 8006c64:	2000      	movs	r0, #0
 8006c66:	f7fb fe15 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//5设置E
 8006c6a:	2000      	movs	r0, #0
 8006c6c:	f7fb fe12 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//6设置F
 8006c70:	2000      	movs	r0, #0
 8006c72:	f7fb fe0f 	bl	8002894 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8006c76:	20b8      	movs	r0, #184	; 0xb8
 8006c78:	f7fb fdfc 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8006c7c:	2003      	movs	r0, #3
 8006c7e:	f7fb fe09 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能
 8006c82:	2001      	movs	r0, #1
 8006c84:	f7fb fe06 	bl	8002894 <LCD_WR_DATA>
		LCD_WR_REG(0xBA);
 8006c88:	20ba      	movs	r0, #186	; 0xba
 8006c8a:	f7fb fdf3 	bl	8002874 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8006c8e:	2001      	movs	r0, #1
 8006c90:	f7fb fe00 	bl	8002894 <LCD_WR_DATA>

		LCD_SSD_BackLightSet(100);//背光设置为最亮
 8006c94:	2064      	movs	r0, #100	; 0x64
 8006c96:	f7fc fa97 	bl	80031c8 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		//默认为竖屏
 8006c9a:	2000      	movs	r0, #0
 8006c9c:	f7fc fac8 	bl	8003230 <LCD_Display_Dir>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);				//点亮背光
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	2101      	movs	r1, #1
 8006ca4:	4805      	ldr	r0, [pc, #20]	; (8006cbc <LCD_Init+0x3874>)
 8006ca6:	f000 fd10 	bl	80076ca <HAL_GPIO_WritePin>
	LCD_Clear(WHITE);
 8006caa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006cae:	f000 f807 	bl	8006cc0 <LCD_Clear>
}
 8006cb2:	bf00      	nop
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	2000045c 	.word	0x2000045c
 8006cbc:	40010c00 	.word	0x40010c00

08006cc0 <LCD_Clear>:
//清屏函数
//color:要清屏的填充色
void LCD_Clear(uint16_t color)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	80fb      	strh	r3, [r7, #6]
	uint32_t index=0;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint=lcddev.width;
 8006cce:	4b21      	ldr	r3, [pc, #132]	; (8006d54 <LCD_Clear+0x94>)
 8006cd0:	881b      	ldrh	r3, [r3, #0]
 8006cd2:	60bb      	str	r3, [r7, #8]
	totalpoint*=lcddev.height; 			//得到总点数
 8006cd4:	4b1f      	ldr	r3, [pc, #124]	; (8006d54 <LCD_Clear+0x94>)
 8006cd6:	885b      	ldrh	r3, [r3, #2]
 8006cd8:	461a      	mov	r2, r3
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	fb02 f303 	mul.w	r3, r2, r3
 8006ce0:	60bb      	str	r3, [r7, #8]
	if((lcddev.id==0X6804)&&(lcddev.dir==1))//6804横屏的时候特殊处理
 8006ce2:	4b1c      	ldr	r3, [pc, #112]	; (8006d54 <LCD_Clear+0x94>)
 8006ce4:	889b      	ldrh	r3, [r3, #4]
 8006ce6:	f646 0204 	movw	r2, #26628	; 0x6804
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d11a      	bne.n	8006d24 <LCD_Clear+0x64>
 8006cee:	4b19      	ldr	r3, [pc, #100]	; (8006d54 <LCD_Clear+0x94>)
 8006cf0:	799b      	ldrb	r3, [r3, #6]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d116      	bne.n	8006d24 <LCD_Clear+0x64>
	{
 		lcddev.dir=0;
 8006cf6:	4b17      	ldr	r3, [pc, #92]	; (8006d54 <LCD_Clear+0x94>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	719a      	strb	r2, [r3, #6]
 		lcddev.setxcmd=0X2A;
 8006cfc:	4b15      	ldr	r3, [pc, #84]	; (8006d54 <LCD_Clear+0x94>)
 8006cfe:	222a      	movs	r2, #42	; 0x2a
 8006d00:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2B;
 8006d02:	4b14      	ldr	r3, [pc, #80]	; (8006d54 <LCD_Clear+0x94>)
 8006d04:	222b      	movs	r2, #43	; 0x2b
 8006d06:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00,0x0000);		//设置光标位置
 8006d08:	2100      	movs	r1, #0
 8006d0a:	2000      	movs	r0, #0
 8006d0c:	f7fb fe18 	bl	8002940 <LCD_SetCursor>
 		lcddev.dir=1;
 8006d10:	4b10      	ldr	r3, [pc, #64]	; (8006d54 <LCD_Clear+0x94>)
 8006d12:	2201      	movs	r2, #1
 8006d14:	719a      	strb	r2, [r3, #6]
  		lcddev.setxcmd=0X2B;
 8006d16:	4b0f      	ldr	r3, [pc, #60]	; (8006d54 <LCD_Clear+0x94>)
 8006d18:	222b      	movs	r2, #43	; 0x2b
 8006d1a:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2A;
 8006d1c:	4b0d      	ldr	r3, [pc, #52]	; (8006d54 <LCD_Clear+0x94>)
 8006d1e:	222a      	movs	r2, #42	; 0x2a
 8006d20:	819a      	strh	r2, [r3, #12]
 8006d22:	e003      	b.n	8006d2c <LCD_Clear+0x6c>
 	}else LCD_SetCursor(0x00,0x0000);	//设置光标位置
 8006d24:	2100      	movs	r1, #0
 8006d26:	2000      	movs	r0, #0
 8006d28:	f7fb fe0a 	bl	8002940 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM
 8006d2c:	f7fb fdfa 	bl	8002924 <LCD_WriteRAM_Prepare>
	for(index=0;index<totalpoint;index++)
 8006d30:	2300      	movs	r3, #0
 8006d32:	60fb      	str	r3, [r7, #12]
 8006d34:	e005      	b.n	8006d42 <LCD_Clear+0x82>
	{
		LCD->LCD_RAM=color;
 8006d36:	4a08      	ldr	r2, [pc, #32]	; (8006d58 <LCD_Clear+0x98>)
 8006d38:	88fb      	ldrh	r3, [r7, #6]
 8006d3a:	8053      	strh	r3, [r2, #2]
	for(index=0;index<totalpoint;index++)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	60fb      	str	r3, [r7, #12]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d3f5      	bcc.n	8006d36 <LCD_Clear+0x76>
	}
}
 8006d4a:	bf00      	nop
 8006d4c:	bf00      	nop
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	2000045c 	.word	0x2000045c
 8006d58:	6c0007fe 	.word	0x6c0007fe

08006d5c <LCD_Fill>:
//在指定区域内填充单个颜色
//(sx,sy),(ex,ey):填充矩形对角坐标,区域大小为:(ex-sx+1)*(ey-sy+1)
//color:要填充的颜色
void LCD_Fill(uint16_t sx,uint16_t sy,uint16_t ex,uint16_t ey,uint16_t color)
{
 8006d5c:	b590      	push	{r4, r7, lr}
 8006d5e:	b087      	sub	sp, #28
 8006d60:	af02      	add	r7, sp, #8
 8006d62:	4604      	mov	r4, r0
 8006d64:	4608      	mov	r0, r1
 8006d66:	4611      	mov	r1, r2
 8006d68:	461a      	mov	r2, r3
 8006d6a:	4623      	mov	r3, r4
 8006d6c:	80fb      	strh	r3, [r7, #6]
 8006d6e:	4603      	mov	r3, r0
 8006d70:	80bb      	strh	r3, [r7, #4]
 8006d72:	460b      	mov	r3, r1
 8006d74:	807b      	strh	r3, [r7, #2]
 8006d76:	4613      	mov	r3, r2
 8006d78:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	uint16_t xlen=0;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	817b      	strh	r3, [r7, #10]
	uint16_t temp;
	if((lcddev.id==0X6804)&&(lcddev.dir==1))	//6804横屏的时候特殊处理
 8006d7e:	4b32      	ldr	r3, [pc, #200]	; (8006e48 <LCD_Fill+0xec>)
 8006d80:	889b      	ldrh	r3, [r3, #4]
 8006d82:	f646 0204 	movw	r2, #26628	; 0x6804
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d133      	bne.n	8006df2 <LCD_Fill+0x96>
 8006d8a:	4b2f      	ldr	r3, [pc, #188]	; (8006e48 <LCD_Fill+0xec>)
 8006d8c:	799b      	ldrb	r3, [r3, #6]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d12f      	bne.n	8006df2 <LCD_Fill+0x96>
	{
		temp=sx;
 8006d92:	88fb      	ldrh	r3, [r7, #6]
 8006d94:	813b      	strh	r3, [r7, #8]
		sx=sy;
 8006d96:	88bb      	ldrh	r3, [r7, #4]
 8006d98:	80fb      	strh	r3, [r7, #6]
		sy=lcddev.width-ex-1;
 8006d9a:	4b2b      	ldr	r3, [pc, #172]	; (8006e48 <LCD_Fill+0xec>)
 8006d9c:	881a      	ldrh	r2, [r3, #0]
 8006d9e:	887b      	ldrh	r3, [r7, #2]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	3b01      	subs	r3, #1
 8006da6:	80bb      	strh	r3, [r7, #4]
		ex=ey;
 8006da8:	883b      	ldrh	r3, [r7, #0]
 8006daa:	807b      	strh	r3, [r7, #2]
		ey=lcddev.width-temp-1;
 8006dac:	4b26      	ldr	r3, [pc, #152]	; (8006e48 <LCD_Fill+0xec>)
 8006dae:	881a      	ldrh	r2, [r3, #0]
 8006db0:	893b      	ldrh	r3, [r7, #8]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	3b01      	subs	r3, #1
 8006db8:	803b      	strh	r3, [r7, #0]
 		lcddev.dir=0;
 8006dba:	4b23      	ldr	r3, [pc, #140]	; (8006e48 <LCD_Fill+0xec>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	719a      	strb	r2, [r3, #6]
 		lcddev.setxcmd=0X2A;
 8006dc0:	4b21      	ldr	r3, [pc, #132]	; (8006e48 <LCD_Fill+0xec>)
 8006dc2:	222a      	movs	r2, #42	; 0x2a
 8006dc4:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2B;
 8006dc6:	4b20      	ldr	r3, [pc, #128]	; (8006e48 <LCD_Fill+0xec>)
 8006dc8:	222b      	movs	r2, #43	; 0x2b
 8006dca:	819a      	strh	r2, [r3, #12]
		LCD_Fill(sx,sy,ex,ey,color);
 8006dcc:	883c      	ldrh	r4, [r7, #0]
 8006dce:	887a      	ldrh	r2, [r7, #2]
 8006dd0:	88b9      	ldrh	r1, [r7, #4]
 8006dd2:	88f8      	ldrh	r0, [r7, #6]
 8006dd4:	8c3b      	ldrh	r3, [r7, #32]
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	4623      	mov	r3, r4
 8006dda:	f7ff ffbf 	bl	8006d5c <LCD_Fill>
 		lcddev.dir=1;
 8006dde:	4b1a      	ldr	r3, [pc, #104]	; (8006e48 <LCD_Fill+0xec>)
 8006de0:	2201      	movs	r2, #1
 8006de2:	719a      	strb	r2, [r3, #6]
  		lcddev.setxcmd=0X2B;
 8006de4:	4b18      	ldr	r3, [pc, #96]	; (8006e48 <LCD_Fill+0xec>)
 8006de6:	222b      	movs	r2, #43	; 0x2b
 8006de8:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2A;
 8006dea:	4b17      	ldr	r3, [pc, #92]	; (8006e48 <LCD_Fill+0xec>)
 8006dec:	222a      	movs	r2, #42	; 0x2a
 8006dee:	819a      	strh	r2, [r3, #12]
 8006df0:	e025      	b.n	8006e3e <LCD_Fill+0xe2>
 	}else
	{
		xlen=ex-sx+1;
 8006df2:	887a      	ldrh	r2, [r7, #2]
 8006df4:	88fb      	ldrh	r3, [r7, #6]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	817b      	strh	r3, [r7, #10]
		for(i=sy;i<=ey;i++)
 8006dfe:	88bb      	ldrh	r3, [r7, #4]
 8006e00:	81fb      	strh	r3, [r7, #14]
 8006e02:	e017      	b.n	8006e34 <LCD_Fill+0xd8>
		{
		 	LCD_SetCursor(sx,i);      				//设置光标位置
 8006e04:	89fa      	ldrh	r2, [r7, #14]
 8006e06:	88fb      	ldrh	r3, [r7, #6]
 8006e08:	4611      	mov	r1, r2
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7fb fd98 	bl	8002940 <LCD_SetCursor>
			LCD_WriteRAM_Prepare();     			//开始写入GRAM
 8006e10:	f7fb fd88 	bl	8002924 <LCD_WriteRAM_Prepare>
			for(j=0;j<xlen;j++)LCD->LCD_RAM=color;	//显示颜色
 8006e14:	2300      	movs	r3, #0
 8006e16:	81bb      	strh	r3, [r7, #12]
 8006e18:	e005      	b.n	8006e26 <LCD_Fill+0xca>
 8006e1a:	4a0c      	ldr	r2, [pc, #48]	; (8006e4c <LCD_Fill+0xf0>)
 8006e1c:	8c3b      	ldrh	r3, [r7, #32]
 8006e1e:	8053      	strh	r3, [r2, #2]
 8006e20:	89bb      	ldrh	r3, [r7, #12]
 8006e22:	3301      	adds	r3, #1
 8006e24:	81bb      	strh	r3, [r7, #12]
 8006e26:	89ba      	ldrh	r2, [r7, #12]
 8006e28:	897b      	ldrh	r3, [r7, #10]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d3f5      	bcc.n	8006e1a <LCD_Fill+0xbe>
		for(i=sy;i<=ey;i++)
 8006e2e:	89fb      	ldrh	r3, [r7, #14]
 8006e30:	3301      	adds	r3, #1
 8006e32:	81fb      	strh	r3, [r7, #14]
 8006e34:	89fa      	ldrh	r2, [r7, #14]
 8006e36:	883b      	ldrh	r3, [r7, #0]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d9e3      	bls.n	8006e04 <LCD_Fill+0xa8>
		}
	}
}
 8006e3c:	bf00      	nop
 8006e3e:	bf00      	nop
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd90      	pop	{r4, r7, pc}
 8006e46:	bf00      	nop
 8006e48:	2000045c 	.word	0x2000045c
 8006e4c:	6c0007fe 	.word	0x6c0007fe

08006e50 <LCD_ShowChar>:
//x,y:起始坐标
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16/24
//mode:叠加方式(1)还是非叠加方式(0)
void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{
 8006e50:	b590      	push	{r4, r7, lr}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	4604      	mov	r4, r0
 8006e58:	4608      	mov	r0, r1
 8006e5a:	4611      	mov	r1, r2
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	4623      	mov	r3, r4
 8006e60:	80fb      	strh	r3, [r7, #6]
 8006e62:	4603      	mov	r3, r0
 8006e64:	80bb      	strh	r3, [r7, #4]
 8006e66:	460b      	mov	r3, r1
 8006e68:	70fb      	strb	r3, [r7, #3]
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	70bb      	strb	r3, [r7, #2]
	uint8_t temp,t1,t;
	uint16_t y0=y;
 8006e6e:	88bb      	ldrh	r3, [r7, #4]
 8006e70:	817b      	strh	r3, [r7, #10]
	uint8_t csize=(size/8+((size%8)?1:0))*(size/2);		//得到字体一个字符对应点阵集所占的字节数
 8006e72:	78bb      	ldrb	r3, [r7, #2]
 8006e74:	08db      	lsrs	r3, r3, #3
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	461a      	mov	r2, r3
 8006e7a:	78bb      	ldrb	r3, [r7, #2]
 8006e7c:	f003 0307 	and.w	r3, r3, #7
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	bf14      	ite	ne
 8006e86:	2301      	movne	r3, #1
 8006e88:	2300      	moveq	r3, #0
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	4413      	add	r3, r2
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	78ba      	ldrb	r2, [r7, #2]
 8006e92:	0852      	lsrs	r2, r2, #1
 8006e94:	b2d2      	uxtb	r2, r2
 8006e96:	fb02 f303 	mul.w	r3, r2, r3
 8006e9a:	727b      	strb	r3, [r7, #9]
 	num=num-' ';//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8006e9c:	78fb      	ldrb	r3, [r7, #3]
 8006e9e:	3b20      	subs	r3, #32
 8006ea0:	70fb      	strb	r3, [r7, #3]
	for(t=0;t<csize;t++)
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	737b      	strb	r3, [r7, #13]
 8006ea6:	e08f      	b.n	8006fc8 <LCD_ShowChar+0x178>
	{
		if(size==12)temp=asc2_1206[num][t]; 	 	//调用1206字体
 8006ea8:	78bb      	ldrb	r3, [r7, #2]
 8006eaa:	2b0c      	cmp	r3, #12
 8006eac:	d10b      	bne.n	8006ec6 <LCD_ShowChar+0x76>
 8006eae:	78fa      	ldrb	r2, [r7, #3]
 8006eb0:	7b79      	ldrb	r1, [r7, #13]
 8006eb2:	484b      	ldr	r0, [pc, #300]	; (8006fe0 <LCD_ShowChar+0x190>)
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	005b      	lsls	r3, r3, #1
 8006eb8:	4413      	add	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4403      	add	r3, r0
 8006ebe:	440b      	add	r3, r1
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	73fb      	strb	r3, [r7, #15]
 8006ec4:	e03f      	b.n	8006f46 <LCD_ShowChar+0xf6>
		else if(size==16)temp=asc2_1608[num][t];	//调用1608字体
 8006ec6:	78bb      	ldrb	r3, [r7, #2]
 8006ec8:	2b10      	cmp	r3, #16
 8006eca:	d108      	bne.n	8006ede <LCD_ShowChar+0x8e>
 8006ecc:	78fa      	ldrb	r2, [r7, #3]
 8006ece:	7b7b      	ldrb	r3, [r7, #13]
 8006ed0:	4944      	ldr	r1, [pc, #272]	; (8006fe4 <LCD_ShowChar+0x194>)
 8006ed2:	0112      	lsls	r2, r2, #4
 8006ed4:	440a      	add	r2, r1
 8006ed6:	4413      	add	r3, r2
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	73fb      	strb	r3, [r7, #15]
 8006edc:	e033      	b.n	8006f46 <LCD_ShowChar+0xf6>
		else if(size==24)temp=asc2_2412[num][t];	//调用2412字体
 8006ede:	78bb      	ldrb	r3, [r7, #2]
 8006ee0:	2b18      	cmp	r3, #24
 8006ee2:	d10b      	bne.n	8006efc <LCD_ShowChar+0xac>
 8006ee4:	78fa      	ldrb	r2, [r7, #3]
 8006ee6:	7b79      	ldrb	r1, [r7, #13]
 8006ee8:	483f      	ldr	r0, [pc, #252]	; (8006fe8 <LCD_ShowChar+0x198>)
 8006eea:	4613      	mov	r3, r2
 8006eec:	00db      	lsls	r3, r3, #3
 8006eee:	4413      	add	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4403      	add	r3, r0
 8006ef4:	440b      	add	r3, r1
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	73fb      	strb	r3, [r7, #15]
 8006efa:	e024      	b.n	8006f46 <LCD_ShowChar+0xf6>
		else if(size==32)temp=asc2_3216[num][t];    //调用3216字体
 8006efc:	78bb      	ldrb	r3, [r7, #2]
 8006efe:	2b20      	cmp	r3, #32
 8006f00:	d108      	bne.n	8006f14 <LCD_ShowChar+0xc4>
 8006f02:	78fa      	ldrb	r2, [r7, #3]
 8006f04:	7b7b      	ldrb	r3, [r7, #13]
 8006f06:	4939      	ldr	r1, [pc, #228]	; (8006fec <LCD_ShowChar+0x19c>)
 8006f08:	0192      	lsls	r2, r2, #6
 8006f0a:	440a      	add	r2, r1
 8006f0c:	4413      	add	r3, r2
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	73fb      	strb	r3, [r7, #15]
 8006f12:	e018      	b.n	8006f46 <LCD_ShowChar+0xf6>
		else if(size==48)temp=asc2_4824[num][t];    //调用4824字体
 8006f14:	78bb      	ldrb	r3, [r7, #2]
 8006f16:	2b30      	cmp	r3, #48	; 0x30
 8006f18:	d10a      	bne.n	8006f30 <LCD_ShowChar+0xe0>
 8006f1a:	78fa      	ldrb	r2, [r7, #3]
 8006f1c:	7b7b      	ldrb	r3, [r7, #13]
 8006f1e:	4934      	ldr	r1, [pc, #208]	; (8006ff0 <LCD_ShowChar+0x1a0>)
 8006f20:	20a8      	movs	r0, #168	; 0xa8
 8006f22:	fb00 f202 	mul.w	r2, r0, r2
 8006f26:	440a      	add	r2, r1
 8006f28:	4413      	add	r3, r2
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	73fb      	strb	r3, [r7, #15]
 8006f2e:	e00a      	b.n	8006f46 <LCD_ShowChar+0xf6>
		else if(size==64)temp=asc2_6432[num][t];    //调用6432字体
 8006f30:	78bb      	ldrb	r3, [r7, #2]
 8006f32:	2b40      	cmp	r3, #64	; 0x40
 8006f34:	d14e      	bne.n	8006fd4 <LCD_ShowChar+0x184>
 8006f36:	78fa      	ldrb	r2, [r7, #3]
 8006f38:	7b7b      	ldrb	r3, [r7, #13]
 8006f3a:	492e      	ldr	r1, [pc, #184]	; (8006ff4 <LCD_ShowChar+0x1a4>)
 8006f3c:	0212      	lsls	r2, r2, #8
 8006f3e:	440a      	add	r2, r1
 8006f40:	4413      	add	r3, r2
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	73fb      	strb	r3, [r7, #15]
		else return;								//没有的字库
		for(t1=0;t1<8;t1++)
 8006f46:	2300      	movs	r3, #0
 8006f48:	73bb      	strb	r3, [r7, #14]
 8006f4a:	e035      	b.n	8006fb8 <LCD_ShowChar+0x168>
		{
			if(temp&0x80)LCD_Fast_DrawPoint(x,y,POINT_COLOR);
 8006f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	da07      	bge.n	8006f64 <LCD_ShowChar+0x114>
 8006f54:	4b28      	ldr	r3, [pc, #160]	; (8006ff8 <LCD_ShowChar+0x1a8>)
 8006f56:	881a      	ldrh	r2, [r3, #0]
 8006f58:	88b9      	ldrh	r1, [r7, #4]
 8006f5a:	88fb      	ldrh	r3, [r7, #6]
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7fc f819 	bl	8002f94 <LCD_Fast_DrawPoint>
 8006f62:	e00a      	b.n	8006f7a <LCD_ShowChar+0x12a>
			else if(mode==0)LCD_Fast_DrawPoint(x,y,BACK_COLOR);
 8006f64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d106      	bne.n	8006f7a <LCD_ShowChar+0x12a>
 8006f6c:	4b23      	ldr	r3, [pc, #140]	; (8006ffc <LCD_ShowChar+0x1ac>)
 8006f6e:	881a      	ldrh	r2, [r3, #0]
 8006f70:	88b9      	ldrh	r1, [r7, #4]
 8006f72:	88fb      	ldrh	r3, [r7, #6]
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7fc f80d 	bl	8002f94 <LCD_Fast_DrawPoint>
			temp<<=1;
 8006f7a:	7bfb      	ldrb	r3, [r7, #15]
 8006f7c:	005b      	lsls	r3, r3, #1
 8006f7e:	73fb      	strb	r3, [r7, #15]
			y++;
 8006f80:	88bb      	ldrh	r3, [r7, #4]
 8006f82:	3301      	adds	r3, #1
 8006f84:	80bb      	strh	r3, [r7, #4]
			if(y>=lcddev.height)return;		//超区域了
 8006f86:	4b1e      	ldr	r3, [pc, #120]	; (8007000 <LCD_ShowChar+0x1b0>)
 8006f88:	885b      	ldrh	r3, [r3, #2]
 8006f8a:	88ba      	ldrh	r2, [r7, #4]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d223      	bcs.n	8006fd8 <LCD_ShowChar+0x188>
			if((y-y0)==size)
 8006f90:	88ba      	ldrh	r2, [r7, #4]
 8006f92:	897b      	ldrh	r3, [r7, #10]
 8006f94:	1ad2      	subs	r2, r2, r3
 8006f96:	78bb      	ldrb	r3, [r7, #2]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d10a      	bne.n	8006fb2 <LCD_ShowChar+0x162>
			{
				y=y0;
 8006f9c:	897b      	ldrh	r3, [r7, #10]
 8006f9e:	80bb      	strh	r3, [r7, #4]
				x++;
 8006fa0:	88fb      	ldrh	r3, [r7, #6]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	80fb      	strh	r3, [r7, #6]
				if(x>=lcddev.width)return;	//超区域了
 8006fa6:	4b16      	ldr	r3, [pc, #88]	; (8007000 <LCD_ShowChar+0x1b0>)
 8006fa8:	881b      	ldrh	r3, [r3, #0]
 8006faa:	88fa      	ldrh	r2, [r7, #6]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d307      	bcc.n	8006fc0 <LCD_ShowChar+0x170>
 8006fb0:	e013      	b.n	8006fda <LCD_ShowChar+0x18a>
		for(t1=0;t1<8;t1++)
 8006fb2:	7bbb      	ldrb	r3, [r7, #14]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	73bb      	strb	r3, [r7, #14]
 8006fb8:	7bbb      	ldrb	r3, [r7, #14]
 8006fba:	2b07      	cmp	r3, #7
 8006fbc:	d9c6      	bls.n	8006f4c <LCD_ShowChar+0xfc>
 8006fbe:	e000      	b.n	8006fc2 <LCD_ShowChar+0x172>
				break;
 8006fc0:	bf00      	nop
	for(t=0;t<csize;t++)
 8006fc2:	7b7b      	ldrb	r3, [r7, #13]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	737b      	strb	r3, [r7, #13]
 8006fc8:	7b7a      	ldrb	r2, [r7, #13]
 8006fca:	7a7b      	ldrb	r3, [r7, #9]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	f4ff af6b 	bcc.w	8006ea8 <LCD_ShowChar+0x58>
 8006fd2:	e002      	b.n	8006fda <LCD_ShowChar+0x18a>
		else return;								//没有的字库
 8006fd4:	bf00      	nop
 8006fd6:	e000      	b.n	8006fda <LCD_ShowChar+0x18a>
			if(y>=lcddev.height)return;		//超区域了
 8006fd8:	bf00      	nop
			}
		}
	}
}
 8006fda:	3714      	adds	r7, #20
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd90      	pop	{r4, r7, pc}
 8006fe0:	0800de4c 	.word	0x0800de4c
 8006fe4:	0800e2c0 	.word	0x0800e2c0
 8006fe8:	0800e8b0 	.word	0x0800e8b0
 8006fec:	0800f60c 	.word	0x0800f60c
 8006ff0:	08010dcc 	.word	0x08010dcc
 8006ff4:	08014c24 	.word	0x08014c24
 8006ff8:	20000214 	.word	0x20000214
 8006ffc:	2000000a 	.word	0x2000000a
 8007000:	2000045c 	.word	0x2000045c

08007004 <LCD_ShowString>:
//x,y:起点坐标
//width,height:区域大小
//size:字体大小
//*p:字符串起始地址
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{
 8007004:	b590      	push	{r4, r7, lr}
 8007006:	b087      	sub	sp, #28
 8007008:	af02      	add	r7, sp, #8
 800700a:	4604      	mov	r4, r0
 800700c:	4608      	mov	r0, r1
 800700e:	4611      	mov	r1, r2
 8007010:	461a      	mov	r2, r3
 8007012:	4623      	mov	r3, r4
 8007014:	80fb      	strh	r3, [r7, #6]
 8007016:	4603      	mov	r3, r0
 8007018:	80bb      	strh	r3, [r7, #4]
 800701a:	460b      	mov	r3, r1
 800701c:	807b      	strh	r3, [r7, #2]
 800701e:	4613      	mov	r3, r2
 8007020:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 8007022:	88fb      	ldrh	r3, [r7, #6]
 8007024:	73fb      	strb	r3, [r7, #15]
	width+=x;
 8007026:	887a      	ldrh	r2, [r7, #2]
 8007028:	88fb      	ldrh	r3, [r7, #6]
 800702a:	4413      	add	r3, r2
 800702c:	807b      	strh	r3, [r7, #2]
	height+=y;
 800702e:	883a      	ldrh	r2, [r7, #0]
 8007030:	88bb      	ldrh	r3, [r7, #4]
 8007032:	4413      	add	r3, r2
 8007034:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 8007036:	e024      	b.n	8007082 <LCD_ShowString+0x7e>
    {
        if(x>=width){x=x0;y+=size;}
 8007038:	88fa      	ldrh	r2, [r7, #6]
 800703a:	887b      	ldrh	r3, [r7, #2]
 800703c:	429a      	cmp	r2, r3
 800703e:	d307      	bcc.n	8007050 <LCD_ShowString+0x4c>
 8007040:	7bfb      	ldrb	r3, [r7, #15]
 8007042:	80fb      	strh	r3, [r7, #6]
 8007044:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007048:	b29a      	uxth	r2, r3
 800704a:	88bb      	ldrh	r3, [r7, #4]
 800704c:	4413      	add	r3, r2
 800704e:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//退出
 8007050:	88ba      	ldrh	r2, [r7, #4]
 8007052:	883b      	ldrh	r3, [r7, #0]
 8007054:	429a      	cmp	r2, r3
 8007056:	d21d      	bcs.n	8007094 <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 8007058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705a:	781a      	ldrb	r2, [r3, #0]
 800705c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007060:	88b9      	ldrh	r1, [r7, #4]
 8007062:	88f8      	ldrh	r0, [r7, #6]
 8007064:	2400      	movs	r4, #0
 8007066:	9400      	str	r4, [sp, #0]
 8007068:	f7ff fef2 	bl	8006e50 <LCD_ShowChar>
        x+=size/2;
 800706c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007070:	085b      	lsrs	r3, r3, #1
 8007072:	b2db      	uxtb	r3, r3
 8007074:	b29a      	uxth	r2, r3
 8007076:	88fb      	ldrh	r3, [r7, #6]
 8007078:	4413      	add	r3, r2
 800707a:	80fb      	strh	r3, [r7, #6]
        p++;
 800707c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707e:	3301      	adds	r3, #1
 8007080:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	2b7e      	cmp	r3, #126	; 0x7e
 8007088:	d805      	bhi.n	8007096 <LCD_ShowString+0x92>
 800708a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	2b1f      	cmp	r3, #31
 8007090:	d8d2      	bhi.n	8007038 <LCD_ShowString+0x34>
    }
}
 8007092:	e000      	b.n	8007096 <LCD_ShowString+0x92>
        if(y>=height)break;//退出
 8007094:	bf00      	nop
}
 8007096:	bf00      	nop
 8007098:	3714      	adds	r7, #20
 800709a:	46bd      	mov	sp, r7
 800709c:	bd90      	pop	{r4, r7, pc}
	...

080070a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80070a4:	4b08      	ldr	r3, [pc, #32]	; (80070c8 <HAL_Init+0x28>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a07      	ldr	r2, [pc, #28]	; (80070c8 <HAL_Init+0x28>)
 80070aa:	f043 0310 	orr.w	r3, r3, #16
 80070ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80070b0:	2003      	movs	r0, #3
 80070b2:	f000 f92b 	bl	800730c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80070b6:	2000      	movs	r0, #0
 80070b8:	f000 f808 	bl	80070cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80070bc:	f7fa fe8e 	bl	8001ddc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	40022000 	.word	0x40022000

080070cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80070d4:	4b12      	ldr	r3, [pc, #72]	; (8007120 <HAL_InitTick+0x54>)
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	4b12      	ldr	r3, [pc, #72]	; (8007124 <HAL_InitTick+0x58>)
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	4619      	mov	r1, r3
 80070de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80070e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80070e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 f935 	bl	800735a <HAL_SYSTICK_Config>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d001      	beq.n	80070fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e00e      	b.n	8007118 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2b0f      	cmp	r3, #15
 80070fe:	d80a      	bhi.n	8007116 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007100:	2200      	movs	r2, #0
 8007102:	6879      	ldr	r1, [r7, #4]
 8007104:	f04f 30ff 	mov.w	r0, #4294967295
 8007108:	f000 f90b 	bl	8007322 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800710c:	4a06      	ldr	r2, [pc, #24]	; (8007128 <HAL_InitTick+0x5c>)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007112:	2300      	movs	r3, #0
 8007114:	e000      	b.n	8007118 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
}
 8007118:	4618      	mov	r0, r3
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	20000004 	.word	0x20000004
 8007124:	20000010 	.word	0x20000010
 8007128:	2000000c 	.word	0x2000000c

0800712c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800712c:	b480      	push	{r7}
 800712e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007130:	4b05      	ldr	r3, [pc, #20]	; (8007148 <HAL_IncTick+0x1c>)
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	461a      	mov	r2, r3
 8007136:	4b05      	ldr	r3, [pc, #20]	; (800714c <HAL_IncTick+0x20>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4413      	add	r3, r2
 800713c:	4a03      	ldr	r2, [pc, #12]	; (800714c <HAL_IncTick+0x20>)
 800713e:	6013      	str	r3, [r2, #0]
}
 8007140:	bf00      	nop
 8007142:	46bd      	mov	sp, r7
 8007144:	bc80      	pop	{r7}
 8007146:	4770      	bx	lr
 8007148:	20000010 	.word	0x20000010
 800714c:	2000046c 	.word	0x2000046c

08007150 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007150:	b480      	push	{r7}
 8007152:	af00      	add	r7, sp, #0
  return uwTick;
 8007154:	4b02      	ldr	r3, [pc, #8]	; (8007160 <HAL_GetTick+0x10>)
 8007156:	681b      	ldr	r3, [r3, #0]
}
 8007158:	4618      	mov	r0, r3
 800715a:	46bd      	mov	sp, r7
 800715c:	bc80      	pop	{r7}
 800715e:	4770      	bx	lr
 8007160:	2000046c 	.word	0x2000046c

08007164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800716c:	f7ff fff0 	bl	8007150 <HAL_GetTick>
 8007170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800717c:	d005      	beq.n	800718a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800717e:	4b0a      	ldr	r3, [pc, #40]	; (80071a8 <HAL_Delay+0x44>)
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	461a      	mov	r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	4413      	add	r3, r2
 8007188:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800718a:	bf00      	nop
 800718c:	f7ff ffe0 	bl	8007150 <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	429a      	cmp	r2, r3
 800719a:	d8f7      	bhi.n	800718c <HAL_Delay+0x28>
  {
  }
}
 800719c:	bf00      	nop
 800719e:	bf00      	nop
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	20000010 	.word	0x20000010

080071ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f003 0307 	and.w	r3, r3, #7
 80071ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80071bc:	4b0c      	ldr	r3, [pc, #48]	; (80071f0 <__NVIC_SetPriorityGrouping+0x44>)
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80071c8:	4013      	ands	r3, r2
 80071ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80071d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80071d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80071de:	4a04      	ldr	r2, [pc, #16]	; (80071f0 <__NVIC_SetPriorityGrouping+0x44>)
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	60d3      	str	r3, [r2, #12]
}
 80071e4:	bf00      	nop
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bc80      	pop	{r7}
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	e000ed00 	.word	0xe000ed00

080071f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80071f4:	b480      	push	{r7}
 80071f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80071f8:	4b04      	ldr	r3, [pc, #16]	; (800720c <__NVIC_GetPriorityGrouping+0x18>)
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	0a1b      	lsrs	r3, r3, #8
 80071fe:	f003 0307 	and.w	r3, r3, #7
}
 8007202:	4618      	mov	r0, r3
 8007204:	46bd      	mov	sp, r7
 8007206:	bc80      	pop	{r7}
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	e000ed00 	.word	0xe000ed00

08007210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	4603      	mov	r3, r0
 8007218:	6039      	str	r1, [r7, #0]
 800721a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800721c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007220:	2b00      	cmp	r3, #0
 8007222:	db0a      	blt.n	800723a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	b2da      	uxtb	r2, r3
 8007228:	490c      	ldr	r1, [pc, #48]	; (800725c <__NVIC_SetPriority+0x4c>)
 800722a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800722e:	0112      	lsls	r2, r2, #4
 8007230:	b2d2      	uxtb	r2, r2
 8007232:	440b      	add	r3, r1
 8007234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007238:	e00a      	b.n	8007250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	b2da      	uxtb	r2, r3
 800723e:	4908      	ldr	r1, [pc, #32]	; (8007260 <__NVIC_SetPriority+0x50>)
 8007240:	79fb      	ldrb	r3, [r7, #7]
 8007242:	f003 030f 	and.w	r3, r3, #15
 8007246:	3b04      	subs	r3, #4
 8007248:	0112      	lsls	r2, r2, #4
 800724a:	b2d2      	uxtb	r2, r2
 800724c:	440b      	add	r3, r1
 800724e:	761a      	strb	r2, [r3, #24]
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	bc80      	pop	{r7}
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	e000e100 	.word	0xe000e100
 8007260:	e000ed00 	.word	0xe000ed00

08007264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007264:	b480      	push	{r7}
 8007266:	b089      	sub	sp, #36	; 0x24
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f003 0307 	and.w	r3, r3, #7
 8007276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	f1c3 0307 	rsb	r3, r3, #7
 800727e:	2b04      	cmp	r3, #4
 8007280:	bf28      	it	cs
 8007282:	2304      	movcs	r3, #4
 8007284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	3304      	adds	r3, #4
 800728a:	2b06      	cmp	r3, #6
 800728c:	d902      	bls.n	8007294 <NVIC_EncodePriority+0x30>
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	3b03      	subs	r3, #3
 8007292:	e000      	b.n	8007296 <NVIC_EncodePriority+0x32>
 8007294:	2300      	movs	r3, #0
 8007296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007298:	f04f 32ff 	mov.w	r2, #4294967295
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	fa02 f303 	lsl.w	r3, r2, r3
 80072a2:	43da      	mvns	r2, r3
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	401a      	ands	r2, r3
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80072ac:	f04f 31ff 	mov.w	r1, #4294967295
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	fa01 f303 	lsl.w	r3, r1, r3
 80072b6:	43d9      	mvns	r1, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072bc:	4313      	orrs	r3, r2
         );
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3724      	adds	r7, #36	; 0x24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bc80      	pop	{r7}
 80072c6:	4770      	bx	lr

080072c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	3b01      	subs	r3, #1
 80072d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072d8:	d301      	bcc.n	80072de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80072da:	2301      	movs	r3, #1
 80072dc:	e00f      	b.n	80072fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80072de:	4a0a      	ldr	r2, [pc, #40]	; (8007308 <SysTick_Config+0x40>)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	3b01      	subs	r3, #1
 80072e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80072e6:	210f      	movs	r1, #15
 80072e8:	f04f 30ff 	mov.w	r0, #4294967295
 80072ec:	f7ff ff90 	bl	8007210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80072f0:	4b05      	ldr	r3, [pc, #20]	; (8007308 <SysTick_Config+0x40>)
 80072f2:	2200      	movs	r2, #0
 80072f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80072f6:	4b04      	ldr	r3, [pc, #16]	; (8007308 <SysTick_Config+0x40>)
 80072f8:	2207      	movs	r2, #7
 80072fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3708      	adds	r7, #8
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	e000e010 	.word	0xe000e010

0800730c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f7ff ff49 	bl	80071ac <__NVIC_SetPriorityGrouping>
}
 800731a:	bf00      	nop
 800731c:	3708      	adds	r7, #8
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007322:	b580      	push	{r7, lr}
 8007324:	b086      	sub	sp, #24
 8007326:	af00      	add	r7, sp, #0
 8007328:	4603      	mov	r3, r0
 800732a:	60b9      	str	r1, [r7, #8]
 800732c:	607a      	str	r2, [r7, #4]
 800732e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007330:	2300      	movs	r3, #0
 8007332:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007334:	f7ff ff5e 	bl	80071f4 <__NVIC_GetPriorityGrouping>
 8007338:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	68b9      	ldr	r1, [r7, #8]
 800733e:	6978      	ldr	r0, [r7, #20]
 8007340:	f7ff ff90 	bl	8007264 <NVIC_EncodePriority>
 8007344:	4602      	mov	r2, r0
 8007346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800734a:	4611      	mov	r1, r2
 800734c:	4618      	mov	r0, r3
 800734e:	f7ff ff5f 	bl	8007210 <__NVIC_SetPriority>
}
 8007352:	bf00      	nop
 8007354:	3718      	adds	r7, #24
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b082      	sub	sp, #8
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f7ff ffb0 	bl	80072c8 <SysTick_Config>
 8007368:	4603      	mov	r3, r0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3708      	adds	r7, #8
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
	...

08007374 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007374:	b480      	push	{r7}
 8007376:	b08b      	sub	sp, #44	; 0x2c
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800737e:	2300      	movs	r3, #0
 8007380:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007382:	2300      	movs	r3, #0
 8007384:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007386:	e179      	b.n	800767c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007388:	2201      	movs	r2, #1
 800738a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738c:	fa02 f303 	lsl.w	r3, r2, r3
 8007390:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	69fa      	ldr	r2, [r7, #28]
 8007398:	4013      	ands	r3, r2
 800739a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800739c:	69ba      	ldr	r2, [r7, #24]
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	f040 8168 	bne.w	8007676 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	4aa0      	ldr	r2, [pc, #640]	; (800762c <HAL_GPIO_Init+0x2b8>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d05e      	beq.n	800746e <HAL_GPIO_Init+0xfa>
 80073b0:	4a9e      	ldr	r2, [pc, #632]	; (800762c <HAL_GPIO_Init+0x2b8>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d875      	bhi.n	80074a2 <HAL_GPIO_Init+0x12e>
 80073b6:	4a9e      	ldr	r2, [pc, #632]	; (8007630 <HAL_GPIO_Init+0x2bc>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d058      	beq.n	800746e <HAL_GPIO_Init+0xfa>
 80073bc:	4a9c      	ldr	r2, [pc, #624]	; (8007630 <HAL_GPIO_Init+0x2bc>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d86f      	bhi.n	80074a2 <HAL_GPIO_Init+0x12e>
 80073c2:	4a9c      	ldr	r2, [pc, #624]	; (8007634 <HAL_GPIO_Init+0x2c0>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d052      	beq.n	800746e <HAL_GPIO_Init+0xfa>
 80073c8:	4a9a      	ldr	r2, [pc, #616]	; (8007634 <HAL_GPIO_Init+0x2c0>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d869      	bhi.n	80074a2 <HAL_GPIO_Init+0x12e>
 80073ce:	4a9a      	ldr	r2, [pc, #616]	; (8007638 <HAL_GPIO_Init+0x2c4>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d04c      	beq.n	800746e <HAL_GPIO_Init+0xfa>
 80073d4:	4a98      	ldr	r2, [pc, #608]	; (8007638 <HAL_GPIO_Init+0x2c4>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d863      	bhi.n	80074a2 <HAL_GPIO_Init+0x12e>
 80073da:	4a98      	ldr	r2, [pc, #608]	; (800763c <HAL_GPIO_Init+0x2c8>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d046      	beq.n	800746e <HAL_GPIO_Init+0xfa>
 80073e0:	4a96      	ldr	r2, [pc, #600]	; (800763c <HAL_GPIO_Init+0x2c8>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d85d      	bhi.n	80074a2 <HAL_GPIO_Init+0x12e>
 80073e6:	2b12      	cmp	r3, #18
 80073e8:	d82a      	bhi.n	8007440 <HAL_GPIO_Init+0xcc>
 80073ea:	2b12      	cmp	r3, #18
 80073ec:	d859      	bhi.n	80074a2 <HAL_GPIO_Init+0x12e>
 80073ee:	a201      	add	r2, pc, #4	; (adr r2, 80073f4 <HAL_GPIO_Init+0x80>)
 80073f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f4:	0800746f 	.word	0x0800746f
 80073f8:	08007449 	.word	0x08007449
 80073fc:	0800745b 	.word	0x0800745b
 8007400:	0800749d 	.word	0x0800749d
 8007404:	080074a3 	.word	0x080074a3
 8007408:	080074a3 	.word	0x080074a3
 800740c:	080074a3 	.word	0x080074a3
 8007410:	080074a3 	.word	0x080074a3
 8007414:	080074a3 	.word	0x080074a3
 8007418:	080074a3 	.word	0x080074a3
 800741c:	080074a3 	.word	0x080074a3
 8007420:	080074a3 	.word	0x080074a3
 8007424:	080074a3 	.word	0x080074a3
 8007428:	080074a3 	.word	0x080074a3
 800742c:	080074a3 	.word	0x080074a3
 8007430:	080074a3 	.word	0x080074a3
 8007434:	080074a3 	.word	0x080074a3
 8007438:	08007451 	.word	0x08007451
 800743c:	08007465 	.word	0x08007465
 8007440:	4a7f      	ldr	r2, [pc, #508]	; (8007640 <HAL_GPIO_Init+0x2cc>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d013      	beq.n	800746e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007446:	e02c      	b.n	80074a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	623b      	str	r3, [r7, #32]
          break;
 800744e:	e029      	b.n	80074a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	3304      	adds	r3, #4
 8007456:	623b      	str	r3, [r7, #32]
          break;
 8007458:	e024      	b.n	80074a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	3308      	adds	r3, #8
 8007460:	623b      	str	r3, [r7, #32]
          break;
 8007462:	e01f      	b.n	80074a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	330c      	adds	r3, #12
 800746a:	623b      	str	r3, [r7, #32]
          break;
 800746c:	e01a      	b.n	80074a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d102      	bne.n	800747c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007476:	2304      	movs	r3, #4
 8007478:	623b      	str	r3, [r7, #32]
          break;
 800747a:	e013      	b.n	80074a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d105      	bne.n	8007490 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007484:	2308      	movs	r3, #8
 8007486:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	69fa      	ldr	r2, [r7, #28]
 800748c:	611a      	str	r2, [r3, #16]
          break;
 800748e:	e009      	b.n	80074a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007490:	2308      	movs	r3, #8
 8007492:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	69fa      	ldr	r2, [r7, #28]
 8007498:	615a      	str	r2, [r3, #20]
          break;
 800749a:	e003      	b.n	80074a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800749c:	2300      	movs	r3, #0
 800749e:	623b      	str	r3, [r7, #32]
          break;
 80074a0:	e000      	b.n	80074a4 <HAL_GPIO_Init+0x130>
          break;
 80074a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	2bff      	cmp	r3, #255	; 0xff
 80074a8:	d801      	bhi.n	80074ae <HAL_GPIO_Init+0x13a>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	e001      	b.n	80074b2 <HAL_GPIO_Init+0x13e>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	3304      	adds	r3, #4
 80074b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	2bff      	cmp	r3, #255	; 0xff
 80074b8:	d802      	bhi.n	80074c0 <HAL_GPIO_Init+0x14c>
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	e002      	b.n	80074c6 <HAL_GPIO_Init+0x152>
 80074c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c2:	3b08      	subs	r3, #8
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	210f      	movs	r1, #15
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	fa01 f303 	lsl.w	r3, r1, r3
 80074d4:	43db      	mvns	r3, r3
 80074d6:	401a      	ands	r2, r3
 80074d8:	6a39      	ldr	r1, [r7, #32]
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	fa01 f303 	lsl.w	r3, r1, r3
 80074e0:	431a      	orrs	r2, r3
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f000 80c1 	beq.w	8007676 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80074f4:	4b53      	ldr	r3, [pc, #332]	; (8007644 <HAL_GPIO_Init+0x2d0>)
 80074f6:	699b      	ldr	r3, [r3, #24]
 80074f8:	4a52      	ldr	r2, [pc, #328]	; (8007644 <HAL_GPIO_Init+0x2d0>)
 80074fa:	f043 0301 	orr.w	r3, r3, #1
 80074fe:	6193      	str	r3, [r2, #24]
 8007500:	4b50      	ldr	r3, [pc, #320]	; (8007644 <HAL_GPIO_Init+0x2d0>)
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	f003 0301 	and.w	r3, r3, #1
 8007508:	60bb      	str	r3, [r7, #8]
 800750a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800750c:	4a4e      	ldr	r2, [pc, #312]	; (8007648 <HAL_GPIO_Init+0x2d4>)
 800750e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007510:	089b      	lsrs	r3, r3, #2
 8007512:	3302      	adds	r3, #2
 8007514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007518:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800751a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751c:	f003 0303 	and.w	r3, r3, #3
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	220f      	movs	r2, #15
 8007524:	fa02 f303 	lsl.w	r3, r2, r3
 8007528:	43db      	mvns	r3, r3
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	4013      	ands	r3, r2
 800752e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a46      	ldr	r2, [pc, #280]	; (800764c <HAL_GPIO_Init+0x2d8>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d01f      	beq.n	8007578 <HAL_GPIO_Init+0x204>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a45      	ldr	r2, [pc, #276]	; (8007650 <HAL_GPIO_Init+0x2dc>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d019      	beq.n	8007574 <HAL_GPIO_Init+0x200>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a44      	ldr	r2, [pc, #272]	; (8007654 <HAL_GPIO_Init+0x2e0>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d013      	beq.n	8007570 <HAL_GPIO_Init+0x1fc>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a43      	ldr	r2, [pc, #268]	; (8007658 <HAL_GPIO_Init+0x2e4>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d00d      	beq.n	800756c <HAL_GPIO_Init+0x1f8>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a42      	ldr	r2, [pc, #264]	; (800765c <HAL_GPIO_Init+0x2e8>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d007      	beq.n	8007568 <HAL_GPIO_Init+0x1f4>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a41      	ldr	r2, [pc, #260]	; (8007660 <HAL_GPIO_Init+0x2ec>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d101      	bne.n	8007564 <HAL_GPIO_Init+0x1f0>
 8007560:	2305      	movs	r3, #5
 8007562:	e00a      	b.n	800757a <HAL_GPIO_Init+0x206>
 8007564:	2306      	movs	r3, #6
 8007566:	e008      	b.n	800757a <HAL_GPIO_Init+0x206>
 8007568:	2304      	movs	r3, #4
 800756a:	e006      	b.n	800757a <HAL_GPIO_Init+0x206>
 800756c:	2303      	movs	r3, #3
 800756e:	e004      	b.n	800757a <HAL_GPIO_Init+0x206>
 8007570:	2302      	movs	r3, #2
 8007572:	e002      	b.n	800757a <HAL_GPIO_Init+0x206>
 8007574:	2301      	movs	r3, #1
 8007576:	e000      	b.n	800757a <HAL_GPIO_Init+0x206>
 8007578:	2300      	movs	r3, #0
 800757a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800757c:	f002 0203 	and.w	r2, r2, #3
 8007580:	0092      	lsls	r2, r2, #2
 8007582:	4093      	lsls	r3, r2
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	4313      	orrs	r3, r2
 8007588:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800758a:	492f      	ldr	r1, [pc, #188]	; (8007648 <HAL_GPIO_Init+0x2d4>)
 800758c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758e:	089b      	lsrs	r3, r3, #2
 8007590:	3302      	adds	r3, #2
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d006      	beq.n	80075b2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80075a4:	4b2f      	ldr	r3, [pc, #188]	; (8007664 <HAL_GPIO_Init+0x2f0>)
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	492e      	ldr	r1, [pc, #184]	; (8007664 <HAL_GPIO_Init+0x2f0>)
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	600b      	str	r3, [r1, #0]
 80075b0:	e006      	b.n	80075c0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80075b2:	4b2c      	ldr	r3, [pc, #176]	; (8007664 <HAL_GPIO_Init+0x2f0>)
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	43db      	mvns	r3, r3
 80075ba:	492a      	ldr	r1, [pc, #168]	; (8007664 <HAL_GPIO_Init+0x2f0>)
 80075bc:	4013      	ands	r3, r2
 80075be:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d006      	beq.n	80075da <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80075cc:	4b25      	ldr	r3, [pc, #148]	; (8007664 <HAL_GPIO_Init+0x2f0>)
 80075ce:	685a      	ldr	r2, [r3, #4]
 80075d0:	4924      	ldr	r1, [pc, #144]	; (8007664 <HAL_GPIO_Init+0x2f0>)
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	604b      	str	r3, [r1, #4]
 80075d8:	e006      	b.n	80075e8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80075da:	4b22      	ldr	r3, [pc, #136]	; (8007664 <HAL_GPIO_Init+0x2f0>)
 80075dc:	685a      	ldr	r2, [r3, #4]
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	43db      	mvns	r3, r3
 80075e2:	4920      	ldr	r1, [pc, #128]	; (8007664 <HAL_GPIO_Init+0x2f0>)
 80075e4:	4013      	ands	r3, r2
 80075e6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d006      	beq.n	8007602 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80075f4:	4b1b      	ldr	r3, [pc, #108]	; (8007664 <HAL_GPIO_Init+0x2f0>)
 80075f6:	689a      	ldr	r2, [r3, #8]
 80075f8:	491a      	ldr	r1, [pc, #104]	; (8007664 <HAL_GPIO_Init+0x2f0>)
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	608b      	str	r3, [r1, #8]
 8007600:	e006      	b.n	8007610 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007602:	4b18      	ldr	r3, [pc, #96]	; (8007664 <HAL_GPIO_Init+0x2f0>)
 8007604:	689a      	ldr	r2, [r3, #8]
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	43db      	mvns	r3, r3
 800760a:	4916      	ldr	r1, [pc, #88]	; (8007664 <HAL_GPIO_Init+0x2f0>)
 800760c:	4013      	ands	r3, r2
 800760e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d025      	beq.n	8007668 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800761c:	4b11      	ldr	r3, [pc, #68]	; (8007664 <HAL_GPIO_Init+0x2f0>)
 800761e:	68da      	ldr	r2, [r3, #12]
 8007620:	4910      	ldr	r1, [pc, #64]	; (8007664 <HAL_GPIO_Init+0x2f0>)
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	4313      	orrs	r3, r2
 8007626:	60cb      	str	r3, [r1, #12]
 8007628:	e025      	b.n	8007676 <HAL_GPIO_Init+0x302>
 800762a:	bf00      	nop
 800762c:	10320000 	.word	0x10320000
 8007630:	10310000 	.word	0x10310000
 8007634:	10220000 	.word	0x10220000
 8007638:	10210000 	.word	0x10210000
 800763c:	10120000 	.word	0x10120000
 8007640:	10110000 	.word	0x10110000
 8007644:	40021000 	.word	0x40021000
 8007648:	40010000 	.word	0x40010000
 800764c:	40010800 	.word	0x40010800
 8007650:	40010c00 	.word	0x40010c00
 8007654:	40011000 	.word	0x40011000
 8007658:	40011400 	.word	0x40011400
 800765c:	40011800 	.word	0x40011800
 8007660:	40011c00 	.word	0x40011c00
 8007664:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007668:	4b0b      	ldr	r3, [pc, #44]	; (8007698 <HAL_GPIO_Init+0x324>)
 800766a:	68da      	ldr	r2, [r3, #12]
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	43db      	mvns	r3, r3
 8007670:	4909      	ldr	r1, [pc, #36]	; (8007698 <HAL_GPIO_Init+0x324>)
 8007672:	4013      	ands	r3, r2
 8007674:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8007676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007678:	3301      	adds	r3, #1
 800767a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007682:	fa22 f303 	lsr.w	r3, r2, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	f47f ae7e 	bne.w	8007388 <HAL_GPIO_Init+0x14>
  }
}
 800768c:	bf00      	nop
 800768e:	bf00      	nop
 8007690:	372c      	adds	r7, #44	; 0x2c
 8007692:	46bd      	mov	sp, r7
 8007694:	bc80      	pop	{r7}
 8007696:	4770      	bx	lr
 8007698:	40010400 	.word	0x40010400

0800769c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	689a      	ldr	r2, [r3, #8]
 80076ac:	887b      	ldrh	r3, [r7, #2]
 80076ae:	4013      	ands	r3, r2
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d002      	beq.n	80076ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80076b4:	2301      	movs	r3, #1
 80076b6:	73fb      	strb	r3, [r7, #15]
 80076b8:	e001      	b.n	80076be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80076ba:	2300      	movs	r3, #0
 80076bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80076be:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3714      	adds	r7, #20
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bc80      	pop	{r7}
 80076c8:	4770      	bx	lr

080076ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b083      	sub	sp, #12
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
 80076d2:	460b      	mov	r3, r1
 80076d4:	807b      	strh	r3, [r7, #2]
 80076d6:	4613      	mov	r3, r2
 80076d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80076da:	787b      	ldrb	r3, [r7, #1]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d003      	beq.n	80076e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80076e0:	887a      	ldrh	r2, [r7, #2]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80076e6:	e003      	b.n	80076f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80076e8:	887b      	ldrh	r3, [r7, #2]
 80076ea:	041a      	lsls	r2, r3, #16
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	611a      	str	r2, [r3, #16]
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bc80      	pop	{r7}
 80076f8:	4770      	bx	lr
	...

080076fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e26c      	b.n	8007be8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 0301 	and.w	r3, r3, #1
 8007716:	2b00      	cmp	r3, #0
 8007718:	f000 8087 	beq.w	800782a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800771c:	4b92      	ldr	r3, [pc, #584]	; (8007968 <HAL_RCC_OscConfig+0x26c>)
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	f003 030c 	and.w	r3, r3, #12
 8007724:	2b04      	cmp	r3, #4
 8007726:	d00c      	beq.n	8007742 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007728:	4b8f      	ldr	r3, [pc, #572]	; (8007968 <HAL_RCC_OscConfig+0x26c>)
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	f003 030c 	and.w	r3, r3, #12
 8007730:	2b08      	cmp	r3, #8
 8007732:	d112      	bne.n	800775a <HAL_RCC_OscConfig+0x5e>
 8007734:	4b8c      	ldr	r3, [pc, #560]	; (8007968 <HAL_RCC_OscConfig+0x26c>)
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800773c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007740:	d10b      	bne.n	800775a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007742:	4b89      	ldr	r3, [pc, #548]	; (8007968 <HAL_RCC_OscConfig+0x26c>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d06c      	beq.n	8007828 <HAL_RCC_OscConfig+0x12c>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d168      	bne.n	8007828 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e246      	b.n	8007be8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007762:	d106      	bne.n	8007772 <HAL_RCC_OscConfig+0x76>
 8007764:	4b80      	ldr	r3, [pc, #512]	; (8007968 <HAL_RCC_OscConfig+0x26c>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a7f      	ldr	r2, [pc, #508]	; (8007968 <HAL_RCC_OscConfig+0x26c>)
 800776a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800776e:	6013      	str	r3, [r2, #0]
 8007770:	e02e      	b.n	80077d0 <HAL_RCC_OscConfig+0xd4>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d10c      	bne.n	8007794 <HAL_RCC_OscConfig+0x98>
 800777a:	4b7b      	ldr	r3, [pc, #492]	; (8007968 <HAL_RCC_OscConfig+0x26c>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a7a      	ldr	r2, [pc, #488]	; (8007968 <HAL_RCC_OscConfig+0x26c>)
 8007780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007784:	6013      	str	r3, [r2, #0]
 8007786:	4b78      	ldr	r3, [pc, #480]	; (8007968 <HAL_RCC_OscConfig+0x26c>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a77      	ldr	r2, [pc, #476]	; (8007968 <HAL_RCC_OscConfig+0x26c>)
 800778c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007790:	6013      	str	r3, [r2, #0]
 8007792:	e01d      	b.n	80077d0 <HAL_RCC_OscConfig+0xd4>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800779c:	d10c      	bne.n	80077b8 <HAL_RCC_OscConfig+0xbc>
 800779e:	4b72      	ldr	r3, [pc, #456]	; (8007968 <HAL_RCC_OscConfig+0x26c>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a71      	ldr	r2, [pc, #452]	; (8007968 <HAL_RCC_OscConfig+0x26c>)
 80077a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077a8:	6013      	str	r3, [r2, #0]
 80077aa:	4b6f      	ldr	r3, [pc, #444]	; (8007968 <HAL_RCC_OscConfig+0x26c>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a6e      	ldr	r2, [pc, #440]	; (8007968 <HAL_RCC_OscConfig+0x26c>)
 80077b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077b4:	6013      	str	r3, [r2, #0]
 80077b6:	e00b      	b.n	80077d0 <HAL_RCC_OscConfig+0xd4>
 80077b8:	4b6b      	ldr	r3, [pc, #428]	; (8007968 <HAL_RCC_OscConfig+0x26c>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a6a      	ldr	r2, [pc, #424]	; (8007968 <HAL_RCC_OscConfig+0x26c>)
 80077be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077c2:	6013      	str	r3, [r2, #0]
 80077c4:	4b68      	ldr	r3, [pc, #416]	; (8007968 <HAL_RCC_OscConfig+0x26c>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a67      	ldr	r2, [pc, #412]	; (8007968 <HAL_RCC_OscConfig+0x26c>)
 80077ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d013      	beq.n	8007800 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077d8:	f7ff fcba 	bl	8007150 <HAL_GetTick>
 80077dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077de:	e008      	b.n	80077f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077e0:	f7ff fcb6 	bl	8007150 <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	2b64      	cmp	r3, #100	; 0x64
 80077ec:	d901      	bls.n	80077f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e1fa      	b.n	8007be8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077f2:	4b5d      	ldr	r3, [pc, #372]	; (8007968 <HAL_RCC_OscConfig+0x26c>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d0f0      	beq.n	80077e0 <HAL_RCC_OscConfig+0xe4>
 80077fe:	e014      	b.n	800782a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007800:	f7ff fca6 	bl	8007150 <HAL_GetTick>
 8007804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007806:	e008      	b.n	800781a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007808:	f7ff fca2 	bl	8007150 <HAL_GetTick>
 800780c:	4602      	mov	r2, r0
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	2b64      	cmp	r3, #100	; 0x64
 8007814:	d901      	bls.n	800781a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e1e6      	b.n	8007be8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800781a:	4b53      	ldr	r3, [pc, #332]	; (8007968 <HAL_RCC_OscConfig+0x26c>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1f0      	bne.n	8007808 <HAL_RCC_OscConfig+0x10c>
 8007826:	e000      	b.n	800782a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 0302 	and.w	r3, r3, #2
 8007832:	2b00      	cmp	r3, #0
 8007834:	d063      	beq.n	80078fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007836:	4b4c      	ldr	r3, [pc, #304]	; (8007968 <HAL_RCC_OscConfig+0x26c>)
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	f003 030c 	and.w	r3, r3, #12
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00b      	beq.n	800785a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007842:	4b49      	ldr	r3, [pc, #292]	; (8007968 <HAL_RCC_OscConfig+0x26c>)
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	f003 030c 	and.w	r3, r3, #12
 800784a:	2b08      	cmp	r3, #8
 800784c:	d11c      	bne.n	8007888 <HAL_RCC_OscConfig+0x18c>
 800784e:	4b46      	ldr	r3, [pc, #280]	; (8007968 <HAL_RCC_OscConfig+0x26c>)
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007856:	2b00      	cmp	r3, #0
 8007858:	d116      	bne.n	8007888 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800785a:	4b43      	ldr	r3, [pc, #268]	; (8007968 <HAL_RCC_OscConfig+0x26c>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0302 	and.w	r3, r3, #2
 8007862:	2b00      	cmp	r3, #0
 8007864:	d005      	beq.n	8007872 <HAL_RCC_OscConfig+0x176>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d001      	beq.n	8007872 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e1ba      	b.n	8007be8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007872:	4b3d      	ldr	r3, [pc, #244]	; (8007968 <HAL_RCC_OscConfig+0x26c>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	695b      	ldr	r3, [r3, #20]
 800787e:	00db      	lsls	r3, r3, #3
 8007880:	4939      	ldr	r1, [pc, #228]	; (8007968 <HAL_RCC_OscConfig+0x26c>)
 8007882:	4313      	orrs	r3, r2
 8007884:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007886:	e03a      	b.n	80078fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d020      	beq.n	80078d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007890:	4b36      	ldr	r3, [pc, #216]	; (800796c <HAL_RCC_OscConfig+0x270>)
 8007892:	2201      	movs	r2, #1
 8007894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007896:	f7ff fc5b 	bl	8007150 <HAL_GetTick>
 800789a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800789c:	e008      	b.n	80078b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800789e:	f7ff fc57 	bl	8007150 <HAL_GetTick>
 80078a2:	4602      	mov	r2, r0
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d901      	bls.n	80078b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80078ac:	2303      	movs	r3, #3
 80078ae:	e19b      	b.n	8007be8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078b0:	4b2d      	ldr	r3, [pc, #180]	; (8007968 <HAL_RCC_OscConfig+0x26c>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 0302 	and.w	r3, r3, #2
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d0f0      	beq.n	800789e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078bc:	4b2a      	ldr	r3, [pc, #168]	; (8007968 <HAL_RCC_OscConfig+0x26c>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	695b      	ldr	r3, [r3, #20]
 80078c8:	00db      	lsls	r3, r3, #3
 80078ca:	4927      	ldr	r1, [pc, #156]	; (8007968 <HAL_RCC_OscConfig+0x26c>)
 80078cc:	4313      	orrs	r3, r2
 80078ce:	600b      	str	r3, [r1, #0]
 80078d0:	e015      	b.n	80078fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078d2:	4b26      	ldr	r3, [pc, #152]	; (800796c <HAL_RCC_OscConfig+0x270>)
 80078d4:	2200      	movs	r2, #0
 80078d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078d8:	f7ff fc3a 	bl	8007150 <HAL_GetTick>
 80078dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078de:	e008      	b.n	80078f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078e0:	f7ff fc36 	bl	8007150 <HAL_GetTick>
 80078e4:	4602      	mov	r2, r0
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d901      	bls.n	80078f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80078ee:	2303      	movs	r3, #3
 80078f0:	e17a      	b.n	8007be8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078f2:	4b1d      	ldr	r3, [pc, #116]	; (8007968 <HAL_RCC_OscConfig+0x26c>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0302 	and.w	r3, r3, #2
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1f0      	bne.n	80078e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 0308 	and.w	r3, r3, #8
 8007906:	2b00      	cmp	r3, #0
 8007908:	d03a      	beq.n	8007980 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d019      	beq.n	8007946 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007912:	4b17      	ldr	r3, [pc, #92]	; (8007970 <HAL_RCC_OscConfig+0x274>)
 8007914:	2201      	movs	r2, #1
 8007916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007918:	f7ff fc1a 	bl	8007150 <HAL_GetTick>
 800791c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800791e:	e008      	b.n	8007932 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007920:	f7ff fc16 	bl	8007150 <HAL_GetTick>
 8007924:	4602      	mov	r2, r0
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	2b02      	cmp	r3, #2
 800792c:	d901      	bls.n	8007932 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	e15a      	b.n	8007be8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007932:	4b0d      	ldr	r3, [pc, #52]	; (8007968 <HAL_RCC_OscConfig+0x26c>)
 8007934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007936:	f003 0302 	and.w	r3, r3, #2
 800793a:	2b00      	cmp	r3, #0
 800793c:	d0f0      	beq.n	8007920 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800793e:	2001      	movs	r0, #1
 8007940:	f000 fad8 	bl	8007ef4 <RCC_Delay>
 8007944:	e01c      	b.n	8007980 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007946:	4b0a      	ldr	r3, [pc, #40]	; (8007970 <HAL_RCC_OscConfig+0x274>)
 8007948:	2200      	movs	r2, #0
 800794a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800794c:	f7ff fc00 	bl	8007150 <HAL_GetTick>
 8007950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007952:	e00f      	b.n	8007974 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007954:	f7ff fbfc 	bl	8007150 <HAL_GetTick>
 8007958:	4602      	mov	r2, r0
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	2b02      	cmp	r3, #2
 8007960:	d908      	bls.n	8007974 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007962:	2303      	movs	r3, #3
 8007964:	e140      	b.n	8007be8 <HAL_RCC_OscConfig+0x4ec>
 8007966:	bf00      	nop
 8007968:	40021000 	.word	0x40021000
 800796c:	42420000 	.word	0x42420000
 8007970:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007974:	4b9e      	ldr	r3, [pc, #632]	; (8007bf0 <HAL_RCC_OscConfig+0x4f4>)
 8007976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007978:	f003 0302 	and.w	r3, r3, #2
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1e9      	bne.n	8007954 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 0304 	and.w	r3, r3, #4
 8007988:	2b00      	cmp	r3, #0
 800798a:	f000 80a6 	beq.w	8007ada <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800798e:	2300      	movs	r3, #0
 8007990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007992:	4b97      	ldr	r3, [pc, #604]	; (8007bf0 <HAL_RCC_OscConfig+0x4f4>)
 8007994:	69db      	ldr	r3, [r3, #28]
 8007996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10d      	bne.n	80079ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800799e:	4b94      	ldr	r3, [pc, #592]	; (8007bf0 <HAL_RCC_OscConfig+0x4f4>)
 80079a0:	69db      	ldr	r3, [r3, #28]
 80079a2:	4a93      	ldr	r2, [pc, #588]	; (8007bf0 <HAL_RCC_OscConfig+0x4f4>)
 80079a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079a8:	61d3      	str	r3, [r2, #28]
 80079aa:	4b91      	ldr	r3, [pc, #580]	; (8007bf0 <HAL_RCC_OscConfig+0x4f4>)
 80079ac:	69db      	ldr	r3, [r3, #28]
 80079ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079b2:	60bb      	str	r3, [r7, #8]
 80079b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079b6:	2301      	movs	r3, #1
 80079b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079ba:	4b8e      	ldr	r3, [pc, #568]	; (8007bf4 <HAL_RCC_OscConfig+0x4f8>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d118      	bne.n	80079f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80079c6:	4b8b      	ldr	r3, [pc, #556]	; (8007bf4 <HAL_RCC_OscConfig+0x4f8>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a8a      	ldr	r2, [pc, #552]	; (8007bf4 <HAL_RCC_OscConfig+0x4f8>)
 80079cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079d2:	f7ff fbbd 	bl	8007150 <HAL_GetTick>
 80079d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079d8:	e008      	b.n	80079ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079da:	f7ff fbb9 	bl	8007150 <HAL_GetTick>
 80079de:	4602      	mov	r2, r0
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	1ad3      	subs	r3, r2, r3
 80079e4:	2b64      	cmp	r3, #100	; 0x64
 80079e6:	d901      	bls.n	80079ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80079e8:	2303      	movs	r3, #3
 80079ea:	e0fd      	b.n	8007be8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079ec:	4b81      	ldr	r3, [pc, #516]	; (8007bf4 <HAL_RCC_OscConfig+0x4f8>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d0f0      	beq.n	80079da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d106      	bne.n	8007a0e <HAL_RCC_OscConfig+0x312>
 8007a00:	4b7b      	ldr	r3, [pc, #492]	; (8007bf0 <HAL_RCC_OscConfig+0x4f4>)
 8007a02:	6a1b      	ldr	r3, [r3, #32]
 8007a04:	4a7a      	ldr	r2, [pc, #488]	; (8007bf0 <HAL_RCC_OscConfig+0x4f4>)
 8007a06:	f043 0301 	orr.w	r3, r3, #1
 8007a0a:	6213      	str	r3, [r2, #32]
 8007a0c:	e02d      	b.n	8007a6a <HAL_RCC_OscConfig+0x36e>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d10c      	bne.n	8007a30 <HAL_RCC_OscConfig+0x334>
 8007a16:	4b76      	ldr	r3, [pc, #472]	; (8007bf0 <HAL_RCC_OscConfig+0x4f4>)
 8007a18:	6a1b      	ldr	r3, [r3, #32]
 8007a1a:	4a75      	ldr	r2, [pc, #468]	; (8007bf0 <HAL_RCC_OscConfig+0x4f4>)
 8007a1c:	f023 0301 	bic.w	r3, r3, #1
 8007a20:	6213      	str	r3, [r2, #32]
 8007a22:	4b73      	ldr	r3, [pc, #460]	; (8007bf0 <HAL_RCC_OscConfig+0x4f4>)
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	4a72      	ldr	r2, [pc, #456]	; (8007bf0 <HAL_RCC_OscConfig+0x4f4>)
 8007a28:	f023 0304 	bic.w	r3, r3, #4
 8007a2c:	6213      	str	r3, [r2, #32]
 8007a2e:	e01c      	b.n	8007a6a <HAL_RCC_OscConfig+0x36e>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	2b05      	cmp	r3, #5
 8007a36:	d10c      	bne.n	8007a52 <HAL_RCC_OscConfig+0x356>
 8007a38:	4b6d      	ldr	r3, [pc, #436]	; (8007bf0 <HAL_RCC_OscConfig+0x4f4>)
 8007a3a:	6a1b      	ldr	r3, [r3, #32]
 8007a3c:	4a6c      	ldr	r2, [pc, #432]	; (8007bf0 <HAL_RCC_OscConfig+0x4f4>)
 8007a3e:	f043 0304 	orr.w	r3, r3, #4
 8007a42:	6213      	str	r3, [r2, #32]
 8007a44:	4b6a      	ldr	r3, [pc, #424]	; (8007bf0 <HAL_RCC_OscConfig+0x4f4>)
 8007a46:	6a1b      	ldr	r3, [r3, #32]
 8007a48:	4a69      	ldr	r2, [pc, #420]	; (8007bf0 <HAL_RCC_OscConfig+0x4f4>)
 8007a4a:	f043 0301 	orr.w	r3, r3, #1
 8007a4e:	6213      	str	r3, [r2, #32]
 8007a50:	e00b      	b.n	8007a6a <HAL_RCC_OscConfig+0x36e>
 8007a52:	4b67      	ldr	r3, [pc, #412]	; (8007bf0 <HAL_RCC_OscConfig+0x4f4>)
 8007a54:	6a1b      	ldr	r3, [r3, #32]
 8007a56:	4a66      	ldr	r2, [pc, #408]	; (8007bf0 <HAL_RCC_OscConfig+0x4f4>)
 8007a58:	f023 0301 	bic.w	r3, r3, #1
 8007a5c:	6213      	str	r3, [r2, #32]
 8007a5e:	4b64      	ldr	r3, [pc, #400]	; (8007bf0 <HAL_RCC_OscConfig+0x4f4>)
 8007a60:	6a1b      	ldr	r3, [r3, #32]
 8007a62:	4a63      	ldr	r2, [pc, #396]	; (8007bf0 <HAL_RCC_OscConfig+0x4f4>)
 8007a64:	f023 0304 	bic.w	r3, r3, #4
 8007a68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d015      	beq.n	8007a9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a72:	f7ff fb6d 	bl	8007150 <HAL_GetTick>
 8007a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a78:	e00a      	b.n	8007a90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a7a:	f7ff fb69 	bl	8007150 <HAL_GetTick>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d901      	bls.n	8007a90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	e0ab      	b.n	8007be8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a90:	4b57      	ldr	r3, [pc, #348]	; (8007bf0 <HAL_RCC_OscConfig+0x4f4>)
 8007a92:	6a1b      	ldr	r3, [r3, #32]
 8007a94:	f003 0302 	and.w	r3, r3, #2
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d0ee      	beq.n	8007a7a <HAL_RCC_OscConfig+0x37e>
 8007a9c:	e014      	b.n	8007ac8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a9e:	f7ff fb57 	bl	8007150 <HAL_GetTick>
 8007aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007aa4:	e00a      	b.n	8007abc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007aa6:	f7ff fb53 	bl	8007150 <HAL_GetTick>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d901      	bls.n	8007abc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	e095      	b.n	8007be8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007abc:	4b4c      	ldr	r3, [pc, #304]	; (8007bf0 <HAL_RCC_OscConfig+0x4f4>)
 8007abe:	6a1b      	ldr	r3, [r3, #32]
 8007ac0:	f003 0302 	and.w	r3, r3, #2
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1ee      	bne.n	8007aa6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007ac8:	7dfb      	ldrb	r3, [r7, #23]
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d105      	bne.n	8007ada <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ace:	4b48      	ldr	r3, [pc, #288]	; (8007bf0 <HAL_RCC_OscConfig+0x4f4>)
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	4a47      	ldr	r2, [pc, #284]	; (8007bf0 <HAL_RCC_OscConfig+0x4f4>)
 8007ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ad8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f000 8081 	beq.w	8007be6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ae4:	4b42      	ldr	r3, [pc, #264]	; (8007bf0 <HAL_RCC_OscConfig+0x4f4>)
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	f003 030c 	and.w	r3, r3, #12
 8007aec:	2b08      	cmp	r3, #8
 8007aee:	d061      	beq.n	8007bb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	69db      	ldr	r3, [r3, #28]
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d146      	bne.n	8007b86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007af8:	4b3f      	ldr	r3, [pc, #252]	; (8007bf8 <HAL_RCC_OscConfig+0x4fc>)
 8007afa:	2200      	movs	r2, #0
 8007afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007afe:	f7ff fb27 	bl	8007150 <HAL_GetTick>
 8007b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007b04:	e008      	b.n	8007b18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b06:	f7ff fb23 	bl	8007150 <HAL_GetTick>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d901      	bls.n	8007b18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007b14:	2303      	movs	r3, #3
 8007b16:	e067      	b.n	8007be8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007b18:	4b35      	ldr	r3, [pc, #212]	; (8007bf0 <HAL_RCC_OscConfig+0x4f4>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d1f0      	bne.n	8007b06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a1b      	ldr	r3, [r3, #32]
 8007b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b2c:	d108      	bne.n	8007b40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007b2e:	4b30      	ldr	r3, [pc, #192]	; (8007bf0 <HAL_RCC_OscConfig+0x4f4>)
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	492d      	ldr	r1, [pc, #180]	; (8007bf0 <HAL_RCC_OscConfig+0x4f4>)
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b40:	4b2b      	ldr	r3, [pc, #172]	; (8007bf0 <HAL_RCC_OscConfig+0x4f4>)
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a19      	ldr	r1, [r3, #32]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b50:	430b      	orrs	r3, r1
 8007b52:	4927      	ldr	r1, [pc, #156]	; (8007bf0 <HAL_RCC_OscConfig+0x4f4>)
 8007b54:	4313      	orrs	r3, r2
 8007b56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b58:	4b27      	ldr	r3, [pc, #156]	; (8007bf8 <HAL_RCC_OscConfig+0x4fc>)
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b5e:	f7ff faf7 	bl	8007150 <HAL_GetTick>
 8007b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007b64:	e008      	b.n	8007b78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b66:	f7ff faf3 	bl	8007150 <HAL_GetTick>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d901      	bls.n	8007b78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e037      	b.n	8007be8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007b78:	4b1d      	ldr	r3, [pc, #116]	; (8007bf0 <HAL_RCC_OscConfig+0x4f4>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d0f0      	beq.n	8007b66 <HAL_RCC_OscConfig+0x46a>
 8007b84:	e02f      	b.n	8007be6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b86:	4b1c      	ldr	r3, [pc, #112]	; (8007bf8 <HAL_RCC_OscConfig+0x4fc>)
 8007b88:	2200      	movs	r2, #0
 8007b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b8c:	f7ff fae0 	bl	8007150 <HAL_GetTick>
 8007b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007b92:	e008      	b.n	8007ba6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b94:	f7ff fadc 	bl	8007150 <HAL_GetTick>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d901      	bls.n	8007ba6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e020      	b.n	8007be8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007ba6:	4b12      	ldr	r3, [pc, #72]	; (8007bf0 <HAL_RCC_OscConfig+0x4f4>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1f0      	bne.n	8007b94 <HAL_RCC_OscConfig+0x498>
 8007bb2:	e018      	b.n	8007be6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d101      	bne.n	8007bc0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e013      	b.n	8007be8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007bc0:	4b0b      	ldr	r3, [pc, #44]	; (8007bf0 <HAL_RCC_OscConfig+0x4f4>)
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6a1b      	ldr	r3, [r3, #32]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d106      	bne.n	8007be2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d001      	beq.n	8007be6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e000      	b.n	8007be8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8007be6:	2300      	movs	r3, #0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3718      	adds	r7, #24
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	40021000 	.word	0x40021000
 8007bf4:	40007000 	.word	0x40007000
 8007bf8:	42420060 	.word	0x42420060

08007bfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d101      	bne.n	8007c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e0d0      	b.n	8007db2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007c10:	4b6a      	ldr	r3, [pc, #424]	; (8007dbc <HAL_RCC_ClockConfig+0x1c0>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0307 	and.w	r3, r3, #7
 8007c18:	683a      	ldr	r2, [r7, #0]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d910      	bls.n	8007c40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c1e:	4b67      	ldr	r3, [pc, #412]	; (8007dbc <HAL_RCC_ClockConfig+0x1c0>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f023 0207 	bic.w	r2, r3, #7
 8007c26:	4965      	ldr	r1, [pc, #404]	; (8007dbc <HAL_RCC_ClockConfig+0x1c0>)
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c2e:	4b63      	ldr	r3, [pc, #396]	; (8007dbc <HAL_RCC_ClockConfig+0x1c0>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 0307 	and.w	r3, r3, #7
 8007c36:	683a      	ldr	r2, [r7, #0]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d001      	beq.n	8007c40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e0b8      	b.n	8007db2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 0302 	and.w	r3, r3, #2
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d020      	beq.n	8007c8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 0304 	and.w	r3, r3, #4
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d005      	beq.n	8007c64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c58:	4b59      	ldr	r3, [pc, #356]	; (8007dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	4a58      	ldr	r2, [pc, #352]	; (8007dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007c62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 0308 	and.w	r3, r3, #8
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d005      	beq.n	8007c7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c70:	4b53      	ldr	r3, [pc, #332]	; (8007dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	4a52      	ldr	r2, [pc, #328]	; (8007dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007c7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c7c:	4b50      	ldr	r3, [pc, #320]	; (8007dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	494d      	ldr	r1, [pc, #308]	; (8007dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 0301 	and.w	r3, r3, #1
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d040      	beq.n	8007d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d107      	bne.n	8007cb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ca2:	4b47      	ldr	r3, [pc, #284]	; (8007dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d115      	bne.n	8007cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e07f      	b.n	8007db2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d107      	bne.n	8007cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cba:	4b41      	ldr	r3, [pc, #260]	; (8007dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d109      	bne.n	8007cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e073      	b.n	8007db2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cca:	4b3d      	ldr	r3, [pc, #244]	; (8007dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 0302 	and.w	r3, r3, #2
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d101      	bne.n	8007cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e06b      	b.n	8007db2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007cda:	4b39      	ldr	r3, [pc, #228]	; (8007dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	f023 0203 	bic.w	r2, r3, #3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	4936      	ldr	r1, [pc, #216]	; (8007dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007cec:	f7ff fa30 	bl	8007150 <HAL_GetTick>
 8007cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cf2:	e00a      	b.n	8007d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cf4:	f7ff fa2c 	bl	8007150 <HAL_GetTick>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d901      	bls.n	8007d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e053      	b.n	8007db2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d0a:	4b2d      	ldr	r3, [pc, #180]	; (8007dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	f003 020c 	and.w	r2, r3, #12
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d1eb      	bne.n	8007cf4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007d1c:	4b27      	ldr	r3, [pc, #156]	; (8007dbc <HAL_RCC_ClockConfig+0x1c0>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 0307 	and.w	r3, r3, #7
 8007d24:	683a      	ldr	r2, [r7, #0]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d210      	bcs.n	8007d4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d2a:	4b24      	ldr	r3, [pc, #144]	; (8007dbc <HAL_RCC_ClockConfig+0x1c0>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f023 0207 	bic.w	r2, r3, #7
 8007d32:	4922      	ldr	r1, [pc, #136]	; (8007dbc <HAL_RCC_ClockConfig+0x1c0>)
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d3a:	4b20      	ldr	r3, [pc, #128]	; (8007dbc <HAL_RCC_ClockConfig+0x1c0>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0307 	and.w	r3, r3, #7
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d001      	beq.n	8007d4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e032      	b.n	8007db2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 0304 	and.w	r3, r3, #4
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d008      	beq.n	8007d6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d58:	4b19      	ldr	r3, [pc, #100]	; (8007dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	4916      	ldr	r1, [pc, #88]	; (8007dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007d66:	4313      	orrs	r3, r2
 8007d68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 0308 	and.w	r3, r3, #8
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d009      	beq.n	8007d8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007d76:	4b12      	ldr	r3, [pc, #72]	; (8007dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	00db      	lsls	r3, r3, #3
 8007d84:	490e      	ldr	r1, [pc, #56]	; (8007dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007d86:	4313      	orrs	r3, r2
 8007d88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007d8a:	f000 f821 	bl	8007dd0 <HAL_RCC_GetSysClockFreq>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	4b0b      	ldr	r3, [pc, #44]	; (8007dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	091b      	lsrs	r3, r3, #4
 8007d96:	f003 030f 	and.w	r3, r3, #15
 8007d9a:	490a      	ldr	r1, [pc, #40]	; (8007dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8007d9c:	5ccb      	ldrb	r3, [r1, r3]
 8007d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8007da2:	4a09      	ldr	r2, [pc, #36]	; (8007dc8 <HAL_RCC_ClockConfig+0x1cc>)
 8007da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007da6:	4b09      	ldr	r3, [pc, #36]	; (8007dcc <HAL_RCC_ClockConfig+0x1d0>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7ff f98e 	bl	80070cc <HAL_InitTick>

  return HAL_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	40022000 	.word	0x40022000
 8007dc0:	40021000 	.word	0x40021000
 8007dc4:	0800de34 	.word	0x0800de34
 8007dc8:	20000004 	.word	0x20000004
 8007dcc:	2000000c 	.word	0x2000000c

08007dd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007dd0:	b490      	push	{r4, r7}
 8007dd2:	b08a      	sub	sp, #40	; 0x28
 8007dd4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007dd6:	4b2a      	ldr	r3, [pc, #168]	; (8007e80 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007dd8:	1d3c      	adds	r4, r7, #4
 8007dda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007ddc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007de0:	f240 2301 	movw	r3, #513	; 0x201
 8007de4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007de6:	2300      	movs	r3, #0
 8007de8:	61fb      	str	r3, [r7, #28]
 8007dea:	2300      	movs	r3, #0
 8007dec:	61bb      	str	r3, [r7, #24]
 8007dee:	2300      	movs	r3, #0
 8007df0:	627b      	str	r3, [r7, #36]	; 0x24
 8007df2:	2300      	movs	r3, #0
 8007df4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007df6:	2300      	movs	r3, #0
 8007df8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007dfa:	4b22      	ldr	r3, [pc, #136]	; (8007e84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	f003 030c 	and.w	r3, r3, #12
 8007e06:	2b04      	cmp	r3, #4
 8007e08:	d002      	beq.n	8007e10 <HAL_RCC_GetSysClockFreq+0x40>
 8007e0a:	2b08      	cmp	r3, #8
 8007e0c:	d003      	beq.n	8007e16 <HAL_RCC_GetSysClockFreq+0x46>
 8007e0e:	e02d      	b.n	8007e6c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007e10:	4b1d      	ldr	r3, [pc, #116]	; (8007e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e12:	623b      	str	r3, [r7, #32]
      break;
 8007e14:	e02d      	b.n	8007e72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	0c9b      	lsrs	r3, r3, #18
 8007e1a:	f003 030f 	and.w	r3, r3, #15
 8007e1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007e22:	4413      	add	r3, r2
 8007e24:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007e28:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d013      	beq.n	8007e5c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007e34:	4b13      	ldr	r3, [pc, #76]	; (8007e84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	0c5b      	lsrs	r3, r3, #17
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007e42:	4413      	add	r3, r2
 8007e44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007e48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	4a0e      	ldr	r2, [pc, #56]	; (8007e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e4e:	fb02 f203 	mul.w	r2, r2, r3
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e58:	627b      	str	r3, [r7, #36]	; 0x24
 8007e5a:	e004      	b.n	8007e66 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	4a0b      	ldr	r2, [pc, #44]	; (8007e8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007e60:	fb02 f303 	mul.w	r3, r2, r3
 8007e64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e68:	623b      	str	r3, [r7, #32]
      break;
 8007e6a:	e002      	b.n	8007e72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007e6c:	4b06      	ldr	r3, [pc, #24]	; (8007e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007e6e:	623b      	str	r3, [r7, #32]
      break;
 8007e70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e72:	6a3b      	ldr	r3, [r7, #32]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3728      	adds	r7, #40	; 0x28
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bc90      	pop	{r4, r7}
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	0800de1c 	.word	0x0800de1c
 8007e84:	40021000 	.word	0x40021000
 8007e88:	007a1200 	.word	0x007a1200
 8007e8c:	003d0900 	.word	0x003d0900

08007e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e90:	b480      	push	{r7}
 8007e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e94:	4b02      	ldr	r3, [pc, #8]	; (8007ea0 <HAL_RCC_GetHCLKFreq+0x10>)
 8007e96:	681b      	ldr	r3, [r3, #0]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bc80      	pop	{r7}
 8007e9e:	4770      	bx	lr
 8007ea0:	20000004 	.word	0x20000004

08007ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007ea8:	f7ff fff2 	bl	8007e90 <HAL_RCC_GetHCLKFreq>
 8007eac:	4602      	mov	r2, r0
 8007eae:	4b05      	ldr	r3, [pc, #20]	; (8007ec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	0a1b      	lsrs	r3, r3, #8
 8007eb4:	f003 0307 	and.w	r3, r3, #7
 8007eb8:	4903      	ldr	r1, [pc, #12]	; (8007ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007eba:	5ccb      	ldrb	r3, [r1, r3]
 8007ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	40021000 	.word	0x40021000
 8007ec8:	0800de44 	.word	0x0800de44

08007ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007ed0:	f7ff ffde 	bl	8007e90 <HAL_RCC_GetHCLKFreq>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	4b05      	ldr	r3, [pc, #20]	; (8007eec <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	0adb      	lsrs	r3, r3, #11
 8007edc:	f003 0307 	and.w	r3, r3, #7
 8007ee0:	4903      	ldr	r1, [pc, #12]	; (8007ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ee2:	5ccb      	ldrb	r3, [r1, r3]
 8007ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	40021000 	.word	0x40021000
 8007ef0:	0800de44 	.word	0x0800de44

08007ef4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b085      	sub	sp, #20
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007efc:	4b0a      	ldr	r3, [pc, #40]	; (8007f28 <RCC_Delay+0x34>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a0a      	ldr	r2, [pc, #40]	; (8007f2c <RCC_Delay+0x38>)
 8007f02:	fba2 2303 	umull	r2, r3, r2, r3
 8007f06:	0a5b      	lsrs	r3, r3, #9
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	fb02 f303 	mul.w	r3, r2, r3
 8007f0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007f10:	bf00      	nop
  }
  while (Delay --);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	1e5a      	subs	r2, r3, #1
 8007f16:	60fa      	str	r2, [r7, #12]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d1f9      	bne.n	8007f10 <RCC_Delay+0x1c>
}
 8007f1c:	bf00      	nop
 8007f1e:	bf00      	nop
 8007f20:	3714      	adds	r7, #20
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bc80      	pop	{r7}
 8007f26:	4770      	bx	lr
 8007f28:	20000004 	.word	0x20000004
 8007f2c:	10624dd3 	.word	0x10624dd3

08007f30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d101      	bne.n	8007f42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e076      	b.n	8008030 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d108      	bne.n	8007f5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f52:	d009      	beq.n	8007f68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	61da      	str	r2, [r3, #28]
 8007f5a:	e005      	b.n	8007f68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d106      	bne.n	8007f88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f7f9 fede 	bl	8001d44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2202      	movs	r2, #2
 8007f8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007fb0:	431a      	orrs	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fba:	431a      	orrs	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	f003 0302 	and.w	r3, r3, #2
 8007fc4:	431a      	orrs	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	695b      	ldr	r3, [r3, #20]
 8007fca:	f003 0301 	and.w	r3, r3, #1
 8007fce:	431a      	orrs	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	699b      	ldr	r3, [r3, #24]
 8007fd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fd8:	431a      	orrs	r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	69db      	ldr	r3, [r3, #28]
 8007fde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fe2:	431a      	orrs	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a1b      	ldr	r3, [r3, #32]
 8007fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fec:	ea42 0103 	orr.w	r1, r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	430a      	orrs	r2, r1
 8007ffe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	699b      	ldr	r3, [r3, #24]
 8008004:	0c1a      	lsrs	r2, r3, #16
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f002 0204 	and.w	r2, r2, #4
 800800e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	69da      	ldr	r2, [r3, #28]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800801e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b08c      	sub	sp, #48	; 0x30
 800803c:	af00      	add	r7, sp, #0
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	607a      	str	r2, [r7, #4]
 8008044:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008046:	2301      	movs	r3, #1
 8008048:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800804a:	2300      	movs	r3, #0
 800804c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008056:	2b01      	cmp	r3, #1
 8008058:	d101      	bne.n	800805e <HAL_SPI_TransmitReceive+0x26>
 800805a:	2302      	movs	r3, #2
 800805c:	e18a      	b.n	8008374 <HAL_SPI_TransmitReceive+0x33c>
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008066:	f7ff f873 	bl	8007150 <HAL_GetTick>
 800806a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800807c:	887b      	ldrh	r3, [r7, #2]
 800807e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008080:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008084:	2b01      	cmp	r3, #1
 8008086:	d00f      	beq.n	80080a8 <HAL_SPI_TransmitReceive+0x70>
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800808e:	d107      	bne.n	80080a0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d103      	bne.n	80080a0 <HAL_SPI_TransmitReceive+0x68>
 8008098:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800809c:	2b04      	cmp	r3, #4
 800809e:	d003      	beq.n	80080a8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80080a0:	2302      	movs	r3, #2
 80080a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80080a6:	e15b      	b.n	8008360 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d005      	beq.n	80080ba <HAL_SPI_TransmitReceive+0x82>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d002      	beq.n	80080ba <HAL_SPI_TransmitReceive+0x82>
 80080b4:	887b      	ldrh	r3, [r7, #2]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d103      	bne.n	80080c2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80080c0:	e14e      	b.n	8008360 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	2b04      	cmp	r3, #4
 80080cc:	d003      	beq.n	80080d6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2205      	movs	r2, #5
 80080d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2200      	movs	r2, #0
 80080da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	887a      	ldrh	r2, [r7, #2]
 80080e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	887a      	ldrh	r2, [r7, #2]
 80080ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	68ba      	ldr	r2, [r7, #8]
 80080f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	887a      	ldrh	r2, [r7, #2]
 80080f8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	887a      	ldrh	r2, [r7, #2]
 80080fe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2200      	movs	r2, #0
 8008104:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2200      	movs	r2, #0
 800810a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008116:	2b40      	cmp	r3, #64	; 0x40
 8008118:	d007      	beq.n	800812a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008128:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008132:	d178      	bne.n	8008226 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d002      	beq.n	8008142 <HAL_SPI_TransmitReceive+0x10a>
 800813c:	8b7b      	ldrh	r3, [r7, #26]
 800813e:	2b01      	cmp	r3, #1
 8008140:	d166      	bne.n	8008210 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008146:	881a      	ldrh	r2, [r3, #0]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008152:	1c9a      	adds	r2, r3, #2
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800815c:	b29b      	uxth	r3, r3
 800815e:	3b01      	subs	r3, #1
 8008160:	b29a      	uxth	r2, r3
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008166:	e053      	b.n	8008210 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	f003 0302 	and.w	r3, r3, #2
 8008172:	2b02      	cmp	r3, #2
 8008174:	d11b      	bne.n	80081ae <HAL_SPI_TransmitReceive+0x176>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800817a:	b29b      	uxth	r3, r3
 800817c:	2b00      	cmp	r3, #0
 800817e:	d016      	beq.n	80081ae <HAL_SPI_TransmitReceive+0x176>
 8008180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008182:	2b01      	cmp	r3, #1
 8008184:	d113      	bne.n	80081ae <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800818a:	881a      	ldrh	r2, [r3, #0]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008196:	1c9a      	adds	r2, r3, #2
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	3b01      	subs	r3, #1
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80081aa:	2300      	movs	r3, #0
 80081ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	f003 0301 	and.w	r3, r3, #1
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d119      	bne.n	80081f0 <HAL_SPI_TransmitReceive+0x1b8>
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d014      	beq.n	80081f0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68da      	ldr	r2, [r3, #12]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d0:	b292      	uxth	r2, r2
 80081d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d8:	1c9a      	adds	r2, r3, #2
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	3b01      	subs	r3, #1
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80081ec:	2301      	movs	r3, #1
 80081ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80081f0:	f7fe ffae 	bl	8007150 <HAL_GetTick>
 80081f4:	4602      	mov	r2, r0
 80081f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d807      	bhi.n	8008210 <HAL_SPI_TransmitReceive+0x1d8>
 8008200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008206:	d003      	beq.n	8008210 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008208:	2303      	movs	r3, #3
 800820a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800820e:	e0a7      	b.n	8008360 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008214:	b29b      	uxth	r3, r3
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1a6      	bne.n	8008168 <HAL_SPI_TransmitReceive+0x130>
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800821e:	b29b      	uxth	r3, r3
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1a1      	bne.n	8008168 <HAL_SPI_TransmitReceive+0x130>
 8008224:	e07c      	b.n	8008320 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d002      	beq.n	8008234 <HAL_SPI_TransmitReceive+0x1fc>
 800822e:	8b7b      	ldrh	r3, [r7, #26]
 8008230:	2b01      	cmp	r3, #1
 8008232:	d16b      	bne.n	800830c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	330c      	adds	r3, #12
 800823e:	7812      	ldrb	r2, [r2, #0]
 8008240:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008246:	1c5a      	adds	r2, r3, #1
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008250:	b29b      	uxth	r3, r3
 8008252:	3b01      	subs	r3, #1
 8008254:	b29a      	uxth	r2, r3
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800825a:	e057      	b.n	800830c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	f003 0302 	and.w	r3, r3, #2
 8008266:	2b02      	cmp	r3, #2
 8008268:	d11c      	bne.n	80082a4 <HAL_SPI_TransmitReceive+0x26c>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800826e:	b29b      	uxth	r3, r3
 8008270:	2b00      	cmp	r3, #0
 8008272:	d017      	beq.n	80082a4 <HAL_SPI_TransmitReceive+0x26c>
 8008274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008276:	2b01      	cmp	r3, #1
 8008278:	d114      	bne.n	80082a4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	330c      	adds	r3, #12
 8008284:	7812      	ldrb	r2, [r2, #0]
 8008286:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800828c:	1c5a      	adds	r2, r3, #1
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008296:	b29b      	uxth	r3, r3
 8008298:	3b01      	subs	r3, #1
 800829a:	b29a      	uxth	r2, r3
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80082a0:	2300      	movs	r3, #0
 80082a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	f003 0301 	and.w	r3, r3, #1
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d119      	bne.n	80082e6 <HAL_SPI_TransmitReceive+0x2ae>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d014      	beq.n	80082e6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68da      	ldr	r2, [r3, #12]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c6:	b2d2      	uxtb	r2, r2
 80082c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ce:	1c5a      	adds	r2, r3, #1
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082d8:	b29b      	uxth	r3, r3
 80082da:	3b01      	subs	r3, #1
 80082dc:	b29a      	uxth	r2, r3
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80082e2:	2301      	movs	r3, #1
 80082e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80082e6:	f7fe ff33 	bl	8007150 <HAL_GetTick>
 80082ea:	4602      	mov	r2, r0
 80082ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ee:	1ad3      	subs	r3, r2, r3
 80082f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d803      	bhi.n	80082fe <HAL_SPI_TransmitReceive+0x2c6>
 80082f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082fc:	d102      	bne.n	8008304 <HAL_SPI_TransmitReceive+0x2cc>
 80082fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008300:	2b00      	cmp	r3, #0
 8008302:	d103      	bne.n	800830c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008304:	2303      	movs	r3, #3
 8008306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800830a:	e029      	b.n	8008360 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008310:	b29b      	uxth	r3, r3
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1a2      	bne.n	800825c <HAL_SPI_TransmitReceive+0x224>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800831a:	b29b      	uxth	r3, r3
 800831c:	2b00      	cmp	r3, #0
 800831e:	d19d      	bne.n	800825c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008322:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f000 f8b1 	bl	800848c <SPI_EndRxTxTransaction>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d006      	beq.n	800833e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2220      	movs	r2, #32
 800833a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800833c:	e010      	b.n	8008360 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d10b      	bne.n	800835e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008346:	2300      	movs	r3, #0
 8008348:	617b      	str	r3, [r7, #20]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	617b      	str	r3, [r7, #20]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	617b      	str	r3, [r7, #20]
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	e000      	b.n	8008360 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800835e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2200      	movs	r2, #0
 800836c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008370:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008374:	4618      	mov	r0, r3
 8008376:	3730      	adds	r7, #48	; 0x30
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b088      	sub	sp, #32
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	603b      	str	r3, [r7, #0]
 8008388:	4613      	mov	r3, r2
 800838a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800838c:	f7fe fee0 	bl	8007150 <HAL_GetTick>
 8008390:	4602      	mov	r2, r0
 8008392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008394:	1a9b      	subs	r3, r3, r2
 8008396:	683a      	ldr	r2, [r7, #0]
 8008398:	4413      	add	r3, r2
 800839a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800839c:	f7fe fed8 	bl	8007150 <HAL_GetTick>
 80083a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80083a2:	4b39      	ldr	r3, [pc, #228]	; (8008488 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	015b      	lsls	r3, r3, #5
 80083a8:	0d1b      	lsrs	r3, r3, #20
 80083aa:	69fa      	ldr	r2, [r7, #28]
 80083ac:	fb02 f303 	mul.w	r3, r2, r3
 80083b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083b2:	e054      	b.n	800845e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ba:	d050      	beq.n	800845e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80083bc:	f7fe fec8 	bl	8007150 <HAL_GetTick>
 80083c0:	4602      	mov	r2, r0
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	69fa      	ldr	r2, [r7, #28]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d902      	bls.n	80083d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d13d      	bne.n	800844e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	685a      	ldr	r2, [r3, #4]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80083e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083ea:	d111      	bne.n	8008410 <SPI_WaitFlagStateUntilTimeout+0x94>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083f4:	d004      	beq.n	8008400 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083fe:	d107      	bne.n	8008410 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800840e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008418:	d10f      	bne.n	800843a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008428:	601a      	str	r2, [r3, #0]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008438:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2201      	movs	r2, #1
 800843e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	e017      	b.n	800847e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d101      	bne.n	8008458 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008454:	2300      	movs	r3, #0
 8008456:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	3b01      	subs	r3, #1
 800845c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	689a      	ldr	r2, [r3, #8]
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	4013      	ands	r3, r2
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	429a      	cmp	r2, r3
 800846c:	bf0c      	ite	eq
 800846e:	2301      	moveq	r3, #1
 8008470:	2300      	movne	r3, #0
 8008472:	b2db      	uxtb	r3, r3
 8008474:	461a      	mov	r2, r3
 8008476:	79fb      	ldrb	r3, [r7, #7]
 8008478:	429a      	cmp	r2, r3
 800847a:	d19b      	bne.n	80083b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3720      	adds	r7, #32
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	20000004 	.word	0x20000004

0800848c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b086      	sub	sp, #24
 8008490:	af02      	add	r7, sp, #8
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	2200      	movs	r2, #0
 80084a0:	2180      	movs	r1, #128	; 0x80
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f7ff ff6a 	bl	800837c <SPI_WaitFlagStateUntilTimeout>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d007      	beq.n	80084be <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084b2:	f043 0220 	orr.w	r2, r3, #32
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80084ba:	2303      	movs	r3, #3
 80084bc:	e000      	b.n	80084c0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d004      	beq.n	80084e4 <HAL_SRAM_Init+0x1c>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084e2:	d101      	bne.n	80084e8 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e038      	b.n	800855a <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d106      	bne.n	8008502 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f7f8 ff93 	bl	8001428 <HAL_SRAM_MspInit>
#endif
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	3308      	adds	r3, #8
 800850a:	4619      	mov	r1, r3
 800850c:	4610      	mov	r0, r2
 800850e:	f000 fced 	bl	8008eec <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6818      	ldr	r0, [r3, #0]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	461a      	mov	r2, r3
 800851c:	68b9      	ldr	r1, [r7, #8]
 800851e:	f000 fd4f 	bl	8008fc0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6858      	ldr	r0, [r3, #4]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	689a      	ldr	r2, [r3, #8]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852e:	6879      	ldr	r1, [r7, #4]
 8008530:	f000 fd7a 	bl	8009028 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	6892      	ldr	r2, [r2, #8]
 800853c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	6892      	ldr	r2, [r2, #8]
 8008548:	f041 0101 	orr.w	r1, r1, #1
 800854c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3710      	adds	r7, #16
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b082      	sub	sp, #8
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d101      	bne.n	8008574 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	e041      	b.n	80085f8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800857a:	b2db      	uxtb	r3, r3
 800857c:	2b00      	cmp	r3, #0
 800857e:	d106      	bne.n	800858e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f7f9 fdc9 	bl	8002120 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2202      	movs	r2, #2
 8008592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	3304      	adds	r3, #4
 800859e:	4619      	mov	r1, r3
 80085a0:	4610      	mov	r0, r2
 80085a2:	f000 f96f 	bl	8008884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2201      	movs	r2, #1
 80085c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2201      	movs	r2, #1
 80085da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800860e:	b2db      	uxtb	r3, r3
 8008610:	2b01      	cmp	r3, #1
 8008612:	d001      	beq.n	8008618 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	e03c      	b.n	8008692 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2202      	movs	r2, #2
 800861c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a1d      	ldr	r2, [pc, #116]	; (800869c <HAL_TIM_Base_Start+0x9c>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d018      	beq.n	800865c <HAL_TIM_Base_Start+0x5c>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a1c      	ldr	r2, [pc, #112]	; (80086a0 <HAL_TIM_Base_Start+0xa0>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d013      	beq.n	800865c <HAL_TIM_Base_Start+0x5c>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800863c:	d00e      	beq.n	800865c <HAL_TIM_Base_Start+0x5c>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a18      	ldr	r2, [pc, #96]	; (80086a4 <HAL_TIM_Base_Start+0xa4>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d009      	beq.n	800865c <HAL_TIM_Base_Start+0x5c>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a16      	ldr	r2, [pc, #88]	; (80086a8 <HAL_TIM_Base_Start+0xa8>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d004      	beq.n	800865c <HAL_TIM_Base_Start+0x5c>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a15      	ldr	r2, [pc, #84]	; (80086ac <HAL_TIM_Base_Start+0xac>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d111      	bne.n	8008680 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	f003 0307 	and.w	r3, r3, #7
 8008666:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2b06      	cmp	r3, #6
 800866c:	d010      	beq.n	8008690 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f042 0201 	orr.w	r2, r2, #1
 800867c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800867e:	e007      	b.n	8008690 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f042 0201 	orr.w	r2, r2, #1
 800868e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3714      	adds	r7, #20
 8008696:	46bd      	mov	sp, r7
 8008698:	bc80      	pop	{r7}
 800869a:	4770      	bx	lr
 800869c:	40012c00 	.word	0x40012c00
 80086a0:	40013400 	.word	0x40013400
 80086a4:	40000400 	.word	0x40000400
 80086a8:	40000800 	.word	0x40000800
 80086ac:	40000c00 	.word	0x40000c00

080086b0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	6a1a      	ldr	r2, [r3, #32]
 80086be:	f241 1311 	movw	r3, #4369	; 0x1111
 80086c2:	4013      	ands	r3, r2
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d10f      	bne.n	80086e8 <HAL_TIM_Base_Stop+0x38>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	6a1a      	ldr	r2, [r3, #32]
 80086ce:	f240 4344 	movw	r3, #1092	; 0x444
 80086d2:	4013      	ands	r3, r2
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d107      	bne.n	80086e8 <HAL_TIM_Base_Stop+0x38>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f022 0201 	bic.w	r2, r2, #1
 80086e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	370c      	adds	r7, #12
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bc80      	pop	{r7}
 80086fa:	4770      	bx	lr

080086fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800870c:	2b01      	cmp	r3, #1
 800870e:	d101      	bne.n	8008714 <HAL_TIM_ConfigClockSource+0x18>
 8008710:	2302      	movs	r3, #2
 8008712:	e0b3      	b.n	800887c <HAL_TIM_ConfigClockSource+0x180>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2202      	movs	r2, #2
 8008720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008732:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800873a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800874c:	d03e      	beq.n	80087cc <HAL_TIM_ConfigClockSource+0xd0>
 800874e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008752:	f200 8087 	bhi.w	8008864 <HAL_TIM_ConfigClockSource+0x168>
 8008756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800875a:	f000 8085 	beq.w	8008868 <HAL_TIM_ConfigClockSource+0x16c>
 800875e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008762:	d87f      	bhi.n	8008864 <HAL_TIM_ConfigClockSource+0x168>
 8008764:	2b70      	cmp	r3, #112	; 0x70
 8008766:	d01a      	beq.n	800879e <HAL_TIM_ConfigClockSource+0xa2>
 8008768:	2b70      	cmp	r3, #112	; 0x70
 800876a:	d87b      	bhi.n	8008864 <HAL_TIM_ConfigClockSource+0x168>
 800876c:	2b60      	cmp	r3, #96	; 0x60
 800876e:	d050      	beq.n	8008812 <HAL_TIM_ConfigClockSource+0x116>
 8008770:	2b60      	cmp	r3, #96	; 0x60
 8008772:	d877      	bhi.n	8008864 <HAL_TIM_ConfigClockSource+0x168>
 8008774:	2b50      	cmp	r3, #80	; 0x50
 8008776:	d03c      	beq.n	80087f2 <HAL_TIM_ConfigClockSource+0xf6>
 8008778:	2b50      	cmp	r3, #80	; 0x50
 800877a:	d873      	bhi.n	8008864 <HAL_TIM_ConfigClockSource+0x168>
 800877c:	2b40      	cmp	r3, #64	; 0x40
 800877e:	d058      	beq.n	8008832 <HAL_TIM_ConfigClockSource+0x136>
 8008780:	2b40      	cmp	r3, #64	; 0x40
 8008782:	d86f      	bhi.n	8008864 <HAL_TIM_ConfigClockSource+0x168>
 8008784:	2b30      	cmp	r3, #48	; 0x30
 8008786:	d064      	beq.n	8008852 <HAL_TIM_ConfigClockSource+0x156>
 8008788:	2b30      	cmp	r3, #48	; 0x30
 800878a:	d86b      	bhi.n	8008864 <HAL_TIM_ConfigClockSource+0x168>
 800878c:	2b20      	cmp	r3, #32
 800878e:	d060      	beq.n	8008852 <HAL_TIM_ConfigClockSource+0x156>
 8008790:	2b20      	cmp	r3, #32
 8008792:	d867      	bhi.n	8008864 <HAL_TIM_ConfigClockSource+0x168>
 8008794:	2b00      	cmp	r3, #0
 8008796:	d05c      	beq.n	8008852 <HAL_TIM_ConfigClockSource+0x156>
 8008798:	2b10      	cmp	r3, #16
 800879a:	d05a      	beq.n	8008852 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800879c:	e062      	b.n	8008864 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6818      	ldr	r0, [r3, #0]
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	6899      	ldr	r1, [r3, #8]
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	685a      	ldr	r2, [r3, #4]
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	f000 f95a 	bl	8008a66 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80087c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	609a      	str	r2, [r3, #8]
      break;
 80087ca:	e04e      	b.n	800886a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6818      	ldr	r0, [r3, #0]
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	6899      	ldr	r1, [r3, #8]
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	685a      	ldr	r2, [r3, #4]
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	f000 f943 	bl	8008a66 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	689a      	ldr	r2, [r3, #8]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80087ee:	609a      	str	r2, [r3, #8]
      break;
 80087f0:	e03b      	b.n	800886a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6818      	ldr	r0, [r3, #0]
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	6859      	ldr	r1, [r3, #4]
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	461a      	mov	r2, r3
 8008800:	f000 f8ba 	bl	8008978 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2150      	movs	r1, #80	; 0x50
 800880a:	4618      	mov	r0, r3
 800880c:	f000 f911 	bl	8008a32 <TIM_ITRx_SetConfig>
      break;
 8008810:	e02b      	b.n	800886a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6818      	ldr	r0, [r3, #0]
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	6859      	ldr	r1, [r3, #4]
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	461a      	mov	r2, r3
 8008820:	f000 f8d8 	bl	80089d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2160      	movs	r1, #96	; 0x60
 800882a:	4618      	mov	r0, r3
 800882c:	f000 f901 	bl	8008a32 <TIM_ITRx_SetConfig>
      break;
 8008830:	e01b      	b.n	800886a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6818      	ldr	r0, [r3, #0]
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	6859      	ldr	r1, [r3, #4]
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	461a      	mov	r2, r3
 8008840:	f000 f89a 	bl	8008978 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2140      	movs	r1, #64	; 0x40
 800884a:	4618      	mov	r0, r3
 800884c:	f000 f8f1 	bl	8008a32 <TIM_ITRx_SetConfig>
      break;
 8008850:	e00b      	b.n	800886a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4619      	mov	r1, r3
 800885c:	4610      	mov	r0, r2
 800885e:	f000 f8e8 	bl	8008a32 <TIM_ITRx_SetConfig>
        break;
 8008862:	e002      	b.n	800886a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008864:	bf00      	nop
 8008866:	e000      	b.n	800886a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008868:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2201      	movs	r2, #1
 800886e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a33      	ldr	r2, [pc, #204]	; (8008964 <TIM_Base_SetConfig+0xe0>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d013      	beq.n	80088c4 <TIM_Base_SetConfig+0x40>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4a32      	ldr	r2, [pc, #200]	; (8008968 <TIM_Base_SetConfig+0xe4>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d00f      	beq.n	80088c4 <TIM_Base_SetConfig+0x40>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088aa:	d00b      	beq.n	80088c4 <TIM_Base_SetConfig+0x40>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a2f      	ldr	r2, [pc, #188]	; (800896c <TIM_Base_SetConfig+0xe8>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d007      	beq.n	80088c4 <TIM_Base_SetConfig+0x40>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4a2e      	ldr	r2, [pc, #184]	; (8008970 <TIM_Base_SetConfig+0xec>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d003      	beq.n	80088c4 <TIM_Base_SetConfig+0x40>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a2d      	ldr	r2, [pc, #180]	; (8008974 <TIM_Base_SetConfig+0xf0>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d108      	bne.n	80088d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4a22      	ldr	r2, [pc, #136]	; (8008964 <TIM_Base_SetConfig+0xe0>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d013      	beq.n	8008906 <TIM_Base_SetConfig+0x82>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4a21      	ldr	r2, [pc, #132]	; (8008968 <TIM_Base_SetConfig+0xe4>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d00f      	beq.n	8008906 <TIM_Base_SetConfig+0x82>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088ec:	d00b      	beq.n	8008906 <TIM_Base_SetConfig+0x82>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	4a1e      	ldr	r2, [pc, #120]	; (800896c <TIM_Base_SetConfig+0xe8>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d007      	beq.n	8008906 <TIM_Base_SetConfig+0x82>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	4a1d      	ldr	r2, [pc, #116]	; (8008970 <TIM_Base_SetConfig+0xec>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d003      	beq.n	8008906 <TIM_Base_SetConfig+0x82>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4a1c      	ldr	r2, [pc, #112]	; (8008974 <TIM_Base_SetConfig+0xf0>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d108      	bne.n	8008918 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800890c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	4313      	orrs	r3, r2
 8008916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	695b      	ldr	r3, [r3, #20]
 8008922:	4313      	orrs	r3, r2
 8008924:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	68fa      	ldr	r2, [r7, #12]
 800892a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	689a      	ldr	r2, [r3, #8]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4a09      	ldr	r2, [pc, #36]	; (8008964 <TIM_Base_SetConfig+0xe0>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d003      	beq.n	800894c <TIM_Base_SetConfig+0xc8>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4a08      	ldr	r2, [pc, #32]	; (8008968 <TIM_Base_SetConfig+0xe4>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d103      	bne.n	8008954 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	691a      	ldr	r2, [r3, #16]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	615a      	str	r2, [r3, #20]
}
 800895a:	bf00      	nop
 800895c:	3714      	adds	r7, #20
 800895e:	46bd      	mov	sp, r7
 8008960:	bc80      	pop	{r7}
 8008962:	4770      	bx	lr
 8008964:	40012c00 	.word	0x40012c00
 8008968:	40013400 	.word	0x40013400
 800896c:	40000400 	.word	0x40000400
 8008970:	40000800 	.word	0x40000800
 8008974:	40000c00 	.word	0x40000c00

08008978 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008978:	b480      	push	{r7}
 800897a:	b087      	sub	sp, #28
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6a1b      	ldr	r3, [r3, #32]
 8008988:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6a1b      	ldr	r3, [r3, #32]
 800898e:	f023 0201 	bic.w	r2, r3, #1
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	011b      	lsls	r3, r3, #4
 80089a8:	693a      	ldr	r2, [r7, #16]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	f023 030a 	bic.w	r3, r3, #10
 80089b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089b6:	697a      	ldr	r2, [r7, #20]
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	693a      	ldr	r2, [r7, #16]
 80089c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	621a      	str	r2, [r3, #32]
}
 80089ca:	bf00      	nop
 80089cc:	371c      	adds	r7, #28
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bc80      	pop	{r7}
 80089d2:	4770      	bx	lr

080089d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b087      	sub	sp, #28
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6a1b      	ldr	r3, [r3, #32]
 80089e4:	f023 0210 	bic.w	r2, r3, #16
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	699b      	ldr	r3, [r3, #24]
 80089f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80089fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	031b      	lsls	r3, r3, #12
 8008a04:	697a      	ldr	r2, [r7, #20]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	011b      	lsls	r3, r3, #4
 8008a16:	693a      	ldr	r2, [r7, #16]
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	697a      	ldr	r2, [r7, #20]
 8008a20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	693a      	ldr	r2, [r7, #16]
 8008a26:	621a      	str	r2, [r3, #32]
}
 8008a28:	bf00      	nop
 8008a2a:	371c      	adds	r7, #28
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bc80      	pop	{r7}
 8008a30:	4770      	bx	lr

08008a32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a32:	b480      	push	{r7}
 8008a34:	b085      	sub	sp, #20
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
 8008a3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a4a:	683a      	ldr	r2, [r7, #0]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	f043 0307 	orr.w	r3, r3, #7
 8008a54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	609a      	str	r2, [r3, #8]
}
 8008a5c:	bf00      	nop
 8008a5e:	3714      	adds	r7, #20
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bc80      	pop	{r7}
 8008a64:	4770      	bx	lr

08008a66 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a66:	b480      	push	{r7}
 8008a68:	b087      	sub	sp, #28
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	60f8      	str	r0, [r7, #12]
 8008a6e:	60b9      	str	r1, [r7, #8]
 8008a70:	607a      	str	r2, [r7, #4]
 8008a72:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a80:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	021a      	lsls	r2, r3, #8
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	431a      	orrs	r2, r3
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	697a      	ldr	r2, [r7, #20]
 8008a90:	4313      	orrs	r3, r2
 8008a92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	697a      	ldr	r2, [r7, #20]
 8008a98:	609a      	str	r2, [r3, #8]
}
 8008a9a:	bf00      	nop
 8008a9c:	371c      	adds	r7, #28
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bc80      	pop	{r7}
 8008aa2:	4770      	bx	lr

08008aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d101      	bne.n	8008abc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ab8:	2302      	movs	r3, #2
 8008aba:	e050      	b.n	8008b5e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2202      	movs	r2, #2
 8008ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ae2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	68fa      	ldr	r2, [r7, #12]
 8008af4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a1b      	ldr	r2, [pc, #108]	; (8008b68 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d018      	beq.n	8008b32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a19      	ldr	r2, [pc, #100]	; (8008b6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d013      	beq.n	8008b32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b12:	d00e      	beq.n	8008b32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a15      	ldr	r2, [pc, #84]	; (8008b70 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d009      	beq.n	8008b32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a14      	ldr	r2, [pc, #80]	; (8008b74 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d004      	beq.n	8008b32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a12      	ldr	r2, [pc, #72]	; (8008b78 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d10c      	bne.n	8008b4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	68ba      	ldr	r2, [r7, #8]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3714      	adds	r7, #20
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bc80      	pop	{r7}
 8008b66:	4770      	bx	lr
 8008b68:	40012c00 	.word	0x40012c00
 8008b6c:	40013400 	.word	0x40013400
 8008b70:	40000400 	.word	0x40000400
 8008b74:	40000800 	.word	0x40000800
 8008b78:	40000c00 	.word	0x40000c00

08008b7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d101      	bne.n	8008b8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e03f      	b.n	8008c0e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d106      	bne.n	8008ba8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f7f9 fb34 	bl	8002210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2224      	movs	r2, #36	; 0x24
 8008bac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	68da      	ldr	r2, [r3, #12]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008bbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 f905 	bl	8008dd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	691a      	ldr	r2, [r3, #16]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008bd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	695a      	ldr	r2, [r3, #20]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008be4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68da      	ldr	r2, [r3, #12]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008bf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2220      	movs	r2, #32
 8008c00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2220      	movs	r2, #32
 8008c08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3708      	adds	r7, #8
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b08a      	sub	sp, #40	; 0x28
 8008c1a:	af02      	add	r7, sp, #8
 8008c1c:	60f8      	str	r0, [r7, #12]
 8008c1e:	60b9      	str	r1, [r7, #8]
 8008c20:	603b      	str	r3, [r7, #0]
 8008c22:	4613      	mov	r3, r2
 8008c24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008c26:	2300      	movs	r3, #0
 8008c28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	2b20      	cmp	r3, #32
 8008c34:	d17c      	bne.n	8008d30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d002      	beq.n	8008c42 <HAL_UART_Transmit+0x2c>
 8008c3c:	88fb      	ldrh	r3, [r7, #6]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d101      	bne.n	8008c46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e075      	b.n	8008d32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d101      	bne.n	8008c54 <HAL_UART_Transmit+0x3e>
 8008c50:	2302      	movs	r3, #2
 8008c52:	e06e      	b.n	8008d32 <HAL_UART_Transmit+0x11c>
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2221      	movs	r2, #33	; 0x21
 8008c66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008c6a:	f7fe fa71 	bl	8007150 <HAL_GetTick>
 8008c6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	88fa      	ldrh	r2, [r7, #6]
 8008c74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	88fa      	ldrh	r2, [r7, #6]
 8008c7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c84:	d108      	bne.n	8008c98 <HAL_UART_Transmit+0x82>
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d104      	bne.n	8008c98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	61bb      	str	r3, [r7, #24]
 8008c96:	e003      	b.n	8008ca0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008ca8:	e02a      	b.n	8008d00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	9300      	str	r3, [sp, #0]
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	2180      	movs	r1, #128	; 0x80
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f000 f840 	bl	8008d3a <UART_WaitOnFlagUntilTimeout>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d001      	beq.n	8008cc4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	e036      	b.n	8008d32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d10b      	bne.n	8008ce2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	881b      	ldrh	r3, [r3, #0]
 8008cce:	461a      	mov	r2, r3
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	3302      	adds	r3, #2
 8008cde:	61bb      	str	r3, [r7, #24]
 8008ce0:	e007      	b.n	8008cf2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	781a      	ldrb	r2, [r3, #0]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	b29a      	uxth	r2, r3
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d1cf      	bne.n	8008caa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	9300      	str	r3, [sp, #0]
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	2200      	movs	r2, #0
 8008d12:	2140      	movs	r1, #64	; 0x40
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f000 f810 	bl	8008d3a <UART_WaitOnFlagUntilTimeout>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d001      	beq.n	8008d24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008d20:	2303      	movs	r3, #3
 8008d22:	e006      	b.n	8008d32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2220      	movs	r2, #32
 8008d28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	e000      	b.n	8008d32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008d30:	2302      	movs	r3, #2
  }
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3720      	adds	r7, #32
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b084      	sub	sp, #16
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	60f8      	str	r0, [r7, #12]
 8008d42:	60b9      	str	r1, [r7, #8]
 8008d44:	603b      	str	r3, [r7, #0]
 8008d46:	4613      	mov	r3, r2
 8008d48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d4a:	e02c      	b.n	8008da6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d4c:	69bb      	ldr	r3, [r7, #24]
 8008d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d52:	d028      	beq.n	8008da6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d007      	beq.n	8008d6a <UART_WaitOnFlagUntilTimeout+0x30>
 8008d5a:	f7fe f9f9 	bl	8007150 <HAL_GetTick>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	1ad3      	subs	r3, r2, r3
 8008d64:	69ba      	ldr	r2, [r7, #24]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d21d      	bcs.n	8008da6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	68da      	ldr	r2, [r3, #12]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008d78:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	695a      	ldr	r2, [r3, #20]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f022 0201 	bic.w	r2, r2, #1
 8008d88:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2220      	movs	r2, #32
 8008d8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2220      	movs	r2, #32
 8008d96:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008da2:	2303      	movs	r3, #3
 8008da4:	e00f      	b.n	8008dc6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	4013      	ands	r3, r2
 8008db0:	68ba      	ldr	r2, [r7, #8]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	bf0c      	ite	eq
 8008db6:	2301      	moveq	r3, #1
 8008db8:	2300      	movne	r3, #0
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	79fb      	ldrb	r3, [r7, #7]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d0c3      	beq.n	8008d4c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
	...

08008dd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	691b      	ldr	r3, [r3, #16]
 8008dde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	68da      	ldr	r2, [r3, #12]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	430a      	orrs	r2, r1
 8008dec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	689a      	ldr	r2, [r3, #8]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	431a      	orrs	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	695b      	ldr	r3, [r3, #20]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008e0a:	f023 030c 	bic.w	r3, r3, #12
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	6812      	ldr	r2, [r2, #0]
 8008e12:	68b9      	ldr	r1, [r7, #8]
 8008e14:	430b      	orrs	r3, r1
 8008e16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	695b      	ldr	r3, [r3, #20]
 8008e1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	699a      	ldr	r2, [r3, #24]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	430a      	orrs	r2, r1
 8008e2c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a2c      	ldr	r2, [pc, #176]	; (8008ee4 <UART_SetConfig+0x114>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d103      	bne.n	8008e40 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008e38:	f7ff f848 	bl	8007ecc <HAL_RCC_GetPCLK2Freq>
 8008e3c:	60f8      	str	r0, [r7, #12]
 8008e3e:	e002      	b.n	8008e46 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008e40:	f7ff f830 	bl	8007ea4 <HAL_RCC_GetPCLK1Freq>
 8008e44:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e46:	68fa      	ldr	r2, [r7, #12]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	4413      	add	r3, r2
 8008e4e:	009a      	lsls	r2, r3, #2
 8008e50:	441a      	add	r2, r3
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e5c:	4a22      	ldr	r2, [pc, #136]	; (8008ee8 <UART_SetConfig+0x118>)
 8008e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e62:	095b      	lsrs	r3, r3, #5
 8008e64:	0119      	lsls	r1, r3, #4
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	4613      	mov	r3, r2
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	4413      	add	r3, r2
 8008e6e:	009a      	lsls	r2, r3, #2
 8008e70:	441a      	add	r2, r3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	fbb2 f2f3 	udiv	r2, r2, r3
 8008e7c:	4b1a      	ldr	r3, [pc, #104]	; (8008ee8 <UART_SetConfig+0x118>)
 8008e7e:	fba3 0302 	umull	r0, r3, r3, r2
 8008e82:	095b      	lsrs	r3, r3, #5
 8008e84:	2064      	movs	r0, #100	; 0x64
 8008e86:	fb00 f303 	mul.w	r3, r0, r3
 8008e8a:	1ad3      	subs	r3, r2, r3
 8008e8c:	011b      	lsls	r3, r3, #4
 8008e8e:	3332      	adds	r3, #50	; 0x32
 8008e90:	4a15      	ldr	r2, [pc, #84]	; (8008ee8 <UART_SetConfig+0x118>)
 8008e92:	fba2 2303 	umull	r2, r3, r2, r3
 8008e96:	095b      	lsrs	r3, r3, #5
 8008e98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e9c:	4419      	add	r1, r3
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	4413      	add	r3, r2
 8008ea6:	009a      	lsls	r2, r3, #2
 8008ea8:	441a      	add	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8008eb4:	4b0c      	ldr	r3, [pc, #48]	; (8008ee8 <UART_SetConfig+0x118>)
 8008eb6:	fba3 0302 	umull	r0, r3, r3, r2
 8008eba:	095b      	lsrs	r3, r3, #5
 8008ebc:	2064      	movs	r0, #100	; 0x64
 8008ebe:	fb00 f303 	mul.w	r3, r0, r3
 8008ec2:	1ad3      	subs	r3, r2, r3
 8008ec4:	011b      	lsls	r3, r3, #4
 8008ec6:	3332      	adds	r3, #50	; 0x32
 8008ec8:	4a07      	ldr	r2, [pc, #28]	; (8008ee8 <UART_SetConfig+0x118>)
 8008eca:	fba2 2303 	umull	r2, r3, r2, r3
 8008ece:	095b      	lsrs	r3, r3, #5
 8008ed0:	f003 020f 	and.w	r2, r3, #15
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	440a      	add	r2, r1
 8008eda:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008edc:	bf00      	nop
 8008ede:	3710      	adds	r7, #16
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	40013800 	.word	0x40013800
 8008ee8:	51eb851f 	.word	0x51eb851f

08008eec <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b087      	sub	sp, #28
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f00:	683a      	ldr	r2, [r7, #0]
 8008f02:	6812      	ldr	r2, [r2, #0]
 8008f04:	f023 0101 	bic.w	r1, r3, #1
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	2b08      	cmp	r3, #8
 8008f14:	d102      	bne.n	8008f1c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008f16:	2340      	movs	r3, #64	; 0x40
 8008f18:	617b      	str	r3, [r7, #20]
 8008f1a:	e001      	b.n	8008f20 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008f2c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8008f32:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008f38:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8008f3e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8008f44:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8008f4a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8008f50:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8008f56:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8008f5c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8008f62:	4313      	orrs	r3, r2
 8008f64:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	699b      	ldr	r3, [r3, #24]
 8008f6a:	693a      	ldr	r2, [r7, #16]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f74:	693a      	ldr	r2, [r7, #16]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8008f7a:	4b10      	ldr	r3, [pc, #64]	; (8008fbc <FSMC_NORSRAM_Init+0xd0>)
 8008f7c:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008f84:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8008f8c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	43db      	mvns	r3, r3
 8008f9c:	ea02 0103 	and.w	r1, r2, r3
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	4319      	orrs	r1, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	371c      	adds	r7, #28
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bc80      	pop	{r7}
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	0008fb7f 	.word	0x0008fb7f

08008fc0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	1c5a      	adds	r2, r3, #1
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fd6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	011b      	lsls	r3, r3, #4
 8008fe4:	431a      	orrs	r2, r3
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	021b      	lsls	r3, r3, #8
 8008fec:	431a      	orrs	r2, r3
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	041b      	lsls	r3, r3, #16
 8008ff4:	431a      	orrs	r2, r3
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	051b      	lsls	r3, r3, #20
 8008ffe:	431a      	orrs	r2, r3
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	695b      	ldr	r3, [r3, #20]
 8009004:	3b02      	subs	r3, #2
 8009006:	061b      	lsls	r3, r3, #24
 8009008:	431a      	orrs	r2, r3
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	699b      	ldr	r3, [r3, #24]
 800900e:	4313      	orrs	r3, r2
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	3201      	adds	r2, #1
 8009014:	4319      	orrs	r1, r3
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3714      	adds	r7, #20
 8009022:	46bd      	mov	sp, r7
 8009024:	bc80      	pop	{r7}
 8009026:	4770      	bx	lr

08009028 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8009028:	b480      	push	{r7}
 800902a:	b085      	sub	sp, #20
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	607a      	str	r2, [r7, #4]
 8009034:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800903c:	d11d      	bne.n	800907a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009046:	4b13      	ldr	r3, [pc, #76]	; (8009094 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8009048:	4013      	ands	r3, r2
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	6811      	ldr	r1, [r2, #0]
 800904e:	68ba      	ldr	r2, [r7, #8]
 8009050:	6852      	ldr	r2, [r2, #4]
 8009052:	0112      	lsls	r2, r2, #4
 8009054:	4311      	orrs	r1, r2
 8009056:	68ba      	ldr	r2, [r7, #8]
 8009058:	6892      	ldr	r2, [r2, #8]
 800905a:	0212      	lsls	r2, r2, #8
 800905c:	4311      	orrs	r1, r2
 800905e:	68ba      	ldr	r2, [r7, #8]
 8009060:	6992      	ldr	r2, [r2, #24]
 8009062:	4311      	orrs	r1, r2
 8009064:	68ba      	ldr	r2, [r7, #8]
 8009066:	68d2      	ldr	r2, [r2, #12]
 8009068:	0412      	lsls	r2, r2, #16
 800906a:	430a      	orrs	r2, r1
 800906c:	ea43 0102 	orr.w	r1, r3, r2
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009078:	e005      	b.n	8009086 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	3714      	adds	r7, #20
 800908c:	46bd      	mov	sp, r7
 800908e:	bc80      	pop	{r7}
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	cff00000 	.word	0xcff00000

08009098 <usart1_send_char>:

#include "usart.h"

//串口1发送1个字符
//c:要发送的字符
void usart1_send_char(uint8_t c) {
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	4603      	mov	r3, r0
 80090a0:	71fb      	strb	r3, [r7, #7]
	while (__HAL_UART_GET_FLAG(&huart1,UART_FLAG_TC) == RESET) {
 80090a2:	bf00      	nop
 80090a4:	4b08      	ldr	r3, [pc, #32]	; (80090c8 <usart1_send_char+0x30>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ae:	2b40      	cmp	r3, #64	; 0x40
 80090b0:	d1f8      	bne.n	80090a4 <usart1_send_char+0xc>
	}; //循环发送,直到发送完毕
	HAL_UART_Transmit(&huart1, &c, 1, 1000);
 80090b2:	1df9      	adds	r1, r7, #7
 80090b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80090b8:	2201      	movs	r2, #1
 80090ba:	4803      	ldr	r0, [pc, #12]	; (80090c8 <usart1_send_char+0x30>)
 80090bc:	f7ff fdab 	bl	8008c16 <HAL_UART_Transmit>
}
 80090c0:	bf00      	nop
 80090c2:	3708      	adds	r7, #8
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	2000041c 	.word	0x2000041c

080090cc <usart1_niming_report>:

//传送数据给匿名四轴上位机软件(V2.6版本)
//fun:功能字. 0XA0~0XAF
//data:数据缓存区,最多28字节!!
//len:data区有效数据个数
void usart1_niming_report(uint8_t fun, uint8_t *data, uint8_t len) {
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b08c      	sub	sp, #48	; 0x30
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	4603      	mov	r3, r0
 80090d4:	6039      	str	r1, [r7, #0]
 80090d6:	71fb      	strb	r3, [r7, #7]
 80090d8:	4613      	mov	r3, r2
 80090da:	71bb      	strb	r3, [r7, #6]
	uint8_t send_buf[32];
	uint8_t i;
	if (len > 28)
 80090dc:	79bb      	ldrb	r3, [r7, #6]
 80090de:	2b1c      	cmp	r3, #28
 80090e0:	d868      	bhi.n	80091b4 <usart1_niming_report+0xe8>
		return;	//最多28字节数据
	send_buf[len + 3] = 0;	//校验数置零
 80090e2:	79bb      	ldrb	r3, [r7, #6]
 80090e4:	3303      	adds	r3, #3
 80090e6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80090ea:	4413      	add	r3, r2
 80090ec:	2200      	movs	r2, #0
 80090ee:	f803 2c24 	strb.w	r2, [r3, #-36]
	send_buf[0] = 0X88;	//帧头
 80090f2:	2388      	movs	r3, #136	; 0x88
 80090f4:	733b      	strb	r3, [r7, #12]
	send_buf[1] = fun;	//功能字
 80090f6:	79fb      	ldrb	r3, [r7, #7]
 80090f8:	737b      	strb	r3, [r7, #13]
	send_buf[2] = len;	//数据长度
 80090fa:	79bb      	ldrb	r3, [r7, #6]
 80090fc:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < len; i++)
 80090fe:	2300      	movs	r3, #0
 8009100:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009104:	e011      	b.n	800912a <usart1_niming_report+0x5e>
		send_buf[3 + i] = data[i];			//复制数据
 8009106:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	441a      	add	r2, r3
 800910e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009112:	3303      	adds	r3, #3
 8009114:	7812      	ldrb	r2, [r2, #0]
 8009116:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800911a:	440b      	add	r3, r1
 800911c:	f803 2c24 	strb.w	r2, [r3, #-36]
	for (i = 0; i < len; i++)
 8009120:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009124:	3301      	adds	r3, #1
 8009126:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800912a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800912e:	79bb      	ldrb	r3, [r7, #6]
 8009130:	429a      	cmp	r2, r3
 8009132:	d3e8      	bcc.n	8009106 <usart1_niming_report+0x3a>
	for (i = 0; i < len + 3; i++)
 8009134:	2300      	movs	r3, #0
 8009136:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800913a:	e01b      	b.n	8009174 <usart1_niming_report+0xa8>
		send_buf[len + 3] += send_buf[i];	//计算校验和
 800913c:	79bb      	ldrb	r3, [r7, #6]
 800913e:	3303      	adds	r3, #3
 8009140:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009144:	4413      	add	r3, r2
 8009146:	f813 1c24 	ldrb.w	r1, [r3, #-36]
 800914a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800914e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009152:	4413      	add	r3, r2
 8009154:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8009158:	79bb      	ldrb	r3, [r7, #6]
 800915a:	3303      	adds	r3, #3
 800915c:	440a      	add	r2, r1
 800915e:	b2d2      	uxtb	r2, r2
 8009160:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8009164:	440b      	add	r3, r1
 8009166:	f803 2c24 	strb.w	r2, [r3, #-36]
	for (i = 0; i < len + 3; i++)
 800916a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800916e:	3301      	adds	r3, #1
 8009170:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009174:	79bb      	ldrb	r3, [r7, #6]
 8009176:	1c9a      	adds	r2, r3, #2
 8009178:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800917c:	429a      	cmp	r2, r3
 800917e:	dadd      	bge.n	800913c <usart1_niming_report+0x70>
	for (i = 0; i < len + 4; i++)
 8009180:	2300      	movs	r3, #0
 8009182:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009186:	e00e      	b.n	80091a6 <usart1_niming_report+0xda>
		usart1_send_char(send_buf[i]);	//发送数据到串口1
 8009188:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800918c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009190:	4413      	add	r3, r2
 8009192:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8009196:	4618      	mov	r0, r3
 8009198:	f7ff ff7e 	bl	8009098 <usart1_send_char>
	for (i = 0; i < len + 4; i++)
 800919c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80091a0:	3301      	adds	r3, #1
 80091a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80091a6:	79bb      	ldrb	r3, [r7, #6]
 80091a8:	1cda      	adds	r2, r3, #3
 80091aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80091ae:	429a      	cmp	r2, r3
 80091b0:	daea      	bge.n	8009188 <usart1_niming_report+0xbc>
 80091b2:	e000      	b.n	80091b6 <usart1_niming_report+0xea>
		return;	//最多28字节数据
 80091b4:	bf00      	nop
}
 80091b6:	3730      	adds	r7, #48	; 0x30
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <mpu6050_send_data>:

//发送加速度传感器数据和陀螺仪数据
//aacx,aacy,aacz:x,y,z三个方向上面的加速度值
//gyrox,gyroy,gyroz:x,y,z三个方向上面的陀螺仪值
void mpu6050_send_data(float distance, float temperature, uint8_t hc_sr501) {
 80091bc:	b580      	push	{r7, lr}
 80091be:	b086      	sub	sp, #24
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	4613      	mov	r3, r2
 80091c8:	71fb      	strb	r3, [r7, #7]
	float tbuf[2];
	tbuf[0] = distance;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	613b      	str	r3, [r7, #16]
	tbuf[1] = temperature;
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	617b      	str	r3, [r7, #20]
	usart1_niming_report(0XA1, tbuf, 2);	//自定义帧,0XA1
 80091d2:	f107 0310 	add.w	r3, r7, #16
 80091d6:	2202      	movs	r2, #2
 80091d8:	4619      	mov	r1, r3
 80091da:	20a1      	movs	r0, #161	; 0xa1
 80091dc:	f7ff ff76 	bl	80090cc <usart1_niming_report>
}
 80091e0:	bf00      	nop
 80091e2:	3718      	adds	r7, #24
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <NRF24L01_SPI_Init>:

const uint8_t TX_ADDRESS[TX_ADR_WIDTH] = { 0x34, 0x43, 0x10, 0x10, 0x01 }; //发送地址
const uint8_t RX_ADDRESS[RX_ADR_WIDTH] = { 0x34, 0x43, 0x10, 0x10, 0x01 }; //接收地址

//针对NRF24L01修改SPI2驱动
void NRF24L01_SPI_Init(void) {
 80091e8:	b580      	push	{r7, lr}
 80091ea:	af00      	add	r7, sp, #0
	__HAL_SPI_DISABLE(&hspi2);               //先关闭SPI2
 80091ec:	4b0d      	ldr	r3, [pc, #52]	; (8009224 <NRF24L01_SPI_Init+0x3c>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	4b0c      	ldr	r3, [pc, #48]	; (8009224 <NRF24L01_SPI_Init+0x3c>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091fa:	601a      	str	r2, [r3, #0]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW; //串行同步时钟的空闲状态为低电平
 80091fc:	4b09      	ldr	r3, [pc, #36]	; (8009224 <NRF24L01_SPI_Init+0x3c>)
 80091fe:	2200      	movs	r2, #0
 8009200:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;     //串行同步时钟的第1个跳变沿（上升或下降）数据被采样
 8009202:	4b08      	ldr	r3, [pc, #32]	; (8009224 <NRF24L01_SPI_Init+0x3c>)
 8009204:	2200      	movs	r2, #0
 8009206:	615a      	str	r2, [r3, #20]
	HAL_SPI_Init(&hspi2);
 8009208:	4806      	ldr	r0, [pc, #24]	; (8009224 <NRF24L01_SPI_Init+0x3c>)
 800920a:	f7fe fe91 	bl	8007f30 <HAL_SPI_Init>
	__HAL_SPI_ENABLE(&hspi2);                //使能SPI2
 800920e:	4b05      	ldr	r3, [pc, #20]	; (8009224 <NRF24L01_SPI_Init+0x3c>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	4b03      	ldr	r3, [pc, #12]	; (8009224 <NRF24L01_SPI_Init+0x3c>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800921c:	601a      	str	r2, [r3, #0]
}
 800921e:	bf00      	nop
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	20000334 	.word	0x20000334

08009228 <NRF24L01_Init>:

//初始化24L01的IO口
void NRF24L01_Init(void) {
 8009228:	b580      	push	{r7, lr}
 800922a:	b086      	sub	sp, #24
 800922c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;
	__HAL_RCC_GPIOB_CLK_ENABLE();			//开启GPIOB时钟
 800922e:	4b1f      	ldr	r3, [pc, #124]	; (80092ac <NRF24L01_Init+0x84>)
 8009230:	699b      	ldr	r3, [r3, #24]
 8009232:	4a1e      	ldr	r2, [pc, #120]	; (80092ac <NRF24L01_Init+0x84>)
 8009234:	f043 0308 	orr.w	r3, r3, #8
 8009238:	6193      	str	r3, [r2, #24]
 800923a:	4b1c      	ldr	r3, [pc, #112]	; (80092ac <NRF24L01_Init+0x84>)
 800923c:	699b      	ldr	r3, [r3, #24]
 800923e:	f003 0308 	and.w	r3, r3, #8
 8009242:	607b      	str	r3, [r7, #4]
 8009244:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();			//开启GPIOG时钟
 8009246:	4b19      	ldr	r3, [pc, #100]	; (80092ac <NRF24L01_Init+0x84>)
 8009248:	699b      	ldr	r3, [r3, #24]
 800924a:	4a18      	ldr	r2, [pc, #96]	; (80092ac <NRF24L01_Init+0x84>)
 800924c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009250:	6193      	str	r3, [r2, #24]
 8009252:	4b16      	ldr	r3, [pc, #88]	; (80092ac <NRF24L01_Init+0x84>)
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800925a:	603b      	str	r3, [r7, #0]
 800925c:	683b      	ldr	r3, [r7, #0]

	//GPIOB7,8推挽输出
    GPIO_Initure.Pin=GPIO_PIN_7|GPIO_PIN_8;	//PB1,2
 800925e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8009262:	60bb      	str	r3, [r7, #8]
    GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;  //输出
 8009264:	2301      	movs	r3, #1
 8009266:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB,&GPIO_Initure);     //初始化
 8009268:	f107 0308 	add.w	r3, r7, #8
 800926c:	4619      	mov	r1, r3
 800926e:	4810      	ldr	r0, [pc, #64]	; (80092b0 <NRF24L01_Init+0x88>)
 8009270:	f7fe f880 	bl	8007374 <HAL_GPIO_Init>

	//GPIOA.6上拉输入
	GPIO_Initure.Pin = GPIO_PIN_6;							//PA4
 8009274:	2340      	movs	r3, #64	; 0x40
 8009276:	60bb      	str	r3, [r7, #8]
	GPIO_Initure.Mode = GPIO_MODE_INPUT;      	//输入
 8009278:	2300      	movs	r3, #0
 800927a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);     	//初始化
 800927c:	f107 0308 	add.w	r3, r7, #8
 8009280:	4619      	mov	r1, r3
 8009282:	480b      	ldr	r0, [pc, #44]	; (80092b0 <NRF24L01_Init+0x88>)
 8009284:	f7fe f876 	bl	8007374 <HAL_GPIO_Init>

//		MX_SPI1_Init();    		              			//初始化SPI1
	NRF24L01_SPI_Init();                				//针对NRF的特点修改SPI的设置
 8009288:	f7ff ffae 	bl	80091e8 <NRF24L01_SPI_Init>
	NRF24L01_CE_LOW(); 			            			//使能24L01
 800928c:	2200      	movs	r2, #0
 800928e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009292:	4808      	ldr	r0, [pc, #32]	; (80092b4 <NRF24L01_Init+0x8c>)
 8009294:	f7fe fa19 	bl	80076ca <HAL_GPIO_WritePin>
	NRF24L01_SPI_CS_DISABLE();			    			//SPI片选取消
 8009298:	2201      	movs	r2, #1
 800929a:	2180      	movs	r1, #128	; 0x80
 800929c:	4805      	ldr	r0, [pc, #20]	; (80092b4 <NRF24L01_Init+0x8c>)
 800929e:	f7fe fa14 	bl	80076ca <HAL_GPIO_WritePin>
}
 80092a2:	bf00      	nop
 80092a4:	3718      	adds	r7, #24
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	40021000 	.word	0x40021000
 80092b0:	40010c00 	.word	0x40010c00
 80092b4:	40012000 	.word	0x40012000

080092b8 <SPI1_SetSpeed>:
 *SPI速度设置函数
 *SPI速度=fAPB1/分频系数
 *@ref SPI_BaudRate_Prescaler:SPI_BAUDRATEPRESCALER_2~SPI_BAUDRATEPRESCALER_2 256
 *fAPB1时钟一般为42Mhz：
 */
static void SPI1_SetSpeed(uint8_t SPI_BaudRatePrescaler) {
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	4603      	mov	r3, r0
 80092c0:	71fb      	strb	r3, [r7, #7]
	assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_BaudRatePrescaler));		//判断有效性
	__HAL_SPI_DISABLE(&hspi2);            //关闭SPI
 80092c2:	4b13      	ldr	r3, [pc, #76]	; (8009310 <SPI1_SetSpeed+0x58>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	4b11      	ldr	r3, [pc, #68]	; (8009310 <SPI1_SetSpeed+0x58>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092d0:	601a      	str	r2, [r3, #0]
	hspi2.Instance->CR1 &= 0XFFC7;          //位3-5清零，用来设置波特率
 80092d2:	4b0f      	ldr	r3, [pc, #60]	; (8009310 <SPI1_SetSpeed+0x58>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	6819      	ldr	r1, [r3, #0]
 80092d8:	4b0d      	ldr	r3, [pc, #52]	; (8009310 <SPI1_SetSpeed+0x58>)
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 80092e0:	400b      	ands	r3, r1
 80092e2:	6013      	str	r3, [r2, #0]
	hspi2.Instance->CR1 |= SPI_BaudRatePrescaler;          //设置SPI速度
 80092e4:	4b0a      	ldr	r3, [pc, #40]	; (8009310 <SPI1_SetSpeed+0x58>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	6819      	ldr	r1, [r3, #0]
 80092ea:	79fa      	ldrb	r2, [r7, #7]
 80092ec:	4b08      	ldr	r3, [pc, #32]	; (8009310 <SPI1_SetSpeed+0x58>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	430a      	orrs	r2, r1
 80092f2:	601a      	str	r2, [r3, #0]
	__HAL_SPI_ENABLE(&hspi2);             //使能SPI
 80092f4:	4b06      	ldr	r3, [pc, #24]	; (8009310 <SPI1_SetSpeed+0x58>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	4b05      	ldr	r3, [pc, #20]	; (8009310 <SPI1_SetSpeed+0x58>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009302:	601a      	str	r2, [r3, #0]
}
 8009304:	bf00      	nop
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	bc80      	pop	{r7}
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	20000334 	.word	0x20000334

08009314 <SPIx_ReadWriteByte>:
 * 函数功能: 往串行Flash读取写入一个字节数据并接收一个字节数据
 * 输入参数: byte：待发送数据
 * 返 回 值: uint8_t：接收到的数据
 * 说    明：无
 */
uint8_t SPIx_ReadWriteByte(SPI_HandleTypeDef *hspi, uint8_t byte) {
 8009314:	b580      	push	{r7, lr}
 8009316:	b086      	sub	sp, #24
 8009318:	af02      	add	r7, sp, #8
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	460b      	mov	r3, r1
 800931e:	70fb      	strb	r3, [r7, #3]
	uint8_t d_read, d_send = byte;
 8009320:	78fb      	ldrb	r3, [r7, #3]
 8009322:	73bb      	strb	r3, [r7, #14]
	if (HAL_SPI_TransmitReceive(hspi, &d_send, &d_read, 1, 0xFF) != HAL_OK) {
 8009324:	f107 020f 	add.w	r2, r7, #15
 8009328:	f107 010e 	add.w	r1, r7, #14
 800932c:	23ff      	movs	r3, #255	; 0xff
 800932e:	9300      	str	r3, [sp, #0]
 8009330:	2301      	movs	r3, #1
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f7fe fe80 	bl	8008038 <HAL_SPI_TransmitReceive>
 8009338:	4603      	mov	r3, r0
 800933a:	2b00      	cmp	r3, #0
 800933c:	d001      	beq.n	8009342 <SPIx_ReadWriteByte+0x2e>
		d_read = 0xFF;
 800933e:	23ff      	movs	r3, #255	; 0xff
 8009340:	73fb      	strb	r3, [r7, #15]
	}
	return d_read;
 8009342:	7bfb      	ldrb	r3, [r7, #15]
}
 8009344:	4618      	mov	r0, r3
 8009346:	3710      	adds	r7, #16
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <NRF24L01_Check>:
 * 函数功能: 检测24L01是否存在
 * 输入参数: 无
 * 返 回 值: 0，成功;1，失败
 * 说    明：无
 */
uint8_t NRF24L01_Check(void) {
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
	uint8_t buf[5] = { 0XA5, 0XA5, 0XA5, 0XA5, 0XA5 };
 8009352:	4a19      	ldr	r2, [pc, #100]	; (80093b8 <NRF24L01_Check+0x6c>)
 8009354:	463b      	mov	r3, r7
 8009356:	e892 0003 	ldmia.w	r2, {r0, r1}
 800935a:	6018      	str	r0, [r3, #0]
 800935c:	3304      	adds	r3, #4
 800935e:	7019      	strb	r1, [r3, #0]
	uint8_t i;

	SPI1_SetSpeed(SPI_BAUDRATEPRESCALER_4); //spi速度为8.0Mhz（（24L01的最大SPI时钟为10Mhz,这里大一点没关系）
 8009360:	2008      	movs	r0, #8
 8009362:	f7ff ffa9 	bl	80092b8 <SPI1_SetSpeed>
	NRF24L01_Write_Buf(NRF_WRITE_REG + TX_ADDR, buf, 5); //写入5个字节的地址.
 8009366:	463b      	mov	r3, r7
 8009368:	2205      	movs	r2, #5
 800936a:	4619      	mov	r1, r3
 800936c:	2030      	movs	r0, #48	; 0x30
 800936e:	f000 f8a7 	bl	80094c0 <NRF24L01_Write_Buf>
	NRF24L01_Read_Buf(TX_ADDR, buf, 5); //读出写入的地址
 8009372:	463b      	mov	r3, r7
 8009374:	2205      	movs	r2, #5
 8009376:	4619      	mov	r1, r3
 8009378:	2010      	movs	r0, #16
 800937a:	f000 f86b 	bl	8009454 <NRF24L01_Read_Buf>
	for (i = 0; i < 5; i++)
 800937e:	2300      	movs	r3, #0
 8009380:	71fb      	strb	r3, [r7, #7]
 8009382:	e00a      	b.n	800939a <NRF24L01_Check+0x4e>
		if (buf[i] != 0XA5)
 8009384:	79fb      	ldrb	r3, [r7, #7]
 8009386:	f107 0208 	add.w	r2, r7, #8
 800938a:	4413      	add	r3, r2
 800938c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8009390:	2ba5      	cmp	r3, #165	; 0xa5
 8009392:	d106      	bne.n	80093a2 <NRF24L01_Check+0x56>
	for (i = 0; i < 5; i++)
 8009394:	79fb      	ldrb	r3, [r7, #7]
 8009396:	3301      	adds	r3, #1
 8009398:	71fb      	strb	r3, [r7, #7]
 800939a:	79fb      	ldrb	r3, [r7, #7]
 800939c:	2b04      	cmp	r3, #4
 800939e:	d9f1      	bls.n	8009384 <NRF24L01_Check+0x38>
 80093a0:	e000      	b.n	80093a4 <NRF24L01_Check+0x58>
			break;
 80093a2:	bf00      	nop
	if (i != 5)
 80093a4:	79fb      	ldrb	r3, [r7, #7]
 80093a6:	2b05      	cmp	r3, #5
 80093a8:	d001      	beq.n	80093ae <NRF24L01_Check+0x62>
		return 1; //检测24L01错误
 80093aa:	2301      	movs	r3, #1
 80093ac:	e000      	b.n	80093b0 <NRF24L01_Check+0x64>
	return 0;		 	//检测到24L01
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3708      	adds	r7, #8
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	0800de2c 	.word	0x0800de2c

080093bc <NRF24L01_Write_Reg>:
 * 输入参数: 无
 * 返 回 值: 无
 * 说    明：reg:指定寄存器地址
 *
 */
uint8_t NRF24L01_Write_Reg(uint8_t reg, uint8_t value) {
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	4603      	mov	r3, r0
 80093c4:	460a      	mov	r2, r1
 80093c6:	71fb      	strb	r3, [r7, #7]
 80093c8:	4613      	mov	r3, r2
 80093ca:	71bb      	strb	r3, [r7, #6]
	uint8_t status;
	NRF24L01_SPI_CS_ENABLE();                 //使能SPI传输
 80093cc:	2200      	movs	r2, #0
 80093ce:	2180      	movs	r1, #128	; 0x80
 80093d0:	480c      	ldr	r0, [pc, #48]	; (8009404 <NRF24L01_Write_Reg+0x48>)
 80093d2:	f7fe f97a 	bl	80076ca <HAL_GPIO_WritePin>
	status = SPIx_ReadWriteByte(&hspi2, reg);   //发送寄存器号
 80093d6:	79fb      	ldrb	r3, [r7, #7]
 80093d8:	4619      	mov	r1, r3
 80093da:	480b      	ldr	r0, [pc, #44]	; (8009408 <NRF24L01_Write_Reg+0x4c>)
 80093dc:	f7ff ff9a 	bl	8009314 <SPIx_ReadWriteByte>
 80093e0:	4603      	mov	r3, r0
 80093e2:	73fb      	strb	r3, [r7, #15]
	SPIx_ReadWriteByte(&hspi2, value);         //写入寄存器的值
 80093e4:	79bb      	ldrb	r3, [r7, #6]
 80093e6:	4619      	mov	r1, r3
 80093e8:	4807      	ldr	r0, [pc, #28]	; (8009408 <NRF24L01_Write_Reg+0x4c>)
 80093ea:	f7ff ff93 	bl	8009314 <SPIx_ReadWriteByte>
	NRF24L01_SPI_CS_DISABLE();                //禁止SPI传输
 80093ee:	2201      	movs	r2, #1
 80093f0:	2180      	movs	r1, #128	; 0x80
 80093f2:	4804      	ldr	r0, [pc, #16]	; (8009404 <NRF24L01_Write_Reg+0x48>)
 80093f4:	f7fe f969 	bl	80076ca <HAL_GPIO_WritePin>
	return (status);       			//返回状态值
 80093f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3710      	adds	r7, #16
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	40012000 	.word	0x40012000
 8009408:	20000334 	.word	0x20000334

0800940c <NRF24L01_Read_Reg>:
 * 输入参数: 无
 * 返 回 值: 无
 * 说    明：reg:要读的寄存器
 *
 */
uint8_t NRF24L01_Read_Reg(uint8_t reg) {
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	4603      	mov	r3, r0
 8009414:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_val;
	NRF24L01_SPI_CS_ENABLE();          //使能SPI传输
 8009416:	2200      	movs	r2, #0
 8009418:	2180      	movs	r1, #128	; 0x80
 800941a:	480c      	ldr	r0, [pc, #48]	; (800944c <NRF24L01_Read_Reg+0x40>)
 800941c:	f7fe f955 	bl	80076ca <HAL_GPIO_WritePin>
	SPIx_ReadWriteByte(&hspi2, reg);   //发送寄存器号
 8009420:	79fb      	ldrb	r3, [r7, #7]
 8009422:	4619      	mov	r1, r3
 8009424:	480a      	ldr	r0, [pc, #40]	; (8009450 <NRF24L01_Read_Reg+0x44>)
 8009426:	f7ff ff75 	bl	8009314 <SPIx_ReadWriteByte>
	reg_val = SPIx_ReadWriteByte(&hspi2, 0XFF);   //读取寄存器内容
 800942a:	21ff      	movs	r1, #255	; 0xff
 800942c:	4808      	ldr	r0, [pc, #32]	; (8009450 <NRF24L01_Read_Reg+0x44>)
 800942e:	f7ff ff71 	bl	8009314 <SPIx_ReadWriteByte>
 8009432:	4603      	mov	r3, r0
 8009434:	73fb      	strb	r3, [r7, #15]
	NRF24L01_SPI_CS_DISABLE();          //禁止SPI传输
 8009436:	2201      	movs	r2, #1
 8009438:	2180      	movs	r1, #128	; 0x80
 800943a:	4804      	ldr	r0, [pc, #16]	; (800944c <NRF24L01_Read_Reg+0x40>)
 800943c:	f7fe f945 	bl	80076ca <HAL_GPIO_WritePin>
	return (reg_val);           //返回状态值
 8009440:	7bfb      	ldrb	r3, [r7, #15]
}
 8009442:	4618      	mov	r0, r3
 8009444:	3710      	adds	r7, #16
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	40012000 	.word	0x40012000
 8009450:	20000334 	.word	0x20000334

08009454 <NRF24L01_Read_Buf>:
 * 输入参数: 无
 * 返 回 值: 此次读到的状态寄存器值
 * 说    明：无
 *
 */
uint8_t NRF24L01_Read_Buf(uint8_t reg, uint8_t *pBuf, uint8_t len) {
 8009454:	b590      	push	{r4, r7, lr}
 8009456:	b085      	sub	sp, #20
 8009458:	af00      	add	r7, sp, #0
 800945a:	4603      	mov	r3, r0
 800945c:	6039      	str	r1, [r7, #0]
 800945e:	71fb      	strb	r3, [r7, #7]
 8009460:	4613      	mov	r3, r2
 8009462:	71bb      	strb	r3, [r7, #6]
	uint8_t status, uint8_t_ctr;

	NRF24L01_SPI_CS_ENABLE();           //使能SPI传输
 8009464:	2200      	movs	r2, #0
 8009466:	2180      	movs	r1, #128	; 0x80
 8009468:	4813      	ldr	r0, [pc, #76]	; (80094b8 <NRF24L01_Read_Buf+0x64>)
 800946a:	f7fe f92e 	bl	80076ca <HAL_GPIO_WritePin>
	status = SPIx_ReadWriteByte(&hspi2, reg);           //发送寄存器值(位置),并读取状态值
 800946e:	79fb      	ldrb	r3, [r7, #7]
 8009470:	4619      	mov	r1, r3
 8009472:	4812      	ldr	r0, [pc, #72]	; (80094bc <NRF24L01_Read_Buf+0x68>)
 8009474:	f7ff ff4e 	bl	8009314 <SPIx_ReadWriteByte>
 8009478:	4603      	mov	r3, r0
 800947a:	73bb      	strb	r3, [r7, #14]
	for (uint8_t_ctr = 0; uint8_t_ctr < len; uint8_t_ctr++) {
 800947c:	2300      	movs	r3, #0
 800947e:	73fb      	strb	r3, [r7, #15]
 8009480:	e00b      	b.n	800949a <NRF24L01_Read_Buf+0x46>
		pBuf[uint8_t_ctr] = SPIx_ReadWriteByte(&hspi2, 0XFF);           //读出数据
 8009482:	7bfb      	ldrb	r3, [r7, #15]
 8009484:	683a      	ldr	r2, [r7, #0]
 8009486:	18d4      	adds	r4, r2, r3
 8009488:	21ff      	movs	r1, #255	; 0xff
 800948a:	480c      	ldr	r0, [pc, #48]	; (80094bc <NRF24L01_Read_Buf+0x68>)
 800948c:	f7ff ff42 	bl	8009314 <SPIx_ReadWriteByte>
 8009490:	4603      	mov	r3, r0
 8009492:	7023      	strb	r3, [r4, #0]
	for (uint8_t_ctr = 0; uint8_t_ctr < len; uint8_t_ctr++) {
 8009494:	7bfb      	ldrb	r3, [r7, #15]
 8009496:	3301      	adds	r3, #1
 8009498:	73fb      	strb	r3, [r7, #15]
 800949a:	7bfa      	ldrb	r2, [r7, #15]
 800949c:	79bb      	ldrb	r3, [r7, #6]
 800949e:	429a      	cmp	r2, r3
 80094a0:	d3ef      	bcc.n	8009482 <NRF24L01_Read_Buf+0x2e>
	}
	NRF24L01_SPI_CS_DISABLE();       //关闭SPI传输
 80094a2:	2201      	movs	r2, #1
 80094a4:	2180      	movs	r1, #128	; 0x80
 80094a6:	4804      	ldr	r0, [pc, #16]	; (80094b8 <NRF24L01_Read_Buf+0x64>)
 80094a8:	f7fe f90f 	bl	80076ca <HAL_GPIO_WritePin>
	return status;        //返回读到的状态值
 80094ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3714      	adds	r7, #20
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd90      	pop	{r4, r7, pc}
 80094b6:	bf00      	nop
 80094b8:	40012000 	.word	0x40012000
 80094bc:	20000334 	.word	0x20000334

080094c0 <NRF24L01_Write_Buf>:
 * 输入参数: 无
 * 返 回 值: 无
 * 说    明：reg:寄存器(位置)  *pBuf:数据指针  len:数据长度
 *
 */
uint8_t NRF24L01_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t len) {
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	4603      	mov	r3, r0
 80094c8:	6039      	str	r1, [r7, #0]
 80094ca:	71fb      	strb	r3, [r7, #7]
 80094cc:	4613      	mov	r3, r2
 80094ce:	71bb      	strb	r3, [r7, #6]
	uint8_t status, uint8_t_ctr;
	NRF24L01_SPI_CS_ENABLE();          //使能SPI传输
 80094d0:	2200      	movs	r2, #0
 80094d2:	2180      	movs	r1, #128	; 0x80
 80094d4:	4812      	ldr	r0, [pc, #72]	; (8009520 <NRF24L01_Write_Buf+0x60>)
 80094d6:	f7fe f8f8 	bl	80076ca <HAL_GPIO_WritePin>
	status = SPIx_ReadWriteByte(&hspi2, reg);          //发送寄存器值(位置),并读取状态值
 80094da:	79fb      	ldrb	r3, [r7, #7]
 80094dc:	4619      	mov	r1, r3
 80094de:	4811      	ldr	r0, [pc, #68]	; (8009524 <NRF24L01_Write_Buf+0x64>)
 80094e0:	f7ff ff18 	bl	8009314 <SPIx_ReadWriteByte>
 80094e4:	4603      	mov	r3, r0
 80094e6:	73bb      	strb	r3, [r7, #14]
	for (uint8_t_ctr = 0; uint8_t_ctr < len; uint8_t_ctr++) {
 80094e8:	2300      	movs	r3, #0
 80094ea:	73fb      	strb	r3, [r7, #15]
 80094ec:	e00a      	b.n	8009504 <NRF24L01_Write_Buf+0x44>
		SPIx_ReadWriteByte(&hspi2, *pBuf++); //写入数据
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	1c5a      	adds	r2, r3, #1
 80094f2:	603a      	str	r2, [r7, #0]
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	4619      	mov	r1, r3
 80094f8:	480a      	ldr	r0, [pc, #40]	; (8009524 <NRF24L01_Write_Buf+0x64>)
 80094fa:	f7ff ff0b 	bl	8009314 <SPIx_ReadWriteByte>
	for (uint8_t_ctr = 0; uint8_t_ctr < len; uint8_t_ctr++) {
 80094fe:	7bfb      	ldrb	r3, [r7, #15]
 8009500:	3301      	adds	r3, #1
 8009502:	73fb      	strb	r3, [r7, #15]
 8009504:	7bfa      	ldrb	r2, [r7, #15]
 8009506:	79bb      	ldrb	r3, [r7, #6]
 8009508:	429a      	cmp	r2, r3
 800950a:	d3f0      	bcc.n	80094ee <NRF24L01_Write_Buf+0x2e>
	}
	NRF24L01_SPI_CS_DISABLE();       //关闭SPI传输
 800950c:	2201      	movs	r2, #1
 800950e:	2180      	movs	r1, #128	; 0x80
 8009510:	4803      	ldr	r0, [pc, #12]	; (8009520 <NRF24L01_Write_Buf+0x60>)
 8009512:	f7fe f8da 	bl	80076ca <HAL_GPIO_WritePin>
	return status;          //返回读到的状态值
 8009516:	7bbb      	ldrb	r3, [r7, #14]
}
 8009518:	4618      	mov	r0, r3
 800951a:	3710      	adds	r7, #16
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}
 8009520:	40012000 	.word	0x40012000
 8009524:	20000334 	.word	0x20000334

08009528 <NRF24L01_TxPacket>:
 * 输入参数: 无
 * 返 回 值: 发送完成状况
 * 说    明：txbuf:待发送数据首地址
 *
 */
uint8_t NRF24L01_TxPacket(uint8_t *txbuf) {
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
	uint8_t sta;
	SPI1_SetSpeed(SPI_BAUDRATEPRESCALER_8); //spi速度为4.0Mhz（24L01的最大SPI时钟为10Mhz）
 8009530:	2010      	movs	r0, #16
 8009532:	f7ff fec1 	bl	80092b8 <SPI1_SetSpeed>
	NRF24L01_CE_LOW();
 8009536:	2200      	movs	r2, #0
 8009538:	f44f 7180 	mov.w	r1, #256	; 0x100
 800953c:	481b      	ldr	r0, [pc, #108]	; (80095ac <NRF24L01_TxPacket+0x84>)
 800953e:	f7fe f8c4 	bl	80076ca <HAL_GPIO_WritePin>
	NRF24L01_Write_Buf(WR_TX_PLOAD, txbuf, TX_PLOAD_WIDTH); //写数据到TX BUF  32个字节
 8009542:	2220      	movs	r2, #32
 8009544:	6879      	ldr	r1, [r7, #4]
 8009546:	20a0      	movs	r0, #160	; 0xa0
 8009548:	f7ff ffba 	bl	80094c0 <NRF24L01_Write_Buf>
	NRF24L01_CE_HIGH(); //启动发送
 800954c:	2201      	movs	r2, #1
 800954e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009552:	4816      	ldr	r0, [pc, #88]	; (80095ac <NRF24L01_TxPacket+0x84>)
 8009554:	f7fe f8b9 	bl	80076ca <HAL_GPIO_WritePin>

	while (NRF24L01_IRQ_PIN_READ() != 0)
 8009558:	bf00      	nop
 800955a:	2140      	movs	r1, #64	; 0x40
 800955c:	4813      	ldr	r0, [pc, #76]	; (80095ac <NRF24L01_TxPacket+0x84>)
 800955e:	f7fe f89d 	bl	800769c <HAL_GPIO_ReadPin>
 8009562:	4603      	mov	r3, r0
 8009564:	2b00      	cmp	r3, #0
 8009566:	d1f8      	bne.n	800955a <NRF24L01_TxPacket+0x32>
		; //等待发送完成

	sta = NRF24L01_Read_Reg(STATUS);  //读取状态寄存器的值
 8009568:	2007      	movs	r0, #7
 800956a:	f7ff ff4f 	bl	800940c <NRF24L01_Read_Reg>
 800956e:	4603      	mov	r3, r0
 8009570:	73fb      	strb	r3, [r7, #15]
	NRF24L01_Write_Reg(NRF_WRITE_REG + STATUS, sta); //清除TX_DS或MAX_RT中断标志
 8009572:	7bfb      	ldrb	r3, [r7, #15]
 8009574:	4619      	mov	r1, r3
 8009576:	2027      	movs	r0, #39	; 0x27
 8009578:	f7ff ff20 	bl	80093bc <NRF24L01_Write_Reg>
	if (sta & MAX_TX) //达到最大重发次数
 800957c:	7bfb      	ldrb	r3, [r7, #15]
 800957e:	f003 0310 	and.w	r3, r3, #16
 8009582:	2b00      	cmp	r3, #0
 8009584:	d005      	beq.n	8009592 <NRF24L01_TxPacket+0x6a>
	{
		NRF24L01_Write_Reg(FLUSH_TX, 0xff); //清除TX FIFO寄存器
 8009586:	21ff      	movs	r1, #255	; 0xff
 8009588:	20e1      	movs	r0, #225	; 0xe1
 800958a:	f7ff ff17 	bl	80093bc <NRF24L01_Write_Reg>
		return MAX_TX;
 800958e:	2310      	movs	r3, #16
 8009590:	e007      	b.n	80095a2 <NRF24L01_TxPacket+0x7a>
	}
	if (sta & TX_OK) //发送完成
 8009592:	7bfb      	ldrb	r3, [r7, #15]
 8009594:	f003 0320 	and.w	r3, r3, #32
 8009598:	2b00      	cmp	r3, #0
 800959a:	d001      	beq.n	80095a0 <NRF24L01_TxPacket+0x78>
	{
		return TX_OK;
 800959c:	2320      	movs	r3, #32
 800959e:	e000      	b.n	80095a2 <NRF24L01_TxPacket+0x7a>
	}
	return 0xff; //其他原因发送失败
 80095a0:	23ff      	movs	r3, #255	; 0xff
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	40012000 	.word	0x40012000

080095b0 <NRF24L01_RxPacket>:
 * 输入参数: 无
 * 返 回 值: 无
 * 说    明：无
 *
 */
uint8_t NRF24L01_RxPacket(uint8_t *rxbuf) {
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
	uint8_t sta;
	SPI1_SetSpeed(SPI_BAUDRATEPRESCALER_8); //spi速度为4.0Mhz（24L01的最大SPI时钟为10Mhz）
 80095b8:	2010      	movs	r0, #16
 80095ba:	f7ff fe7d 	bl	80092b8 <SPI1_SetSpeed>
	sta = NRF24L01_Read_Reg(STATUS);  //读取状态寄存器的值
 80095be:	2007      	movs	r0, #7
 80095c0:	f7ff ff24 	bl	800940c <NRF24L01_Read_Reg>
 80095c4:	4603      	mov	r3, r0
 80095c6:	73fb      	strb	r3, [r7, #15]
	NRF24L01_Write_Reg(NRF_WRITE_REG + STATUS, sta); //清除TX_DS或MAX_RT中断标志
 80095c8:	7bfb      	ldrb	r3, [r7, #15]
 80095ca:	4619      	mov	r1, r3
 80095cc:	2027      	movs	r0, #39	; 0x27
 80095ce:	f7ff fef5 	bl	80093bc <NRF24L01_Write_Reg>
	if (sta & RX_OK) //接收到数据
 80095d2:	7bfb      	ldrb	r3, [r7, #15]
 80095d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d00a      	beq.n	80095f2 <NRF24L01_RxPacket+0x42>
	{
		NRF24L01_Read_Buf(RD_RX_PLOAD, rxbuf, RX_PLOAD_WIDTH); //读取数据
 80095dc:	2220      	movs	r2, #32
 80095de:	6879      	ldr	r1, [r7, #4]
 80095e0:	2061      	movs	r0, #97	; 0x61
 80095e2:	f7ff ff37 	bl	8009454 <NRF24L01_Read_Buf>
		NRF24L01_Write_Reg(FLUSH_RX, 0xff); //清除RX FIFO寄存器
 80095e6:	21ff      	movs	r1, #255	; 0xff
 80095e8:	20e2      	movs	r0, #226	; 0xe2
 80095ea:	f7ff fee7 	bl	80093bc <NRF24L01_Write_Reg>
		return 0;
 80095ee:	2300      	movs	r3, #0
 80095f0:	e000      	b.n	80095f4 <NRF24L01_RxPacket+0x44>
	}
	return 1; //没收到任何数据
 80095f2:	2301      	movs	r3, #1
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3710      	adds	r7, #16
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <NRF24L01_RX_Mode>:
 * 输入参数: 无
 * 返 回 值: 无
 * 说    明：无
 *
 */
void NRF24L01_RX_Mode(void) {
 80095fc:	b580      	push	{r7, lr}
 80095fe:	af00      	add	r7, sp, #0
	NRF24L01_CE_LOW();
 8009600:	2200      	movs	r2, #0
 8009602:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009606:	4815      	ldr	r0, [pc, #84]	; (800965c <NRF24L01_RX_Mode+0x60>)
 8009608:	f7fe f85f 	bl	80076ca <HAL_GPIO_WritePin>
	NRF24L01_Write_Reg(NRF_WRITE_REG + CONFIG, 0x0F); //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC
 800960c:	210f      	movs	r1, #15
 800960e:	2020      	movs	r0, #32
 8009610:	f7ff fed4 	bl	80093bc <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + EN_AA, 0x01);    //使能通道0的自动应答
 8009614:	2101      	movs	r1, #1
 8009616:	2021      	movs	r0, #33	; 0x21
 8009618:	f7ff fed0 	bl	80093bc <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + EN_RXADDR, 0x01);    //使能通道0的接收地址
 800961c:	2101      	movs	r1, #1
 800961e:	2022      	movs	r0, #34	; 0x22
 8009620:	f7ff fecc 	bl	80093bc <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + RF_CH, 40);	     //设置RF通信频率
 8009624:	2128      	movs	r1, #40	; 0x28
 8009626:	2025      	movs	r0, #37	; 0x25
 8009628:	f7ff fec8 	bl	80093bc <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + RF_SETUP, 0x0f);	//设置TX发射参数,0db增益,2Mbps,低噪声增益开启
 800962c:	210f      	movs	r1, #15
 800962e:	2026      	movs	r0, #38	; 0x26
 8009630:	f7ff fec4 	bl	80093bc <NRF24L01_Write_Reg>

	NRF24L01_Write_Reg(NRF_WRITE_REG + RX_PW_P0, RX_PLOAD_WIDTH);//选择通道0的有效数据宽度
 8009634:	2120      	movs	r1, #32
 8009636:	2031      	movs	r0, #49	; 0x31
 8009638:	f7ff fec0 	bl	80093bc <NRF24L01_Write_Reg>

	NRF24L01_Write_Buf(NRF_WRITE_REG + RX_ADDR_P0, (uint8_t*) RX_ADDRESS,
 800963c:	2205      	movs	r2, #5
 800963e:	4908      	ldr	r1, [pc, #32]	; (8009660 <NRF24L01_RX_Mode+0x64>)
 8009640:	202a      	movs	r0, #42	; 0x2a
 8009642:	f7ff ff3d 	bl	80094c0 <NRF24L01_Write_Buf>
			RX_ADR_WIDTH);	     //写RX节点地址

	NRF24L01_CE_HIGH(); //CE为高,进入接收模式
 8009646:	2201      	movs	r2, #1
 8009648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800964c:	4803      	ldr	r0, [pc, #12]	; (800965c <NRF24L01_RX_Mode+0x60>)
 800964e:	f7fe f83c 	bl	80076ca <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8009652:	2001      	movs	r0, #1
 8009654:	f7fd fd86 	bl	8007164 <HAL_Delay>
}
 8009658:	bf00      	nop
 800965a:	bd80      	pop	{r7, pc}
 800965c:	40012000 	.word	0x40012000
 8009660:	0801ab38 	.word	0x0801ab38

08009664 <NRF24L01_TX_Mode>:
 * 输入参数: 无
 * 返 回 值: 无
 * 说    明：无
 *
 */
void NRF24L01_TX_Mode(void) {
 8009664:	b580      	push	{r7, lr}
 8009666:	af00      	add	r7, sp, #0
	NRF24L01_CE_LOW();
 8009668:	2200      	movs	r2, #0
 800966a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800966e:	4818      	ldr	r0, [pc, #96]	; (80096d0 <NRF24L01_TX_Mode+0x6c>)
 8009670:	f7fe f82b 	bl	80076ca <HAL_GPIO_WritePin>
	NRF24L01_Write_Buf(NRF_WRITE_REG + TX_ADDR, (uint8_t*) TX_ADDRESS,
 8009674:	2205      	movs	r2, #5
 8009676:	4917      	ldr	r1, [pc, #92]	; (80096d4 <NRF24L01_TX_Mode+0x70>)
 8009678:	2030      	movs	r0, #48	; 0x30
 800967a:	f7ff ff21 	bl	80094c0 <NRF24L01_Write_Buf>
			TX_ADR_WIDTH); //写TX节点地址
	NRF24L01_Write_Buf(NRF_WRITE_REG + RX_ADDR_P0, (uint8_t*) RX_ADDRESS,
 800967e:	2205      	movs	r2, #5
 8009680:	4915      	ldr	r1, [pc, #84]	; (80096d8 <NRF24L01_TX_Mode+0x74>)
 8009682:	202a      	movs	r0, #42	; 0x2a
 8009684:	f7ff ff1c 	bl	80094c0 <NRF24L01_Write_Buf>
			RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK

	NRF24L01_Write_Reg(NRF_WRITE_REG + EN_AA, 0x01);     //使能通道0的自动应答
 8009688:	2101      	movs	r1, #1
 800968a:	2021      	movs	r0, #33	; 0x21
 800968c:	f7ff fe96 	bl	80093bc <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + EN_RXADDR, 0x01); //使能通道0的接收地址
 8009690:	2101      	movs	r1, #1
 8009692:	2022      	movs	r0, #34	; 0x22
 8009694:	f7ff fe92 	bl	80093bc <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + SETUP_RETR, 0xff); //设置自动重发间隔时间:4000us + 86us;最大自动重发次数:15次
 8009698:	21ff      	movs	r1, #255	; 0xff
 800969a:	2024      	movs	r0, #36	; 0x24
 800969c:	f7ff fe8e 	bl	80093bc <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + RF_CH, 40);       //设置RF通道为40
 80096a0:	2128      	movs	r1, #40	; 0x28
 80096a2:	2025      	movs	r0, #37	; 0x25
 80096a4:	f7ff fe8a 	bl	80093bc <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + RF_SETUP, 0x0f); //设置TX发射参数,0db增益,2Mbps,低噪声增益开启
 80096a8:	210f      	movs	r1, #15
 80096aa:	2026      	movs	r0, #38	; 0x26
 80096ac:	f7ff fe86 	bl	80093bc <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + CONFIG, 0x0e); //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC,接收模式,开启所有中断
 80096b0:	210e      	movs	r1, #14
 80096b2:	2020      	movs	r0, #32
 80096b4:	f7ff fe82 	bl	80093bc <NRF24L01_Write_Reg>
	NRF24L01_CE_HIGH();    //CE为高,10us后启动发送
 80096b8:	2201      	movs	r2, #1
 80096ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80096be:	4804      	ldr	r0, [pc, #16]	; (80096d0 <NRF24L01_TX_Mode+0x6c>)
 80096c0:	f7fe f803 	bl	80076ca <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80096c4:	2001      	movs	r0, #1
 80096c6:	f7fd fd4d 	bl	8007164 <HAL_Delay>
}
 80096ca:	bf00      	nop
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	40012000 	.word	0x40012000
 80096d4:	0801ab30 	.word	0x0801ab30
 80096d8:	0801ab38 	.word	0x0801ab38

080096dc <atof>:
 80096dc:	2100      	movs	r1, #0
 80096de:	f001 bae7 	b.w	800acb0 <strtod>

080096e2 <atoff>:
 80096e2:	2100      	movs	r1, #0
 80096e4:	f001 baf0 	b.w	800acc8 <strtof>

080096e8 <atoi>:
 80096e8:	220a      	movs	r2, #10
 80096ea:	2100      	movs	r1, #0
 80096ec:	f001 bbc4 	b.w	800ae78 <strtol>

080096f0 <__errno>:
 80096f0:	4b01      	ldr	r3, [pc, #4]	; (80096f8 <__errno+0x8>)
 80096f2:	6818      	ldr	r0, [r3, #0]
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	20000014 	.word	0x20000014

080096fc <__libc_init_array>:
 80096fc:	b570      	push	{r4, r5, r6, lr}
 80096fe:	2600      	movs	r6, #0
 8009700:	4d0c      	ldr	r5, [pc, #48]	; (8009734 <__libc_init_array+0x38>)
 8009702:	4c0d      	ldr	r4, [pc, #52]	; (8009738 <__libc_init_array+0x3c>)
 8009704:	1b64      	subs	r4, r4, r5
 8009706:	10a4      	asrs	r4, r4, #2
 8009708:	42a6      	cmp	r6, r4
 800970a:	d109      	bne.n	8009720 <__libc_init_array+0x24>
 800970c:	f004 fa90 	bl	800dc30 <_init>
 8009710:	2600      	movs	r6, #0
 8009712:	4d0a      	ldr	r5, [pc, #40]	; (800973c <__libc_init_array+0x40>)
 8009714:	4c0a      	ldr	r4, [pc, #40]	; (8009740 <__libc_init_array+0x44>)
 8009716:	1b64      	subs	r4, r4, r5
 8009718:	10a4      	asrs	r4, r4, #2
 800971a:	42a6      	cmp	r6, r4
 800971c:	d105      	bne.n	800972a <__libc_init_array+0x2e>
 800971e:	bd70      	pop	{r4, r5, r6, pc}
 8009720:	f855 3b04 	ldr.w	r3, [r5], #4
 8009724:	4798      	blx	r3
 8009726:	3601      	adds	r6, #1
 8009728:	e7ee      	b.n	8009708 <__libc_init_array+0xc>
 800972a:	f855 3b04 	ldr.w	r3, [r5], #4
 800972e:	4798      	blx	r3
 8009730:	3601      	adds	r6, #1
 8009732:	e7f2      	b.n	800971a <__libc_init_array+0x1e>
 8009734:	0801afec 	.word	0x0801afec
 8009738:	0801afec 	.word	0x0801afec
 800973c:	0801afec 	.word	0x0801afec
 8009740:	0801aff0 	.word	0x0801aff0

08009744 <memset>:
 8009744:	4603      	mov	r3, r0
 8009746:	4402      	add	r2, r0
 8009748:	4293      	cmp	r3, r2
 800974a:	d100      	bne.n	800974e <memset+0xa>
 800974c:	4770      	bx	lr
 800974e:	f803 1b01 	strb.w	r1, [r3], #1
 8009752:	e7f9      	b.n	8009748 <memset+0x4>

08009754 <__cvt>:
 8009754:	2b00      	cmp	r3, #0
 8009756:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800975a:	461f      	mov	r7, r3
 800975c:	bfbb      	ittet	lt
 800975e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009762:	461f      	movlt	r7, r3
 8009764:	2300      	movge	r3, #0
 8009766:	232d      	movlt	r3, #45	; 0x2d
 8009768:	b088      	sub	sp, #32
 800976a:	4614      	mov	r4, r2
 800976c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800976e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009770:	7013      	strb	r3, [r2, #0]
 8009772:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009774:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009778:	f023 0820 	bic.w	r8, r3, #32
 800977c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009780:	d005      	beq.n	800978e <__cvt+0x3a>
 8009782:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009786:	d100      	bne.n	800978a <__cvt+0x36>
 8009788:	3501      	adds	r5, #1
 800978a:	2302      	movs	r3, #2
 800978c:	e000      	b.n	8009790 <__cvt+0x3c>
 800978e:	2303      	movs	r3, #3
 8009790:	aa07      	add	r2, sp, #28
 8009792:	9204      	str	r2, [sp, #16]
 8009794:	aa06      	add	r2, sp, #24
 8009796:	e9cd a202 	strd	sl, r2, [sp, #8]
 800979a:	e9cd 3500 	strd	r3, r5, [sp]
 800979e:	4622      	mov	r2, r4
 80097a0:	463b      	mov	r3, r7
 80097a2:	f001 fc01 	bl	800afa8 <_dtoa_r>
 80097a6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80097aa:	4606      	mov	r6, r0
 80097ac:	d102      	bne.n	80097b4 <__cvt+0x60>
 80097ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80097b0:	07db      	lsls	r3, r3, #31
 80097b2:	d522      	bpl.n	80097fa <__cvt+0xa6>
 80097b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80097b8:	eb06 0905 	add.w	r9, r6, r5
 80097bc:	d110      	bne.n	80097e0 <__cvt+0x8c>
 80097be:	7833      	ldrb	r3, [r6, #0]
 80097c0:	2b30      	cmp	r3, #48	; 0x30
 80097c2:	d10a      	bne.n	80097da <__cvt+0x86>
 80097c4:	2200      	movs	r2, #0
 80097c6:	2300      	movs	r3, #0
 80097c8:	4620      	mov	r0, r4
 80097ca:	4639      	mov	r1, r7
 80097cc:	f7f7 f958 	bl	8000a80 <__aeabi_dcmpeq>
 80097d0:	b918      	cbnz	r0, 80097da <__cvt+0x86>
 80097d2:	f1c5 0501 	rsb	r5, r5, #1
 80097d6:	f8ca 5000 	str.w	r5, [sl]
 80097da:	f8da 3000 	ldr.w	r3, [sl]
 80097de:	4499      	add	r9, r3
 80097e0:	2200      	movs	r2, #0
 80097e2:	2300      	movs	r3, #0
 80097e4:	4620      	mov	r0, r4
 80097e6:	4639      	mov	r1, r7
 80097e8:	f7f7 f94a 	bl	8000a80 <__aeabi_dcmpeq>
 80097ec:	b108      	cbz	r0, 80097f2 <__cvt+0x9e>
 80097ee:	f8cd 901c 	str.w	r9, [sp, #28]
 80097f2:	2230      	movs	r2, #48	; 0x30
 80097f4:	9b07      	ldr	r3, [sp, #28]
 80097f6:	454b      	cmp	r3, r9
 80097f8:	d307      	bcc.n	800980a <__cvt+0xb6>
 80097fa:	4630      	mov	r0, r6
 80097fc:	9b07      	ldr	r3, [sp, #28]
 80097fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009800:	1b9b      	subs	r3, r3, r6
 8009802:	6013      	str	r3, [r2, #0]
 8009804:	b008      	add	sp, #32
 8009806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800980a:	1c59      	adds	r1, r3, #1
 800980c:	9107      	str	r1, [sp, #28]
 800980e:	701a      	strb	r2, [r3, #0]
 8009810:	e7f0      	b.n	80097f4 <__cvt+0xa0>

08009812 <__exponent>:
 8009812:	4603      	mov	r3, r0
 8009814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009816:	2900      	cmp	r1, #0
 8009818:	f803 2b02 	strb.w	r2, [r3], #2
 800981c:	bfb6      	itet	lt
 800981e:	222d      	movlt	r2, #45	; 0x2d
 8009820:	222b      	movge	r2, #43	; 0x2b
 8009822:	4249      	neglt	r1, r1
 8009824:	2909      	cmp	r1, #9
 8009826:	7042      	strb	r2, [r0, #1]
 8009828:	dd2b      	ble.n	8009882 <__exponent+0x70>
 800982a:	f10d 0407 	add.w	r4, sp, #7
 800982e:	46a4      	mov	ip, r4
 8009830:	270a      	movs	r7, #10
 8009832:	fb91 f6f7 	sdiv	r6, r1, r7
 8009836:	460a      	mov	r2, r1
 8009838:	46a6      	mov	lr, r4
 800983a:	fb07 1516 	mls	r5, r7, r6, r1
 800983e:	2a63      	cmp	r2, #99	; 0x63
 8009840:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009844:	4631      	mov	r1, r6
 8009846:	f104 34ff 	add.w	r4, r4, #4294967295
 800984a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800984e:	dcf0      	bgt.n	8009832 <__exponent+0x20>
 8009850:	3130      	adds	r1, #48	; 0x30
 8009852:	f1ae 0502 	sub.w	r5, lr, #2
 8009856:	f804 1c01 	strb.w	r1, [r4, #-1]
 800985a:	4629      	mov	r1, r5
 800985c:	1c44      	adds	r4, r0, #1
 800985e:	4561      	cmp	r1, ip
 8009860:	d30a      	bcc.n	8009878 <__exponent+0x66>
 8009862:	f10d 0209 	add.w	r2, sp, #9
 8009866:	eba2 020e 	sub.w	r2, r2, lr
 800986a:	4565      	cmp	r5, ip
 800986c:	bf88      	it	hi
 800986e:	2200      	movhi	r2, #0
 8009870:	4413      	add	r3, r2
 8009872:	1a18      	subs	r0, r3, r0
 8009874:	b003      	add	sp, #12
 8009876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009878:	f811 2b01 	ldrb.w	r2, [r1], #1
 800987c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009880:	e7ed      	b.n	800985e <__exponent+0x4c>
 8009882:	2330      	movs	r3, #48	; 0x30
 8009884:	3130      	adds	r1, #48	; 0x30
 8009886:	7083      	strb	r3, [r0, #2]
 8009888:	70c1      	strb	r1, [r0, #3]
 800988a:	1d03      	adds	r3, r0, #4
 800988c:	e7f1      	b.n	8009872 <__exponent+0x60>
	...

08009890 <_printf_float>:
 8009890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009894:	b091      	sub	sp, #68	; 0x44
 8009896:	460c      	mov	r4, r1
 8009898:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800989c:	4616      	mov	r6, r2
 800989e:	461f      	mov	r7, r3
 80098a0:	4605      	mov	r5, r0
 80098a2:	f002 fdcb 	bl	800c43c <_localeconv_r>
 80098a6:	6803      	ldr	r3, [r0, #0]
 80098a8:	4618      	mov	r0, r3
 80098aa:	9309      	str	r3, [sp, #36]	; 0x24
 80098ac:	f7f6 fcbc 	bl	8000228 <strlen>
 80098b0:	2300      	movs	r3, #0
 80098b2:	930e      	str	r3, [sp, #56]	; 0x38
 80098b4:	f8d8 3000 	ldr.w	r3, [r8]
 80098b8:	900a      	str	r0, [sp, #40]	; 0x28
 80098ba:	3307      	adds	r3, #7
 80098bc:	f023 0307 	bic.w	r3, r3, #7
 80098c0:	f103 0208 	add.w	r2, r3, #8
 80098c4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80098c8:	f8d4 b000 	ldr.w	fp, [r4]
 80098cc:	f8c8 2000 	str.w	r2, [r8]
 80098d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80098d8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80098dc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80098e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80098e2:	f04f 32ff 	mov.w	r2, #4294967295
 80098e6:	4640      	mov	r0, r8
 80098e8:	4b9c      	ldr	r3, [pc, #624]	; (8009b5c <_printf_float+0x2cc>)
 80098ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80098ec:	f7f7 f8fa 	bl	8000ae4 <__aeabi_dcmpun>
 80098f0:	bb70      	cbnz	r0, 8009950 <_printf_float+0xc0>
 80098f2:	f04f 32ff 	mov.w	r2, #4294967295
 80098f6:	4640      	mov	r0, r8
 80098f8:	4b98      	ldr	r3, [pc, #608]	; (8009b5c <_printf_float+0x2cc>)
 80098fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80098fc:	f7f7 f8d4 	bl	8000aa8 <__aeabi_dcmple>
 8009900:	bb30      	cbnz	r0, 8009950 <_printf_float+0xc0>
 8009902:	2200      	movs	r2, #0
 8009904:	2300      	movs	r3, #0
 8009906:	4640      	mov	r0, r8
 8009908:	4651      	mov	r1, sl
 800990a:	f7f7 f8c3 	bl	8000a94 <__aeabi_dcmplt>
 800990e:	b110      	cbz	r0, 8009916 <_printf_float+0x86>
 8009910:	232d      	movs	r3, #45	; 0x2d
 8009912:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009916:	4b92      	ldr	r3, [pc, #584]	; (8009b60 <_printf_float+0x2d0>)
 8009918:	4892      	ldr	r0, [pc, #584]	; (8009b64 <_printf_float+0x2d4>)
 800991a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800991e:	bf94      	ite	ls
 8009920:	4698      	movls	r8, r3
 8009922:	4680      	movhi	r8, r0
 8009924:	2303      	movs	r3, #3
 8009926:	f04f 0a00 	mov.w	sl, #0
 800992a:	6123      	str	r3, [r4, #16]
 800992c:	f02b 0304 	bic.w	r3, fp, #4
 8009930:	6023      	str	r3, [r4, #0]
 8009932:	4633      	mov	r3, r6
 8009934:	4621      	mov	r1, r4
 8009936:	4628      	mov	r0, r5
 8009938:	9700      	str	r7, [sp, #0]
 800993a:	aa0f      	add	r2, sp, #60	; 0x3c
 800993c:	f000 f9d4 	bl	8009ce8 <_printf_common>
 8009940:	3001      	adds	r0, #1
 8009942:	f040 8090 	bne.w	8009a66 <_printf_float+0x1d6>
 8009946:	f04f 30ff 	mov.w	r0, #4294967295
 800994a:	b011      	add	sp, #68	; 0x44
 800994c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009950:	4642      	mov	r2, r8
 8009952:	4653      	mov	r3, sl
 8009954:	4640      	mov	r0, r8
 8009956:	4651      	mov	r1, sl
 8009958:	f7f7 f8c4 	bl	8000ae4 <__aeabi_dcmpun>
 800995c:	b148      	cbz	r0, 8009972 <_printf_float+0xe2>
 800995e:	f1ba 0f00 	cmp.w	sl, #0
 8009962:	bfb8      	it	lt
 8009964:	232d      	movlt	r3, #45	; 0x2d
 8009966:	4880      	ldr	r0, [pc, #512]	; (8009b68 <_printf_float+0x2d8>)
 8009968:	bfb8      	it	lt
 800996a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800996e:	4b7f      	ldr	r3, [pc, #508]	; (8009b6c <_printf_float+0x2dc>)
 8009970:	e7d3      	b.n	800991a <_printf_float+0x8a>
 8009972:	6863      	ldr	r3, [r4, #4]
 8009974:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009978:	1c5a      	adds	r2, r3, #1
 800997a:	d142      	bne.n	8009a02 <_printf_float+0x172>
 800997c:	2306      	movs	r3, #6
 800997e:	6063      	str	r3, [r4, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	9206      	str	r2, [sp, #24]
 8009984:	aa0e      	add	r2, sp, #56	; 0x38
 8009986:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800998a:	aa0d      	add	r2, sp, #52	; 0x34
 800998c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009990:	9203      	str	r2, [sp, #12]
 8009992:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009996:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800999a:	6023      	str	r3, [r4, #0]
 800999c:	6863      	ldr	r3, [r4, #4]
 800999e:	4642      	mov	r2, r8
 80099a0:	9300      	str	r3, [sp, #0]
 80099a2:	4628      	mov	r0, r5
 80099a4:	4653      	mov	r3, sl
 80099a6:	910b      	str	r1, [sp, #44]	; 0x2c
 80099a8:	f7ff fed4 	bl	8009754 <__cvt>
 80099ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80099ae:	4680      	mov	r8, r0
 80099b0:	2947      	cmp	r1, #71	; 0x47
 80099b2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80099b4:	d108      	bne.n	80099c8 <_printf_float+0x138>
 80099b6:	1cc8      	adds	r0, r1, #3
 80099b8:	db02      	blt.n	80099c0 <_printf_float+0x130>
 80099ba:	6863      	ldr	r3, [r4, #4]
 80099bc:	4299      	cmp	r1, r3
 80099be:	dd40      	ble.n	8009a42 <_printf_float+0x1b2>
 80099c0:	f1a9 0902 	sub.w	r9, r9, #2
 80099c4:	fa5f f989 	uxtb.w	r9, r9
 80099c8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80099cc:	d81f      	bhi.n	8009a0e <_printf_float+0x17e>
 80099ce:	464a      	mov	r2, r9
 80099d0:	3901      	subs	r1, #1
 80099d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80099d6:	910d      	str	r1, [sp, #52]	; 0x34
 80099d8:	f7ff ff1b 	bl	8009812 <__exponent>
 80099dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099de:	4682      	mov	sl, r0
 80099e0:	1813      	adds	r3, r2, r0
 80099e2:	2a01      	cmp	r2, #1
 80099e4:	6123      	str	r3, [r4, #16]
 80099e6:	dc02      	bgt.n	80099ee <_printf_float+0x15e>
 80099e8:	6822      	ldr	r2, [r4, #0]
 80099ea:	07d2      	lsls	r2, r2, #31
 80099ec:	d501      	bpl.n	80099f2 <_printf_float+0x162>
 80099ee:	3301      	adds	r3, #1
 80099f0:	6123      	str	r3, [r4, #16]
 80099f2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d09b      	beq.n	8009932 <_printf_float+0xa2>
 80099fa:	232d      	movs	r3, #45	; 0x2d
 80099fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a00:	e797      	b.n	8009932 <_printf_float+0xa2>
 8009a02:	2947      	cmp	r1, #71	; 0x47
 8009a04:	d1bc      	bne.n	8009980 <_printf_float+0xf0>
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d1ba      	bne.n	8009980 <_printf_float+0xf0>
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e7b7      	b.n	800997e <_printf_float+0xee>
 8009a0e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009a12:	d118      	bne.n	8009a46 <_printf_float+0x1b6>
 8009a14:	2900      	cmp	r1, #0
 8009a16:	6863      	ldr	r3, [r4, #4]
 8009a18:	dd0b      	ble.n	8009a32 <_printf_float+0x1a2>
 8009a1a:	6121      	str	r1, [r4, #16]
 8009a1c:	b913      	cbnz	r3, 8009a24 <_printf_float+0x194>
 8009a1e:	6822      	ldr	r2, [r4, #0]
 8009a20:	07d0      	lsls	r0, r2, #31
 8009a22:	d502      	bpl.n	8009a2a <_printf_float+0x19a>
 8009a24:	3301      	adds	r3, #1
 8009a26:	440b      	add	r3, r1
 8009a28:	6123      	str	r3, [r4, #16]
 8009a2a:	f04f 0a00 	mov.w	sl, #0
 8009a2e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009a30:	e7df      	b.n	80099f2 <_printf_float+0x162>
 8009a32:	b913      	cbnz	r3, 8009a3a <_printf_float+0x1aa>
 8009a34:	6822      	ldr	r2, [r4, #0]
 8009a36:	07d2      	lsls	r2, r2, #31
 8009a38:	d501      	bpl.n	8009a3e <_printf_float+0x1ae>
 8009a3a:	3302      	adds	r3, #2
 8009a3c:	e7f4      	b.n	8009a28 <_printf_float+0x198>
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e7f2      	b.n	8009a28 <_printf_float+0x198>
 8009a42:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009a46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a48:	4299      	cmp	r1, r3
 8009a4a:	db05      	blt.n	8009a58 <_printf_float+0x1c8>
 8009a4c:	6823      	ldr	r3, [r4, #0]
 8009a4e:	6121      	str	r1, [r4, #16]
 8009a50:	07d8      	lsls	r0, r3, #31
 8009a52:	d5ea      	bpl.n	8009a2a <_printf_float+0x19a>
 8009a54:	1c4b      	adds	r3, r1, #1
 8009a56:	e7e7      	b.n	8009a28 <_printf_float+0x198>
 8009a58:	2900      	cmp	r1, #0
 8009a5a:	bfcc      	ite	gt
 8009a5c:	2201      	movgt	r2, #1
 8009a5e:	f1c1 0202 	rsble	r2, r1, #2
 8009a62:	4413      	add	r3, r2
 8009a64:	e7e0      	b.n	8009a28 <_printf_float+0x198>
 8009a66:	6823      	ldr	r3, [r4, #0]
 8009a68:	055a      	lsls	r2, r3, #21
 8009a6a:	d407      	bmi.n	8009a7c <_printf_float+0x1ec>
 8009a6c:	6923      	ldr	r3, [r4, #16]
 8009a6e:	4642      	mov	r2, r8
 8009a70:	4631      	mov	r1, r6
 8009a72:	4628      	mov	r0, r5
 8009a74:	47b8      	blx	r7
 8009a76:	3001      	adds	r0, #1
 8009a78:	d12b      	bne.n	8009ad2 <_printf_float+0x242>
 8009a7a:	e764      	b.n	8009946 <_printf_float+0xb6>
 8009a7c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009a80:	f240 80dd 	bls.w	8009c3e <_printf_float+0x3ae>
 8009a84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a88:	2200      	movs	r2, #0
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	f7f6 fff8 	bl	8000a80 <__aeabi_dcmpeq>
 8009a90:	2800      	cmp	r0, #0
 8009a92:	d033      	beq.n	8009afc <_printf_float+0x26c>
 8009a94:	2301      	movs	r3, #1
 8009a96:	4631      	mov	r1, r6
 8009a98:	4628      	mov	r0, r5
 8009a9a:	4a35      	ldr	r2, [pc, #212]	; (8009b70 <_printf_float+0x2e0>)
 8009a9c:	47b8      	blx	r7
 8009a9e:	3001      	adds	r0, #1
 8009aa0:	f43f af51 	beq.w	8009946 <_printf_float+0xb6>
 8009aa4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	db02      	blt.n	8009ab2 <_printf_float+0x222>
 8009aac:	6823      	ldr	r3, [r4, #0]
 8009aae:	07d8      	lsls	r0, r3, #31
 8009ab0:	d50f      	bpl.n	8009ad2 <_printf_float+0x242>
 8009ab2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ab6:	4631      	mov	r1, r6
 8009ab8:	4628      	mov	r0, r5
 8009aba:	47b8      	blx	r7
 8009abc:	3001      	adds	r0, #1
 8009abe:	f43f af42 	beq.w	8009946 <_printf_float+0xb6>
 8009ac2:	f04f 0800 	mov.w	r8, #0
 8009ac6:	f104 091a 	add.w	r9, r4, #26
 8009aca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009acc:	3b01      	subs	r3, #1
 8009ace:	4543      	cmp	r3, r8
 8009ad0:	dc09      	bgt.n	8009ae6 <_printf_float+0x256>
 8009ad2:	6823      	ldr	r3, [r4, #0]
 8009ad4:	079b      	lsls	r3, r3, #30
 8009ad6:	f100 8102 	bmi.w	8009cde <_printf_float+0x44e>
 8009ada:	68e0      	ldr	r0, [r4, #12]
 8009adc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ade:	4298      	cmp	r0, r3
 8009ae0:	bfb8      	it	lt
 8009ae2:	4618      	movlt	r0, r3
 8009ae4:	e731      	b.n	800994a <_printf_float+0xba>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	464a      	mov	r2, r9
 8009aea:	4631      	mov	r1, r6
 8009aec:	4628      	mov	r0, r5
 8009aee:	47b8      	blx	r7
 8009af0:	3001      	adds	r0, #1
 8009af2:	f43f af28 	beq.w	8009946 <_printf_float+0xb6>
 8009af6:	f108 0801 	add.w	r8, r8, #1
 8009afa:	e7e6      	b.n	8009aca <_printf_float+0x23a>
 8009afc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	dc38      	bgt.n	8009b74 <_printf_float+0x2e4>
 8009b02:	2301      	movs	r3, #1
 8009b04:	4631      	mov	r1, r6
 8009b06:	4628      	mov	r0, r5
 8009b08:	4a19      	ldr	r2, [pc, #100]	; (8009b70 <_printf_float+0x2e0>)
 8009b0a:	47b8      	blx	r7
 8009b0c:	3001      	adds	r0, #1
 8009b0e:	f43f af1a 	beq.w	8009946 <_printf_float+0xb6>
 8009b12:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009b16:	4313      	orrs	r3, r2
 8009b18:	d102      	bne.n	8009b20 <_printf_float+0x290>
 8009b1a:	6823      	ldr	r3, [r4, #0]
 8009b1c:	07d9      	lsls	r1, r3, #31
 8009b1e:	d5d8      	bpl.n	8009ad2 <_printf_float+0x242>
 8009b20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b24:	4631      	mov	r1, r6
 8009b26:	4628      	mov	r0, r5
 8009b28:	47b8      	blx	r7
 8009b2a:	3001      	adds	r0, #1
 8009b2c:	f43f af0b 	beq.w	8009946 <_printf_float+0xb6>
 8009b30:	f04f 0900 	mov.w	r9, #0
 8009b34:	f104 0a1a 	add.w	sl, r4, #26
 8009b38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b3a:	425b      	negs	r3, r3
 8009b3c:	454b      	cmp	r3, r9
 8009b3e:	dc01      	bgt.n	8009b44 <_printf_float+0x2b4>
 8009b40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b42:	e794      	b.n	8009a6e <_printf_float+0x1de>
 8009b44:	2301      	movs	r3, #1
 8009b46:	4652      	mov	r2, sl
 8009b48:	4631      	mov	r1, r6
 8009b4a:	4628      	mov	r0, r5
 8009b4c:	47b8      	blx	r7
 8009b4e:	3001      	adds	r0, #1
 8009b50:	f43f aef9 	beq.w	8009946 <_printf_float+0xb6>
 8009b54:	f109 0901 	add.w	r9, r9, #1
 8009b58:	e7ee      	b.n	8009b38 <_printf_float+0x2a8>
 8009b5a:	bf00      	nop
 8009b5c:	7fefffff 	.word	0x7fefffff
 8009b60:	0801ab44 	.word	0x0801ab44
 8009b64:	0801ab48 	.word	0x0801ab48
 8009b68:	0801ab50 	.word	0x0801ab50
 8009b6c:	0801ab4c 	.word	0x0801ab4c
 8009b70:	0801ab54 	.word	0x0801ab54
 8009b74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	bfa8      	it	ge
 8009b7c:	461a      	movge	r2, r3
 8009b7e:	2a00      	cmp	r2, #0
 8009b80:	4691      	mov	r9, r2
 8009b82:	dc37      	bgt.n	8009bf4 <_printf_float+0x364>
 8009b84:	f04f 0b00 	mov.w	fp, #0
 8009b88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b8c:	f104 021a 	add.w	r2, r4, #26
 8009b90:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009b94:	ebaa 0309 	sub.w	r3, sl, r9
 8009b98:	455b      	cmp	r3, fp
 8009b9a:	dc33      	bgt.n	8009c04 <_printf_float+0x374>
 8009b9c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	db3b      	blt.n	8009c1c <_printf_float+0x38c>
 8009ba4:	6823      	ldr	r3, [r4, #0]
 8009ba6:	07da      	lsls	r2, r3, #31
 8009ba8:	d438      	bmi.n	8009c1c <_printf_float+0x38c>
 8009baa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bac:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009bae:	eba2 030a 	sub.w	r3, r2, sl
 8009bb2:	eba2 0901 	sub.w	r9, r2, r1
 8009bb6:	4599      	cmp	r9, r3
 8009bb8:	bfa8      	it	ge
 8009bba:	4699      	movge	r9, r3
 8009bbc:	f1b9 0f00 	cmp.w	r9, #0
 8009bc0:	dc34      	bgt.n	8009c2c <_printf_float+0x39c>
 8009bc2:	f04f 0800 	mov.w	r8, #0
 8009bc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bca:	f104 0a1a 	add.w	sl, r4, #26
 8009bce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009bd2:	1a9b      	subs	r3, r3, r2
 8009bd4:	eba3 0309 	sub.w	r3, r3, r9
 8009bd8:	4543      	cmp	r3, r8
 8009bda:	f77f af7a 	ble.w	8009ad2 <_printf_float+0x242>
 8009bde:	2301      	movs	r3, #1
 8009be0:	4652      	mov	r2, sl
 8009be2:	4631      	mov	r1, r6
 8009be4:	4628      	mov	r0, r5
 8009be6:	47b8      	blx	r7
 8009be8:	3001      	adds	r0, #1
 8009bea:	f43f aeac 	beq.w	8009946 <_printf_float+0xb6>
 8009bee:	f108 0801 	add.w	r8, r8, #1
 8009bf2:	e7ec      	b.n	8009bce <_printf_float+0x33e>
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	4631      	mov	r1, r6
 8009bf8:	4642      	mov	r2, r8
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	47b8      	blx	r7
 8009bfe:	3001      	adds	r0, #1
 8009c00:	d1c0      	bne.n	8009b84 <_printf_float+0x2f4>
 8009c02:	e6a0      	b.n	8009946 <_printf_float+0xb6>
 8009c04:	2301      	movs	r3, #1
 8009c06:	4631      	mov	r1, r6
 8009c08:	4628      	mov	r0, r5
 8009c0a:	920b      	str	r2, [sp, #44]	; 0x2c
 8009c0c:	47b8      	blx	r7
 8009c0e:	3001      	adds	r0, #1
 8009c10:	f43f ae99 	beq.w	8009946 <_printf_float+0xb6>
 8009c14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c16:	f10b 0b01 	add.w	fp, fp, #1
 8009c1a:	e7b9      	b.n	8009b90 <_printf_float+0x300>
 8009c1c:	4631      	mov	r1, r6
 8009c1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c22:	4628      	mov	r0, r5
 8009c24:	47b8      	blx	r7
 8009c26:	3001      	adds	r0, #1
 8009c28:	d1bf      	bne.n	8009baa <_printf_float+0x31a>
 8009c2a:	e68c      	b.n	8009946 <_printf_float+0xb6>
 8009c2c:	464b      	mov	r3, r9
 8009c2e:	4631      	mov	r1, r6
 8009c30:	4628      	mov	r0, r5
 8009c32:	eb08 020a 	add.w	r2, r8, sl
 8009c36:	47b8      	blx	r7
 8009c38:	3001      	adds	r0, #1
 8009c3a:	d1c2      	bne.n	8009bc2 <_printf_float+0x332>
 8009c3c:	e683      	b.n	8009946 <_printf_float+0xb6>
 8009c3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c40:	2a01      	cmp	r2, #1
 8009c42:	dc01      	bgt.n	8009c48 <_printf_float+0x3b8>
 8009c44:	07db      	lsls	r3, r3, #31
 8009c46:	d537      	bpl.n	8009cb8 <_printf_float+0x428>
 8009c48:	2301      	movs	r3, #1
 8009c4a:	4642      	mov	r2, r8
 8009c4c:	4631      	mov	r1, r6
 8009c4e:	4628      	mov	r0, r5
 8009c50:	47b8      	blx	r7
 8009c52:	3001      	adds	r0, #1
 8009c54:	f43f ae77 	beq.w	8009946 <_printf_float+0xb6>
 8009c58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c5c:	4631      	mov	r1, r6
 8009c5e:	4628      	mov	r0, r5
 8009c60:	47b8      	blx	r7
 8009c62:	3001      	adds	r0, #1
 8009c64:	f43f ae6f 	beq.w	8009946 <_printf_float+0xb6>
 8009c68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	2300      	movs	r3, #0
 8009c70:	f7f6 ff06 	bl	8000a80 <__aeabi_dcmpeq>
 8009c74:	b9d8      	cbnz	r0, 8009cae <_printf_float+0x41e>
 8009c76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c78:	f108 0201 	add.w	r2, r8, #1
 8009c7c:	3b01      	subs	r3, #1
 8009c7e:	4631      	mov	r1, r6
 8009c80:	4628      	mov	r0, r5
 8009c82:	47b8      	blx	r7
 8009c84:	3001      	adds	r0, #1
 8009c86:	d10e      	bne.n	8009ca6 <_printf_float+0x416>
 8009c88:	e65d      	b.n	8009946 <_printf_float+0xb6>
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	464a      	mov	r2, r9
 8009c8e:	4631      	mov	r1, r6
 8009c90:	4628      	mov	r0, r5
 8009c92:	47b8      	blx	r7
 8009c94:	3001      	adds	r0, #1
 8009c96:	f43f ae56 	beq.w	8009946 <_printf_float+0xb6>
 8009c9a:	f108 0801 	add.w	r8, r8, #1
 8009c9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ca0:	3b01      	subs	r3, #1
 8009ca2:	4543      	cmp	r3, r8
 8009ca4:	dcf1      	bgt.n	8009c8a <_printf_float+0x3fa>
 8009ca6:	4653      	mov	r3, sl
 8009ca8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009cac:	e6e0      	b.n	8009a70 <_printf_float+0x1e0>
 8009cae:	f04f 0800 	mov.w	r8, #0
 8009cb2:	f104 091a 	add.w	r9, r4, #26
 8009cb6:	e7f2      	b.n	8009c9e <_printf_float+0x40e>
 8009cb8:	2301      	movs	r3, #1
 8009cba:	4642      	mov	r2, r8
 8009cbc:	e7df      	b.n	8009c7e <_printf_float+0x3ee>
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	464a      	mov	r2, r9
 8009cc2:	4631      	mov	r1, r6
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	47b8      	blx	r7
 8009cc8:	3001      	adds	r0, #1
 8009cca:	f43f ae3c 	beq.w	8009946 <_printf_float+0xb6>
 8009cce:	f108 0801 	add.w	r8, r8, #1
 8009cd2:	68e3      	ldr	r3, [r4, #12]
 8009cd4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009cd6:	1a5b      	subs	r3, r3, r1
 8009cd8:	4543      	cmp	r3, r8
 8009cda:	dcf0      	bgt.n	8009cbe <_printf_float+0x42e>
 8009cdc:	e6fd      	b.n	8009ada <_printf_float+0x24a>
 8009cde:	f04f 0800 	mov.w	r8, #0
 8009ce2:	f104 0919 	add.w	r9, r4, #25
 8009ce6:	e7f4      	b.n	8009cd2 <_printf_float+0x442>

08009ce8 <_printf_common>:
 8009ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cec:	4616      	mov	r6, r2
 8009cee:	4699      	mov	r9, r3
 8009cf0:	688a      	ldr	r2, [r1, #8]
 8009cf2:	690b      	ldr	r3, [r1, #16]
 8009cf4:	4607      	mov	r7, r0
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	bfb8      	it	lt
 8009cfa:	4613      	movlt	r3, r2
 8009cfc:	6033      	str	r3, [r6, #0]
 8009cfe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d02:	460c      	mov	r4, r1
 8009d04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d08:	b10a      	cbz	r2, 8009d0e <_printf_common+0x26>
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	6033      	str	r3, [r6, #0]
 8009d0e:	6823      	ldr	r3, [r4, #0]
 8009d10:	0699      	lsls	r1, r3, #26
 8009d12:	bf42      	ittt	mi
 8009d14:	6833      	ldrmi	r3, [r6, #0]
 8009d16:	3302      	addmi	r3, #2
 8009d18:	6033      	strmi	r3, [r6, #0]
 8009d1a:	6825      	ldr	r5, [r4, #0]
 8009d1c:	f015 0506 	ands.w	r5, r5, #6
 8009d20:	d106      	bne.n	8009d30 <_printf_common+0x48>
 8009d22:	f104 0a19 	add.w	sl, r4, #25
 8009d26:	68e3      	ldr	r3, [r4, #12]
 8009d28:	6832      	ldr	r2, [r6, #0]
 8009d2a:	1a9b      	subs	r3, r3, r2
 8009d2c:	42ab      	cmp	r3, r5
 8009d2e:	dc28      	bgt.n	8009d82 <_printf_common+0x9a>
 8009d30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d34:	1e13      	subs	r3, r2, #0
 8009d36:	6822      	ldr	r2, [r4, #0]
 8009d38:	bf18      	it	ne
 8009d3a:	2301      	movne	r3, #1
 8009d3c:	0692      	lsls	r2, r2, #26
 8009d3e:	d42d      	bmi.n	8009d9c <_printf_common+0xb4>
 8009d40:	4649      	mov	r1, r9
 8009d42:	4638      	mov	r0, r7
 8009d44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d48:	47c0      	blx	r8
 8009d4a:	3001      	adds	r0, #1
 8009d4c:	d020      	beq.n	8009d90 <_printf_common+0xa8>
 8009d4e:	6823      	ldr	r3, [r4, #0]
 8009d50:	68e5      	ldr	r5, [r4, #12]
 8009d52:	f003 0306 	and.w	r3, r3, #6
 8009d56:	2b04      	cmp	r3, #4
 8009d58:	bf18      	it	ne
 8009d5a:	2500      	movne	r5, #0
 8009d5c:	6832      	ldr	r2, [r6, #0]
 8009d5e:	f04f 0600 	mov.w	r6, #0
 8009d62:	68a3      	ldr	r3, [r4, #8]
 8009d64:	bf08      	it	eq
 8009d66:	1aad      	subeq	r5, r5, r2
 8009d68:	6922      	ldr	r2, [r4, #16]
 8009d6a:	bf08      	it	eq
 8009d6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d70:	4293      	cmp	r3, r2
 8009d72:	bfc4      	itt	gt
 8009d74:	1a9b      	subgt	r3, r3, r2
 8009d76:	18ed      	addgt	r5, r5, r3
 8009d78:	341a      	adds	r4, #26
 8009d7a:	42b5      	cmp	r5, r6
 8009d7c:	d11a      	bne.n	8009db4 <_printf_common+0xcc>
 8009d7e:	2000      	movs	r0, #0
 8009d80:	e008      	b.n	8009d94 <_printf_common+0xac>
 8009d82:	2301      	movs	r3, #1
 8009d84:	4652      	mov	r2, sl
 8009d86:	4649      	mov	r1, r9
 8009d88:	4638      	mov	r0, r7
 8009d8a:	47c0      	blx	r8
 8009d8c:	3001      	adds	r0, #1
 8009d8e:	d103      	bne.n	8009d98 <_printf_common+0xb0>
 8009d90:	f04f 30ff 	mov.w	r0, #4294967295
 8009d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d98:	3501      	adds	r5, #1
 8009d9a:	e7c4      	b.n	8009d26 <_printf_common+0x3e>
 8009d9c:	2030      	movs	r0, #48	; 0x30
 8009d9e:	18e1      	adds	r1, r4, r3
 8009da0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009da4:	1c5a      	adds	r2, r3, #1
 8009da6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009daa:	4422      	add	r2, r4
 8009dac:	3302      	adds	r3, #2
 8009dae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009db2:	e7c5      	b.n	8009d40 <_printf_common+0x58>
 8009db4:	2301      	movs	r3, #1
 8009db6:	4622      	mov	r2, r4
 8009db8:	4649      	mov	r1, r9
 8009dba:	4638      	mov	r0, r7
 8009dbc:	47c0      	blx	r8
 8009dbe:	3001      	adds	r0, #1
 8009dc0:	d0e6      	beq.n	8009d90 <_printf_common+0xa8>
 8009dc2:	3601      	adds	r6, #1
 8009dc4:	e7d9      	b.n	8009d7a <_printf_common+0x92>
	...

08009dc8 <_printf_i>:
 8009dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009dcc:	460c      	mov	r4, r1
 8009dce:	7e27      	ldrb	r7, [r4, #24]
 8009dd0:	4691      	mov	r9, r2
 8009dd2:	2f78      	cmp	r7, #120	; 0x78
 8009dd4:	4680      	mov	r8, r0
 8009dd6:	469a      	mov	sl, r3
 8009dd8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009dda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009dde:	d807      	bhi.n	8009df0 <_printf_i+0x28>
 8009de0:	2f62      	cmp	r7, #98	; 0x62
 8009de2:	d80a      	bhi.n	8009dfa <_printf_i+0x32>
 8009de4:	2f00      	cmp	r7, #0
 8009de6:	f000 80d9 	beq.w	8009f9c <_printf_i+0x1d4>
 8009dea:	2f58      	cmp	r7, #88	; 0x58
 8009dec:	f000 80a4 	beq.w	8009f38 <_printf_i+0x170>
 8009df0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009df4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009df8:	e03a      	b.n	8009e70 <_printf_i+0xa8>
 8009dfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009dfe:	2b15      	cmp	r3, #21
 8009e00:	d8f6      	bhi.n	8009df0 <_printf_i+0x28>
 8009e02:	a001      	add	r0, pc, #4	; (adr r0, 8009e08 <_printf_i+0x40>)
 8009e04:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009e08:	08009e61 	.word	0x08009e61
 8009e0c:	08009e75 	.word	0x08009e75
 8009e10:	08009df1 	.word	0x08009df1
 8009e14:	08009df1 	.word	0x08009df1
 8009e18:	08009df1 	.word	0x08009df1
 8009e1c:	08009df1 	.word	0x08009df1
 8009e20:	08009e75 	.word	0x08009e75
 8009e24:	08009df1 	.word	0x08009df1
 8009e28:	08009df1 	.word	0x08009df1
 8009e2c:	08009df1 	.word	0x08009df1
 8009e30:	08009df1 	.word	0x08009df1
 8009e34:	08009f83 	.word	0x08009f83
 8009e38:	08009ea5 	.word	0x08009ea5
 8009e3c:	08009f65 	.word	0x08009f65
 8009e40:	08009df1 	.word	0x08009df1
 8009e44:	08009df1 	.word	0x08009df1
 8009e48:	08009fa5 	.word	0x08009fa5
 8009e4c:	08009df1 	.word	0x08009df1
 8009e50:	08009ea5 	.word	0x08009ea5
 8009e54:	08009df1 	.word	0x08009df1
 8009e58:	08009df1 	.word	0x08009df1
 8009e5c:	08009f6d 	.word	0x08009f6d
 8009e60:	680b      	ldr	r3, [r1, #0]
 8009e62:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009e66:	1d1a      	adds	r2, r3, #4
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	600a      	str	r2, [r1, #0]
 8009e6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e70:	2301      	movs	r3, #1
 8009e72:	e0a4      	b.n	8009fbe <_printf_i+0x1f6>
 8009e74:	6825      	ldr	r5, [r4, #0]
 8009e76:	6808      	ldr	r0, [r1, #0]
 8009e78:	062e      	lsls	r6, r5, #24
 8009e7a:	f100 0304 	add.w	r3, r0, #4
 8009e7e:	d50a      	bpl.n	8009e96 <_printf_i+0xce>
 8009e80:	6805      	ldr	r5, [r0, #0]
 8009e82:	600b      	str	r3, [r1, #0]
 8009e84:	2d00      	cmp	r5, #0
 8009e86:	da03      	bge.n	8009e90 <_printf_i+0xc8>
 8009e88:	232d      	movs	r3, #45	; 0x2d
 8009e8a:	426d      	negs	r5, r5
 8009e8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e90:	230a      	movs	r3, #10
 8009e92:	485e      	ldr	r0, [pc, #376]	; (800a00c <_printf_i+0x244>)
 8009e94:	e019      	b.n	8009eca <_printf_i+0x102>
 8009e96:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009e9a:	6805      	ldr	r5, [r0, #0]
 8009e9c:	600b      	str	r3, [r1, #0]
 8009e9e:	bf18      	it	ne
 8009ea0:	b22d      	sxthne	r5, r5
 8009ea2:	e7ef      	b.n	8009e84 <_printf_i+0xbc>
 8009ea4:	680b      	ldr	r3, [r1, #0]
 8009ea6:	6825      	ldr	r5, [r4, #0]
 8009ea8:	1d18      	adds	r0, r3, #4
 8009eaa:	6008      	str	r0, [r1, #0]
 8009eac:	0628      	lsls	r0, r5, #24
 8009eae:	d501      	bpl.n	8009eb4 <_printf_i+0xec>
 8009eb0:	681d      	ldr	r5, [r3, #0]
 8009eb2:	e002      	b.n	8009eba <_printf_i+0xf2>
 8009eb4:	0669      	lsls	r1, r5, #25
 8009eb6:	d5fb      	bpl.n	8009eb0 <_printf_i+0xe8>
 8009eb8:	881d      	ldrh	r5, [r3, #0]
 8009eba:	2f6f      	cmp	r7, #111	; 0x6f
 8009ebc:	bf0c      	ite	eq
 8009ebe:	2308      	moveq	r3, #8
 8009ec0:	230a      	movne	r3, #10
 8009ec2:	4852      	ldr	r0, [pc, #328]	; (800a00c <_printf_i+0x244>)
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009eca:	6866      	ldr	r6, [r4, #4]
 8009ecc:	2e00      	cmp	r6, #0
 8009ece:	bfa8      	it	ge
 8009ed0:	6821      	ldrge	r1, [r4, #0]
 8009ed2:	60a6      	str	r6, [r4, #8]
 8009ed4:	bfa4      	itt	ge
 8009ed6:	f021 0104 	bicge.w	r1, r1, #4
 8009eda:	6021      	strge	r1, [r4, #0]
 8009edc:	b90d      	cbnz	r5, 8009ee2 <_printf_i+0x11a>
 8009ede:	2e00      	cmp	r6, #0
 8009ee0:	d04d      	beq.n	8009f7e <_printf_i+0x1b6>
 8009ee2:	4616      	mov	r6, r2
 8009ee4:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ee8:	fb03 5711 	mls	r7, r3, r1, r5
 8009eec:	5dc7      	ldrb	r7, [r0, r7]
 8009eee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009ef2:	462f      	mov	r7, r5
 8009ef4:	42bb      	cmp	r3, r7
 8009ef6:	460d      	mov	r5, r1
 8009ef8:	d9f4      	bls.n	8009ee4 <_printf_i+0x11c>
 8009efa:	2b08      	cmp	r3, #8
 8009efc:	d10b      	bne.n	8009f16 <_printf_i+0x14e>
 8009efe:	6823      	ldr	r3, [r4, #0]
 8009f00:	07df      	lsls	r7, r3, #31
 8009f02:	d508      	bpl.n	8009f16 <_printf_i+0x14e>
 8009f04:	6923      	ldr	r3, [r4, #16]
 8009f06:	6861      	ldr	r1, [r4, #4]
 8009f08:	4299      	cmp	r1, r3
 8009f0a:	bfde      	ittt	le
 8009f0c:	2330      	movle	r3, #48	; 0x30
 8009f0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009f12:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009f16:	1b92      	subs	r2, r2, r6
 8009f18:	6122      	str	r2, [r4, #16]
 8009f1a:	464b      	mov	r3, r9
 8009f1c:	4621      	mov	r1, r4
 8009f1e:	4640      	mov	r0, r8
 8009f20:	f8cd a000 	str.w	sl, [sp]
 8009f24:	aa03      	add	r2, sp, #12
 8009f26:	f7ff fedf 	bl	8009ce8 <_printf_common>
 8009f2a:	3001      	adds	r0, #1
 8009f2c:	d14c      	bne.n	8009fc8 <_printf_i+0x200>
 8009f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f32:	b004      	add	sp, #16
 8009f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f38:	4834      	ldr	r0, [pc, #208]	; (800a00c <_printf_i+0x244>)
 8009f3a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009f3e:	680e      	ldr	r6, [r1, #0]
 8009f40:	6823      	ldr	r3, [r4, #0]
 8009f42:	f856 5b04 	ldr.w	r5, [r6], #4
 8009f46:	061f      	lsls	r7, r3, #24
 8009f48:	600e      	str	r6, [r1, #0]
 8009f4a:	d514      	bpl.n	8009f76 <_printf_i+0x1ae>
 8009f4c:	07d9      	lsls	r1, r3, #31
 8009f4e:	bf44      	itt	mi
 8009f50:	f043 0320 	orrmi.w	r3, r3, #32
 8009f54:	6023      	strmi	r3, [r4, #0]
 8009f56:	b91d      	cbnz	r5, 8009f60 <_printf_i+0x198>
 8009f58:	6823      	ldr	r3, [r4, #0]
 8009f5a:	f023 0320 	bic.w	r3, r3, #32
 8009f5e:	6023      	str	r3, [r4, #0]
 8009f60:	2310      	movs	r3, #16
 8009f62:	e7af      	b.n	8009ec4 <_printf_i+0xfc>
 8009f64:	6823      	ldr	r3, [r4, #0]
 8009f66:	f043 0320 	orr.w	r3, r3, #32
 8009f6a:	6023      	str	r3, [r4, #0]
 8009f6c:	2378      	movs	r3, #120	; 0x78
 8009f6e:	4828      	ldr	r0, [pc, #160]	; (800a010 <_printf_i+0x248>)
 8009f70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f74:	e7e3      	b.n	8009f3e <_printf_i+0x176>
 8009f76:	065e      	lsls	r6, r3, #25
 8009f78:	bf48      	it	mi
 8009f7a:	b2ad      	uxthmi	r5, r5
 8009f7c:	e7e6      	b.n	8009f4c <_printf_i+0x184>
 8009f7e:	4616      	mov	r6, r2
 8009f80:	e7bb      	b.n	8009efa <_printf_i+0x132>
 8009f82:	680b      	ldr	r3, [r1, #0]
 8009f84:	6826      	ldr	r6, [r4, #0]
 8009f86:	1d1d      	adds	r5, r3, #4
 8009f88:	6960      	ldr	r0, [r4, #20]
 8009f8a:	600d      	str	r5, [r1, #0]
 8009f8c:	0635      	lsls	r5, r6, #24
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	d501      	bpl.n	8009f96 <_printf_i+0x1ce>
 8009f92:	6018      	str	r0, [r3, #0]
 8009f94:	e002      	b.n	8009f9c <_printf_i+0x1d4>
 8009f96:	0671      	lsls	r1, r6, #25
 8009f98:	d5fb      	bpl.n	8009f92 <_printf_i+0x1ca>
 8009f9a:	8018      	strh	r0, [r3, #0]
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	4616      	mov	r6, r2
 8009fa0:	6123      	str	r3, [r4, #16]
 8009fa2:	e7ba      	b.n	8009f1a <_printf_i+0x152>
 8009fa4:	680b      	ldr	r3, [r1, #0]
 8009fa6:	1d1a      	adds	r2, r3, #4
 8009fa8:	600a      	str	r2, [r1, #0]
 8009faa:	681e      	ldr	r6, [r3, #0]
 8009fac:	2100      	movs	r1, #0
 8009fae:	4630      	mov	r0, r6
 8009fb0:	6862      	ldr	r2, [r4, #4]
 8009fb2:	f002 fa65 	bl	800c480 <memchr>
 8009fb6:	b108      	cbz	r0, 8009fbc <_printf_i+0x1f4>
 8009fb8:	1b80      	subs	r0, r0, r6
 8009fba:	6060      	str	r0, [r4, #4]
 8009fbc:	6863      	ldr	r3, [r4, #4]
 8009fbe:	6123      	str	r3, [r4, #16]
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fc6:	e7a8      	b.n	8009f1a <_printf_i+0x152>
 8009fc8:	4632      	mov	r2, r6
 8009fca:	4649      	mov	r1, r9
 8009fcc:	4640      	mov	r0, r8
 8009fce:	6923      	ldr	r3, [r4, #16]
 8009fd0:	47d0      	blx	sl
 8009fd2:	3001      	adds	r0, #1
 8009fd4:	d0ab      	beq.n	8009f2e <_printf_i+0x166>
 8009fd6:	6823      	ldr	r3, [r4, #0]
 8009fd8:	079b      	lsls	r3, r3, #30
 8009fda:	d413      	bmi.n	800a004 <_printf_i+0x23c>
 8009fdc:	68e0      	ldr	r0, [r4, #12]
 8009fde:	9b03      	ldr	r3, [sp, #12]
 8009fe0:	4298      	cmp	r0, r3
 8009fe2:	bfb8      	it	lt
 8009fe4:	4618      	movlt	r0, r3
 8009fe6:	e7a4      	b.n	8009f32 <_printf_i+0x16a>
 8009fe8:	2301      	movs	r3, #1
 8009fea:	4632      	mov	r2, r6
 8009fec:	4649      	mov	r1, r9
 8009fee:	4640      	mov	r0, r8
 8009ff0:	47d0      	blx	sl
 8009ff2:	3001      	adds	r0, #1
 8009ff4:	d09b      	beq.n	8009f2e <_printf_i+0x166>
 8009ff6:	3501      	adds	r5, #1
 8009ff8:	68e3      	ldr	r3, [r4, #12]
 8009ffa:	9903      	ldr	r1, [sp, #12]
 8009ffc:	1a5b      	subs	r3, r3, r1
 8009ffe:	42ab      	cmp	r3, r5
 800a000:	dcf2      	bgt.n	8009fe8 <_printf_i+0x220>
 800a002:	e7eb      	b.n	8009fdc <_printf_i+0x214>
 800a004:	2500      	movs	r5, #0
 800a006:	f104 0619 	add.w	r6, r4, #25
 800a00a:	e7f5      	b.n	8009ff8 <_printf_i+0x230>
 800a00c:	0801ab56 	.word	0x0801ab56
 800a010:	0801ab67 	.word	0x0801ab67

0800a014 <iprintf>:
 800a014:	b40f      	push	{r0, r1, r2, r3}
 800a016:	4b0a      	ldr	r3, [pc, #40]	; (800a040 <iprintf+0x2c>)
 800a018:	b513      	push	{r0, r1, r4, lr}
 800a01a:	681c      	ldr	r4, [r3, #0]
 800a01c:	b124      	cbz	r4, 800a028 <iprintf+0x14>
 800a01e:	69a3      	ldr	r3, [r4, #24]
 800a020:	b913      	cbnz	r3, 800a028 <iprintf+0x14>
 800a022:	4620      	mov	r0, r4
 800a024:	f001 fe06 	bl	800bc34 <__sinit>
 800a028:	ab05      	add	r3, sp, #20
 800a02a:	4620      	mov	r0, r4
 800a02c:	9a04      	ldr	r2, [sp, #16]
 800a02e:	68a1      	ldr	r1, [r4, #8]
 800a030:	9301      	str	r3, [sp, #4]
 800a032:	f003 f931 	bl	800d298 <_vfiprintf_r>
 800a036:	b002      	add	sp, #8
 800a038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a03c:	b004      	add	sp, #16
 800a03e:	4770      	bx	lr
 800a040:	20000014 	.word	0x20000014

0800a044 <siprintf>:
 800a044:	b40e      	push	{r1, r2, r3}
 800a046:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a04a:	b500      	push	{lr}
 800a04c:	b09c      	sub	sp, #112	; 0x70
 800a04e:	ab1d      	add	r3, sp, #116	; 0x74
 800a050:	9002      	str	r0, [sp, #8]
 800a052:	9006      	str	r0, [sp, #24]
 800a054:	9107      	str	r1, [sp, #28]
 800a056:	9104      	str	r1, [sp, #16]
 800a058:	4808      	ldr	r0, [pc, #32]	; (800a07c <siprintf+0x38>)
 800a05a:	4909      	ldr	r1, [pc, #36]	; (800a080 <siprintf+0x3c>)
 800a05c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a060:	9105      	str	r1, [sp, #20]
 800a062:	6800      	ldr	r0, [r0, #0]
 800a064:	a902      	add	r1, sp, #8
 800a066:	9301      	str	r3, [sp, #4]
 800a068:	f002 ffee 	bl	800d048 <_svfiprintf_r>
 800a06c:	2200      	movs	r2, #0
 800a06e:	9b02      	ldr	r3, [sp, #8]
 800a070:	701a      	strb	r2, [r3, #0]
 800a072:	b01c      	add	sp, #112	; 0x70
 800a074:	f85d eb04 	ldr.w	lr, [sp], #4
 800a078:	b003      	add	sp, #12
 800a07a:	4770      	bx	lr
 800a07c:	20000014 	.word	0x20000014
 800a080:	ffff0208 	.word	0xffff0208

0800a084 <sulp>:
 800a084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a088:	460f      	mov	r7, r1
 800a08a:	4690      	mov	r8, r2
 800a08c:	f002 fd84 	bl	800cb98 <__ulp>
 800a090:	4604      	mov	r4, r0
 800a092:	460d      	mov	r5, r1
 800a094:	f1b8 0f00 	cmp.w	r8, #0
 800a098:	d011      	beq.n	800a0be <sulp+0x3a>
 800a09a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a09e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	dd0b      	ble.n	800a0be <sulp+0x3a>
 800a0a6:	2400      	movs	r4, #0
 800a0a8:	051b      	lsls	r3, r3, #20
 800a0aa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a0ae:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a0b2:	4622      	mov	r2, r4
 800a0b4:	462b      	mov	r3, r5
 800a0b6:	f7f6 fa7b 	bl	80005b0 <__aeabi_dmul>
 800a0ba:	4604      	mov	r4, r0
 800a0bc:	460d      	mov	r5, r1
 800a0be:	4620      	mov	r0, r4
 800a0c0:	4629      	mov	r1, r5
 800a0c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800a0c8 <_strtod_l>:
 800a0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0cc:	469b      	mov	fp, r3
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	b0a1      	sub	sp, #132	; 0x84
 800a0d2:	931c      	str	r3, [sp, #112]	; 0x70
 800a0d4:	4ba1      	ldr	r3, [pc, #644]	; (800a35c <_strtod_l+0x294>)
 800a0d6:	4682      	mov	sl, r0
 800a0d8:	681f      	ldr	r7, [r3, #0]
 800a0da:	460e      	mov	r6, r1
 800a0dc:	4638      	mov	r0, r7
 800a0de:	9217      	str	r2, [sp, #92]	; 0x5c
 800a0e0:	f7f6 f8a2 	bl	8000228 <strlen>
 800a0e4:	f04f 0800 	mov.w	r8, #0
 800a0e8:	4604      	mov	r4, r0
 800a0ea:	f04f 0900 	mov.w	r9, #0
 800a0ee:	961b      	str	r6, [sp, #108]	; 0x6c
 800a0f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a0f2:	781a      	ldrb	r2, [r3, #0]
 800a0f4:	2a2b      	cmp	r2, #43	; 0x2b
 800a0f6:	d04c      	beq.n	800a192 <_strtod_l+0xca>
 800a0f8:	d83a      	bhi.n	800a170 <_strtod_l+0xa8>
 800a0fa:	2a0d      	cmp	r2, #13
 800a0fc:	d833      	bhi.n	800a166 <_strtod_l+0x9e>
 800a0fe:	2a08      	cmp	r2, #8
 800a100:	d833      	bhi.n	800a16a <_strtod_l+0xa2>
 800a102:	2a00      	cmp	r2, #0
 800a104:	d03d      	beq.n	800a182 <_strtod_l+0xba>
 800a106:	2300      	movs	r3, #0
 800a108:	930c      	str	r3, [sp, #48]	; 0x30
 800a10a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a10c:	782b      	ldrb	r3, [r5, #0]
 800a10e:	2b30      	cmp	r3, #48	; 0x30
 800a110:	f040 80af 	bne.w	800a272 <_strtod_l+0x1aa>
 800a114:	786b      	ldrb	r3, [r5, #1]
 800a116:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a11a:	2b58      	cmp	r3, #88	; 0x58
 800a11c:	d16c      	bne.n	800a1f8 <_strtod_l+0x130>
 800a11e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a120:	4650      	mov	r0, sl
 800a122:	9301      	str	r3, [sp, #4]
 800a124:	ab1c      	add	r3, sp, #112	; 0x70
 800a126:	9300      	str	r3, [sp, #0]
 800a128:	4a8d      	ldr	r2, [pc, #564]	; (800a360 <_strtod_l+0x298>)
 800a12a:	f8cd b008 	str.w	fp, [sp, #8]
 800a12e:	ab1d      	add	r3, sp, #116	; 0x74
 800a130:	a91b      	add	r1, sp, #108	; 0x6c
 800a132:	f001 fe85 	bl	800be40 <__gethex>
 800a136:	f010 0607 	ands.w	r6, r0, #7
 800a13a:	4604      	mov	r4, r0
 800a13c:	d005      	beq.n	800a14a <_strtod_l+0x82>
 800a13e:	2e06      	cmp	r6, #6
 800a140:	d129      	bne.n	800a196 <_strtod_l+0xce>
 800a142:	2300      	movs	r3, #0
 800a144:	3501      	adds	r5, #1
 800a146:	951b      	str	r5, [sp, #108]	; 0x6c
 800a148:	930c      	str	r3, [sp, #48]	; 0x30
 800a14a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	f040 8596 	bne.w	800ac7e <_strtod_l+0xbb6>
 800a152:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a154:	b1d3      	cbz	r3, 800a18c <_strtod_l+0xc4>
 800a156:	4642      	mov	r2, r8
 800a158:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a15c:	4610      	mov	r0, r2
 800a15e:	4619      	mov	r1, r3
 800a160:	b021      	add	sp, #132	; 0x84
 800a162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a166:	2a20      	cmp	r2, #32
 800a168:	d1cd      	bne.n	800a106 <_strtod_l+0x3e>
 800a16a:	3301      	adds	r3, #1
 800a16c:	931b      	str	r3, [sp, #108]	; 0x6c
 800a16e:	e7bf      	b.n	800a0f0 <_strtod_l+0x28>
 800a170:	2a2d      	cmp	r2, #45	; 0x2d
 800a172:	d1c8      	bne.n	800a106 <_strtod_l+0x3e>
 800a174:	2201      	movs	r2, #1
 800a176:	920c      	str	r2, [sp, #48]	; 0x30
 800a178:	1c5a      	adds	r2, r3, #1
 800a17a:	921b      	str	r2, [sp, #108]	; 0x6c
 800a17c:	785b      	ldrb	r3, [r3, #1]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1c3      	bne.n	800a10a <_strtod_l+0x42>
 800a182:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a184:	961b      	str	r6, [sp, #108]	; 0x6c
 800a186:	2b00      	cmp	r3, #0
 800a188:	f040 8577 	bne.w	800ac7a <_strtod_l+0xbb2>
 800a18c:	4642      	mov	r2, r8
 800a18e:	464b      	mov	r3, r9
 800a190:	e7e4      	b.n	800a15c <_strtod_l+0x94>
 800a192:	2200      	movs	r2, #0
 800a194:	e7ef      	b.n	800a176 <_strtod_l+0xae>
 800a196:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a198:	b13a      	cbz	r2, 800a1aa <_strtod_l+0xe2>
 800a19a:	2135      	movs	r1, #53	; 0x35
 800a19c:	a81e      	add	r0, sp, #120	; 0x78
 800a19e:	f002 fdff 	bl	800cda0 <__copybits>
 800a1a2:	4650      	mov	r0, sl
 800a1a4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a1a6:	f002 f9c7 	bl	800c538 <_Bfree>
 800a1aa:	3e01      	subs	r6, #1
 800a1ac:	2e05      	cmp	r6, #5
 800a1ae:	d807      	bhi.n	800a1c0 <_strtod_l+0xf8>
 800a1b0:	e8df f006 	tbb	[pc, r6]
 800a1b4:	1d180b0e 	.word	0x1d180b0e
 800a1b8:	030e      	.short	0x030e
 800a1ba:	f04f 0900 	mov.w	r9, #0
 800a1be:	46c8      	mov	r8, r9
 800a1c0:	0721      	lsls	r1, r4, #28
 800a1c2:	d5c2      	bpl.n	800a14a <_strtod_l+0x82>
 800a1c4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800a1c8:	e7bf      	b.n	800a14a <_strtod_l+0x82>
 800a1ca:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800a1ce:	e7f7      	b.n	800a1c0 <_strtod_l+0xf8>
 800a1d0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a1d2:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800a1d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a1da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a1de:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a1e2:	e7ed      	b.n	800a1c0 <_strtod_l+0xf8>
 800a1e4:	f04f 0800 	mov.w	r8, #0
 800a1e8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a364 <_strtod_l+0x29c>
 800a1ec:	e7e8      	b.n	800a1c0 <_strtod_l+0xf8>
 800a1ee:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a1f2:	f04f 38ff 	mov.w	r8, #4294967295
 800a1f6:	e7e3      	b.n	800a1c0 <_strtod_l+0xf8>
 800a1f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a1fa:	1c5a      	adds	r2, r3, #1
 800a1fc:	921b      	str	r2, [sp, #108]	; 0x6c
 800a1fe:	785b      	ldrb	r3, [r3, #1]
 800a200:	2b30      	cmp	r3, #48	; 0x30
 800a202:	d0f9      	beq.n	800a1f8 <_strtod_l+0x130>
 800a204:	2b00      	cmp	r3, #0
 800a206:	d0a0      	beq.n	800a14a <_strtod_l+0x82>
 800a208:	2301      	movs	r3, #1
 800a20a:	9307      	str	r3, [sp, #28]
 800a20c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a20e:	220a      	movs	r2, #10
 800a210:	9308      	str	r3, [sp, #32]
 800a212:	2300      	movs	r3, #0
 800a214:	469b      	mov	fp, r3
 800a216:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800a21a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a21c:	7805      	ldrb	r5, [r0, #0]
 800a21e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800a222:	b2d9      	uxtb	r1, r3
 800a224:	2909      	cmp	r1, #9
 800a226:	d926      	bls.n	800a276 <_strtod_l+0x1ae>
 800a228:	4622      	mov	r2, r4
 800a22a:	4639      	mov	r1, r7
 800a22c:	f003 f9c1 	bl	800d5b2 <strncmp>
 800a230:	2800      	cmp	r0, #0
 800a232:	d032      	beq.n	800a29a <_strtod_l+0x1d2>
 800a234:	2000      	movs	r0, #0
 800a236:	462b      	mov	r3, r5
 800a238:	465c      	mov	r4, fp
 800a23a:	4602      	mov	r2, r0
 800a23c:	9004      	str	r0, [sp, #16]
 800a23e:	2b65      	cmp	r3, #101	; 0x65
 800a240:	d001      	beq.n	800a246 <_strtod_l+0x17e>
 800a242:	2b45      	cmp	r3, #69	; 0x45
 800a244:	d113      	bne.n	800a26e <_strtod_l+0x1a6>
 800a246:	b91c      	cbnz	r4, 800a250 <_strtod_l+0x188>
 800a248:	9b07      	ldr	r3, [sp, #28]
 800a24a:	4303      	orrs	r3, r0
 800a24c:	d099      	beq.n	800a182 <_strtod_l+0xba>
 800a24e:	2400      	movs	r4, #0
 800a250:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800a252:	1c73      	adds	r3, r6, #1
 800a254:	931b      	str	r3, [sp, #108]	; 0x6c
 800a256:	7873      	ldrb	r3, [r6, #1]
 800a258:	2b2b      	cmp	r3, #43	; 0x2b
 800a25a:	d078      	beq.n	800a34e <_strtod_l+0x286>
 800a25c:	2b2d      	cmp	r3, #45	; 0x2d
 800a25e:	d07b      	beq.n	800a358 <_strtod_l+0x290>
 800a260:	2700      	movs	r7, #0
 800a262:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a266:	2909      	cmp	r1, #9
 800a268:	f240 8082 	bls.w	800a370 <_strtod_l+0x2a8>
 800a26c:	961b      	str	r6, [sp, #108]	; 0x6c
 800a26e:	2500      	movs	r5, #0
 800a270:	e09e      	b.n	800a3b0 <_strtod_l+0x2e8>
 800a272:	2300      	movs	r3, #0
 800a274:	e7c9      	b.n	800a20a <_strtod_l+0x142>
 800a276:	f1bb 0f08 	cmp.w	fp, #8
 800a27a:	bfd5      	itete	le
 800a27c:	9906      	ldrle	r1, [sp, #24]
 800a27e:	9905      	ldrgt	r1, [sp, #20]
 800a280:	fb02 3301 	mlale	r3, r2, r1, r3
 800a284:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a288:	f100 0001 	add.w	r0, r0, #1
 800a28c:	bfd4      	ite	le
 800a28e:	9306      	strle	r3, [sp, #24]
 800a290:	9305      	strgt	r3, [sp, #20]
 800a292:	f10b 0b01 	add.w	fp, fp, #1
 800a296:	901b      	str	r0, [sp, #108]	; 0x6c
 800a298:	e7bf      	b.n	800a21a <_strtod_l+0x152>
 800a29a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a29c:	191a      	adds	r2, r3, r4
 800a29e:	921b      	str	r2, [sp, #108]	; 0x6c
 800a2a0:	5d1b      	ldrb	r3, [r3, r4]
 800a2a2:	f1bb 0f00 	cmp.w	fp, #0
 800a2a6:	d036      	beq.n	800a316 <_strtod_l+0x24e>
 800a2a8:	465c      	mov	r4, fp
 800a2aa:	9004      	str	r0, [sp, #16]
 800a2ac:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800a2b0:	2a09      	cmp	r2, #9
 800a2b2:	d912      	bls.n	800a2da <_strtod_l+0x212>
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	e7c2      	b.n	800a23e <_strtod_l+0x176>
 800a2b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a2ba:	3001      	adds	r0, #1
 800a2bc:	1c5a      	adds	r2, r3, #1
 800a2be:	921b      	str	r2, [sp, #108]	; 0x6c
 800a2c0:	785b      	ldrb	r3, [r3, #1]
 800a2c2:	2b30      	cmp	r3, #48	; 0x30
 800a2c4:	d0f8      	beq.n	800a2b8 <_strtod_l+0x1f0>
 800a2c6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a2ca:	2a08      	cmp	r2, #8
 800a2cc:	f200 84dc 	bhi.w	800ac88 <_strtod_l+0xbc0>
 800a2d0:	9004      	str	r0, [sp, #16]
 800a2d2:	2000      	movs	r0, #0
 800a2d4:	4604      	mov	r4, r0
 800a2d6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a2d8:	9208      	str	r2, [sp, #32]
 800a2da:	3b30      	subs	r3, #48	; 0x30
 800a2dc:	f100 0201 	add.w	r2, r0, #1
 800a2e0:	d013      	beq.n	800a30a <_strtod_l+0x242>
 800a2e2:	9904      	ldr	r1, [sp, #16]
 800a2e4:	1905      	adds	r5, r0, r4
 800a2e6:	4411      	add	r1, r2
 800a2e8:	9104      	str	r1, [sp, #16]
 800a2ea:	4622      	mov	r2, r4
 800a2ec:	210a      	movs	r1, #10
 800a2ee:	42aa      	cmp	r2, r5
 800a2f0:	d113      	bne.n	800a31a <_strtod_l+0x252>
 800a2f2:	1822      	adds	r2, r4, r0
 800a2f4:	2a08      	cmp	r2, #8
 800a2f6:	f104 0401 	add.w	r4, r4, #1
 800a2fa:	4404      	add	r4, r0
 800a2fc:	dc1b      	bgt.n	800a336 <_strtod_l+0x26e>
 800a2fe:	220a      	movs	r2, #10
 800a300:	9906      	ldr	r1, [sp, #24]
 800a302:	fb02 3301 	mla	r3, r2, r1, r3
 800a306:	9306      	str	r3, [sp, #24]
 800a308:	2200      	movs	r2, #0
 800a30a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a30c:	4610      	mov	r0, r2
 800a30e:	1c59      	adds	r1, r3, #1
 800a310:	911b      	str	r1, [sp, #108]	; 0x6c
 800a312:	785b      	ldrb	r3, [r3, #1]
 800a314:	e7ca      	b.n	800a2ac <_strtod_l+0x1e4>
 800a316:	4658      	mov	r0, fp
 800a318:	e7d3      	b.n	800a2c2 <_strtod_l+0x1fa>
 800a31a:	2a08      	cmp	r2, #8
 800a31c:	dc04      	bgt.n	800a328 <_strtod_l+0x260>
 800a31e:	9f06      	ldr	r7, [sp, #24]
 800a320:	434f      	muls	r7, r1
 800a322:	9706      	str	r7, [sp, #24]
 800a324:	3201      	adds	r2, #1
 800a326:	e7e2      	b.n	800a2ee <_strtod_l+0x226>
 800a328:	1c57      	adds	r7, r2, #1
 800a32a:	2f10      	cmp	r7, #16
 800a32c:	bfde      	ittt	le
 800a32e:	9f05      	ldrle	r7, [sp, #20]
 800a330:	434f      	mulle	r7, r1
 800a332:	9705      	strle	r7, [sp, #20]
 800a334:	e7f6      	b.n	800a324 <_strtod_l+0x25c>
 800a336:	2c10      	cmp	r4, #16
 800a338:	bfdf      	itttt	le
 800a33a:	220a      	movle	r2, #10
 800a33c:	9905      	ldrle	r1, [sp, #20]
 800a33e:	fb02 3301 	mlale	r3, r2, r1, r3
 800a342:	9305      	strle	r3, [sp, #20]
 800a344:	e7e0      	b.n	800a308 <_strtod_l+0x240>
 800a346:	2300      	movs	r3, #0
 800a348:	2201      	movs	r2, #1
 800a34a:	9304      	str	r3, [sp, #16]
 800a34c:	e77c      	b.n	800a248 <_strtod_l+0x180>
 800a34e:	2700      	movs	r7, #0
 800a350:	1cb3      	adds	r3, r6, #2
 800a352:	931b      	str	r3, [sp, #108]	; 0x6c
 800a354:	78b3      	ldrb	r3, [r6, #2]
 800a356:	e784      	b.n	800a262 <_strtod_l+0x19a>
 800a358:	2701      	movs	r7, #1
 800a35a:	e7f9      	b.n	800a350 <_strtod_l+0x288>
 800a35c:	0801ae2c 	.word	0x0801ae2c
 800a360:	0801ab78 	.word	0x0801ab78
 800a364:	7ff00000 	.word	0x7ff00000
 800a368:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a36a:	1c59      	adds	r1, r3, #1
 800a36c:	911b      	str	r1, [sp, #108]	; 0x6c
 800a36e:	785b      	ldrb	r3, [r3, #1]
 800a370:	2b30      	cmp	r3, #48	; 0x30
 800a372:	d0f9      	beq.n	800a368 <_strtod_l+0x2a0>
 800a374:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800a378:	2908      	cmp	r1, #8
 800a37a:	f63f af78 	bhi.w	800a26e <_strtod_l+0x1a6>
 800a37e:	f04f 0e0a 	mov.w	lr, #10
 800a382:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800a386:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a388:	9309      	str	r3, [sp, #36]	; 0x24
 800a38a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a38c:	1c59      	adds	r1, r3, #1
 800a38e:	911b      	str	r1, [sp, #108]	; 0x6c
 800a390:	785b      	ldrb	r3, [r3, #1]
 800a392:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800a396:	2d09      	cmp	r5, #9
 800a398:	d935      	bls.n	800a406 <_strtod_l+0x33e>
 800a39a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a39c:	1b49      	subs	r1, r1, r5
 800a39e:	2908      	cmp	r1, #8
 800a3a0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800a3a4:	dc02      	bgt.n	800a3ac <_strtod_l+0x2e4>
 800a3a6:	4565      	cmp	r5, ip
 800a3a8:	bfa8      	it	ge
 800a3aa:	4665      	movge	r5, ip
 800a3ac:	b107      	cbz	r7, 800a3b0 <_strtod_l+0x2e8>
 800a3ae:	426d      	negs	r5, r5
 800a3b0:	2c00      	cmp	r4, #0
 800a3b2:	d14c      	bne.n	800a44e <_strtod_l+0x386>
 800a3b4:	9907      	ldr	r1, [sp, #28]
 800a3b6:	4301      	orrs	r1, r0
 800a3b8:	f47f aec7 	bne.w	800a14a <_strtod_l+0x82>
 800a3bc:	2a00      	cmp	r2, #0
 800a3be:	f47f aee0 	bne.w	800a182 <_strtod_l+0xba>
 800a3c2:	2b69      	cmp	r3, #105	; 0x69
 800a3c4:	d026      	beq.n	800a414 <_strtod_l+0x34c>
 800a3c6:	dc23      	bgt.n	800a410 <_strtod_l+0x348>
 800a3c8:	2b49      	cmp	r3, #73	; 0x49
 800a3ca:	d023      	beq.n	800a414 <_strtod_l+0x34c>
 800a3cc:	2b4e      	cmp	r3, #78	; 0x4e
 800a3ce:	f47f aed8 	bne.w	800a182 <_strtod_l+0xba>
 800a3d2:	499c      	ldr	r1, [pc, #624]	; (800a644 <_strtod_l+0x57c>)
 800a3d4:	a81b      	add	r0, sp, #108	; 0x6c
 800a3d6:	f001 ff81 	bl	800c2dc <__match>
 800a3da:	2800      	cmp	r0, #0
 800a3dc:	f43f aed1 	beq.w	800a182 <_strtod_l+0xba>
 800a3e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	2b28      	cmp	r3, #40	; 0x28
 800a3e6:	d12c      	bne.n	800a442 <_strtod_l+0x37a>
 800a3e8:	4997      	ldr	r1, [pc, #604]	; (800a648 <_strtod_l+0x580>)
 800a3ea:	aa1e      	add	r2, sp, #120	; 0x78
 800a3ec:	a81b      	add	r0, sp, #108	; 0x6c
 800a3ee:	f001 ff89 	bl	800c304 <__hexnan>
 800a3f2:	2805      	cmp	r0, #5
 800a3f4:	d125      	bne.n	800a442 <_strtod_l+0x37a>
 800a3f6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a3f8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800a3fc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a400:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a404:	e6a1      	b.n	800a14a <_strtod_l+0x82>
 800a406:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800a40a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800a40e:	e7bc      	b.n	800a38a <_strtod_l+0x2c2>
 800a410:	2b6e      	cmp	r3, #110	; 0x6e
 800a412:	e7dc      	b.n	800a3ce <_strtod_l+0x306>
 800a414:	498d      	ldr	r1, [pc, #564]	; (800a64c <_strtod_l+0x584>)
 800a416:	a81b      	add	r0, sp, #108	; 0x6c
 800a418:	f001 ff60 	bl	800c2dc <__match>
 800a41c:	2800      	cmp	r0, #0
 800a41e:	f43f aeb0 	beq.w	800a182 <_strtod_l+0xba>
 800a422:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a424:	498a      	ldr	r1, [pc, #552]	; (800a650 <_strtod_l+0x588>)
 800a426:	3b01      	subs	r3, #1
 800a428:	a81b      	add	r0, sp, #108	; 0x6c
 800a42a:	931b      	str	r3, [sp, #108]	; 0x6c
 800a42c:	f001 ff56 	bl	800c2dc <__match>
 800a430:	b910      	cbnz	r0, 800a438 <_strtod_l+0x370>
 800a432:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a434:	3301      	adds	r3, #1
 800a436:	931b      	str	r3, [sp, #108]	; 0x6c
 800a438:	f04f 0800 	mov.w	r8, #0
 800a43c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800a660 <_strtod_l+0x598>
 800a440:	e683      	b.n	800a14a <_strtod_l+0x82>
 800a442:	4884      	ldr	r0, [pc, #528]	; (800a654 <_strtod_l+0x58c>)
 800a444:	f003 f858 	bl	800d4f8 <nan>
 800a448:	4680      	mov	r8, r0
 800a44a:	4689      	mov	r9, r1
 800a44c:	e67d      	b.n	800a14a <_strtod_l+0x82>
 800a44e:	9b04      	ldr	r3, [sp, #16]
 800a450:	f1bb 0f00 	cmp.w	fp, #0
 800a454:	bf08      	it	eq
 800a456:	46a3      	moveq	fp, r4
 800a458:	1aeb      	subs	r3, r5, r3
 800a45a:	2c10      	cmp	r4, #16
 800a45c:	9806      	ldr	r0, [sp, #24]
 800a45e:	4626      	mov	r6, r4
 800a460:	9307      	str	r3, [sp, #28]
 800a462:	bfa8      	it	ge
 800a464:	2610      	movge	r6, #16
 800a466:	f7f6 f829 	bl	80004bc <__aeabi_ui2d>
 800a46a:	2c09      	cmp	r4, #9
 800a46c:	4680      	mov	r8, r0
 800a46e:	4689      	mov	r9, r1
 800a470:	dd13      	ble.n	800a49a <_strtod_l+0x3d2>
 800a472:	4b79      	ldr	r3, [pc, #484]	; (800a658 <_strtod_l+0x590>)
 800a474:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a478:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a47c:	f7f6 f898 	bl	80005b0 <__aeabi_dmul>
 800a480:	4680      	mov	r8, r0
 800a482:	9805      	ldr	r0, [sp, #20]
 800a484:	4689      	mov	r9, r1
 800a486:	f7f6 f819 	bl	80004bc <__aeabi_ui2d>
 800a48a:	4602      	mov	r2, r0
 800a48c:	460b      	mov	r3, r1
 800a48e:	4640      	mov	r0, r8
 800a490:	4649      	mov	r1, r9
 800a492:	f7f5 fed7 	bl	8000244 <__adddf3>
 800a496:	4680      	mov	r8, r0
 800a498:	4689      	mov	r9, r1
 800a49a:	2c0f      	cmp	r4, #15
 800a49c:	dc36      	bgt.n	800a50c <_strtod_l+0x444>
 800a49e:	9b07      	ldr	r3, [sp, #28]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	f43f ae52 	beq.w	800a14a <_strtod_l+0x82>
 800a4a6:	dd22      	ble.n	800a4ee <_strtod_l+0x426>
 800a4a8:	2b16      	cmp	r3, #22
 800a4aa:	dc09      	bgt.n	800a4c0 <_strtod_l+0x3f8>
 800a4ac:	4c6a      	ldr	r4, [pc, #424]	; (800a658 <_strtod_l+0x590>)
 800a4ae:	4642      	mov	r2, r8
 800a4b0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800a4b4:	464b      	mov	r3, r9
 800a4b6:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a4ba:	f7f6 f879 	bl	80005b0 <__aeabi_dmul>
 800a4be:	e7c3      	b.n	800a448 <_strtod_l+0x380>
 800a4c0:	9a07      	ldr	r2, [sp, #28]
 800a4c2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	db20      	blt.n	800a50c <_strtod_l+0x444>
 800a4ca:	4d63      	ldr	r5, [pc, #396]	; (800a658 <_strtod_l+0x590>)
 800a4cc:	f1c4 040f 	rsb	r4, r4, #15
 800a4d0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a4d4:	4642      	mov	r2, r8
 800a4d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4da:	464b      	mov	r3, r9
 800a4dc:	f7f6 f868 	bl	80005b0 <__aeabi_dmul>
 800a4e0:	9b07      	ldr	r3, [sp, #28]
 800a4e2:	1b1c      	subs	r4, r3, r4
 800a4e4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a4e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a4ec:	e7e5      	b.n	800a4ba <_strtod_l+0x3f2>
 800a4ee:	9b07      	ldr	r3, [sp, #28]
 800a4f0:	3316      	adds	r3, #22
 800a4f2:	db0b      	blt.n	800a50c <_strtod_l+0x444>
 800a4f4:	9b04      	ldr	r3, [sp, #16]
 800a4f6:	4a58      	ldr	r2, [pc, #352]	; (800a658 <_strtod_l+0x590>)
 800a4f8:	1b5d      	subs	r5, r3, r5
 800a4fa:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a4fe:	4640      	mov	r0, r8
 800a500:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a504:	4649      	mov	r1, r9
 800a506:	f7f6 f97d 	bl	8000804 <__aeabi_ddiv>
 800a50a:	e79d      	b.n	800a448 <_strtod_l+0x380>
 800a50c:	9b07      	ldr	r3, [sp, #28]
 800a50e:	1ba6      	subs	r6, r4, r6
 800a510:	441e      	add	r6, r3
 800a512:	2e00      	cmp	r6, #0
 800a514:	dd71      	ble.n	800a5fa <_strtod_l+0x532>
 800a516:	f016 030f 	ands.w	r3, r6, #15
 800a51a:	d00a      	beq.n	800a532 <_strtod_l+0x46a>
 800a51c:	494e      	ldr	r1, [pc, #312]	; (800a658 <_strtod_l+0x590>)
 800a51e:	4642      	mov	r2, r8
 800a520:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a524:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a528:	464b      	mov	r3, r9
 800a52a:	f7f6 f841 	bl	80005b0 <__aeabi_dmul>
 800a52e:	4680      	mov	r8, r0
 800a530:	4689      	mov	r9, r1
 800a532:	f036 060f 	bics.w	r6, r6, #15
 800a536:	d050      	beq.n	800a5da <_strtod_l+0x512>
 800a538:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800a53c:	dd27      	ble.n	800a58e <_strtod_l+0x4c6>
 800a53e:	f04f 0b00 	mov.w	fp, #0
 800a542:	f8cd b010 	str.w	fp, [sp, #16]
 800a546:	f8cd b020 	str.w	fp, [sp, #32]
 800a54a:	f8cd b018 	str.w	fp, [sp, #24]
 800a54e:	2322      	movs	r3, #34	; 0x22
 800a550:	f04f 0800 	mov.w	r8, #0
 800a554:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a660 <_strtod_l+0x598>
 800a558:	f8ca 3000 	str.w	r3, [sl]
 800a55c:	9b08      	ldr	r3, [sp, #32]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	f43f adf3 	beq.w	800a14a <_strtod_l+0x82>
 800a564:	4650      	mov	r0, sl
 800a566:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a568:	f001 ffe6 	bl	800c538 <_Bfree>
 800a56c:	4650      	mov	r0, sl
 800a56e:	9906      	ldr	r1, [sp, #24]
 800a570:	f001 ffe2 	bl	800c538 <_Bfree>
 800a574:	4650      	mov	r0, sl
 800a576:	9904      	ldr	r1, [sp, #16]
 800a578:	f001 ffde 	bl	800c538 <_Bfree>
 800a57c:	4650      	mov	r0, sl
 800a57e:	9908      	ldr	r1, [sp, #32]
 800a580:	f001 ffda 	bl	800c538 <_Bfree>
 800a584:	4659      	mov	r1, fp
 800a586:	4650      	mov	r0, sl
 800a588:	f001 ffd6 	bl	800c538 <_Bfree>
 800a58c:	e5dd      	b.n	800a14a <_strtod_l+0x82>
 800a58e:	2300      	movs	r3, #0
 800a590:	4640      	mov	r0, r8
 800a592:	4649      	mov	r1, r9
 800a594:	461f      	mov	r7, r3
 800a596:	1136      	asrs	r6, r6, #4
 800a598:	2e01      	cmp	r6, #1
 800a59a:	dc21      	bgt.n	800a5e0 <_strtod_l+0x518>
 800a59c:	b10b      	cbz	r3, 800a5a2 <_strtod_l+0x4da>
 800a59e:	4680      	mov	r8, r0
 800a5a0:	4689      	mov	r9, r1
 800a5a2:	4b2e      	ldr	r3, [pc, #184]	; (800a65c <_strtod_l+0x594>)
 800a5a4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a5a8:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a5ac:	4642      	mov	r2, r8
 800a5ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a5b2:	464b      	mov	r3, r9
 800a5b4:	f7f5 fffc 	bl	80005b0 <__aeabi_dmul>
 800a5b8:	4b29      	ldr	r3, [pc, #164]	; (800a660 <_strtod_l+0x598>)
 800a5ba:	460a      	mov	r2, r1
 800a5bc:	400b      	ands	r3, r1
 800a5be:	4929      	ldr	r1, [pc, #164]	; (800a664 <_strtod_l+0x59c>)
 800a5c0:	4680      	mov	r8, r0
 800a5c2:	428b      	cmp	r3, r1
 800a5c4:	d8bb      	bhi.n	800a53e <_strtod_l+0x476>
 800a5c6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a5ca:	428b      	cmp	r3, r1
 800a5cc:	bf86      	itte	hi
 800a5ce:	f04f 38ff 	movhi.w	r8, #4294967295
 800a5d2:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800a668 <_strtod_l+0x5a0>
 800a5d6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a5da:	2300      	movs	r3, #0
 800a5dc:	9305      	str	r3, [sp, #20]
 800a5de:	e07e      	b.n	800a6de <_strtod_l+0x616>
 800a5e0:	07f2      	lsls	r2, r6, #31
 800a5e2:	d507      	bpl.n	800a5f4 <_strtod_l+0x52c>
 800a5e4:	4b1d      	ldr	r3, [pc, #116]	; (800a65c <_strtod_l+0x594>)
 800a5e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ee:	f7f5 ffdf 	bl	80005b0 <__aeabi_dmul>
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	3701      	adds	r7, #1
 800a5f6:	1076      	asrs	r6, r6, #1
 800a5f8:	e7ce      	b.n	800a598 <_strtod_l+0x4d0>
 800a5fa:	d0ee      	beq.n	800a5da <_strtod_l+0x512>
 800a5fc:	4276      	negs	r6, r6
 800a5fe:	f016 020f 	ands.w	r2, r6, #15
 800a602:	d00a      	beq.n	800a61a <_strtod_l+0x552>
 800a604:	4b14      	ldr	r3, [pc, #80]	; (800a658 <_strtod_l+0x590>)
 800a606:	4640      	mov	r0, r8
 800a608:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a60c:	4649      	mov	r1, r9
 800a60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a612:	f7f6 f8f7 	bl	8000804 <__aeabi_ddiv>
 800a616:	4680      	mov	r8, r0
 800a618:	4689      	mov	r9, r1
 800a61a:	1136      	asrs	r6, r6, #4
 800a61c:	d0dd      	beq.n	800a5da <_strtod_l+0x512>
 800a61e:	2e1f      	cmp	r6, #31
 800a620:	dd24      	ble.n	800a66c <_strtod_l+0x5a4>
 800a622:	f04f 0b00 	mov.w	fp, #0
 800a626:	f8cd b010 	str.w	fp, [sp, #16]
 800a62a:	f8cd b020 	str.w	fp, [sp, #32]
 800a62e:	f8cd b018 	str.w	fp, [sp, #24]
 800a632:	2322      	movs	r3, #34	; 0x22
 800a634:	f04f 0800 	mov.w	r8, #0
 800a638:	f04f 0900 	mov.w	r9, #0
 800a63c:	f8ca 3000 	str.w	r3, [sl]
 800a640:	e78c      	b.n	800a55c <_strtod_l+0x494>
 800a642:	bf00      	nop
 800a644:	0801ab51 	.word	0x0801ab51
 800a648:	0801ab8c 	.word	0x0801ab8c
 800a64c:	0801ab49 	.word	0x0801ab49
 800a650:	0801accc 	.word	0x0801accc
 800a654:	0801afe8 	.word	0x0801afe8
 800a658:	0801aec8 	.word	0x0801aec8
 800a65c:	0801aea0 	.word	0x0801aea0
 800a660:	7ff00000 	.word	0x7ff00000
 800a664:	7ca00000 	.word	0x7ca00000
 800a668:	7fefffff 	.word	0x7fefffff
 800a66c:	f016 0310 	ands.w	r3, r6, #16
 800a670:	bf18      	it	ne
 800a672:	236a      	movne	r3, #106	; 0x6a
 800a674:	4640      	mov	r0, r8
 800a676:	9305      	str	r3, [sp, #20]
 800a678:	4649      	mov	r1, r9
 800a67a:	2300      	movs	r3, #0
 800a67c:	4fb2      	ldr	r7, [pc, #712]	; (800a948 <_strtod_l+0x880>)
 800a67e:	07f2      	lsls	r2, r6, #31
 800a680:	d504      	bpl.n	800a68c <_strtod_l+0x5c4>
 800a682:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a686:	f7f5 ff93 	bl	80005b0 <__aeabi_dmul>
 800a68a:	2301      	movs	r3, #1
 800a68c:	1076      	asrs	r6, r6, #1
 800a68e:	f107 0708 	add.w	r7, r7, #8
 800a692:	d1f4      	bne.n	800a67e <_strtod_l+0x5b6>
 800a694:	b10b      	cbz	r3, 800a69a <_strtod_l+0x5d2>
 800a696:	4680      	mov	r8, r0
 800a698:	4689      	mov	r9, r1
 800a69a:	9b05      	ldr	r3, [sp, #20]
 800a69c:	b1bb      	cbz	r3, 800a6ce <_strtod_l+0x606>
 800a69e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800a6a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	4649      	mov	r1, r9
 800a6aa:	dd10      	ble.n	800a6ce <_strtod_l+0x606>
 800a6ac:	2b1f      	cmp	r3, #31
 800a6ae:	f340 812b 	ble.w	800a908 <_strtod_l+0x840>
 800a6b2:	2b34      	cmp	r3, #52	; 0x34
 800a6b4:	bfd8      	it	le
 800a6b6:	f04f 32ff 	movle.w	r2, #4294967295
 800a6ba:	f04f 0800 	mov.w	r8, #0
 800a6be:	bfcf      	iteee	gt
 800a6c0:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a6c4:	3b20      	suble	r3, #32
 800a6c6:	fa02 f303 	lslle.w	r3, r2, r3
 800a6ca:	ea03 0901 	andle.w	r9, r3, r1
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	4640      	mov	r0, r8
 800a6d4:	4649      	mov	r1, r9
 800a6d6:	f7f6 f9d3 	bl	8000a80 <__aeabi_dcmpeq>
 800a6da:	2800      	cmp	r0, #0
 800a6dc:	d1a1      	bne.n	800a622 <_strtod_l+0x55a>
 800a6de:	9b06      	ldr	r3, [sp, #24]
 800a6e0:	465a      	mov	r2, fp
 800a6e2:	9300      	str	r3, [sp, #0]
 800a6e4:	4650      	mov	r0, sl
 800a6e6:	4623      	mov	r3, r4
 800a6e8:	9908      	ldr	r1, [sp, #32]
 800a6ea:	f001 ff91 	bl	800c610 <__s2b>
 800a6ee:	9008      	str	r0, [sp, #32]
 800a6f0:	2800      	cmp	r0, #0
 800a6f2:	f43f af24 	beq.w	800a53e <_strtod_l+0x476>
 800a6f6:	9b04      	ldr	r3, [sp, #16]
 800a6f8:	f04f 0b00 	mov.w	fp, #0
 800a6fc:	1b5d      	subs	r5, r3, r5
 800a6fe:	9b07      	ldr	r3, [sp, #28]
 800a700:	f8cd b010 	str.w	fp, [sp, #16]
 800a704:	2b00      	cmp	r3, #0
 800a706:	bfb4      	ite	lt
 800a708:	462b      	movlt	r3, r5
 800a70a:	2300      	movge	r3, #0
 800a70c:	930e      	str	r3, [sp, #56]	; 0x38
 800a70e:	9b07      	ldr	r3, [sp, #28]
 800a710:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a714:	9316      	str	r3, [sp, #88]	; 0x58
 800a716:	9b08      	ldr	r3, [sp, #32]
 800a718:	4650      	mov	r0, sl
 800a71a:	6859      	ldr	r1, [r3, #4]
 800a71c:	f001 fecc 	bl	800c4b8 <_Balloc>
 800a720:	9006      	str	r0, [sp, #24]
 800a722:	2800      	cmp	r0, #0
 800a724:	f43f af13 	beq.w	800a54e <_strtod_l+0x486>
 800a728:	9b08      	ldr	r3, [sp, #32]
 800a72a:	300c      	adds	r0, #12
 800a72c:	691a      	ldr	r2, [r3, #16]
 800a72e:	f103 010c 	add.w	r1, r3, #12
 800a732:	3202      	adds	r2, #2
 800a734:	0092      	lsls	r2, r2, #2
 800a736:	f001 feb1 	bl	800c49c <memcpy>
 800a73a:	ab1e      	add	r3, sp, #120	; 0x78
 800a73c:	9301      	str	r3, [sp, #4]
 800a73e:	ab1d      	add	r3, sp, #116	; 0x74
 800a740:	9300      	str	r3, [sp, #0]
 800a742:	4642      	mov	r2, r8
 800a744:	464b      	mov	r3, r9
 800a746:	4650      	mov	r0, sl
 800a748:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800a74c:	f002 fa9e 	bl	800cc8c <__d2b>
 800a750:	901c      	str	r0, [sp, #112]	; 0x70
 800a752:	2800      	cmp	r0, #0
 800a754:	f43f aefb 	beq.w	800a54e <_strtod_l+0x486>
 800a758:	2101      	movs	r1, #1
 800a75a:	4650      	mov	r0, sl
 800a75c:	f001 fff0 	bl	800c740 <__i2b>
 800a760:	4603      	mov	r3, r0
 800a762:	9004      	str	r0, [sp, #16]
 800a764:	2800      	cmp	r0, #0
 800a766:	f43f aef2 	beq.w	800a54e <_strtod_l+0x486>
 800a76a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800a76c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a76e:	2d00      	cmp	r5, #0
 800a770:	bfab      	itete	ge
 800a772:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a774:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a776:	18ee      	addge	r6, r5, r3
 800a778:	1b5c      	sublt	r4, r3, r5
 800a77a:	9b05      	ldr	r3, [sp, #20]
 800a77c:	bfa8      	it	ge
 800a77e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800a780:	eba5 0503 	sub.w	r5, r5, r3
 800a784:	4415      	add	r5, r2
 800a786:	4b71      	ldr	r3, [pc, #452]	; (800a94c <_strtod_l+0x884>)
 800a788:	f105 35ff 	add.w	r5, r5, #4294967295
 800a78c:	bfb8      	it	lt
 800a78e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800a790:	429d      	cmp	r5, r3
 800a792:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a796:	f280 80c9 	bge.w	800a92c <_strtod_l+0x864>
 800a79a:	1b5b      	subs	r3, r3, r5
 800a79c:	2b1f      	cmp	r3, #31
 800a79e:	f04f 0701 	mov.w	r7, #1
 800a7a2:	eba2 0203 	sub.w	r2, r2, r3
 800a7a6:	f300 80b6 	bgt.w	800a916 <_strtod_l+0x84e>
 800a7aa:	2500      	movs	r5, #0
 800a7ac:	fa07 f303 	lsl.w	r3, r7, r3
 800a7b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7b2:	18b7      	adds	r7, r6, r2
 800a7b4:	9b05      	ldr	r3, [sp, #20]
 800a7b6:	42be      	cmp	r6, r7
 800a7b8:	4414      	add	r4, r2
 800a7ba:	441c      	add	r4, r3
 800a7bc:	4633      	mov	r3, r6
 800a7be:	bfa8      	it	ge
 800a7c0:	463b      	movge	r3, r7
 800a7c2:	42a3      	cmp	r3, r4
 800a7c4:	bfa8      	it	ge
 800a7c6:	4623      	movge	r3, r4
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	bfc2      	ittt	gt
 800a7cc:	1aff      	subgt	r7, r7, r3
 800a7ce:	1ae4      	subgt	r4, r4, r3
 800a7d0:	1af6      	subgt	r6, r6, r3
 800a7d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	dd17      	ble.n	800a808 <_strtod_l+0x740>
 800a7d8:	461a      	mov	r2, r3
 800a7da:	4650      	mov	r0, sl
 800a7dc:	9904      	ldr	r1, [sp, #16]
 800a7de:	f002 f869 	bl	800c8b4 <__pow5mult>
 800a7e2:	9004      	str	r0, [sp, #16]
 800a7e4:	2800      	cmp	r0, #0
 800a7e6:	f43f aeb2 	beq.w	800a54e <_strtod_l+0x486>
 800a7ea:	4601      	mov	r1, r0
 800a7ec:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a7ee:	4650      	mov	r0, sl
 800a7f0:	f001 ffbc 	bl	800c76c <__multiply>
 800a7f4:	9009      	str	r0, [sp, #36]	; 0x24
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	f43f aea9 	beq.w	800a54e <_strtod_l+0x486>
 800a7fc:	4650      	mov	r0, sl
 800a7fe:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a800:	f001 fe9a 	bl	800c538 <_Bfree>
 800a804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a806:	931c      	str	r3, [sp, #112]	; 0x70
 800a808:	2f00      	cmp	r7, #0
 800a80a:	f300 8093 	bgt.w	800a934 <_strtod_l+0x86c>
 800a80e:	9b07      	ldr	r3, [sp, #28]
 800a810:	2b00      	cmp	r3, #0
 800a812:	dd08      	ble.n	800a826 <_strtod_l+0x75e>
 800a814:	4650      	mov	r0, sl
 800a816:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a818:	9906      	ldr	r1, [sp, #24]
 800a81a:	f002 f84b 	bl	800c8b4 <__pow5mult>
 800a81e:	9006      	str	r0, [sp, #24]
 800a820:	2800      	cmp	r0, #0
 800a822:	f43f ae94 	beq.w	800a54e <_strtod_l+0x486>
 800a826:	2c00      	cmp	r4, #0
 800a828:	dd08      	ble.n	800a83c <_strtod_l+0x774>
 800a82a:	4622      	mov	r2, r4
 800a82c:	4650      	mov	r0, sl
 800a82e:	9906      	ldr	r1, [sp, #24]
 800a830:	f002 f89a 	bl	800c968 <__lshift>
 800a834:	9006      	str	r0, [sp, #24]
 800a836:	2800      	cmp	r0, #0
 800a838:	f43f ae89 	beq.w	800a54e <_strtod_l+0x486>
 800a83c:	2e00      	cmp	r6, #0
 800a83e:	dd08      	ble.n	800a852 <_strtod_l+0x78a>
 800a840:	4632      	mov	r2, r6
 800a842:	4650      	mov	r0, sl
 800a844:	9904      	ldr	r1, [sp, #16]
 800a846:	f002 f88f 	bl	800c968 <__lshift>
 800a84a:	9004      	str	r0, [sp, #16]
 800a84c:	2800      	cmp	r0, #0
 800a84e:	f43f ae7e 	beq.w	800a54e <_strtod_l+0x486>
 800a852:	4650      	mov	r0, sl
 800a854:	9a06      	ldr	r2, [sp, #24]
 800a856:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a858:	f002 f90e 	bl	800ca78 <__mdiff>
 800a85c:	4683      	mov	fp, r0
 800a85e:	2800      	cmp	r0, #0
 800a860:	f43f ae75 	beq.w	800a54e <_strtod_l+0x486>
 800a864:	2400      	movs	r4, #0
 800a866:	68c3      	ldr	r3, [r0, #12]
 800a868:	9904      	ldr	r1, [sp, #16]
 800a86a:	60c4      	str	r4, [r0, #12]
 800a86c:	930d      	str	r3, [sp, #52]	; 0x34
 800a86e:	f002 f8e7 	bl	800ca40 <__mcmp>
 800a872:	42a0      	cmp	r0, r4
 800a874:	da70      	bge.n	800a958 <_strtod_l+0x890>
 800a876:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a878:	ea53 0308 	orrs.w	r3, r3, r8
 800a87c:	f040 8096 	bne.w	800a9ac <_strtod_l+0x8e4>
 800a880:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a884:	2b00      	cmp	r3, #0
 800a886:	f040 8091 	bne.w	800a9ac <_strtod_l+0x8e4>
 800a88a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a88e:	0d1b      	lsrs	r3, r3, #20
 800a890:	051b      	lsls	r3, r3, #20
 800a892:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a896:	f240 8089 	bls.w	800a9ac <_strtod_l+0x8e4>
 800a89a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800a89e:	b923      	cbnz	r3, 800a8aa <_strtod_l+0x7e2>
 800a8a0:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	f340 8081 	ble.w	800a9ac <_strtod_l+0x8e4>
 800a8aa:	4659      	mov	r1, fp
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	4650      	mov	r0, sl
 800a8b0:	f002 f85a 	bl	800c968 <__lshift>
 800a8b4:	9904      	ldr	r1, [sp, #16]
 800a8b6:	4683      	mov	fp, r0
 800a8b8:	f002 f8c2 	bl	800ca40 <__mcmp>
 800a8bc:	2800      	cmp	r0, #0
 800a8be:	dd75      	ble.n	800a9ac <_strtod_l+0x8e4>
 800a8c0:	9905      	ldr	r1, [sp, #20]
 800a8c2:	464b      	mov	r3, r9
 800a8c4:	4a22      	ldr	r2, [pc, #136]	; (800a950 <_strtod_l+0x888>)
 800a8c6:	2900      	cmp	r1, #0
 800a8c8:	f000 8091 	beq.w	800a9ee <_strtod_l+0x926>
 800a8cc:	ea02 0109 	and.w	r1, r2, r9
 800a8d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a8d4:	f300 808b 	bgt.w	800a9ee <_strtod_l+0x926>
 800a8d8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a8dc:	f77f aea9 	ble.w	800a632 <_strtod_l+0x56a>
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	4a1c      	ldr	r2, [pc, #112]	; (800a954 <_strtod_l+0x88c>)
 800a8e4:	4640      	mov	r0, r8
 800a8e6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800a8ea:	4649      	mov	r1, r9
 800a8ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a8f0:	f7f5 fe5e 	bl	80005b0 <__aeabi_dmul>
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	4303      	orrs	r3, r0
 800a8f8:	bf08      	it	eq
 800a8fa:	2322      	moveq	r3, #34	; 0x22
 800a8fc:	4680      	mov	r8, r0
 800a8fe:	4689      	mov	r9, r1
 800a900:	bf08      	it	eq
 800a902:	f8ca 3000 	streq.w	r3, [sl]
 800a906:	e62d      	b.n	800a564 <_strtod_l+0x49c>
 800a908:	f04f 32ff 	mov.w	r2, #4294967295
 800a90c:	fa02 f303 	lsl.w	r3, r2, r3
 800a910:	ea03 0808 	and.w	r8, r3, r8
 800a914:	e6db      	b.n	800a6ce <_strtod_l+0x606>
 800a916:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800a91a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800a91e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800a922:	35e2      	adds	r5, #226	; 0xe2
 800a924:	fa07 f505 	lsl.w	r5, r7, r5
 800a928:	970f      	str	r7, [sp, #60]	; 0x3c
 800a92a:	e742      	b.n	800a7b2 <_strtod_l+0x6ea>
 800a92c:	2301      	movs	r3, #1
 800a92e:	2500      	movs	r5, #0
 800a930:	930f      	str	r3, [sp, #60]	; 0x3c
 800a932:	e73e      	b.n	800a7b2 <_strtod_l+0x6ea>
 800a934:	463a      	mov	r2, r7
 800a936:	4650      	mov	r0, sl
 800a938:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a93a:	f002 f815 	bl	800c968 <__lshift>
 800a93e:	901c      	str	r0, [sp, #112]	; 0x70
 800a940:	2800      	cmp	r0, #0
 800a942:	f47f af64 	bne.w	800a80e <_strtod_l+0x746>
 800a946:	e602      	b.n	800a54e <_strtod_l+0x486>
 800a948:	0801aba0 	.word	0x0801aba0
 800a94c:	fffffc02 	.word	0xfffffc02
 800a950:	7ff00000 	.word	0x7ff00000
 800a954:	39500000 	.word	0x39500000
 800a958:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a95c:	d166      	bne.n	800aa2c <_strtod_l+0x964>
 800a95e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a960:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a964:	b35a      	cbz	r2, 800a9be <_strtod_l+0x8f6>
 800a966:	4a9c      	ldr	r2, [pc, #624]	; (800abd8 <_strtod_l+0xb10>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d12c      	bne.n	800a9c6 <_strtod_l+0x8fe>
 800a96c:	9b05      	ldr	r3, [sp, #20]
 800a96e:	4640      	mov	r0, r8
 800a970:	b303      	cbz	r3, 800a9b4 <_strtod_l+0x8ec>
 800a972:	464b      	mov	r3, r9
 800a974:	4a99      	ldr	r2, [pc, #612]	; (800abdc <_strtod_l+0xb14>)
 800a976:	f04f 31ff 	mov.w	r1, #4294967295
 800a97a:	401a      	ands	r2, r3
 800a97c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a980:	d81b      	bhi.n	800a9ba <_strtod_l+0x8f2>
 800a982:	0d12      	lsrs	r2, r2, #20
 800a984:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a988:	fa01 f303 	lsl.w	r3, r1, r3
 800a98c:	4298      	cmp	r0, r3
 800a98e:	d11a      	bne.n	800a9c6 <_strtod_l+0x8fe>
 800a990:	4b93      	ldr	r3, [pc, #588]	; (800abe0 <_strtod_l+0xb18>)
 800a992:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a994:	429a      	cmp	r2, r3
 800a996:	d102      	bne.n	800a99e <_strtod_l+0x8d6>
 800a998:	3001      	adds	r0, #1
 800a99a:	f43f add8 	beq.w	800a54e <_strtod_l+0x486>
 800a99e:	f04f 0800 	mov.w	r8, #0
 800a9a2:	4b8e      	ldr	r3, [pc, #568]	; (800abdc <_strtod_l+0xb14>)
 800a9a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9a6:	401a      	ands	r2, r3
 800a9a8:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800a9ac:	9b05      	ldr	r3, [sp, #20]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d196      	bne.n	800a8e0 <_strtod_l+0x818>
 800a9b2:	e5d7      	b.n	800a564 <_strtod_l+0x49c>
 800a9b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a9b8:	e7e8      	b.n	800a98c <_strtod_l+0x8c4>
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	e7e6      	b.n	800a98c <_strtod_l+0x8c4>
 800a9be:	ea53 0308 	orrs.w	r3, r3, r8
 800a9c2:	f43f af7d 	beq.w	800a8c0 <_strtod_l+0x7f8>
 800a9c6:	b1e5      	cbz	r5, 800aa02 <_strtod_l+0x93a>
 800a9c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9ca:	421d      	tst	r5, r3
 800a9cc:	d0ee      	beq.n	800a9ac <_strtod_l+0x8e4>
 800a9ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9d0:	4640      	mov	r0, r8
 800a9d2:	4649      	mov	r1, r9
 800a9d4:	9a05      	ldr	r2, [sp, #20]
 800a9d6:	b1c3      	cbz	r3, 800aa0a <_strtod_l+0x942>
 800a9d8:	f7ff fb54 	bl	800a084 <sulp>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	460b      	mov	r3, r1
 800a9e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a9e4:	f7f5 fc2e 	bl	8000244 <__adddf3>
 800a9e8:	4680      	mov	r8, r0
 800a9ea:	4689      	mov	r9, r1
 800a9ec:	e7de      	b.n	800a9ac <_strtod_l+0x8e4>
 800a9ee:	4013      	ands	r3, r2
 800a9f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a9f4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a9f8:	f04f 38ff 	mov.w	r8, #4294967295
 800a9fc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800aa00:	e7d4      	b.n	800a9ac <_strtod_l+0x8e4>
 800aa02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa04:	ea13 0f08 	tst.w	r3, r8
 800aa08:	e7e0      	b.n	800a9cc <_strtod_l+0x904>
 800aa0a:	f7ff fb3b 	bl	800a084 <sulp>
 800aa0e:	4602      	mov	r2, r0
 800aa10:	460b      	mov	r3, r1
 800aa12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aa16:	f7f5 fc13 	bl	8000240 <__aeabi_dsub>
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	4680      	mov	r8, r0
 800aa20:	4689      	mov	r9, r1
 800aa22:	f7f6 f82d 	bl	8000a80 <__aeabi_dcmpeq>
 800aa26:	2800      	cmp	r0, #0
 800aa28:	d0c0      	beq.n	800a9ac <_strtod_l+0x8e4>
 800aa2a:	e602      	b.n	800a632 <_strtod_l+0x56a>
 800aa2c:	4658      	mov	r0, fp
 800aa2e:	9904      	ldr	r1, [sp, #16]
 800aa30:	f002 f988 	bl	800cd44 <__ratio>
 800aa34:	2200      	movs	r2, #0
 800aa36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aa3a:	4606      	mov	r6, r0
 800aa3c:	460f      	mov	r7, r1
 800aa3e:	f7f6 f833 	bl	8000aa8 <__aeabi_dcmple>
 800aa42:	2800      	cmp	r0, #0
 800aa44:	d075      	beq.n	800ab32 <_strtod_l+0xa6a>
 800aa46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d047      	beq.n	800aadc <_strtod_l+0xa14>
 800aa4c:	2600      	movs	r6, #0
 800aa4e:	4f65      	ldr	r7, [pc, #404]	; (800abe4 <_strtod_l+0xb1c>)
 800aa50:	4d64      	ldr	r5, [pc, #400]	; (800abe4 <_strtod_l+0xb1c>)
 800aa52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa58:	0d1b      	lsrs	r3, r3, #20
 800aa5a:	051b      	lsls	r3, r3, #20
 800aa5c:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aa60:	4b61      	ldr	r3, [pc, #388]	; (800abe8 <_strtod_l+0xb20>)
 800aa62:	429a      	cmp	r2, r3
 800aa64:	f040 80c8 	bne.w	800abf8 <_strtod_l+0xb30>
 800aa68:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800aa6c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800aa70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa72:	4640      	mov	r0, r8
 800aa74:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800aa78:	4649      	mov	r1, r9
 800aa7a:	f002 f88d 	bl	800cb98 <__ulp>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	460b      	mov	r3, r1
 800aa82:	4630      	mov	r0, r6
 800aa84:	4639      	mov	r1, r7
 800aa86:	f7f5 fd93 	bl	80005b0 <__aeabi_dmul>
 800aa8a:	4642      	mov	r2, r8
 800aa8c:	464b      	mov	r3, r9
 800aa8e:	f7f5 fbd9 	bl	8000244 <__adddf3>
 800aa92:	460b      	mov	r3, r1
 800aa94:	4951      	ldr	r1, [pc, #324]	; (800abdc <_strtod_l+0xb14>)
 800aa96:	4a55      	ldr	r2, [pc, #340]	; (800abec <_strtod_l+0xb24>)
 800aa98:	4019      	ands	r1, r3
 800aa9a:	4291      	cmp	r1, r2
 800aa9c:	4680      	mov	r8, r0
 800aa9e:	d95e      	bls.n	800ab5e <_strtod_l+0xa96>
 800aaa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aaa2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d103      	bne.n	800aab2 <_strtod_l+0x9ea>
 800aaaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaac:	3301      	adds	r3, #1
 800aaae:	f43f ad4e 	beq.w	800a54e <_strtod_l+0x486>
 800aab2:	f04f 38ff 	mov.w	r8, #4294967295
 800aab6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800abe0 <_strtod_l+0xb18>
 800aaba:	4650      	mov	r0, sl
 800aabc:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aabe:	f001 fd3b 	bl	800c538 <_Bfree>
 800aac2:	4650      	mov	r0, sl
 800aac4:	9906      	ldr	r1, [sp, #24]
 800aac6:	f001 fd37 	bl	800c538 <_Bfree>
 800aaca:	4650      	mov	r0, sl
 800aacc:	9904      	ldr	r1, [sp, #16]
 800aace:	f001 fd33 	bl	800c538 <_Bfree>
 800aad2:	4659      	mov	r1, fp
 800aad4:	4650      	mov	r0, sl
 800aad6:	f001 fd2f 	bl	800c538 <_Bfree>
 800aada:	e61c      	b.n	800a716 <_strtod_l+0x64e>
 800aadc:	f1b8 0f00 	cmp.w	r8, #0
 800aae0:	d119      	bne.n	800ab16 <_strtod_l+0xa4e>
 800aae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aae4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aae8:	b9e3      	cbnz	r3, 800ab24 <_strtod_l+0xa5c>
 800aaea:	2200      	movs	r2, #0
 800aaec:	4630      	mov	r0, r6
 800aaee:	4639      	mov	r1, r7
 800aaf0:	4b3c      	ldr	r3, [pc, #240]	; (800abe4 <_strtod_l+0xb1c>)
 800aaf2:	f7f5 ffcf 	bl	8000a94 <__aeabi_dcmplt>
 800aaf6:	b9c8      	cbnz	r0, 800ab2c <_strtod_l+0xa64>
 800aaf8:	2200      	movs	r2, #0
 800aafa:	4630      	mov	r0, r6
 800aafc:	4639      	mov	r1, r7
 800aafe:	4b3c      	ldr	r3, [pc, #240]	; (800abf0 <_strtod_l+0xb28>)
 800ab00:	f7f5 fd56 	bl	80005b0 <__aeabi_dmul>
 800ab04:	4604      	mov	r4, r0
 800ab06:	460d      	mov	r5, r1
 800ab08:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ab0c:	9418      	str	r4, [sp, #96]	; 0x60
 800ab0e:	9319      	str	r3, [sp, #100]	; 0x64
 800ab10:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800ab14:	e79d      	b.n	800aa52 <_strtod_l+0x98a>
 800ab16:	f1b8 0f01 	cmp.w	r8, #1
 800ab1a:	d103      	bne.n	800ab24 <_strtod_l+0xa5c>
 800ab1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	f43f ad87 	beq.w	800a632 <_strtod_l+0x56a>
 800ab24:	2600      	movs	r6, #0
 800ab26:	2400      	movs	r4, #0
 800ab28:	4f32      	ldr	r7, [pc, #200]	; (800abf4 <_strtod_l+0xb2c>)
 800ab2a:	e791      	b.n	800aa50 <_strtod_l+0x988>
 800ab2c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800ab2e:	4d30      	ldr	r5, [pc, #192]	; (800abf0 <_strtod_l+0xb28>)
 800ab30:	e7ea      	b.n	800ab08 <_strtod_l+0xa40>
 800ab32:	4b2f      	ldr	r3, [pc, #188]	; (800abf0 <_strtod_l+0xb28>)
 800ab34:	2200      	movs	r2, #0
 800ab36:	4630      	mov	r0, r6
 800ab38:	4639      	mov	r1, r7
 800ab3a:	f7f5 fd39 	bl	80005b0 <__aeabi_dmul>
 800ab3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab40:	4604      	mov	r4, r0
 800ab42:	460d      	mov	r5, r1
 800ab44:	b933      	cbnz	r3, 800ab54 <_strtod_l+0xa8c>
 800ab46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab4a:	9010      	str	r0, [sp, #64]	; 0x40
 800ab4c:	9311      	str	r3, [sp, #68]	; 0x44
 800ab4e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ab52:	e77e      	b.n	800aa52 <_strtod_l+0x98a>
 800ab54:	4602      	mov	r2, r0
 800ab56:	460b      	mov	r3, r1
 800ab58:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ab5c:	e7f7      	b.n	800ab4e <_strtod_l+0xa86>
 800ab5e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ab62:	9b05      	ldr	r3, [sp, #20]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d1a8      	bne.n	800aaba <_strtod_l+0x9f2>
 800ab68:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ab6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ab6e:	0d1b      	lsrs	r3, r3, #20
 800ab70:	051b      	lsls	r3, r3, #20
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d1a1      	bne.n	800aaba <_strtod_l+0x9f2>
 800ab76:	4620      	mov	r0, r4
 800ab78:	4629      	mov	r1, r5
 800ab7a:	f7f6 fb4b 	bl	8001214 <__aeabi_d2lz>
 800ab7e:	f7f5 fce9 	bl	8000554 <__aeabi_l2d>
 800ab82:	4602      	mov	r2, r0
 800ab84:	460b      	mov	r3, r1
 800ab86:	4620      	mov	r0, r4
 800ab88:	4629      	mov	r1, r5
 800ab8a:	f7f5 fb59 	bl	8000240 <__aeabi_dsub>
 800ab8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab94:	ea43 0308 	orr.w	r3, r3, r8
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	4604      	mov	r4, r0
 800ab9c:	460d      	mov	r5, r1
 800ab9e:	d066      	beq.n	800ac6e <_strtod_l+0xba6>
 800aba0:	a309      	add	r3, pc, #36	; (adr r3, 800abc8 <_strtod_l+0xb00>)
 800aba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba6:	f7f5 ff75 	bl	8000a94 <__aeabi_dcmplt>
 800abaa:	2800      	cmp	r0, #0
 800abac:	f47f acda 	bne.w	800a564 <_strtod_l+0x49c>
 800abb0:	a307      	add	r3, pc, #28	; (adr r3, 800abd0 <_strtod_l+0xb08>)
 800abb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb6:	4620      	mov	r0, r4
 800abb8:	4629      	mov	r1, r5
 800abba:	f7f5 ff89 	bl	8000ad0 <__aeabi_dcmpgt>
 800abbe:	2800      	cmp	r0, #0
 800abc0:	f43f af7b 	beq.w	800aaba <_strtod_l+0x9f2>
 800abc4:	e4ce      	b.n	800a564 <_strtod_l+0x49c>
 800abc6:	bf00      	nop
 800abc8:	94a03595 	.word	0x94a03595
 800abcc:	3fdfffff 	.word	0x3fdfffff
 800abd0:	35afe535 	.word	0x35afe535
 800abd4:	3fe00000 	.word	0x3fe00000
 800abd8:	000fffff 	.word	0x000fffff
 800abdc:	7ff00000 	.word	0x7ff00000
 800abe0:	7fefffff 	.word	0x7fefffff
 800abe4:	3ff00000 	.word	0x3ff00000
 800abe8:	7fe00000 	.word	0x7fe00000
 800abec:	7c9fffff 	.word	0x7c9fffff
 800abf0:	3fe00000 	.word	0x3fe00000
 800abf4:	bff00000 	.word	0xbff00000
 800abf8:	9b05      	ldr	r3, [sp, #20]
 800abfa:	b313      	cbz	r3, 800ac42 <_strtod_l+0xb7a>
 800abfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800abfe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ac02:	d81e      	bhi.n	800ac42 <_strtod_l+0xb7a>
 800ac04:	a326      	add	r3, pc, #152	; (adr r3, 800aca0 <_strtod_l+0xbd8>)
 800ac06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	4629      	mov	r1, r5
 800ac0e:	f7f5 ff4b 	bl	8000aa8 <__aeabi_dcmple>
 800ac12:	b190      	cbz	r0, 800ac3a <_strtod_l+0xb72>
 800ac14:	4629      	mov	r1, r5
 800ac16:	4620      	mov	r0, r4
 800ac18:	f7f5 ffa2 	bl	8000b60 <__aeabi_d2uiz>
 800ac1c:	2801      	cmp	r0, #1
 800ac1e:	bf38      	it	cc
 800ac20:	2001      	movcc	r0, #1
 800ac22:	f7f5 fc4b 	bl	80004bc <__aeabi_ui2d>
 800ac26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac28:	4604      	mov	r4, r0
 800ac2a:	460d      	mov	r5, r1
 800ac2c:	b9d3      	cbnz	r3, 800ac64 <_strtod_l+0xb9c>
 800ac2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac32:	9012      	str	r0, [sp, #72]	; 0x48
 800ac34:	9313      	str	r3, [sp, #76]	; 0x4c
 800ac36:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800ac3a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ac3c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800ac40:	1a9f      	subs	r7, r3, r2
 800ac42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ac46:	f001 ffa7 	bl	800cb98 <__ulp>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	4630      	mov	r0, r6
 800ac50:	4639      	mov	r1, r7
 800ac52:	f7f5 fcad 	bl	80005b0 <__aeabi_dmul>
 800ac56:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ac5a:	f7f5 faf3 	bl	8000244 <__adddf3>
 800ac5e:	4680      	mov	r8, r0
 800ac60:	4689      	mov	r9, r1
 800ac62:	e77e      	b.n	800ab62 <_strtod_l+0xa9a>
 800ac64:	4602      	mov	r2, r0
 800ac66:	460b      	mov	r3, r1
 800ac68:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800ac6c:	e7e3      	b.n	800ac36 <_strtod_l+0xb6e>
 800ac6e:	a30e      	add	r3, pc, #56	; (adr r3, 800aca8 <_strtod_l+0xbe0>)
 800ac70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac74:	f7f5 ff0e 	bl	8000a94 <__aeabi_dcmplt>
 800ac78:	e7a1      	b.n	800abbe <_strtod_l+0xaf6>
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	930c      	str	r3, [sp, #48]	; 0x30
 800ac7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac80:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ac82:	6013      	str	r3, [r2, #0]
 800ac84:	f7ff ba65 	b.w	800a152 <_strtod_l+0x8a>
 800ac88:	2b65      	cmp	r3, #101	; 0x65
 800ac8a:	f43f ab5c 	beq.w	800a346 <_strtod_l+0x27e>
 800ac8e:	2b45      	cmp	r3, #69	; 0x45
 800ac90:	f43f ab59 	beq.w	800a346 <_strtod_l+0x27e>
 800ac94:	2201      	movs	r2, #1
 800ac96:	f7ff bb8d 	b.w	800a3b4 <_strtod_l+0x2ec>
 800ac9a:	bf00      	nop
 800ac9c:	f3af 8000 	nop.w
 800aca0:	ffc00000 	.word	0xffc00000
 800aca4:	41dfffff 	.word	0x41dfffff
 800aca8:	94a03595 	.word	0x94a03595
 800acac:	3fcfffff 	.word	0x3fcfffff

0800acb0 <strtod>:
 800acb0:	460a      	mov	r2, r1
 800acb2:	4601      	mov	r1, r0
 800acb4:	4802      	ldr	r0, [pc, #8]	; (800acc0 <strtod+0x10>)
 800acb6:	4b03      	ldr	r3, [pc, #12]	; (800acc4 <strtod+0x14>)
 800acb8:	6800      	ldr	r0, [r0, #0]
 800acba:	f7ff ba05 	b.w	800a0c8 <_strtod_l>
 800acbe:	bf00      	nop
 800acc0:	20000014 	.word	0x20000014
 800acc4:	2000007c 	.word	0x2000007c

0800acc8 <strtof>:
 800acc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800accc:	4f22      	ldr	r7, [pc, #136]	; (800ad58 <strtof+0x90>)
 800acce:	460a      	mov	r2, r1
 800acd0:	4b22      	ldr	r3, [pc, #136]	; (800ad5c <strtof+0x94>)
 800acd2:	4601      	mov	r1, r0
 800acd4:	6838      	ldr	r0, [r7, #0]
 800acd6:	f7ff f9f7 	bl	800a0c8 <_strtod_l>
 800acda:	4602      	mov	r2, r0
 800acdc:	460b      	mov	r3, r1
 800acde:	4606      	mov	r6, r0
 800ace0:	460c      	mov	r4, r1
 800ace2:	f7f5 feff 	bl	8000ae4 <__aeabi_dcmpun>
 800ace6:	b168      	cbz	r0, 800ad04 <strtof+0x3c>
 800ace8:	2c00      	cmp	r4, #0
 800acea:	481d      	ldr	r0, [pc, #116]	; (800ad60 <strtof+0x98>)
 800acec:	da06      	bge.n	800acfc <strtof+0x34>
 800acee:	f002 fc19 	bl	800d524 <nanf>
 800acf2:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 800acf6:	4628      	mov	r0, r5
 800acf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad00:	f002 bc10 	b.w	800d524 <nanf>
 800ad04:	4621      	mov	r1, r4
 800ad06:	4630      	mov	r0, r6
 800ad08:	f7f5 ff4a 	bl	8000ba0 <__aeabi_d2f>
 800ad0c:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800ad10:	4605      	mov	r5, r0
 800ad12:	4914      	ldr	r1, [pc, #80]	; (800ad64 <strtof+0x9c>)
 800ad14:	4640      	mov	r0, r8
 800ad16:	f7f6 fa67 	bl	80011e8 <__aeabi_fcmpun>
 800ad1a:	2800      	cmp	r0, #0
 800ad1c:	d1eb      	bne.n	800acf6 <strtof+0x2e>
 800ad1e:	4640      	mov	r0, r8
 800ad20:	4910      	ldr	r1, [pc, #64]	; (800ad64 <strtof+0x9c>)
 800ad22:	f7f6 fa43 	bl	80011ac <__aeabi_fcmple>
 800ad26:	2800      	cmp	r0, #0
 800ad28:	d1e5      	bne.n	800acf6 <strtof+0x2e>
 800ad2a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800ad2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad32:	4630      	mov	r0, r6
 800ad34:	4621      	mov	r1, r4
 800ad36:	4b0c      	ldr	r3, [pc, #48]	; (800ad68 <strtof+0xa0>)
 800ad38:	f7f5 fed4 	bl	8000ae4 <__aeabi_dcmpun>
 800ad3c:	b940      	cbnz	r0, 800ad50 <strtof+0x88>
 800ad3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad42:	4630      	mov	r0, r6
 800ad44:	4621      	mov	r1, r4
 800ad46:	4b08      	ldr	r3, [pc, #32]	; (800ad68 <strtof+0xa0>)
 800ad48:	f7f5 feae 	bl	8000aa8 <__aeabi_dcmple>
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	d0d2      	beq.n	800acf6 <strtof+0x2e>
 800ad50:	2222      	movs	r2, #34	; 0x22
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	601a      	str	r2, [r3, #0]
 800ad56:	e7ce      	b.n	800acf6 <strtof+0x2e>
 800ad58:	20000014 	.word	0x20000014
 800ad5c:	2000007c 	.word	0x2000007c
 800ad60:	0801afe8 	.word	0x0801afe8
 800ad64:	7f7fffff 	.word	0x7f7fffff
 800ad68:	7fefffff 	.word	0x7fefffff

0800ad6c <_strtol_l.isra.0>:
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad72:	4686      	mov	lr, r0
 800ad74:	d001      	beq.n	800ad7a <_strtol_l.isra.0+0xe>
 800ad76:	2b24      	cmp	r3, #36	; 0x24
 800ad78:	d906      	bls.n	800ad88 <_strtol_l.isra.0+0x1c>
 800ad7a:	f7fe fcb9 	bl	80096f0 <__errno>
 800ad7e:	2316      	movs	r3, #22
 800ad80:	6003      	str	r3, [r0, #0]
 800ad82:	2000      	movs	r0, #0
 800ad84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad88:	468c      	mov	ip, r1
 800ad8a:	4e3a      	ldr	r6, [pc, #232]	; (800ae74 <_strtol_l.isra.0+0x108>)
 800ad8c:	4660      	mov	r0, ip
 800ad8e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ad92:	5da5      	ldrb	r5, [r4, r6]
 800ad94:	f015 0508 	ands.w	r5, r5, #8
 800ad98:	d1f8      	bne.n	800ad8c <_strtol_l.isra.0+0x20>
 800ad9a:	2c2d      	cmp	r4, #45	; 0x2d
 800ad9c:	d133      	bne.n	800ae06 <_strtol_l.isra.0+0x9a>
 800ad9e:	f04f 0801 	mov.w	r8, #1
 800ada2:	f89c 4000 	ldrb.w	r4, [ip]
 800ada6:	f100 0c02 	add.w	ip, r0, #2
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d05d      	beq.n	800ae6a <_strtol_l.isra.0+0xfe>
 800adae:	2b10      	cmp	r3, #16
 800adb0:	d10c      	bne.n	800adcc <_strtol_l.isra.0+0x60>
 800adb2:	2c30      	cmp	r4, #48	; 0x30
 800adb4:	d10a      	bne.n	800adcc <_strtol_l.isra.0+0x60>
 800adb6:	f89c 0000 	ldrb.w	r0, [ip]
 800adba:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800adbe:	2858      	cmp	r0, #88	; 0x58
 800adc0:	d14e      	bne.n	800ae60 <_strtol_l.isra.0+0xf4>
 800adc2:	2310      	movs	r3, #16
 800adc4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800adc8:	f10c 0c02 	add.w	ip, ip, #2
 800adcc:	2500      	movs	r5, #0
 800adce:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800add2:	3f01      	subs	r7, #1
 800add4:	fbb7 f9f3 	udiv	r9, r7, r3
 800add8:	4628      	mov	r0, r5
 800adda:	fb03 7a19 	mls	sl, r3, r9, r7
 800adde:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800ade2:	2e09      	cmp	r6, #9
 800ade4:	d818      	bhi.n	800ae18 <_strtol_l.isra.0+0xac>
 800ade6:	4634      	mov	r4, r6
 800ade8:	42a3      	cmp	r3, r4
 800adea:	dd24      	ble.n	800ae36 <_strtol_l.isra.0+0xca>
 800adec:	2d00      	cmp	r5, #0
 800adee:	db1f      	blt.n	800ae30 <_strtol_l.isra.0+0xc4>
 800adf0:	4581      	cmp	r9, r0
 800adf2:	d31d      	bcc.n	800ae30 <_strtol_l.isra.0+0xc4>
 800adf4:	d101      	bne.n	800adfa <_strtol_l.isra.0+0x8e>
 800adf6:	45a2      	cmp	sl, r4
 800adf8:	db1a      	blt.n	800ae30 <_strtol_l.isra.0+0xc4>
 800adfa:	2501      	movs	r5, #1
 800adfc:	fb00 4003 	mla	r0, r0, r3, r4
 800ae00:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ae04:	e7eb      	b.n	800adde <_strtol_l.isra.0+0x72>
 800ae06:	2c2b      	cmp	r4, #43	; 0x2b
 800ae08:	bf08      	it	eq
 800ae0a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800ae0e:	46a8      	mov	r8, r5
 800ae10:	bf08      	it	eq
 800ae12:	f100 0c02 	addeq.w	ip, r0, #2
 800ae16:	e7c8      	b.n	800adaa <_strtol_l.isra.0+0x3e>
 800ae18:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800ae1c:	2e19      	cmp	r6, #25
 800ae1e:	d801      	bhi.n	800ae24 <_strtol_l.isra.0+0xb8>
 800ae20:	3c37      	subs	r4, #55	; 0x37
 800ae22:	e7e1      	b.n	800ade8 <_strtol_l.isra.0+0x7c>
 800ae24:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800ae28:	2e19      	cmp	r6, #25
 800ae2a:	d804      	bhi.n	800ae36 <_strtol_l.isra.0+0xca>
 800ae2c:	3c57      	subs	r4, #87	; 0x57
 800ae2e:	e7db      	b.n	800ade8 <_strtol_l.isra.0+0x7c>
 800ae30:	f04f 35ff 	mov.w	r5, #4294967295
 800ae34:	e7e4      	b.n	800ae00 <_strtol_l.isra.0+0x94>
 800ae36:	2d00      	cmp	r5, #0
 800ae38:	da08      	bge.n	800ae4c <_strtol_l.isra.0+0xe0>
 800ae3a:	2322      	movs	r3, #34	; 0x22
 800ae3c:	4638      	mov	r0, r7
 800ae3e:	f8ce 3000 	str.w	r3, [lr]
 800ae42:	2a00      	cmp	r2, #0
 800ae44:	d09e      	beq.n	800ad84 <_strtol_l.isra.0+0x18>
 800ae46:	f10c 31ff 	add.w	r1, ip, #4294967295
 800ae4a:	e007      	b.n	800ae5c <_strtol_l.isra.0+0xf0>
 800ae4c:	f1b8 0f00 	cmp.w	r8, #0
 800ae50:	d000      	beq.n	800ae54 <_strtol_l.isra.0+0xe8>
 800ae52:	4240      	negs	r0, r0
 800ae54:	2a00      	cmp	r2, #0
 800ae56:	d095      	beq.n	800ad84 <_strtol_l.isra.0+0x18>
 800ae58:	2d00      	cmp	r5, #0
 800ae5a:	d1f4      	bne.n	800ae46 <_strtol_l.isra.0+0xda>
 800ae5c:	6011      	str	r1, [r2, #0]
 800ae5e:	e791      	b.n	800ad84 <_strtol_l.isra.0+0x18>
 800ae60:	2430      	movs	r4, #48	; 0x30
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d1b2      	bne.n	800adcc <_strtol_l.isra.0+0x60>
 800ae66:	2308      	movs	r3, #8
 800ae68:	e7b0      	b.n	800adcc <_strtol_l.isra.0+0x60>
 800ae6a:	2c30      	cmp	r4, #48	; 0x30
 800ae6c:	d0a3      	beq.n	800adb6 <_strtol_l.isra.0+0x4a>
 800ae6e:	230a      	movs	r3, #10
 800ae70:	e7ac      	b.n	800adcc <_strtol_l.isra.0+0x60>
 800ae72:	bf00      	nop
 800ae74:	0801abc9 	.word	0x0801abc9

0800ae78 <strtol>:
 800ae78:	4613      	mov	r3, r2
 800ae7a:	460a      	mov	r2, r1
 800ae7c:	4601      	mov	r1, r0
 800ae7e:	4802      	ldr	r0, [pc, #8]	; (800ae88 <strtol+0x10>)
 800ae80:	6800      	ldr	r0, [r0, #0]
 800ae82:	f7ff bf73 	b.w	800ad6c <_strtol_l.isra.0>
 800ae86:	bf00      	nop
 800ae88:	20000014 	.word	0x20000014

0800ae8c <quorem>:
 800ae8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae90:	6903      	ldr	r3, [r0, #16]
 800ae92:	690c      	ldr	r4, [r1, #16]
 800ae94:	4607      	mov	r7, r0
 800ae96:	42a3      	cmp	r3, r4
 800ae98:	f2c0 8083 	blt.w	800afa2 <quorem+0x116>
 800ae9c:	3c01      	subs	r4, #1
 800ae9e:	f100 0514 	add.w	r5, r0, #20
 800aea2:	f101 0814 	add.w	r8, r1, #20
 800aea6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aeaa:	9301      	str	r3, [sp, #4]
 800aeac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aeb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	fbb2 f6f3 	udiv	r6, r2, r3
 800aebc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aec0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aec4:	d332      	bcc.n	800af2c <quorem+0xa0>
 800aec6:	f04f 0e00 	mov.w	lr, #0
 800aeca:	4640      	mov	r0, r8
 800aecc:	46ac      	mov	ip, r5
 800aece:	46f2      	mov	sl, lr
 800aed0:	f850 2b04 	ldr.w	r2, [r0], #4
 800aed4:	b293      	uxth	r3, r2
 800aed6:	fb06 e303 	mla	r3, r6, r3, lr
 800aeda:	0c12      	lsrs	r2, r2, #16
 800aedc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800aee0:	fb06 e202 	mla	r2, r6, r2, lr
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	ebaa 0303 	sub.w	r3, sl, r3
 800aeea:	f8dc a000 	ldr.w	sl, [ip]
 800aeee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aef2:	fa1f fa8a 	uxth.w	sl, sl
 800aef6:	4453      	add	r3, sl
 800aef8:	fa1f fa82 	uxth.w	sl, r2
 800aefc:	f8dc 2000 	ldr.w	r2, [ip]
 800af00:	4581      	cmp	r9, r0
 800af02:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800af06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af0a:	b29b      	uxth	r3, r3
 800af0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af10:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800af14:	f84c 3b04 	str.w	r3, [ip], #4
 800af18:	d2da      	bcs.n	800aed0 <quorem+0x44>
 800af1a:	f855 300b 	ldr.w	r3, [r5, fp]
 800af1e:	b92b      	cbnz	r3, 800af2c <quorem+0xa0>
 800af20:	9b01      	ldr	r3, [sp, #4]
 800af22:	3b04      	subs	r3, #4
 800af24:	429d      	cmp	r5, r3
 800af26:	461a      	mov	r2, r3
 800af28:	d32f      	bcc.n	800af8a <quorem+0xfe>
 800af2a:	613c      	str	r4, [r7, #16]
 800af2c:	4638      	mov	r0, r7
 800af2e:	f001 fd87 	bl	800ca40 <__mcmp>
 800af32:	2800      	cmp	r0, #0
 800af34:	db25      	blt.n	800af82 <quorem+0xf6>
 800af36:	4628      	mov	r0, r5
 800af38:	f04f 0c00 	mov.w	ip, #0
 800af3c:	3601      	adds	r6, #1
 800af3e:	f858 1b04 	ldr.w	r1, [r8], #4
 800af42:	f8d0 e000 	ldr.w	lr, [r0]
 800af46:	b28b      	uxth	r3, r1
 800af48:	ebac 0303 	sub.w	r3, ip, r3
 800af4c:	fa1f f28e 	uxth.w	r2, lr
 800af50:	4413      	add	r3, r2
 800af52:	0c0a      	lsrs	r2, r1, #16
 800af54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800af58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af5c:	b29b      	uxth	r3, r3
 800af5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af62:	45c1      	cmp	r9, r8
 800af64:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800af68:	f840 3b04 	str.w	r3, [r0], #4
 800af6c:	d2e7      	bcs.n	800af3e <quorem+0xb2>
 800af6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af76:	b922      	cbnz	r2, 800af82 <quorem+0xf6>
 800af78:	3b04      	subs	r3, #4
 800af7a:	429d      	cmp	r5, r3
 800af7c:	461a      	mov	r2, r3
 800af7e:	d30a      	bcc.n	800af96 <quorem+0x10a>
 800af80:	613c      	str	r4, [r7, #16]
 800af82:	4630      	mov	r0, r6
 800af84:	b003      	add	sp, #12
 800af86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af8a:	6812      	ldr	r2, [r2, #0]
 800af8c:	3b04      	subs	r3, #4
 800af8e:	2a00      	cmp	r2, #0
 800af90:	d1cb      	bne.n	800af2a <quorem+0x9e>
 800af92:	3c01      	subs	r4, #1
 800af94:	e7c6      	b.n	800af24 <quorem+0x98>
 800af96:	6812      	ldr	r2, [r2, #0]
 800af98:	3b04      	subs	r3, #4
 800af9a:	2a00      	cmp	r2, #0
 800af9c:	d1f0      	bne.n	800af80 <quorem+0xf4>
 800af9e:	3c01      	subs	r4, #1
 800afa0:	e7eb      	b.n	800af7a <quorem+0xee>
 800afa2:	2000      	movs	r0, #0
 800afa4:	e7ee      	b.n	800af84 <quorem+0xf8>
	...

0800afa8 <_dtoa_r>:
 800afa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afac:	4616      	mov	r6, r2
 800afae:	461f      	mov	r7, r3
 800afb0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800afb2:	b099      	sub	sp, #100	; 0x64
 800afb4:	4605      	mov	r5, r0
 800afb6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800afba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800afbe:	b974      	cbnz	r4, 800afde <_dtoa_r+0x36>
 800afc0:	2010      	movs	r0, #16
 800afc2:	f001 fa43 	bl	800c44c <malloc>
 800afc6:	4602      	mov	r2, r0
 800afc8:	6268      	str	r0, [r5, #36]	; 0x24
 800afca:	b920      	cbnz	r0, 800afd6 <_dtoa_r+0x2e>
 800afcc:	21ea      	movs	r1, #234	; 0xea
 800afce:	4bae      	ldr	r3, [pc, #696]	; (800b288 <_dtoa_r+0x2e0>)
 800afd0:	48ae      	ldr	r0, [pc, #696]	; (800b28c <_dtoa_r+0x2e4>)
 800afd2:	f002 fbe1 	bl	800d798 <__assert_func>
 800afd6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800afda:	6004      	str	r4, [r0, #0]
 800afdc:	60c4      	str	r4, [r0, #12]
 800afde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800afe0:	6819      	ldr	r1, [r3, #0]
 800afe2:	b151      	cbz	r1, 800affa <_dtoa_r+0x52>
 800afe4:	685a      	ldr	r2, [r3, #4]
 800afe6:	2301      	movs	r3, #1
 800afe8:	4093      	lsls	r3, r2
 800afea:	604a      	str	r2, [r1, #4]
 800afec:	608b      	str	r3, [r1, #8]
 800afee:	4628      	mov	r0, r5
 800aff0:	f001 faa2 	bl	800c538 <_Bfree>
 800aff4:	2200      	movs	r2, #0
 800aff6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aff8:	601a      	str	r2, [r3, #0]
 800affa:	1e3b      	subs	r3, r7, #0
 800affc:	bfaf      	iteee	ge
 800affe:	2300      	movge	r3, #0
 800b000:	2201      	movlt	r2, #1
 800b002:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b006:	9305      	strlt	r3, [sp, #20]
 800b008:	bfa8      	it	ge
 800b00a:	f8c8 3000 	strge.w	r3, [r8]
 800b00e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b012:	4b9f      	ldr	r3, [pc, #636]	; (800b290 <_dtoa_r+0x2e8>)
 800b014:	bfb8      	it	lt
 800b016:	f8c8 2000 	strlt.w	r2, [r8]
 800b01a:	ea33 0309 	bics.w	r3, r3, r9
 800b01e:	d119      	bne.n	800b054 <_dtoa_r+0xac>
 800b020:	f242 730f 	movw	r3, #9999	; 0x270f
 800b024:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b026:	6013      	str	r3, [r2, #0]
 800b028:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b02c:	4333      	orrs	r3, r6
 800b02e:	f000 8580 	beq.w	800bb32 <_dtoa_r+0xb8a>
 800b032:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b034:	b953      	cbnz	r3, 800b04c <_dtoa_r+0xa4>
 800b036:	4b97      	ldr	r3, [pc, #604]	; (800b294 <_dtoa_r+0x2ec>)
 800b038:	e022      	b.n	800b080 <_dtoa_r+0xd8>
 800b03a:	4b97      	ldr	r3, [pc, #604]	; (800b298 <_dtoa_r+0x2f0>)
 800b03c:	9308      	str	r3, [sp, #32]
 800b03e:	3308      	adds	r3, #8
 800b040:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b042:	6013      	str	r3, [r2, #0]
 800b044:	9808      	ldr	r0, [sp, #32]
 800b046:	b019      	add	sp, #100	; 0x64
 800b048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b04c:	4b91      	ldr	r3, [pc, #580]	; (800b294 <_dtoa_r+0x2ec>)
 800b04e:	9308      	str	r3, [sp, #32]
 800b050:	3303      	adds	r3, #3
 800b052:	e7f5      	b.n	800b040 <_dtoa_r+0x98>
 800b054:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b058:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b05c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b060:	2200      	movs	r2, #0
 800b062:	2300      	movs	r3, #0
 800b064:	f7f5 fd0c 	bl	8000a80 <__aeabi_dcmpeq>
 800b068:	4680      	mov	r8, r0
 800b06a:	b158      	cbz	r0, 800b084 <_dtoa_r+0xdc>
 800b06c:	2301      	movs	r3, #1
 800b06e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b070:	6013      	str	r3, [r2, #0]
 800b072:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b074:	2b00      	cmp	r3, #0
 800b076:	f000 8559 	beq.w	800bb2c <_dtoa_r+0xb84>
 800b07a:	4888      	ldr	r0, [pc, #544]	; (800b29c <_dtoa_r+0x2f4>)
 800b07c:	6018      	str	r0, [r3, #0]
 800b07e:	1e43      	subs	r3, r0, #1
 800b080:	9308      	str	r3, [sp, #32]
 800b082:	e7df      	b.n	800b044 <_dtoa_r+0x9c>
 800b084:	ab16      	add	r3, sp, #88	; 0x58
 800b086:	9301      	str	r3, [sp, #4]
 800b088:	ab17      	add	r3, sp, #92	; 0x5c
 800b08a:	9300      	str	r3, [sp, #0]
 800b08c:	4628      	mov	r0, r5
 800b08e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b092:	f001 fdfb 	bl	800cc8c <__d2b>
 800b096:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b09a:	4682      	mov	sl, r0
 800b09c:	2c00      	cmp	r4, #0
 800b09e:	d07e      	beq.n	800b19e <_dtoa_r+0x1f6>
 800b0a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b0a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0a6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b0aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0ae:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b0b2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b0b6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	4b78      	ldr	r3, [pc, #480]	; (800b2a0 <_dtoa_r+0x2f8>)
 800b0be:	f7f5 f8bf 	bl	8000240 <__aeabi_dsub>
 800b0c2:	a36b      	add	r3, pc, #428	; (adr r3, 800b270 <_dtoa_r+0x2c8>)
 800b0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c8:	f7f5 fa72 	bl	80005b0 <__aeabi_dmul>
 800b0cc:	a36a      	add	r3, pc, #424	; (adr r3, 800b278 <_dtoa_r+0x2d0>)
 800b0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d2:	f7f5 f8b7 	bl	8000244 <__adddf3>
 800b0d6:	4606      	mov	r6, r0
 800b0d8:	4620      	mov	r0, r4
 800b0da:	460f      	mov	r7, r1
 800b0dc:	f7f5 f9fe 	bl	80004dc <__aeabi_i2d>
 800b0e0:	a367      	add	r3, pc, #412	; (adr r3, 800b280 <_dtoa_r+0x2d8>)
 800b0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e6:	f7f5 fa63 	bl	80005b0 <__aeabi_dmul>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	4630      	mov	r0, r6
 800b0f0:	4639      	mov	r1, r7
 800b0f2:	f7f5 f8a7 	bl	8000244 <__adddf3>
 800b0f6:	4606      	mov	r6, r0
 800b0f8:	460f      	mov	r7, r1
 800b0fa:	f7f5 fd09 	bl	8000b10 <__aeabi_d2iz>
 800b0fe:	2200      	movs	r2, #0
 800b100:	4681      	mov	r9, r0
 800b102:	2300      	movs	r3, #0
 800b104:	4630      	mov	r0, r6
 800b106:	4639      	mov	r1, r7
 800b108:	f7f5 fcc4 	bl	8000a94 <__aeabi_dcmplt>
 800b10c:	b148      	cbz	r0, 800b122 <_dtoa_r+0x17a>
 800b10e:	4648      	mov	r0, r9
 800b110:	f7f5 f9e4 	bl	80004dc <__aeabi_i2d>
 800b114:	4632      	mov	r2, r6
 800b116:	463b      	mov	r3, r7
 800b118:	f7f5 fcb2 	bl	8000a80 <__aeabi_dcmpeq>
 800b11c:	b908      	cbnz	r0, 800b122 <_dtoa_r+0x17a>
 800b11e:	f109 39ff 	add.w	r9, r9, #4294967295
 800b122:	f1b9 0f16 	cmp.w	r9, #22
 800b126:	d857      	bhi.n	800b1d8 <_dtoa_r+0x230>
 800b128:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b12c:	4b5d      	ldr	r3, [pc, #372]	; (800b2a4 <_dtoa_r+0x2fc>)
 800b12e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b136:	f7f5 fcad 	bl	8000a94 <__aeabi_dcmplt>
 800b13a:	2800      	cmp	r0, #0
 800b13c:	d04e      	beq.n	800b1dc <_dtoa_r+0x234>
 800b13e:	2300      	movs	r3, #0
 800b140:	f109 39ff 	add.w	r9, r9, #4294967295
 800b144:	930f      	str	r3, [sp, #60]	; 0x3c
 800b146:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b148:	1b1c      	subs	r4, r3, r4
 800b14a:	1e63      	subs	r3, r4, #1
 800b14c:	9309      	str	r3, [sp, #36]	; 0x24
 800b14e:	bf49      	itett	mi
 800b150:	f1c4 0301 	rsbmi	r3, r4, #1
 800b154:	2300      	movpl	r3, #0
 800b156:	9306      	strmi	r3, [sp, #24]
 800b158:	2300      	movmi	r3, #0
 800b15a:	bf54      	ite	pl
 800b15c:	9306      	strpl	r3, [sp, #24]
 800b15e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b160:	f1b9 0f00 	cmp.w	r9, #0
 800b164:	db3c      	blt.n	800b1e0 <_dtoa_r+0x238>
 800b166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b168:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b16c:	444b      	add	r3, r9
 800b16e:	9309      	str	r3, [sp, #36]	; 0x24
 800b170:	2300      	movs	r3, #0
 800b172:	930a      	str	r3, [sp, #40]	; 0x28
 800b174:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b176:	2b09      	cmp	r3, #9
 800b178:	d86c      	bhi.n	800b254 <_dtoa_r+0x2ac>
 800b17a:	2b05      	cmp	r3, #5
 800b17c:	bfc4      	itt	gt
 800b17e:	3b04      	subgt	r3, #4
 800b180:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b182:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b184:	bfc8      	it	gt
 800b186:	2400      	movgt	r4, #0
 800b188:	f1a3 0302 	sub.w	r3, r3, #2
 800b18c:	bfd8      	it	le
 800b18e:	2401      	movle	r4, #1
 800b190:	2b03      	cmp	r3, #3
 800b192:	f200 808b 	bhi.w	800b2ac <_dtoa_r+0x304>
 800b196:	e8df f003 	tbb	[pc, r3]
 800b19a:	4f2d      	.short	0x4f2d
 800b19c:	5b4d      	.short	0x5b4d
 800b19e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b1a2:	441c      	add	r4, r3
 800b1a4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b1a8:	2b20      	cmp	r3, #32
 800b1aa:	bfc3      	ittte	gt
 800b1ac:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b1b0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800b1b4:	fa09 f303 	lslgt.w	r3, r9, r3
 800b1b8:	f1c3 0320 	rsble	r3, r3, #32
 800b1bc:	bfc6      	itte	gt
 800b1be:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b1c2:	4318      	orrgt	r0, r3
 800b1c4:	fa06 f003 	lslle.w	r0, r6, r3
 800b1c8:	f7f5 f978 	bl	80004bc <__aeabi_ui2d>
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b1d2:	3c01      	subs	r4, #1
 800b1d4:	9313      	str	r3, [sp, #76]	; 0x4c
 800b1d6:	e770      	b.n	800b0ba <_dtoa_r+0x112>
 800b1d8:	2301      	movs	r3, #1
 800b1da:	e7b3      	b.n	800b144 <_dtoa_r+0x19c>
 800b1dc:	900f      	str	r0, [sp, #60]	; 0x3c
 800b1de:	e7b2      	b.n	800b146 <_dtoa_r+0x19e>
 800b1e0:	9b06      	ldr	r3, [sp, #24]
 800b1e2:	eba3 0309 	sub.w	r3, r3, r9
 800b1e6:	9306      	str	r3, [sp, #24]
 800b1e8:	f1c9 0300 	rsb	r3, r9, #0
 800b1ec:	930a      	str	r3, [sp, #40]	; 0x28
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	930e      	str	r3, [sp, #56]	; 0x38
 800b1f2:	e7bf      	b.n	800b174 <_dtoa_r+0x1cc>
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	dc59      	bgt.n	800b2b2 <_dtoa_r+0x30a>
 800b1fe:	f04f 0b01 	mov.w	fp, #1
 800b202:	465b      	mov	r3, fp
 800b204:	f8cd b008 	str.w	fp, [sp, #8]
 800b208:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800b20c:	2200      	movs	r2, #0
 800b20e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b210:	6042      	str	r2, [r0, #4]
 800b212:	2204      	movs	r2, #4
 800b214:	f102 0614 	add.w	r6, r2, #20
 800b218:	429e      	cmp	r6, r3
 800b21a:	6841      	ldr	r1, [r0, #4]
 800b21c:	d94f      	bls.n	800b2be <_dtoa_r+0x316>
 800b21e:	4628      	mov	r0, r5
 800b220:	f001 f94a 	bl	800c4b8 <_Balloc>
 800b224:	9008      	str	r0, [sp, #32]
 800b226:	2800      	cmp	r0, #0
 800b228:	d14d      	bne.n	800b2c6 <_dtoa_r+0x31e>
 800b22a:	4602      	mov	r2, r0
 800b22c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b230:	4b1d      	ldr	r3, [pc, #116]	; (800b2a8 <_dtoa_r+0x300>)
 800b232:	e6cd      	b.n	800afd0 <_dtoa_r+0x28>
 800b234:	2301      	movs	r3, #1
 800b236:	e7de      	b.n	800b1f6 <_dtoa_r+0x24e>
 800b238:	2300      	movs	r3, #0
 800b23a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b23c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b23e:	eb09 0b03 	add.w	fp, r9, r3
 800b242:	f10b 0301 	add.w	r3, fp, #1
 800b246:	2b01      	cmp	r3, #1
 800b248:	9302      	str	r3, [sp, #8]
 800b24a:	bfb8      	it	lt
 800b24c:	2301      	movlt	r3, #1
 800b24e:	e7dd      	b.n	800b20c <_dtoa_r+0x264>
 800b250:	2301      	movs	r3, #1
 800b252:	e7f2      	b.n	800b23a <_dtoa_r+0x292>
 800b254:	2401      	movs	r4, #1
 800b256:	2300      	movs	r3, #0
 800b258:	940b      	str	r4, [sp, #44]	; 0x2c
 800b25a:	9322      	str	r3, [sp, #136]	; 0x88
 800b25c:	f04f 3bff 	mov.w	fp, #4294967295
 800b260:	2200      	movs	r2, #0
 800b262:	2312      	movs	r3, #18
 800b264:	f8cd b008 	str.w	fp, [sp, #8]
 800b268:	9223      	str	r2, [sp, #140]	; 0x8c
 800b26a:	e7cf      	b.n	800b20c <_dtoa_r+0x264>
 800b26c:	f3af 8000 	nop.w
 800b270:	636f4361 	.word	0x636f4361
 800b274:	3fd287a7 	.word	0x3fd287a7
 800b278:	8b60c8b3 	.word	0x8b60c8b3
 800b27c:	3fc68a28 	.word	0x3fc68a28
 800b280:	509f79fb 	.word	0x509f79fb
 800b284:	3fd34413 	.word	0x3fd34413
 800b288:	0801acd6 	.word	0x0801acd6
 800b28c:	0801aced 	.word	0x0801aced
 800b290:	7ff00000 	.word	0x7ff00000
 800b294:	0801acd2 	.word	0x0801acd2
 800b298:	0801acc9 	.word	0x0801acc9
 800b29c:	0801ab55 	.word	0x0801ab55
 800b2a0:	3ff80000 	.word	0x3ff80000
 800b2a4:	0801aec8 	.word	0x0801aec8
 800b2a8:	0801ad4c 	.word	0x0801ad4c
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2b0:	e7d4      	b.n	800b25c <_dtoa_r+0x2b4>
 800b2b2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800b2b6:	465b      	mov	r3, fp
 800b2b8:	f8cd b008 	str.w	fp, [sp, #8]
 800b2bc:	e7a6      	b.n	800b20c <_dtoa_r+0x264>
 800b2be:	3101      	adds	r1, #1
 800b2c0:	6041      	str	r1, [r0, #4]
 800b2c2:	0052      	lsls	r2, r2, #1
 800b2c4:	e7a6      	b.n	800b214 <_dtoa_r+0x26c>
 800b2c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b2c8:	9a08      	ldr	r2, [sp, #32]
 800b2ca:	601a      	str	r2, [r3, #0]
 800b2cc:	9b02      	ldr	r3, [sp, #8]
 800b2ce:	2b0e      	cmp	r3, #14
 800b2d0:	f200 80a8 	bhi.w	800b424 <_dtoa_r+0x47c>
 800b2d4:	2c00      	cmp	r4, #0
 800b2d6:	f000 80a5 	beq.w	800b424 <_dtoa_r+0x47c>
 800b2da:	f1b9 0f00 	cmp.w	r9, #0
 800b2de:	dd34      	ble.n	800b34a <_dtoa_r+0x3a2>
 800b2e0:	4a9a      	ldr	r2, [pc, #616]	; (800b54c <_dtoa_r+0x5a4>)
 800b2e2:	f009 030f 	and.w	r3, r9, #15
 800b2e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b2ea:	f419 7f80 	tst.w	r9, #256	; 0x100
 800b2ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b2f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b2f6:	ea4f 1429 	mov.w	r4, r9, asr #4
 800b2fa:	d016      	beq.n	800b32a <_dtoa_r+0x382>
 800b2fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b300:	4b93      	ldr	r3, [pc, #588]	; (800b550 <_dtoa_r+0x5a8>)
 800b302:	2703      	movs	r7, #3
 800b304:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b308:	f7f5 fa7c 	bl	8000804 <__aeabi_ddiv>
 800b30c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b310:	f004 040f 	and.w	r4, r4, #15
 800b314:	4e8e      	ldr	r6, [pc, #568]	; (800b550 <_dtoa_r+0x5a8>)
 800b316:	b954      	cbnz	r4, 800b32e <_dtoa_r+0x386>
 800b318:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b31c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b320:	f7f5 fa70 	bl	8000804 <__aeabi_ddiv>
 800b324:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b328:	e029      	b.n	800b37e <_dtoa_r+0x3d6>
 800b32a:	2702      	movs	r7, #2
 800b32c:	e7f2      	b.n	800b314 <_dtoa_r+0x36c>
 800b32e:	07e1      	lsls	r1, r4, #31
 800b330:	d508      	bpl.n	800b344 <_dtoa_r+0x39c>
 800b332:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b336:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b33a:	f7f5 f939 	bl	80005b0 <__aeabi_dmul>
 800b33e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b342:	3701      	adds	r7, #1
 800b344:	1064      	asrs	r4, r4, #1
 800b346:	3608      	adds	r6, #8
 800b348:	e7e5      	b.n	800b316 <_dtoa_r+0x36e>
 800b34a:	f000 80a5 	beq.w	800b498 <_dtoa_r+0x4f0>
 800b34e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b352:	f1c9 0400 	rsb	r4, r9, #0
 800b356:	4b7d      	ldr	r3, [pc, #500]	; (800b54c <_dtoa_r+0x5a4>)
 800b358:	f004 020f 	and.w	r2, r4, #15
 800b35c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b364:	f7f5 f924 	bl	80005b0 <__aeabi_dmul>
 800b368:	2702      	movs	r7, #2
 800b36a:	2300      	movs	r3, #0
 800b36c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b370:	4e77      	ldr	r6, [pc, #476]	; (800b550 <_dtoa_r+0x5a8>)
 800b372:	1124      	asrs	r4, r4, #4
 800b374:	2c00      	cmp	r4, #0
 800b376:	f040 8084 	bne.w	800b482 <_dtoa_r+0x4da>
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d1d2      	bne.n	800b324 <_dtoa_r+0x37c>
 800b37e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b380:	2b00      	cmp	r3, #0
 800b382:	f000 808b 	beq.w	800b49c <_dtoa_r+0x4f4>
 800b386:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b38a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b38e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b392:	2200      	movs	r2, #0
 800b394:	4b6f      	ldr	r3, [pc, #444]	; (800b554 <_dtoa_r+0x5ac>)
 800b396:	f7f5 fb7d 	bl	8000a94 <__aeabi_dcmplt>
 800b39a:	2800      	cmp	r0, #0
 800b39c:	d07e      	beq.n	800b49c <_dtoa_r+0x4f4>
 800b39e:	9b02      	ldr	r3, [sp, #8]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d07b      	beq.n	800b49c <_dtoa_r+0x4f4>
 800b3a4:	f1bb 0f00 	cmp.w	fp, #0
 800b3a8:	dd38      	ble.n	800b41c <_dtoa_r+0x474>
 800b3aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	4b69      	ldr	r3, [pc, #420]	; (800b558 <_dtoa_r+0x5b0>)
 800b3b2:	f7f5 f8fd 	bl	80005b0 <__aeabi_dmul>
 800b3b6:	465c      	mov	r4, fp
 800b3b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b3bc:	f109 38ff 	add.w	r8, r9, #4294967295
 800b3c0:	3701      	adds	r7, #1
 800b3c2:	4638      	mov	r0, r7
 800b3c4:	f7f5 f88a 	bl	80004dc <__aeabi_i2d>
 800b3c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3cc:	f7f5 f8f0 	bl	80005b0 <__aeabi_dmul>
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	4b62      	ldr	r3, [pc, #392]	; (800b55c <_dtoa_r+0x5b4>)
 800b3d4:	f7f4 ff36 	bl	8000244 <__adddf3>
 800b3d8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b3dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b3e0:	9611      	str	r6, [sp, #68]	; 0x44
 800b3e2:	2c00      	cmp	r4, #0
 800b3e4:	d15d      	bne.n	800b4a2 <_dtoa_r+0x4fa>
 800b3e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	4b5c      	ldr	r3, [pc, #368]	; (800b560 <_dtoa_r+0x5b8>)
 800b3ee:	f7f4 ff27 	bl	8000240 <__aeabi_dsub>
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b3fa:	4633      	mov	r3, r6
 800b3fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b3fe:	f7f5 fb67 	bl	8000ad0 <__aeabi_dcmpgt>
 800b402:	2800      	cmp	r0, #0
 800b404:	f040 829e 	bne.w	800b944 <_dtoa_r+0x99c>
 800b408:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b40c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b40e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b412:	f7f5 fb3f 	bl	8000a94 <__aeabi_dcmplt>
 800b416:	2800      	cmp	r0, #0
 800b418:	f040 8292 	bne.w	800b940 <_dtoa_r+0x998>
 800b41c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b420:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b424:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b426:	2b00      	cmp	r3, #0
 800b428:	f2c0 8153 	blt.w	800b6d2 <_dtoa_r+0x72a>
 800b42c:	f1b9 0f0e 	cmp.w	r9, #14
 800b430:	f300 814f 	bgt.w	800b6d2 <_dtoa_r+0x72a>
 800b434:	4b45      	ldr	r3, [pc, #276]	; (800b54c <_dtoa_r+0x5a4>)
 800b436:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b43a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b43e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b442:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b444:	2b00      	cmp	r3, #0
 800b446:	f280 80db 	bge.w	800b600 <_dtoa_r+0x658>
 800b44a:	9b02      	ldr	r3, [sp, #8]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	f300 80d7 	bgt.w	800b600 <_dtoa_r+0x658>
 800b452:	f040 8274 	bne.w	800b93e <_dtoa_r+0x996>
 800b456:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b45a:	2200      	movs	r2, #0
 800b45c:	4b40      	ldr	r3, [pc, #256]	; (800b560 <_dtoa_r+0x5b8>)
 800b45e:	f7f5 f8a7 	bl	80005b0 <__aeabi_dmul>
 800b462:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b466:	f7f5 fb29 	bl	8000abc <__aeabi_dcmpge>
 800b46a:	9c02      	ldr	r4, [sp, #8]
 800b46c:	4626      	mov	r6, r4
 800b46e:	2800      	cmp	r0, #0
 800b470:	f040 824a 	bne.w	800b908 <_dtoa_r+0x960>
 800b474:	2331      	movs	r3, #49	; 0x31
 800b476:	9f08      	ldr	r7, [sp, #32]
 800b478:	f109 0901 	add.w	r9, r9, #1
 800b47c:	f807 3b01 	strb.w	r3, [r7], #1
 800b480:	e246      	b.n	800b910 <_dtoa_r+0x968>
 800b482:	07e2      	lsls	r2, r4, #31
 800b484:	d505      	bpl.n	800b492 <_dtoa_r+0x4ea>
 800b486:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b48a:	f7f5 f891 	bl	80005b0 <__aeabi_dmul>
 800b48e:	2301      	movs	r3, #1
 800b490:	3701      	adds	r7, #1
 800b492:	1064      	asrs	r4, r4, #1
 800b494:	3608      	adds	r6, #8
 800b496:	e76d      	b.n	800b374 <_dtoa_r+0x3cc>
 800b498:	2702      	movs	r7, #2
 800b49a:	e770      	b.n	800b37e <_dtoa_r+0x3d6>
 800b49c:	46c8      	mov	r8, r9
 800b49e:	9c02      	ldr	r4, [sp, #8]
 800b4a0:	e78f      	b.n	800b3c2 <_dtoa_r+0x41a>
 800b4a2:	9908      	ldr	r1, [sp, #32]
 800b4a4:	4b29      	ldr	r3, [pc, #164]	; (800b54c <_dtoa_r+0x5a4>)
 800b4a6:	4421      	add	r1, r4
 800b4a8:	9112      	str	r1, [sp, #72]	; 0x48
 800b4aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b4ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b4b0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b4b4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b4b8:	2900      	cmp	r1, #0
 800b4ba:	d055      	beq.n	800b568 <_dtoa_r+0x5c0>
 800b4bc:	2000      	movs	r0, #0
 800b4be:	4929      	ldr	r1, [pc, #164]	; (800b564 <_dtoa_r+0x5bc>)
 800b4c0:	f7f5 f9a0 	bl	8000804 <__aeabi_ddiv>
 800b4c4:	463b      	mov	r3, r7
 800b4c6:	4632      	mov	r2, r6
 800b4c8:	f7f4 feba 	bl	8000240 <__aeabi_dsub>
 800b4cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b4d0:	9f08      	ldr	r7, [sp, #32]
 800b4d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4d6:	f7f5 fb1b 	bl	8000b10 <__aeabi_d2iz>
 800b4da:	4604      	mov	r4, r0
 800b4dc:	f7f4 fffe 	bl	80004dc <__aeabi_i2d>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	460b      	mov	r3, r1
 800b4e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4e8:	f7f4 feaa 	bl	8000240 <__aeabi_dsub>
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	460b      	mov	r3, r1
 800b4f0:	3430      	adds	r4, #48	; 0x30
 800b4f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b4f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b4fa:	f807 4b01 	strb.w	r4, [r7], #1
 800b4fe:	f7f5 fac9 	bl	8000a94 <__aeabi_dcmplt>
 800b502:	2800      	cmp	r0, #0
 800b504:	d174      	bne.n	800b5f0 <_dtoa_r+0x648>
 800b506:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b50a:	2000      	movs	r0, #0
 800b50c:	4911      	ldr	r1, [pc, #68]	; (800b554 <_dtoa_r+0x5ac>)
 800b50e:	f7f4 fe97 	bl	8000240 <__aeabi_dsub>
 800b512:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b516:	f7f5 fabd 	bl	8000a94 <__aeabi_dcmplt>
 800b51a:	2800      	cmp	r0, #0
 800b51c:	f040 80b6 	bne.w	800b68c <_dtoa_r+0x6e4>
 800b520:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b522:	429f      	cmp	r7, r3
 800b524:	f43f af7a 	beq.w	800b41c <_dtoa_r+0x474>
 800b528:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b52c:	2200      	movs	r2, #0
 800b52e:	4b0a      	ldr	r3, [pc, #40]	; (800b558 <_dtoa_r+0x5b0>)
 800b530:	f7f5 f83e 	bl	80005b0 <__aeabi_dmul>
 800b534:	2200      	movs	r2, #0
 800b536:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b53a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b53e:	4b06      	ldr	r3, [pc, #24]	; (800b558 <_dtoa_r+0x5b0>)
 800b540:	f7f5 f836 	bl	80005b0 <__aeabi_dmul>
 800b544:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b548:	e7c3      	b.n	800b4d2 <_dtoa_r+0x52a>
 800b54a:	bf00      	nop
 800b54c:	0801aec8 	.word	0x0801aec8
 800b550:	0801aea0 	.word	0x0801aea0
 800b554:	3ff00000 	.word	0x3ff00000
 800b558:	40240000 	.word	0x40240000
 800b55c:	401c0000 	.word	0x401c0000
 800b560:	40140000 	.word	0x40140000
 800b564:	3fe00000 	.word	0x3fe00000
 800b568:	4630      	mov	r0, r6
 800b56a:	4639      	mov	r1, r7
 800b56c:	f7f5 f820 	bl	80005b0 <__aeabi_dmul>
 800b570:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b572:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b576:	9c08      	ldr	r4, [sp, #32]
 800b578:	9314      	str	r3, [sp, #80]	; 0x50
 800b57a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b57e:	f7f5 fac7 	bl	8000b10 <__aeabi_d2iz>
 800b582:	9015      	str	r0, [sp, #84]	; 0x54
 800b584:	f7f4 ffaa 	bl	80004dc <__aeabi_i2d>
 800b588:	4602      	mov	r2, r0
 800b58a:	460b      	mov	r3, r1
 800b58c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b590:	f7f4 fe56 	bl	8000240 <__aeabi_dsub>
 800b594:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b596:	4606      	mov	r6, r0
 800b598:	3330      	adds	r3, #48	; 0x30
 800b59a:	f804 3b01 	strb.w	r3, [r4], #1
 800b59e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b5a0:	460f      	mov	r7, r1
 800b5a2:	429c      	cmp	r4, r3
 800b5a4:	f04f 0200 	mov.w	r2, #0
 800b5a8:	d124      	bne.n	800b5f4 <_dtoa_r+0x64c>
 800b5aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b5ae:	4bb3      	ldr	r3, [pc, #716]	; (800b87c <_dtoa_r+0x8d4>)
 800b5b0:	f7f4 fe48 	bl	8000244 <__adddf3>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	460b      	mov	r3, r1
 800b5b8:	4630      	mov	r0, r6
 800b5ba:	4639      	mov	r1, r7
 800b5bc:	f7f5 fa88 	bl	8000ad0 <__aeabi_dcmpgt>
 800b5c0:	2800      	cmp	r0, #0
 800b5c2:	d162      	bne.n	800b68a <_dtoa_r+0x6e2>
 800b5c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b5c8:	2000      	movs	r0, #0
 800b5ca:	49ac      	ldr	r1, [pc, #688]	; (800b87c <_dtoa_r+0x8d4>)
 800b5cc:	f7f4 fe38 	bl	8000240 <__aeabi_dsub>
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	4630      	mov	r0, r6
 800b5d6:	4639      	mov	r1, r7
 800b5d8:	f7f5 fa5c 	bl	8000a94 <__aeabi_dcmplt>
 800b5dc:	2800      	cmp	r0, #0
 800b5de:	f43f af1d 	beq.w	800b41c <_dtoa_r+0x474>
 800b5e2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b5e4:	1e7b      	subs	r3, r7, #1
 800b5e6:	9314      	str	r3, [sp, #80]	; 0x50
 800b5e8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b5ec:	2b30      	cmp	r3, #48	; 0x30
 800b5ee:	d0f8      	beq.n	800b5e2 <_dtoa_r+0x63a>
 800b5f0:	46c1      	mov	r9, r8
 800b5f2:	e03a      	b.n	800b66a <_dtoa_r+0x6c2>
 800b5f4:	4ba2      	ldr	r3, [pc, #648]	; (800b880 <_dtoa_r+0x8d8>)
 800b5f6:	f7f4 ffdb 	bl	80005b0 <__aeabi_dmul>
 800b5fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b5fe:	e7bc      	b.n	800b57a <_dtoa_r+0x5d2>
 800b600:	9f08      	ldr	r7, [sp, #32]
 800b602:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b606:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b60a:	f7f5 f8fb 	bl	8000804 <__aeabi_ddiv>
 800b60e:	f7f5 fa7f 	bl	8000b10 <__aeabi_d2iz>
 800b612:	4604      	mov	r4, r0
 800b614:	f7f4 ff62 	bl	80004dc <__aeabi_i2d>
 800b618:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b61c:	f7f4 ffc8 	bl	80005b0 <__aeabi_dmul>
 800b620:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b624:	460b      	mov	r3, r1
 800b626:	4602      	mov	r2, r0
 800b628:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b62c:	f7f4 fe08 	bl	8000240 <__aeabi_dsub>
 800b630:	f807 6b01 	strb.w	r6, [r7], #1
 800b634:	9e08      	ldr	r6, [sp, #32]
 800b636:	9b02      	ldr	r3, [sp, #8]
 800b638:	1bbe      	subs	r6, r7, r6
 800b63a:	42b3      	cmp	r3, r6
 800b63c:	d13a      	bne.n	800b6b4 <_dtoa_r+0x70c>
 800b63e:	4602      	mov	r2, r0
 800b640:	460b      	mov	r3, r1
 800b642:	f7f4 fdff 	bl	8000244 <__adddf3>
 800b646:	4602      	mov	r2, r0
 800b648:	460b      	mov	r3, r1
 800b64a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b64e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b652:	f7f5 fa3d 	bl	8000ad0 <__aeabi_dcmpgt>
 800b656:	bb58      	cbnz	r0, 800b6b0 <_dtoa_r+0x708>
 800b658:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b65c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b660:	f7f5 fa0e 	bl	8000a80 <__aeabi_dcmpeq>
 800b664:	b108      	cbz	r0, 800b66a <_dtoa_r+0x6c2>
 800b666:	07e1      	lsls	r1, r4, #31
 800b668:	d422      	bmi.n	800b6b0 <_dtoa_r+0x708>
 800b66a:	4628      	mov	r0, r5
 800b66c:	4651      	mov	r1, sl
 800b66e:	f000 ff63 	bl	800c538 <_Bfree>
 800b672:	2300      	movs	r3, #0
 800b674:	703b      	strb	r3, [r7, #0]
 800b676:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b678:	f109 0001 	add.w	r0, r9, #1
 800b67c:	6018      	str	r0, [r3, #0]
 800b67e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b680:	2b00      	cmp	r3, #0
 800b682:	f43f acdf 	beq.w	800b044 <_dtoa_r+0x9c>
 800b686:	601f      	str	r7, [r3, #0]
 800b688:	e4dc      	b.n	800b044 <_dtoa_r+0x9c>
 800b68a:	4627      	mov	r7, r4
 800b68c:	463b      	mov	r3, r7
 800b68e:	461f      	mov	r7, r3
 800b690:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b694:	2a39      	cmp	r2, #57	; 0x39
 800b696:	d107      	bne.n	800b6a8 <_dtoa_r+0x700>
 800b698:	9a08      	ldr	r2, [sp, #32]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d1f7      	bne.n	800b68e <_dtoa_r+0x6e6>
 800b69e:	2230      	movs	r2, #48	; 0x30
 800b6a0:	9908      	ldr	r1, [sp, #32]
 800b6a2:	f108 0801 	add.w	r8, r8, #1
 800b6a6:	700a      	strb	r2, [r1, #0]
 800b6a8:	781a      	ldrb	r2, [r3, #0]
 800b6aa:	3201      	adds	r2, #1
 800b6ac:	701a      	strb	r2, [r3, #0]
 800b6ae:	e79f      	b.n	800b5f0 <_dtoa_r+0x648>
 800b6b0:	46c8      	mov	r8, r9
 800b6b2:	e7eb      	b.n	800b68c <_dtoa_r+0x6e4>
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	4b72      	ldr	r3, [pc, #456]	; (800b880 <_dtoa_r+0x8d8>)
 800b6b8:	f7f4 ff7a 	bl	80005b0 <__aeabi_dmul>
 800b6bc:	4602      	mov	r2, r0
 800b6be:	460b      	mov	r3, r1
 800b6c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	f7f5 f9da 	bl	8000a80 <__aeabi_dcmpeq>
 800b6cc:	2800      	cmp	r0, #0
 800b6ce:	d098      	beq.n	800b602 <_dtoa_r+0x65a>
 800b6d0:	e7cb      	b.n	800b66a <_dtoa_r+0x6c2>
 800b6d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b6d4:	2a00      	cmp	r2, #0
 800b6d6:	f000 80cd 	beq.w	800b874 <_dtoa_r+0x8cc>
 800b6da:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b6dc:	2a01      	cmp	r2, #1
 800b6de:	f300 80af 	bgt.w	800b840 <_dtoa_r+0x898>
 800b6e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b6e4:	2a00      	cmp	r2, #0
 800b6e6:	f000 80a7 	beq.w	800b838 <_dtoa_r+0x890>
 800b6ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b6ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b6f0:	9f06      	ldr	r7, [sp, #24]
 800b6f2:	9a06      	ldr	r2, [sp, #24]
 800b6f4:	2101      	movs	r1, #1
 800b6f6:	441a      	add	r2, r3
 800b6f8:	9206      	str	r2, [sp, #24]
 800b6fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6fc:	4628      	mov	r0, r5
 800b6fe:	441a      	add	r2, r3
 800b700:	9209      	str	r2, [sp, #36]	; 0x24
 800b702:	f001 f81d 	bl	800c740 <__i2b>
 800b706:	4606      	mov	r6, r0
 800b708:	2f00      	cmp	r7, #0
 800b70a:	dd0c      	ble.n	800b726 <_dtoa_r+0x77e>
 800b70c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b70e:	2b00      	cmp	r3, #0
 800b710:	dd09      	ble.n	800b726 <_dtoa_r+0x77e>
 800b712:	42bb      	cmp	r3, r7
 800b714:	bfa8      	it	ge
 800b716:	463b      	movge	r3, r7
 800b718:	9a06      	ldr	r2, [sp, #24]
 800b71a:	1aff      	subs	r7, r7, r3
 800b71c:	1ad2      	subs	r2, r2, r3
 800b71e:	9206      	str	r2, [sp, #24]
 800b720:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b722:	1ad3      	subs	r3, r2, r3
 800b724:	9309      	str	r3, [sp, #36]	; 0x24
 800b726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b728:	b1f3      	cbz	r3, 800b768 <_dtoa_r+0x7c0>
 800b72a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	f000 80a9 	beq.w	800b884 <_dtoa_r+0x8dc>
 800b732:	2c00      	cmp	r4, #0
 800b734:	dd10      	ble.n	800b758 <_dtoa_r+0x7b0>
 800b736:	4631      	mov	r1, r6
 800b738:	4622      	mov	r2, r4
 800b73a:	4628      	mov	r0, r5
 800b73c:	f001 f8ba 	bl	800c8b4 <__pow5mult>
 800b740:	4652      	mov	r2, sl
 800b742:	4601      	mov	r1, r0
 800b744:	4606      	mov	r6, r0
 800b746:	4628      	mov	r0, r5
 800b748:	f001 f810 	bl	800c76c <__multiply>
 800b74c:	4680      	mov	r8, r0
 800b74e:	4651      	mov	r1, sl
 800b750:	4628      	mov	r0, r5
 800b752:	f000 fef1 	bl	800c538 <_Bfree>
 800b756:	46c2      	mov	sl, r8
 800b758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b75a:	1b1a      	subs	r2, r3, r4
 800b75c:	d004      	beq.n	800b768 <_dtoa_r+0x7c0>
 800b75e:	4651      	mov	r1, sl
 800b760:	4628      	mov	r0, r5
 800b762:	f001 f8a7 	bl	800c8b4 <__pow5mult>
 800b766:	4682      	mov	sl, r0
 800b768:	2101      	movs	r1, #1
 800b76a:	4628      	mov	r0, r5
 800b76c:	f000 ffe8 	bl	800c740 <__i2b>
 800b770:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b772:	4604      	mov	r4, r0
 800b774:	2b00      	cmp	r3, #0
 800b776:	f340 8087 	ble.w	800b888 <_dtoa_r+0x8e0>
 800b77a:	461a      	mov	r2, r3
 800b77c:	4601      	mov	r1, r0
 800b77e:	4628      	mov	r0, r5
 800b780:	f001 f898 	bl	800c8b4 <__pow5mult>
 800b784:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b786:	4604      	mov	r4, r0
 800b788:	2b01      	cmp	r3, #1
 800b78a:	f340 8080 	ble.w	800b88e <_dtoa_r+0x8e6>
 800b78e:	f04f 0800 	mov.w	r8, #0
 800b792:	6923      	ldr	r3, [r4, #16]
 800b794:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b798:	6918      	ldr	r0, [r3, #16]
 800b79a:	f000 ff83 	bl	800c6a4 <__hi0bits>
 800b79e:	f1c0 0020 	rsb	r0, r0, #32
 800b7a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7a4:	4418      	add	r0, r3
 800b7a6:	f010 001f 	ands.w	r0, r0, #31
 800b7aa:	f000 8092 	beq.w	800b8d2 <_dtoa_r+0x92a>
 800b7ae:	f1c0 0320 	rsb	r3, r0, #32
 800b7b2:	2b04      	cmp	r3, #4
 800b7b4:	f340 808a 	ble.w	800b8cc <_dtoa_r+0x924>
 800b7b8:	f1c0 001c 	rsb	r0, r0, #28
 800b7bc:	9b06      	ldr	r3, [sp, #24]
 800b7be:	4407      	add	r7, r0
 800b7c0:	4403      	add	r3, r0
 800b7c2:	9306      	str	r3, [sp, #24]
 800b7c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7c6:	4403      	add	r3, r0
 800b7c8:	9309      	str	r3, [sp, #36]	; 0x24
 800b7ca:	9b06      	ldr	r3, [sp, #24]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	dd05      	ble.n	800b7dc <_dtoa_r+0x834>
 800b7d0:	4651      	mov	r1, sl
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	4628      	mov	r0, r5
 800b7d6:	f001 f8c7 	bl	800c968 <__lshift>
 800b7da:	4682      	mov	sl, r0
 800b7dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	dd05      	ble.n	800b7ee <_dtoa_r+0x846>
 800b7e2:	4621      	mov	r1, r4
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	4628      	mov	r0, r5
 800b7e8:	f001 f8be 	bl	800c968 <__lshift>
 800b7ec:	4604      	mov	r4, r0
 800b7ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d070      	beq.n	800b8d6 <_dtoa_r+0x92e>
 800b7f4:	4621      	mov	r1, r4
 800b7f6:	4650      	mov	r0, sl
 800b7f8:	f001 f922 	bl	800ca40 <__mcmp>
 800b7fc:	2800      	cmp	r0, #0
 800b7fe:	da6a      	bge.n	800b8d6 <_dtoa_r+0x92e>
 800b800:	2300      	movs	r3, #0
 800b802:	4651      	mov	r1, sl
 800b804:	220a      	movs	r2, #10
 800b806:	4628      	mov	r0, r5
 800b808:	f000 feb8 	bl	800c57c <__multadd>
 800b80c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b80e:	4682      	mov	sl, r0
 800b810:	f109 39ff 	add.w	r9, r9, #4294967295
 800b814:	2b00      	cmp	r3, #0
 800b816:	f000 8193 	beq.w	800bb40 <_dtoa_r+0xb98>
 800b81a:	4631      	mov	r1, r6
 800b81c:	2300      	movs	r3, #0
 800b81e:	220a      	movs	r2, #10
 800b820:	4628      	mov	r0, r5
 800b822:	f000 feab 	bl	800c57c <__multadd>
 800b826:	f1bb 0f00 	cmp.w	fp, #0
 800b82a:	4606      	mov	r6, r0
 800b82c:	f300 8093 	bgt.w	800b956 <_dtoa_r+0x9ae>
 800b830:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b832:	2b02      	cmp	r3, #2
 800b834:	dc57      	bgt.n	800b8e6 <_dtoa_r+0x93e>
 800b836:	e08e      	b.n	800b956 <_dtoa_r+0x9ae>
 800b838:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b83a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b83e:	e756      	b.n	800b6ee <_dtoa_r+0x746>
 800b840:	9b02      	ldr	r3, [sp, #8]
 800b842:	1e5c      	subs	r4, r3, #1
 800b844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b846:	42a3      	cmp	r3, r4
 800b848:	bfb7      	itett	lt
 800b84a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b84c:	1b1c      	subge	r4, r3, r4
 800b84e:	1ae2      	sublt	r2, r4, r3
 800b850:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b852:	bfbe      	ittt	lt
 800b854:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b856:	189b      	addlt	r3, r3, r2
 800b858:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b85a:	9b02      	ldr	r3, [sp, #8]
 800b85c:	bfb8      	it	lt
 800b85e:	2400      	movlt	r4, #0
 800b860:	2b00      	cmp	r3, #0
 800b862:	bfbb      	ittet	lt
 800b864:	9b06      	ldrlt	r3, [sp, #24]
 800b866:	9a02      	ldrlt	r2, [sp, #8]
 800b868:	9f06      	ldrge	r7, [sp, #24]
 800b86a:	1a9f      	sublt	r7, r3, r2
 800b86c:	bfac      	ite	ge
 800b86e:	9b02      	ldrge	r3, [sp, #8]
 800b870:	2300      	movlt	r3, #0
 800b872:	e73e      	b.n	800b6f2 <_dtoa_r+0x74a>
 800b874:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b876:	9f06      	ldr	r7, [sp, #24]
 800b878:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b87a:	e745      	b.n	800b708 <_dtoa_r+0x760>
 800b87c:	3fe00000 	.word	0x3fe00000
 800b880:	40240000 	.word	0x40240000
 800b884:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b886:	e76a      	b.n	800b75e <_dtoa_r+0x7b6>
 800b888:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	dc19      	bgt.n	800b8c2 <_dtoa_r+0x91a>
 800b88e:	9b04      	ldr	r3, [sp, #16]
 800b890:	b9bb      	cbnz	r3, 800b8c2 <_dtoa_r+0x91a>
 800b892:	9b05      	ldr	r3, [sp, #20]
 800b894:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b898:	b99b      	cbnz	r3, 800b8c2 <_dtoa_r+0x91a>
 800b89a:	9b05      	ldr	r3, [sp, #20]
 800b89c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b8a0:	0d1b      	lsrs	r3, r3, #20
 800b8a2:	051b      	lsls	r3, r3, #20
 800b8a4:	b183      	cbz	r3, 800b8c8 <_dtoa_r+0x920>
 800b8a6:	f04f 0801 	mov.w	r8, #1
 800b8aa:	9b06      	ldr	r3, [sp, #24]
 800b8ac:	3301      	adds	r3, #1
 800b8ae:	9306      	str	r3, [sp, #24]
 800b8b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b8b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	f47f af6a 	bne.w	800b792 <_dtoa_r+0x7ea>
 800b8be:	2001      	movs	r0, #1
 800b8c0:	e76f      	b.n	800b7a2 <_dtoa_r+0x7fa>
 800b8c2:	f04f 0800 	mov.w	r8, #0
 800b8c6:	e7f6      	b.n	800b8b6 <_dtoa_r+0x90e>
 800b8c8:	4698      	mov	r8, r3
 800b8ca:	e7f4      	b.n	800b8b6 <_dtoa_r+0x90e>
 800b8cc:	f43f af7d 	beq.w	800b7ca <_dtoa_r+0x822>
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	301c      	adds	r0, #28
 800b8d4:	e772      	b.n	800b7bc <_dtoa_r+0x814>
 800b8d6:	9b02      	ldr	r3, [sp, #8]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	dc36      	bgt.n	800b94a <_dtoa_r+0x9a2>
 800b8dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b8de:	2b02      	cmp	r3, #2
 800b8e0:	dd33      	ble.n	800b94a <_dtoa_r+0x9a2>
 800b8e2:	f8dd b008 	ldr.w	fp, [sp, #8]
 800b8e6:	f1bb 0f00 	cmp.w	fp, #0
 800b8ea:	d10d      	bne.n	800b908 <_dtoa_r+0x960>
 800b8ec:	4621      	mov	r1, r4
 800b8ee:	465b      	mov	r3, fp
 800b8f0:	2205      	movs	r2, #5
 800b8f2:	4628      	mov	r0, r5
 800b8f4:	f000 fe42 	bl	800c57c <__multadd>
 800b8f8:	4601      	mov	r1, r0
 800b8fa:	4604      	mov	r4, r0
 800b8fc:	4650      	mov	r0, sl
 800b8fe:	f001 f89f 	bl	800ca40 <__mcmp>
 800b902:	2800      	cmp	r0, #0
 800b904:	f73f adb6 	bgt.w	800b474 <_dtoa_r+0x4cc>
 800b908:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b90a:	9f08      	ldr	r7, [sp, #32]
 800b90c:	ea6f 0903 	mvn.w	r9, r3
 800b910:	f04f 0800 	mov.w	r8, #0
 800b914:	4621      	mov	r1, r4
 800b916:	4628      	mov	r0, r5
 800b918:	f000 fe0e 	bl	800c538 <_Bfree>
 800b91c:	2e00      	cmp	r6, #0
 800b91e:	f43f aea4 	beq.w	800b66a <_dtoa_r+0x6c2>
 800b922:	f1b8 0f00 	cmp.w	r8, #0
 800b926:	d005      	beq.n	800b934 <_dtoa_r+0x98c>
 800b928:	45b0      	cmp	r8, r6
 800b92a:	d003      	beq.n	800b934 <_dtoa_r+0x98c>
 800b92c:	4641      	mov	r1, r8
 800b92e:	4628      	mov	r0, r5
 800b930:	f000 fe02 	bl	800c538 <_Bfree>
 800b934:	4631      	mov	r1, r6
 800b936:	4628      	mov	r0, r5
 800b938:	f000 fdfe 	bl	800c538 <_Bfree>
 800b93c:	e695      	b.n	800b66a <_dtoa_r+0x6c2>
 800b93e:	2400      	movs	r4, #0
 800b940:	4626      	mov	r6, r4
 800b942:	e7e1      	b.n	800b908 <_dtoa_r+0x960>
 800b944:	46c1      	mov	r9, r8
 800b946:	4626      	mov	r6, r4
 800b948:	e594      	b.n	800b474 <_dtoa_r+0x4cc>
 800b94a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b94c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800b950:	2b00      	cmp	r3, #0
 800b952:	f000 80fc 	beq.w	800bb4e <_dtoa_r+0xba6>
 800b956:	2f00      	cmp	r7, #0
 800b958:	dd05      	ble.n	800b966 <_dtoa_r+0x9be>
 800b95a:	4631      	mov	r1, r6
 800b95c:	463a      	mov	r2, r7
 800b95e:	4628      	mov	r0, r5
 800b960:	f001 f802 	bl	800c968 <__lshift>
 800b964:	4606      	mov	r6, r0
 800b966:	f1b8 0f00 	cmp.w	r8, #0
 800b96a:	d05c      	beq.n	800ba26 <_dtoa_r+0xa7e>
 800b96c:	4628      	mov	r0, r5
 800b96e:	6871      	ldr	r1, [r6, #4]
 800b970:	f000 fda2 	bl	800c4b8 <_Balloc>
 800b974:	4607      	mov	r7, r0
 800b976:	b928      	cbnz	r0, 800b984 <_dtoa_r+0x9dc>
 800b978:	4602      	mov	r2, r0
 800b97a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b97e:	4b7e      	ldr	r3, [pc, #504]	; (800bb78 <_dtoa_r+0xbd0>)
 800b980:	f7ff bb26 	b.w	800afd0 <_dtoa_r+0x28>
 800b984:	6932      	ldr	r2, [r6, #16]
 800b986:	f106 010c 	add.w	r1, r6, #12
 800b98a:	3202      	adds	r2, #2
 800b98c:	0092      	lsls	r2, r2, #2
 800b98e:	300c      	adds	r0, #12
 800b990:	f000 fd84 	bl	800c49c <memcpy>
 800b994:	2201      	movs	r2, #1
 800b996:	4639      	mov	r1, r7
 800b998:	4628      	mov	r0, r5
 800b99a:	f000 ffe5 	bl	800c968 <__lshift>
 800b99e:	46b0      	mov	r8, r6
 800b9a0:	4606      	mov	r6, r0
 800b9a2:	9b08      	ldr	r3, [sp, #32]
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	9302      	str	r3, [sp, #8]
 800b9a8:	9b08      	ldr	r3, [sp, #32]
 800b9aa:	445b      	add	r3, fp
 800b9ac:	930a      	str	r3, [sp, #40]	; 0x28
 800b9ae:	9b04      	ldr	r3, [sp, #16]
 800b9b0:	f003 0301 	and.w	r3, r3, #1
 800b9b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b9b6:	9b02      	ldr	r3, [sp, #8]
 800b9b8:	4621      	mov	r1, r4
 800b9ba:	4650      	mov	r0, sl
 800b9bc:	f103 3bff 	add.w	fp, r3, #4294967295
 800b9c0:	f7ff fa64 	bl	800ae8c <quorem>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	4641      	mov	r1, r8
 800b9c8:	3330      	adds	r3, #48	; 0x30
 800b9ca:	9004      	str	r0, [sp, #16]
 800b9cc:	4650      	mov	r0, sl
 800b9ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9d0:	f001 f836 	bl	800ca40 <__mcmp>
 800b9d4:	4632      	mov	r2, r6
 800b9d6:	9006      	str	r0, [sp, #24]
 800b9d8:	4621      	mov	r1, r4
 800b9da:	4628      	mov	r0, r5
 800b9dc:	f001 f84c 	bl	800ca78 <__mdiff>
 800b9e0:	68c2      	ldr	r2, [r0, #12]
 800b9e2:	4607      	mov	r7, r0
 800b9e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9e6:	bb02      	cbnz	r2, 800ba2a <_dtoa_r+0xa82>
 800b9e8:	4601      	mov	r1, r0
 800b9ea:	4650      	mov	r0, sl
 800b9ec:	f001 f828 	bl	800ca40 <__mcmp>
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9f4:	4639      	mov	r1, r7
 800b9f6:	4628      	mov	r0, r5
 800b9f8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b9fc:	f000 fd9c 	bl	800c538 <_Bfree>
 800ba00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba04:	9f02      	ldr	r7, [sp, #8]
 800ba06:	ea43 0102 	orr.w	r1, r3, r2
 800ba0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba0c:	430b      	orrs	r3, r1
 800ba0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba10:	d10d      	bne.n	800ba2e <_dtoa_r+0xa86>
 800ba12:	2b39      	cmp	r3, #57	; 0x39
 800ba14:	d027      	beq.n	800ba66 <_dtoa_r+0xabe>
 800ba16:	9a06      	ldr	r2, [sp, #24]
 800ba18:	2a00      	cmp	r2, #0
 800ba1a:	dd01      	ble.n	800ba20 <_dtoa_r+0xa78>
 800ba1c:	9b04      	ldr	r3, [sp, #16]
 800ba1e:	3331      	adds	r3, #49	; 0x31
 800ba20:	f88b 3000 	strb.w	r3, [fp]
 800ba24:	e776      	b.n	800b914 <_dtoa_r+0x96c>
 800ba26:	4630      	mov	r0, r6
 800ba28:	e7b9      	b.n	800b99e <_dtoa_r+0x9f6>
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	e7e2      	b.n	800b9f4 <_dtoa_r+0xa4c>
 800ba2e:	9906      	ldr	r1, [sp, #24]
 800ba30:	2900      	cmp	r1, #0
 800ba32:	db04      	blt.n	800ba3e <_dtoa_r+0xa96>
 800ba34:	9822      	ldr	r0, [sp, #136]	; 0x88
 800ba36:	4301      	orrs	r1, r0
 800ba38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba3a:	4301      	orrs	r1, r0
 800ba3c:	d120      	bne.n	800ba80 <_dtoa_r+0xad8>
 800ba3e:	2a00      	cmp	r2, #0
 800ba40:	ddee      	ble.n	800ba20 <_dtoa_r+0xa78>
 800ba42:	4651      	mov	r1, sl
 800ba44:	2201      	movs	r2, #1
 800ba46:	4628      	mov	r0, r5
 800ba48:	9302      	str	r3, [sp, #8]
 800ba4a:	f000 ff8d 	bl	800c968 <__lshift>
 800ba4e:	4621      	mov	r1, r4
 800ba50:	4682      	mov	sl, r0
 800ba52:	f000 fff5 	bl	800ca40 <__mcmp>
 800ba56:	2800      	cmp	r0, #0
 800ba58:	9b02      	ldr	r3, [sp, #8]
 800ba5a:	dc02      	bgt.n	800ba62 <_dtoa_r+0xaba>
 800ba5c:	d1e0      	bne.n	800ba20 <_dtoa_r+0xa78>
 800ba5e:	07da      	lsls	r2, r3, #31
 800ba60:	d5de      	bpl.n	800ba20 <_dtoa_r+0xa78>
 800ba62:	2b39      	cmp	r3, #57	; 0x39
 800ba64:	d1da      	bne.n	800ba1c <_dtoa_r+0xa74>
 800ba66:	2339      	movs	r3, #57	; 0x39
 800ba68:	f88b 3000 	strb.w	r3, [fp]
 800ba6c:	463b      	mov	r3, r7
 800ba6e:	461f      	mov	r7, r3
 800ba70:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800ba74:	3b01      	subs	r3, #1
 800ba76:	2a39      	cmp	r2, #57	; 0x39
 800ba78:	d050      	beq.n	800bb1c <_dtoa_r+0xb74>
 800ba7a:	3201      	adds	r2, #1
 800ba7c:	701a      	strb	r2, [r3, #0]
 800ba7e:	e749      	b.n	800b914 <_dtoa_r+0x96c>
 800ba80:	2a00      	cmp	r2, #0
 800ba82:	dd03      	ble.n	800ba8c <_dtoa_r+0xae4>
 800ba84:	2b39      	cmp	r3, #57	; 0x39
 800ba86:	d0ee      	beq.n	800ba66 <_dtoa_r+0xabe>
 800ba88:	3301      	adds	r3, #1
 800ba8a:	e7c9      	b.n	800ba20 <_dtoa_r+0xa78>
 800ba8c:	9a02      	ldr	r2, [sp, #8]
 800ba8e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ba90:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ba94:	428a      	cmp	r2, r1
 800ba96:	d02a      	beq.n	800baee <_dtoa_r+0xb46>
 800ba98:	4651      	mov	r1, sl
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	220a      	movs	r2, #10
 800ba9e:	4628      	mov	r0, r5
 800baa0:	f000 fd6c 	bl	800c57c <__multadd>
 800baa4:	45b0      	cmp	r8, r6
 800baa6:	4682      	mov	sl, r0
 800baa8:	f04f 0300 	mov.w	r3, #0
 800baac:	f04f 020a 	mov.w	r2, #10
 800bab0:	4641      	mov	r1, r8
 800bab2:	4628      	mov	r0, r5
 800bab4:	d107      	bne.n	800bac6 <_dtoa_r+0xb1e>
 800bab6:	f000 fd61 	bl	800c57c <__multadd>
 800baba:	4680      	mov	r8, r0
 800babc:	4606      	mov	r6, r0
 800babe:	9b02      	ldr	r3, [sp, #8]
 800bac0:	3301      	adds	r3, #1
 800bac2:	9302      	str	r3, [sp, #8]
 800bac4:	e777      	b.n	800b9b6 <_dtoa_r+0xa0e>
 800bac6:	f000 fd59 	bl	800c57c <__multadd>
 800baca:	4631      	mov	r1, r6
 800bacc:	4680      	mov	r8, r0
 800bace:	2300      	movs	r3, #0
 800bad0:	220a      	movs	r2, #10
 800bad2:	4628      	mov	r0, r5
 800bad4:	f000 fd52 	bl	800c57c <__multadd>
 800bad8:	4606      	mov	r6, r0
 800bada:	e7f0      	b.n	800babe <_dtoa_r+0xb16>
 800badc:	f1bb 0f00 	cmp.w	fp, #0
 800bae0:	bfcc      	ite	gt
 800bae2:	465f      	movgt	r7, fp
 800bae4:	2701      	movle	r7, #1
 800bae6:	f04f 0800 	mov.w	r8, #0
 800baea:	9a08      	ldr	r2, [sp, #32]
 800baec:	4417      	add	r7, r2
 800baee:	4651      	mov	r1, sl
 800baf0:	2201      	movs	r2, #1
 800baf2:	4628      	mov	r0, r5
 800baf4:	9302      	str	r3, [sp, #8]
 800baf6:	f000 ff37 	bl	800c968 <__lshift>
 800bafa:	4621      	mov	r1, r4
 800bafc:	4682      	mov	sl, r0
 800bafe:	f000 ff9f 	bl	800ca40 <__mcmp>
 800bb02:	2800      	cmp	r0, #0
 800bb04:	dcb2      	bgt.n	800ba6c <_dtoa_r+0xac4>
 800bb06:	d102      	bne.n	800bb0e <_dtoa_r+0xb66>
 800bb08:	9b02      	ldr	r3, [sp, #8]
 800bb0a:	07db      	lsls	r3, r3, #31
 800bb0c:	d4ae      	bmi.n	800ba6c <_dtoa_r+0xac4>
 800bb0e:	463b      	mov	r3, r7
 800bb10:	461f      	mov	r7, r3
 800bb12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb16:	2a30      	cmp	r2, #48	; 0x30
 800bb18:	d0fa      	beq.n	800bb10 <_dtoa_r+0xb68>
 800bb1a:	e6fb      	b.n	800b914 <_dtoa_r+0x96c>
 800bb1c:	9a08      	ldr	r2, [sp, #32]
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d1a5      	bne.n	800ba6e <_dtoa_r+0xac6>
 800bb22:	2331      	movs	r3, #49	; 0x31
 800bb24:	f109 0901 	add.w	r9, r9, #1
 800bb28:	7013      	strb	r3, [r2, #0]
 800bb2a:	e6f3      	b.n	800b914 <_dtoa_r+0x96c>
 800bb2c:	4b13      	ldr	r3, [pc, #76]	; (800bb7c <_dtoa_r+0xbd4>)
 800bb2e:	f7ff baa7 	b.w	800b080 <_dtoa_r+0xd8>
 800bb32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	f47f aa80 	bne.w	800b03a <_dtoa_r+0x92>
 800bb3a:	4b11      	ldr	r3, [pc, #68]	; (800bb80 <_dtoa_r+0xbd8>)
 800bb3c:	f7ff baa0 	b.w	800b080 <_dtoa_r+0xd8>
 800bb40:	f1bb 0f00 	cmp.w	fp, #0
 800bb44:	dc03      	bgt.n	800bb4e <_dtoa_r+0xba6>
 800bb46:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bb48:	2b02      	cmp	r3, #2
 800bb4a:	f73f aecc 	bgt.w	800b8e6 <_dtoa_r+0x93e>
 800bb4e:	9f08      	ldr	r7, [sp, #32]
 800bb50:	4621      	mov	r1, r4
 800bb52:	4650      	mov	r0, sl
 800bb54:	f7ff f99a 	bl	800ae8c <quorem>
 800bb58:	9a08      	ldr	r2, [sp, #32]
 800bb5a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bb5e:	f807 3b01 	strb.w	r3, [r7], #1
 800bb62:	1aba      	subs	r2, r7, r2
 800bb64:	4593      	cmp	fp, r2
 800bb66:	ddb9      	ble.n	800badc <_dtoa_r+0xb34>
 800bb68:	4651      	mov	r1, sl
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	220a      	movs	r2, #10
 800bb6e:	4628      	mov	r0, r5
 800bb70:	f000 fd04 	bl	800c57c <__multadd>
 800bb74:	4682      	mov	sl, r0
 800bb76:	e7eb      	b.n	800bb50 <_dtoa_r+0xba8>
 800bb78:	0801ad4c 	.word	0x0801ad4c
 800bb7c:	0801ab54 	.word	0x0801ab54
 800bb80:	0801acc9 	.word	0x0801acc9

0800bb84 <std>:
 800bb84:	2300      	movs	r3, #0
 800bb86:	b510      	push	{r4, lr}
 800bb88:	4604      	mov	r4, r0
 800bb8a:	e9c0 3300 	strd	r3, r3, [r0]
 800bb8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb92:	6083      	str	r3, [r0, #8]
 800bb94:	8181      	strh	r1, [r0, #12]
 800bb96:	6643      	str	r3, [r0, #100]	; 0x64
 800bb98:	81c2      	strh	r2, [r0, #14]
 800bb9a:	6183      	str	r3, [r0, #24]
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	2208      	movs	r2, #8
 800bba0:	305c      	adds	r0, #92	; 0x5c
 800bba2:	f7fd fdcf 	bl	8009744 <memset>
 800bba6:	4b05      	ldr	r3, [pc, #20]	; (800bbbc <std+0x38>)
 800bba8:	6224      	str	r4, [r4, #32]
 800bbaa:	6263      	str	r3, [r4, #36]	; 0x24
 800bbac:	4b04      	ldr	r3, [pc, #16]	; (800bbc0 <std+0x3c>)
 800bbae:	62a3      	str	r3, [r4, #40]	; 0x28
 800bbb0:	4b04      	ldr	r3, [pc, #16]	; (800bbc4 <std+0x40>)
 800bbb2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bbb4:	4b04      	ldr	r3, [pc, #16]	; (800bbc8 <std+0x44>)
 800bbb6:	6323      	str	r3, [r4, #48]	; 0x30
 800bbb8:	bd10      	pop	{r4, pc}
 800bbba:	bf00      	nop
 800bbbc:	0800d52d 	.word	0x0800d52d
 800bbc0:	0800d54f 	.word	0x0800d54f
 800bbc4:	0800d587 	.word	0x0800d587
 800bbc8:	0800d5ab 	.word	0x0800d5ab

0800bbcc <_cleanup_r>:
 800bbcc:	4901      	ldr	r1, [pc, #4]	; (800bbd4 <_cleanup_r+0x8>)
 800bbce:	f000 b8af 	b.w	800bd30 <_fwalk_reent>
 800bbd2:	bf00      	nop
 800bbd4:	0800d901 	.word	0x0800d901

0800bbd8 <__sfmoreglue>:
 800bbd8:	b570      	push	{r4, r5, r6, lr}
 800bbda:	2568      	movs	r5, #104	; 0x68
 800bbdc:	1e4a      	subs	r2, r1, #1
 800bbde:	4355      	muls	r5, r2
 800bbe0:	460e      	mov	r6, r1
 800bbe2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bbe6:	f001 f979 	bl	800cedc <_malloc_r>
 800bbea:	4604      	mov	r4, r0
 800bbec:	b140      	cbz	r0, 800bc00 <__sfmoreglue+0x28>
 800bbee:	2100      	movs	r1, #0
 800bbf0:	e9c0 1600 	strd	r1, r6, [r0]
 800bbf4:	300c      	adds	r0, #12
 800bbf6:	60a0      	str	r0, [r4, #8]
 800bbf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bbfc:	f7fd fda2 	bl	8009744 <memset>
 800bc00:	4620      	mov	r0, r4
 800bc02:	bd70      	pop	{r4, r5, r6, pc}

0800bc04 <__sfp_lock_acquire>:
 800bc04:	4801      	ldr	r0, [pc, #4]	; (800bc0c <__sfp_lock_acquire+0x8>)
 800bc06:	f000 bc1e 	b.w	800c446 <__retarget_lock_acquire_recursive>
 800bc0a:	bf00      	nop
 800bc0c:	20000478 	.word	0x20000478

0800bc10 <__sfp_lock_release>:
 800bc10:	4801      	ldr	r0, [pc, #4]	; (800bc18 <__sfp_lock_release+0x8>)
 800bc12:	f000 bc19 	b.w	800c448 <__retarget_lock_release_recursive>
 800bc16:	bf00      	nop
 800bc18:	20000478 	.word	0x20000478

0800bc1c <__sinit_lock_acquire>:
 800bc1c:	4801      	ldr	r0, [pc, #4]	; (800bc24 <__sinit_lock_acquire+0x8>)
 800bc1e:	f000 bc12 	b.w	800c446 <__retarget_lock_acquire_recursive>
 800bc22:	bf00      	nop
 800bc24:	20000473 	.word	0x20000473

0800bc28 <__sinit_lock_release>:
 800bc28:	4801      	ldr	r0, [pc, #4]	; (800bc30 <__sinit_lock_release+0x8>)
 800bc2a:	f000 bc0d 	b.w	800c448 <__retarget_lock_release_recursive>
 800bc2e:	bf00      	nop
 800bc30:	20000473 	.word	0x20000473

0800bc34 <__sinit>:
 800bc34:	b510      	push	{r4, lr}
 800bc36:	4604      	mov	r4, r0
 800bc38:	f7ff fff0 	bl	800bc1c <__sinit_lock_acquire>
 800bc3c:	69a3      	ldr	r3, [r4, #24]
 800bc3e:	b11b      	cbz	r3, 800bc48 <__sinit+0x14>
 800bc40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc44:	f7ff bff0 	b.w	800bc28 <__sinit_lock_release>
 800bc48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bc4c:	6523      	str	r3, [r4, #80]	; 0x50
 800bc4e:	4b13      	ldr	r3, [pc, #76]	; (800bc9c <__sinit+0x68>)
 800bc50:	4a13      	ldr	r2, [pc, #76]	; (800bca0 <__sinit+0x6c>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	62a2      	str	r2, [r4, #40]	; 0x28
 800bc56:	42a3      	cmp	r3, r4
 800bc58:	bf08      	it	eq
 800bc5a:	2301      	moveq	r3, #1
 800bc5c:	4620      	mov	r0, r4
 800bc5e:	bf08      	it	eq
 800bc60:	61a3      	streq	r3, [r4, #24]
 800bc62:	f000 f81f 	bl	800bca4 <__sfp>
 800bc66:	6060      	str	r0, [r4, #4]
 800bc68:	4620      	mov	r0, r4
 800bc6a:	f000 f81b 	bl	800bca4 <__sfp>
 800bc6e:	60a0      	str	r0, [r4, #8]
 800bc70:	4620      	mov	r0, r4
 800bc72:	f000 f817 	bl	800bca4 <__sfp>
 800bc76:	2200      	movs	r2, #0
 800bc78:	2104      	movs	r1, #4
 800bc7a:	60e0      	str	r0, [r4, #12]
 800bc7c:	6860      	ldr	r0, [r4, #4]
 800bc7e:	f7ff ff81 	bl	800bb84 <std>
 800bc82:	2201      	movs	r2, #1
 800bc84:	2109      	movs	r1, #9
 800bc86:	68a0      	ldr	r0, [r4, #8]
 800bc88:	f7ff ff7c 	bl	800bb84 <std>
 800bc8c:	2202      	movs	r2, #2
 800bc8e:	2112      	movs	r1, #18
 800bc90:	68e0      	ldr	r0, [r4, #12]
 800bc92:	f7ff ff77 	bl	800bb84 <std>
 800bc96:	2301      	movs	r3, #1
 800bc98:	61a3      	str	r3, [r4, #24]
 800bc9a:	e7d1      	b.n	800bc40 <__sinit+0xc>
 800bc9c:	0801ab40 	.word	0x0801ab40
 800bca0:	0800bbcd 	.word	0x0800bbcd

0800bca4 <__sfp>:
 800bca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bca6:	4607      	mov	r7, r0
 800bca8:	f7ff ffac 	bl	800bc04 <__sfp_lock_acquire>
 800bcac:	4b1e      	ldr	r3, [pc, #120]	; (800bd28 <__sfp+0x84>)
 800bcae:	681e      	ldr	r6, [r3, #0]
 800bcb0:	69b3      	ldr	r3, [r6, #24]
 800bcb2:	b913      	cbnz	r3, 800bcba <__sfp+0x16>
 800bcb4:	4630      	mov	r0, r6
 800bcb6:	f7ff ffbd 	bl	800bc34 <__sinit>
 800bcba:	3648      	adds	r6, #72	; 0x48
 800bcbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bcc0:	3b01      	subs	r3, #1
 800bcc2:	d503      	bpl.n	800bccc <__sfp+0x28>
 800bcc4:	6833      	ldr	r3, [r6, #0]
 800bcc6:	b30b      	cbz	r3, 800bd0c <__sfp+0x68>
 800bcc8:	6836      	ldr	r6, [r6, #0]
 800bcca:	e7f7      	b.n	800bcbc <__sfp+0x18>
 800bccc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bcd0:	b9d5      	cbnz	r5, 800bd08 <__sfp+0x64>
 800bcd2:	4b16      	ldr	r3, [pc, #88]	; (800bd2c <__sfp+0x88>)
 800bcd4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bcd8:	60e3      	str	r3, [r4, #12]
 800bcda:	6665      	str	r5, [r4, #100]	; 0x64
 800bcdc:	f000 fbb2 	bl	800c444 <__retarget_lock_init_recursive>
 800bce0:	f7ff ff96 	bl	800bc10 <__sfp_lock_release>
 800bce4:	2208      	movs	r2, #8
 800bce6:	4629      	mov	r1, r5
 800bce8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bcec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bcf0:	6025      	str	r5, [r4, #0]
 800bcf2:	61a5      	str	r5, [r4, #24]
 800bcf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bcf8:	f7fd fd24 	bl	8009744 <memset>
 800bcfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bd00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bd04:	4620      	mov	r0, r4
 800bd06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd08:	3468      	adds	r4, #104	; 0x68
 800bd0a:	e7d9      	b.n	800bcc0 <__sfp+0x1c>
 800bd0c:	2104      	movs	r1, #4
 800bd0e:	4638      	mov	r0, r7
 800bd10:	f7ff ff62 	bl	800bbd8 <__sfmoreglue>
 800bd14:	4604      	mov	r4, r0
 800bd16:	6030      	str	r0, [r6, #0]
 800bd18:	2800      	cmp	r0, #0
 800bd1a:	d1d5      	bne.n	800bcc8 <__sfp+0x24>
 800bd1c:	f7ff ff78 	bl	800bc10 <__sfp_lock_release>
 800bd20:	230c      	movs	r3, #12
 800bd22:	603b      	str	r3, [r7, #0]
 800bd24:	e7ee      	b.n	800bd04 <__sfp+0x60>
 800bd26:	bf00      	nop
 800bd28:	0801ab40 	.word	0x0801ab40
 800bd2c:	ffff0001 	.word	0xffff0001

0800bd30 <_fwalk_reent>:
 800bd30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd34:	4606      	mov	r6, r0
 800bd36:	4688      	mov	r8, r1
 800bd38:	2700      	movs	r7, #0
 800bd3a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bd3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd42:	f1b9 0901 	subs.w	r9, r9, #1
 800bd46:	d505      	bpl.n	800bd54 <_fwalk_reent+0x24>
 800bd48:	6824      	ldr	r4, [r4, #0]
 800bd4a:	2c00      	cmp	r4, #0
 800bd4c:	d1f7      	bne.n	800bd3e <_fwalk_reent+0xe>
 800bd4e:	4638      	mov	r0, r7
 800bd50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd54:	89ab      	ldrh	r3, [r5, #12]
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d907      	bls.n	800bd6a <_fwalk_reent+0x3a>
 800bd5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd5e:	3301      	adds	r3, #1
 800bd60:	d003      	beq.n	800bd6a <_fwalk_reent+0x3a>
 800bd62:	4629      	mov	r1, r5
 800bd64:	4630      	mov	r0, r6
 800bd66:	47c0      	blx	r8
 800bd68:	4307      	orrs	r7, r0
 800bd6a:	3568      	adds	r5, #104	; 0x68
 800bd6c:	e7e9      	b.n	800bd42 <_fwalk_reent+0x12>

0800bd6e <rshift>:
 800bd6e:	6903      	ldr	r3, [r0, #16]
 800bd70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd74:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bd78:	f100 0414 	add.w	r4, r0, #20
 800bd7c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bd80:	dd46      	ble.n	800be10 <rshift+0xa2>
 800bd82:	f011 011f 	ands.w	r1, r1, #31
 800bd86:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bd8a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bd8e:	d10c      	bne.n	800bdaa <rshift+0x3c>
 800bd90:	4629      	mov	r1, r5
 800bd92:	f100 0710 	add.w	r7, r0, #16
 800bd96:	42b1      	cmp	r1, r6
 800bd98:	d335      	bcc.n	800be06 <rshift+0x98>
 800bd9a:	1a9b      	subs	r3, r3, r2
 800bd9c:	009b      	lsls	r3, r3, #2
 800bd9e:	1eea      	subs	r2, r5, #3
 800bda0:	4296      	cmp	r6, r2
 800bda2:	bf38      	it	cc
 800bda4:	2300      	movcc	r3, #0
 800bda6:	4423      	add	r3, r4
 800bda8:	e015      	b.n	800bdd6 <rshift+0x68>
 800bdaa:	46a1      	mov	r9, r4
 800bdac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bdb0:	f1c1 0820 	rsb	r8, r1, #32
 800bdb4:	40cf      	lsrs	r7, r1
 800bdb6:	f105 0e04 	add.w	lr, r5, #4
 800bdba:	4576      	cmp	r6, lr
 800bdbc:	46f4      	mov	ip, lr
 800bdbe:	d816      	bhi.n	800bdee <rshift+0x80>
 800bdc0:	1a9b      	subs	r3, r3, r2
 800bdc2:	009a      	lsls	r2, r3, #2
 800bdc4:	3a04      	subs	r2, #4
 800bdc6:	3501      	adds	r5, #1
 800bdc8:	42ae      	cmp	r6, r5
 800bdca:	bf38      	it	cc
 800bdcc:	2200      	movcc	r2, #0
 800bdce:	18a3      	adds	r3, r4, r2
 800bdd0:	50a7      	str	r7, [r4, r2]
 800bdd2:	b107      	cbz	r7, 800bdd6 <rshift+0x68>
 800bdd4:	3304      	adds	r3, #4
 800bdd6:	42a3      	cmp	r3, r4
 800bdd8:	eba3 0204 	sub.w	r2, r3, r4
 800bddc:	bf08      	it	eq
 800bdde:	2300      	moveq	r3, #0
 800bde0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bde4:	6102      	str	r2, [r0, #16]
 800bde6:	bf08      	it	eq
 800bde8:	6143      	streq	r3, [r0, #20]
 800bdea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdee:	f8dc c000 	ldr.w	ip, [ip]
 800bdf2:	fa0c fc08 	lsl.w	ip, ip, r8
 800bdf6:	ea4c 0707 	orr.w	r7, ip, r7
 800bdfa:	f849 7b04 	str.w	r7, [r9], #4
 800bdfe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800be02:	40cf      	lsrs	r7, r1
 800be04:	e7d9      	b.n	800bdba <rshift+0x4c>
 800be06:	f851 cb04 	ldr.w	ip, [r1], #4
 800be0a:	f847 cf04 	str.w	ip, [r7, #4]!
 800be0e:	e7c2      	b.n	800bd96 <rshift+0x28>
 800be10:	4623      	mov	r3, r4
 800be12:	e7e0      	b.n	800bdd6 <rshift+0x68>

0800be14 <__hexdig_fun>:
 800be14:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800be18:	2b09      	cmp	r3, #9
 800be1a:	d802      	bhi.n	800be22 <__hexdig_fun+0xe>
 800be1c:	3820      	subs	r0, #32
 800be1e:	b2c0      	uxtb	r0, r0
 800be20:	4770      	bx	lr
 800be22:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800be26:	2b05      	cmp	r3, #5
 800be28:	d801      	bhi.n	800be2e <__hexdig_fun+0x1a>
 800be2a:	3847      	subs	r0, #71	; 0x47
 800be2c:	e7f7      	b.n	800be1e <__hexdig_fun+0xa>
 800be2e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800be32:	2b05      	cmp	r3, #5
 800be34:	d801      	bhi.n	800be3a <__hexdig_fun+0x26>
 800be36:	3827      	subs	r0, #39	; 0x27
 800be38:	e7f1      	b.n	800be1e <__hexdig_fun+0xa>
 800be3a:	2000      	movs	r0, #0
 800be3c:	4770      	bx	lr
	...

0800be40 <__gethex>:
 800be40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be44:	b08b      	sub	sp, #44	; 0x2c
 800be46:	9306      	str	r3, [sp, #24]
 800be48:	4bb9      	ldr	r3, [pc, #740]	; (800c130 <__gethex+0x2f0>)
 800be4a:	9002      	str	r0, [sp, #8]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	468b      	mov	fp, r1
 800be50:	4618      	mov	r0, r3
 800be52:	4690      	mov	r8, r2
 800be54:	9303      	str	r3, [sp, #12]
 800be56:	f7f4 f9e7 	bl	8000228 <strlen>
 800be5a:	4682      	mov	sl, r0
 800be5c:	9b03      	ldr	r3, [sp, #12]
 800be5e:	f8db 2000 	ldr.w	r2, [fp]
 800be62:	4403      	add	r3, r0
 800be64:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800be68:	9307      	str	r3, [sp, #28]
 800be6a:	1c93      	adds	r3, r2, #2
 800be6c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800be70:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800be74:	32fe      	adds	r2, #254	; 0xfe
 800be76:	18d1      	adds	r1, r2, r3
 800be78:	461f      	mov	r7, r3
 800be7a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800be7e:	9101      	str	r1, [sp, #4]
 800be80:	2830      	cmp	r0, #48	; 0x30
 800be82:	d0f8      	beq.n	800be76 <__gethex+0x36>
 800be84:	f7ff ffc6 	bl	800be14 <__hexdig_fun>
 800be88:	4604      	mov	r4, r0
 800be8a:	2800      	cmp	r0, #0
 800be8c:	d13a      	bne.n	800bf04 <__gethex+0xc4>
 800be8e:	4652      	mov	r2, sl
 800be90:	4638      	mov	r0, r7
 800be92:	9903      	ldr	r1, [sp, #12]
 800be94:	f001 fb8d 	bl	800d5b2 <strncmp>
 800be98:	4605      	mov	r5, r0
 800be9a:	2800      	cmp	r0, #0
 800be9c:	d166      	bne.n	800bf6c <__gethex+0x12c>
 800be9e:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bea2:	eb07 060a 	add.w	r6, r7, sl
 800bea6:	f7ff ffb5 	bl	800be14 <__hexdig_fun>
 800beaa:	2800      	cmp	r0, #0
 800beac:	d060      	beq.n	800bf70 <__gethex+0x130>
 800beae:	4633      	mov	r3, r6
 800beb0:	7818      	ldrb	r0, [r3, #0]
 800beb2:	461f      	mov	r7, r3
 800beb4:	2830      	cmp	r0, #48	; 0x30
 800beb6:	f103 0301 	add.w	r3, r3, #1
 800beba:	d0f9      	beq.n	800beb0 <__gethex+0x70>
 800bebc:	f7ff ffaa 	bl	800be14 <__hexdig_fun>
 800bec0:	2301      	movs	r3, #1
 800bec2:	fab0 f480 	clz	r4, r0
 800bec6:	4635      	mov	r5, r6
 800bec8:	0964      	lsrs	r4, r4, #5
 800beca:	9301      	str	r3, [sp, #4]
 800becc:	463a      	mov	r2, r7
 800bece:	4616      	mov	r6, r2
 800bed0:	7830      	ldrb	r0, [r6, #0]
 800bed2:	3201      	adds	r2, #1
 800bed4:	f7ff ff9e 	bl	800be14 <__hexdig_fun>
 800bed8:	2800      	cmp	r0, #0
 800beda:	d1f8      	bne.n	800bece <__gethex+0x8e>
 800bedc:	4652      	mov	r2, sl
 800bede:	4630      	mov	r0, r6
 800bee0:	9903      	ldr	r1, [sp, #12]
 800bee2:	f001 fb66 	bl	800d5b2 <strncmp>
 800bee6:	b980      	cbnz	r0, 800bf0a <__gethex+0xca>
 800bee8:	b94d      	cbnz	r5, 800befe <__gethex+0xbe>
 800beea:	eb06 050a 	add.w	r5, r6, sl
 800beee:	462a      	mov	r2, r5
 800bef0:	4616      	mov	r6, r2
 800bef2:	7830      	ldrb	r0, [r6, #0]
 800bef4:	3201      	adds	r2, #1
 800bef6:	f7ff ff8d 	bl	800be14 <__hexdig_fun>
 800befa:	2800      	cmp	r0, #0
 800befc:	d1f8      	bne.n	800bef0 <__gethex+0xb0>
 800befe:	1bad      	subs	r5, r5, r6
 800bf00:	00ad      	lsls	r5, r5, #2
 800bf02:	e004      	b.n	800bf0e <__gethex+0xce>
 800bf04:	2400      	movs	r4, #0
 800bf06:	4625      	mov	r5, r4
 800bf08:	e7e0      	b.n	800becc <__gethex+0x8c>
 800bf0a:	2d00      	cmp	r5, #0
 800bf0c:	d1f7      	bne.n	800befe <__gethex+0xbe>
 800bf0e:	7833      	ldrb	r3, [r6, #0]
 800bf10:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bf14:	2b50      	cmp	r3, #80	; 0x50
 800bf16:	d139      	bne.n	800bf8c <__gethex+0x14c>
 800bf18:	7873      	ldrb	r3, [r6, #1]
 800bf1a:	2b2b      	cmp	r3, #43	; 0x2b
 800bf1c:	d02a      	beq.n	800bf74 <__gethex+0x134>
 800bf1e:	2b2d      	cmp	r3, #45	; 0x2d
 800bf20:	d02c      	beq.n	800bf7c <__gethex+0x13c>
 800bf22:	f04f 0900 	mov.w	r9, #0
 800bf26:	1c71      	adds	r1, r6, #1
 800bf28:	7808      	ldrb	r0, [r1, #0]
 800bf2a:	f7ff ff73 	bl	800be14 <__hexdig_fun>
 800bf2e:	1e43      	subs	r3, r0, #1
 800bf30:	b2db      	uxtb	r3, r3
 800bf32:	2b18      	cmp	r3, #24
 800bf34:	d82a      	bhi.n	800bf8c <__gethex+0x14c>
 800bf36:	f1a0 0210 	sub.w	r2, r0, #16
 800bf3a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bf3e:	f7ff ff69 	bl	800be14 <__hexdig_fun>
 800bf42:	1e43      	subs	r3, r0, #1
 800bf44:	b2db      	uxtb	r3, r3
 800bf46:	2b18      	cmp	r3, #24
 800bf48:	d91b      	bls.n	800bf82 <__gethex+0x142>
 800bf4a:	f1b9 0f00 	cmp.w	r9, #0
 800bf4e:	d000      	beq.n	800bf52 <__gethex+0x112>
 800bf50:	4252      	negs	r2, r2
 800bf52:	4415      	add	r5, r2
 800bf54:	f8cb 1000 	str.w	r1, [fp]
 800bf58:	b1d4      	cbz	r4, 800bf90 <__gethex+0x150>
 800bf5a:	9b01      	ldr	r3, [sp, #4]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	bf14      	ite	ne
 800bf60:	2700      	movne	r7, #0
 800bf62:	2706      	moveq	r7, #6
 800bf64:	4638      	mov	r0, r7
 800bf66:	b00b      	add	sp, #44	; 0x2c
 800bf68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf6c:	463e      	mov	r6, r7
 800bf6e:	4625      	mov	r5, r4
 800bf70:	2401      	movs	r4, #1
 800bf72:	e7cc      	b.n	800bf0e <__gethex+0xce>
 800bf74:	f04f 0900 	mov.w	r9, #0
 800bf78:	1cb1      	adds	r1, r6, #2
 800bf7a:	e7d5      	b.n	800bf28 <__gethex+0xe8>
 800bf7c:	f04f 0901 	mov.w	r9, #1
 800bf80:	e7fa      	b.n	800bf78 <__gethex+0x138>
 800bf82:	230a      	movs	r3, #10
 800bf84:	fb03 0202 	mla	r2, r3, r2, r0
 800bf88:	3a10      	subs	r2, #16
 800bf8a:	e7d6      	b.n	800bf3a <__gethex+0xfa>
 800bf8c:	4631      	mov	r1, r6
 800bf8e:	e7e1      	b.n	800bf54 <__gethex+0x114>
 800bf90:	4621      	mov	r1, r4
 800bf92:	1bf3      	subs	r3, r6, r7
 800bf94:	3b01      	subs	r3, #1
 800bf96:	2b07      	cmp	r3, #7
 800bf98:	dc0a      	bgt.n	800bfb0 <__gethex+0x170>
 800bf9a:	9802      	ldr	r0, [sp, #8]
 800bf9c:	f000 fa8c 	bl	800c4b8 <_Balloc>
 800bfa0:	4604      	mov	r4, r0
 800bfa2:	b940      	cbnz	r0, 800bfb6 <__gethex+0x176>
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	21de      	movs	r1, #222	; 0xde
 800bfa8:	4b62      	ldr	r3, [pc, #392]	; (800c134 <__gethex+0x2f4>)
 800bfaa:	4863      	ldr	r0, [pc, #396]	; (800c138 <__gethex+0x2f8>)
 800bfac:	f001 fbf4 	bl	800d798 <__assert_func>
 800bfb0:	3101      	adds	r1, #1
 800bfb2:	105b      	asrs	r3, r3, #1
 800bfb4:	e7ef      	b.n	800bf96 <__gethex+0x156>
 800bfb6:	f04f 0b00 	mov.w	fp, #0
 800bfba:	f100 0914 	add.w	r9, r0, #20
 800bfbe:	f1ca 0301 	rsb	r3, sl, #1
 800bfc2:	f8cd 9010 	str.w	r9, [sp, #16]
 800bfc6:	f8cd b004 	str.w	fp, [sp, #4]
 800bfca:	9308      	str	r3, [sp, #32]
 800bfcc:	42b7      	cmp	r7, r6
 800bfce:	d33f      	bcc.n	800c050 <__gethex+0x210>
 800bfd0:	9f04      	ldr	r7, [sp, #16]
 800bfd2:	9b01      	ldr	r3, [sp, #4]
 800bfd4:	f847 3b04 	str.w	r3, [r7], #4
 800bfd8:	eba7 0709 	sub.w	r7, r7, r9
 800bfdc:	10bf      	asrs	r7, r7, #2
 800bfde:	6127      	str	r7, [r4, #16]
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f000 fb5f 	bl	800c6a4 <__hi0bits>
 800bfe6:	017f      	lsls	r7, r7, #5
 800bfe8:	f8d8 6000 	ldr.w	r6, [r8]
 800bfec:	1a3f      	subs	r7, r7, r0
 800bfee:	42b7      	cmp	r7, r6
 800bff0:	dd62      	ble.n	800c0b8 <__gethex+0x278>
 800bff2:	1bbf      	subs	r7, r7, r6
 800bff4:	4639      	mov	r1, r7
 800bff6:	4620      	mov	r0, r4
 800bff8:	f000 fef5 	bl	800cde6 <__any_on>
 800bffc:	4682      	mov	sl, r0
 800bffe:	b1a8      	cbz	r0, 800c02c <__gethex+0x1ec>
 800c000:	f04f 0a01 	mov.w	sl, #1
 800c004:	1e7b      	subs	r3, r7, #1
 800c006:	1159      	asrs	r1, r3, #5
 800c008:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c00c:	f003 021f 	and.w	r2, r3, #31
 800c010:	fa0a f202 	lsl.w	r2, sl, r2
 800c014:	420a      	tst	r2, r1
 800c016:	d009      	beq.n	800c02c <__gethex+0x1ec>
 800c018:	4553      	cmp	r3, sl
 800c01a:	dd05      	ble.n	800c028 <__gethex+0x1e8>
 800c01c:	4620      	mov	r0, r4
 800c01e:	1eb9      	subs	r1, r7, #2
 800c020:	f000 fee1 	bl	800cde6 <__any_on>
 800c024:	2800      	cmp	r0, #0
 800c026:	d144      	bne.n	800c0b2 <__gethex+0x272>
 800c028:	f04f 0a02 	mov.w	sl, #2
 800c02c:	4639      	mov	r1, r7
 800c02e:	4620      	mov	r0, r4
 800c030:	f7ff fe9d 	bl	800bd6e <rshift>
 800c034:	443d      	add	r5, r7
 800c036:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c03a:	42ab      	cmp	r3, r5
 800c03c:	da4a      	bge.n	800c0d4 <__gethex+0x294>
 800c03e:	4621      	mov	r1, r4
 800c040:	9802      	ldr	r0, [sp, #8]
 800c042:	f000 fa79 	bl	800c538 <_Bfree>
 800c046:	2300      	movs	r3, #0
 800c048:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c04a:	27a3      	movs	r7, #163	; 0xa3
 800c04c:	6013      	str	r3, [r2, #0]
 800c04e:	e789      	b.n	800bf64 <__gethex+0x124>
 800c050:	1e73      	subs	r3, r6, #1
 800c052:	9a07      	ldr	r2, [sp, #28]
 800c054:	9305      	str	r3, [sp, #20]
 800c056:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d019      	beq.n	800c092 <__gethex+0x252>
 800c05e:	f1bb 0f20 	cmp.w	fp, #32
 800c062:	d107      	bne.n	800c074 <__gethex+0x234>
 800c064:	9b04      	ldr	r3, [sp, #16]
 800c066:	9a01      	ldr	r2, [sp, #4]
 800c068:	f843 2b04 	str.w	r2, [r3], #4
 800c06c:	9304      	str	r3, [sp, #16]
 800c06e:	2300      	movs	r3, #0
 800c070:	469b      	mov	fp, r3
 800c072:	9301      	str	r3, [sp, #4]
 800c074:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c078:	f7ff fecc 	bl	800be14 <__hexdig_fun>
 800c07c:	9b01      	ldr	r3, [sp, #4]
 800c07e:	f000 000f 	and.w	r0, r0, #15
 800c082:	fa00 f00b 	lsl.w	r0, r0, fp
 800c086:	4303      	orrs	r3, r0
 800c088:	9301      	str	r3, [sp, #4]
 800c08a:	f10b 0b04 	add.w	fp, fp, #4
 800c08e:	9b05      	ldr	r3, [sp, #20]
 800c090:	e00d      	b.n	800c0ae <__gethex+0x26e>
 800c092:	9b05      	ldr	r3, [sp, #20]
 800c094:	9a08      	ldr	r2, [sp, #32]
 800c096:	4413      	add	r3, r2
 800c098:	42bb      	cmp	r3, r7
 800c09a:	d3e0      	bcc.n	800c05e <__gethex+0x21e>
 800c09c:	4618      	mov	r0, r3
 800c09e:	4652      	mov	r2, sl
 800c0a0:	9903      	ldr	r1, [sp, #12]
 800c0a2:	9309      	str	r3, [sp, #36]	; 0x24
 800c0a4:	f001 fa85 	bl	800d5b2 <strncmp>
 800c0a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0aa:	2800      	cmp	r0, #0
 800c0ac:	d1d7      	bne.n	800c05e <__gethex+0x21e>
 800c0ae:	461e      	mov	r6, r3
 800c0b0:	e78c      	b.n	800bfcc <__gethex+0x18c>
 800c0b2:	f04f 0a03 	mov.w	sl, #3
 800c0b6:	e7b9      	b.n	800c02c <__gethex+0x1ec>
 800c0b8:	da09      	bge.n	800c0ce <__gethex+0x28e>
 800c0ba:	1bf7      	subs	r7, r6, r7
 800c0bc:	4621      	mov	r1, r4
 800c0be:	463a      	mov	r2, r7
 800c0c0:	9802      	ldr	r0, [sp, #8]
 800c0c2:	f000 fc51 	bl	800c968 <__lshift>
 800c0c6:	4604      	mov	r4, r0
 800c0c8:	1bed      	subs	r5, r5, r7
 800c0ca:	f100 0914 	add.w	r9, r0, #20
 800c0ce:	f04f 0a00 	mov.w	sl, #0
 800c0d2:	e7b0      	b.n	800c036 <__gethex+0x1f6>
 800c0d4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c0d8:	42a8      	cmp	r0, r5
 800c0da:	dd71      	ble.n	800c1c0 <__gethex+0x380>
 800c0dc:	1b45      	subs	r5, r0, r5
 800c0de:	42ae      	cmp	r6, r5
 800c0e0:	dc34      	bgt.n	800c14c <__gethex+0x30c>
 800c0e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c0e6:	2b02      	cmp	r3, #2
 800c0e8:	d028      	beq.n	800c13c <__gethex+0x2fc>
 800c0ea:	2b03      	cmp	r3, #3
 800c0ec:	d02a      	beq.n	800c144 <__gethex+0x304>
 800c0ee:	2b01      	cmp	r3, #1
 800c0f0:	d115      	bne.n	800c11e <__gethex+0x2de>
 800c0f2:	42ae      	cmp	r6, r5
 800c0f4:	d113      	bne.n	800c11e <__gethex+0x2de>
 800c0f6:	2e01      	cmp	r6, #1
 800c0f8:	d10b      	bne.n	800c112 <__gethex+0x2d2>
 800c0fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c0fe:	9a06      	ldr	r2, [sp, #24]
 800c100:	2762      	movs	r7, #98	; 0x62
 800c102:	6013      	str	r3, [r2, #0]
 800c104:	2301      	movs	r3, #1
 800c106:	6123      	str	r3, [r4, #16]
 800c108:	f8c9 3000 	str.w	r3, [r9]
 800c10c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c10e:	601c      	str	r4, [r3, #0]
 800c110:	e728      	b.n	800bf64 <__gethex+0x124>
 800c112:	4620      	mov	r0, r4
 800c114:	1e71      	subs	r1, r6, #1
 800c116:	f000 fe66 	bl	800cde6 <__any_on>
 800c11a:	2800      	cmp	r0, #0
 800c11c:	d1ed      	bne.n	800c0fa <__gethex+0x2ba>
 800c11e:	4621      	mov	r1, r4
 800c120:	9802      	ldr	r0, [sp, #8]
 800c122:	f000 fa09 	bl	800c538 <_Bfree>
 800c126:	2300      	movs	r3, #0
 800c128:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c12a:	2750      	movs	r7, #80	; 0x50
 800c12c:	6013      	str	r3, [r2, #0]
 800c12e:	e719      	b.n	800bf64 <__gethex+0x124>
 800c130:	0801ae2c 	.word	0x0801ae2c
 800c134:	0801ad4c 	.word	0x0801ad4c
 800c138:	0801adc0 	.word	0x0801adc0
 800c13c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d1ed      	bne.n	800c11e <__gethex+0x2de>
 800c142:	e7da      	b.n	800c0fa <__gethex+0x2ba>
 800c144:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c146:	2b00      	cmp	r3, #0
 800c148:	d1d7      	bne.n	800c0fa <__gethex+0x2ba>
 800c14a:	e7e8      	b.n	800c11e <__gethex+0x2de>
 800c14c:	1e6f      	subs	r7, r5, #1
 800c14e:	f1ba 0f00 	cmp.w	sl, #0
 800c152:	d132      	bne.n	800c1ba <__gethex+0x37a>
 800c154:	b127      	cbz	r7, 800c160 <__gethex+0x320>
 800c156:	4639      	mov	r1, r7
 800c158:	4620      	mov	r0, r4
 800c15a:	f000 fe44 	bl	800cde6 <__any_on>
 800c15e:	4682      	mov	sl, r0
 800c160:	2101      	movs	r1, #1
 800c162:	117b      	asrs	r3, r7, #5
 800c164:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c168:	f007 071f 	and.w	r7, r7, #31
 800c16c:	fa01 f707 	lsl.w	r7, r1, r7
 800c170:	421f      	tst	r7, r3
 800c172:	f04f 0702 	mov.w	r7, #2
 800c176:	4629      	mov	r1, r5
 800c178:	4620      	mov	r0, r4
 800c17a:	bf18      	it	ne
 800c17c:	f04a 0a02 	orrne.w	sl, sl, #2
 800c180:	1b76      	subs	r6, r6, r5
 800c182:	f7ff fdf4 	bl	800bd6e <rshift>
 800c186:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c18a:	f1ba 0f00 	cmp.w	sl, #0
 800c18e:	d048      	beq.n	800c222 <__gethex+0x3e2>
 800c190:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c194:	2b02      	cmp	r3, #2
 800c196:	d015      	beq.n	800c1c4 <__gethex+0x384>
 800c198:	2b03      	cmp	r3, #3
 800c19a:	d017      	beq.n	800c1cc <__gethex+0x38c>
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	d109      	bne.n	800c1b4 <__gethex+0x374>
 800c1a0:	f01a 0f02 	tst.w	sl, #2
 800c1a4:	d006      	beq.n	800c1b4 <__gethex+0x374>
 800c1a6:	f8d9 0000 	ldr.w	r0, [r9]
 800c1aa:	ea4a 0a00 	orr.w	sl, sl, r0
 800c1ae:	f01a 0f01 	tst.w	sl, #1
 800c1b2:	d10e      	bne.n	800c1d2 <__gethex+0x392>
 800c1b4:	f047 0710 	orr.w	r7, r7, #16
 800c1b8:	e033      	b.n	800c222 <__gethex+0x3e2>
 800c1ba:	f04f 0a01 	mov.w	sl, #1
 800c1be:	e7cf      	b.n	800c160 <__gethex+0x320>
 800c1c0:	2701      	movs	r7, #1
 800c1c2:	e7e2      	b.n	800c18a <__gethex+0x34a>
 800c1c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c1c6:	f1c3 0301 	rsb	r3, r3, #1
 800c1ca:	9315      	str	r3, [sp, #84]	; 0x54
 800c1cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d0f0      	beq.n	800c1b4 <__gethex+0x374>
 800c1d2:	f04f 0c00 	mov.w	ip, #0
 800c1d6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c1da:	f104 0314 	add.w	r3, r4, #20
 800c1de:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c1e2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c1f0:	d01c      	beq.n	800c22c <__gethex+0x3ec>
 800c1f2:	3201      	adds	r2, #1
 800c1f4:	6002      	str	r2, [r0, #0]
 800c1f6:	2f02      	cmp	r7, #2
 800c1f8:	f104 0314 	add.w	r3, r4, #20
 800c1fc:	d13d      	bne.n	800c27a <__gethex+0x43a>
 800c1fe:	f8d8 2000 	ldr.w	r2, [r8]
 800c202:	3a01      	subs	r2, #1
 800c204:	42b2      	cmp	r2, r6
 800c206:	d10a      	bne.n	800c21e <__gethex+0x3de>
 800c208:	2201      	movs	r2, #1
 800c20a:	1171      	asrs	r1, r6, #5
 800c20c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c210:	f006 061f 	and.w	r6, r6, #31
 800c214:	fa02 f606 	lsl.w	r6, r2, r6
 800c218:	421e      	tst	r6, r3
 800c21a:	bf18      	it	ne
 800c21c:	4617      	movne	r7, r2
 800c21e:	f047 0720 	orr.w	r7, r7, #32
 800c222:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c224:	601c      	str	r4, [r3, #0]
 800c226:	9b06      	ldr	r3, [sp, #24]
 800c228:	601d      	str	r5, [r3, #0]
 800c22a:	e69b      	b.n	800bf64 <__gethex+0x124>
 800c22c:	4299      	cmp	r1, r3
 800c22e:	f843 cc04 	str.w	ip, [r3, #-4]
 800c232:	d8d8      	bhi.n	800c1e6 <__gethex+0x3a6>
 800c234:	68a3      	ldr	r3, [r4, #8]
 800c236:	459b      	cmp	fp, r3
 800c238:	db17      	blt.n	800c26a <__gethex+0x42a>
 800c23a:	6861      	ldr	r1, [r4, #4]
 800c23c:	9802      	ldr	r0, [sp, #8]
 800c23e:	3101      	adds	r1, #1
 800c240:	f000 f93a 	bl	800c4b8 <_Balloc>
 800c244:	4681      	mov	r9, r0
 800c246:	b918      	cbnz	r0, 800c250 <__gethex+0x410>
 800c248:	4602      	mov	r2, r0
 800c24a:	2184      	movs	r1, #132	; 0x84
 800c24c:	4b19      	ldr	r3, [pc, #100]	; (800c2b4 <__gethex+0x474>)
 800c24e:	e6ac      	b.n	800bfaa <__gethex+0x16a>
 800c250:	6922      	ldr	r2, [r4, #16]
 800c252:	f104 010c 	add.w	r1, r4, #12
 800c256:	3202      	adds	r2, #2
 800c258:	0092      	lsls	r2, r2, #2
 800c25a:	300c      	adds	r0, #12
 800c25c:	f000 f91e 	bl	800c49c <memcpy>
 800c260:	4621      	mov	r1, r4
 800c262:	9802      	ldr	r0, [sp, #8]
 800c264:	f000 f968 	bl	800c538 <_Bfree>
 800c268:	464c      	mov	r4, r9
 800c26a:	6923      	ldr	r3, [r4, #16]
 800c26c:	1c5a      	adds	r2, r3, #1
 800c26e:	6122      	str	r2, [r4, #16]
 800c270:	2201      	movs	r2, #1
 800c272:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c276:	615a      	str	r2, [r3, #20]
 800c278:	e7bd      	b.n	800c1f6 <__gethex+0x3b6>
 800c27a:	6922      	ldr	r2, [r4, #16]
 800c27c:	455a      	cmp	r2, fp
 800c27e:	dd0b      	ble.n	800c298 <__gethex+0x458>
 800c280:	2101      	movs	r1, #1
 800c282:	4620      	mov	r0, r4
 800c284:	f7ff fd73 	bl	800bd6e <rshift>
 800c288:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c28c:	3501      	adds	r5, #1
 800c28e:	42ab      	cmp	r3, r5
 800c290:	f6ff aed5 	blt.w	800c03e <__gethex+0x1fe>
 800c294:	2701      	movs	r7, #1
 800c296:	e7c2      	b.n	800c21e <__gethex+0x3de>
 800c298:	f016 061f 	ands.w	r6, r6, #31
 800c29c:	d0fa      	beq.n	800c294 <__gethex+0x454>
 800c29e:	449a      	add	sl, r3
 800c2a0:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c2a4:	f000 f9fe 	bl	800c6a4 <__hi0bits>
 800c2a8:	f1c6 0620 	rsb	r6, r6, #32
 800c2ac:	42b0      	cmp	r0, r6
 800c2ae:	dbe7      	blt.n	800c280 <__gethex+0x440>
 800c2b0:	e7f0      	b.n	800c294 <__gethex+0x454>
 800c2b2:	bf00      	nop
 800c2b4:	0801ad4c 	.word	0x0801ad4c

0800c2b8 <L_shift>:
 800c2b8:	f1c2 0208 	rsb	r2, r2, #8
 800c2bc:	0092      	lsls	r2, r2, #2
 800c2be:	b570      	push	{r4, r5, r6, lr}
 800c2c0:	f1c2 0620 	rsb	r6, r2, #32
 800c2c4:	6843      	ldr	r3, [r0, #4]
 800c2c6:	6804      	ldr	r4, [r0, #0]
 800c2c8:	fa03 f506 	lsl.w	r5, r3, r6
 800c2cc:	432c      	orrs	r4, r5
 800c2ce:	40d3      	lsrs	r3, r2
 800c2d0:	6004      	str	r4, [r0, #0]
 800c2d2:	f840 3f04 	str.w	r3, [r0, #4]!
 800c2d6:	4288      	cmp	r0, r1
 800c2d8:	d3f4      	bcc.n	800c2c4 <L_shift+0xc>
 800c2da:	bd70      	pop	{r4, r5, r6, pc}

0800c2dc <__match>:
 800c2dc:	b530      	push	{r4, r5, lr}
 800c2de:	6803      	ldr	r3, [r0, #0]
 800c2e0:	3301      	adds	r3, #1
 800c2e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2e6:	b914      	cbnz	r4, 800c2ee <__match+0x12>
 800c2e8:	6003      	str	r3, [r0, #0]
 800c2ea:	2001      	movs	r0, #1
 800c2ec:	bd30      	pop	{r4, r5, pc}
 800c2ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2f2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c2f6:	2d19      	cmp	r5, #25
 800c2f8:	bf98      	it	ls
 800c2fa:	3220      	addls	r2, #32
 800c2fc:	42a2      	cmp	r2, r4
 800c2fe:	d0f0      	beq.n	800c2e2 <__match+0x6>
 800c300:	2000      	movs	r0, #0
 800c302:	e7f3      	b.n	800c2ec <__match+0x10>

0800c304 <__hexnan>:
 800c304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c308:	2500      	movs	r5, #0
 800c30a:	680b      	ldr	r3, [r1, #0]
 800c30c:	4682      	mov	sl, r0
 800c30e:	115e      	asrs	r6, r3, #5
 800c310:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c314:	f013 031f 	ands.w	r3, r3, #31
 800c318:	bf18      	it	ne
 800c31a:	3604      	addne	r6, #4
 800c31c:	1f37      	subs	r7, r6, #4
 800c31e:	4690      	mov	r8, r2
 800c320:	46b9      	mov	r9, r7
 800c322:	463c      	mov	r4, r7
 800c324:	46ab      	mov	fp, r5
 800c326:	b087      	sub	sp, #28
 800c328:	6801      	ldr	r1, [r0, #0]
 800c32a:	9301      	str	r3, [sp, #4]
 800c32c:	f846 5c04 	str.w	r5, [r6, #-4]
 800c330:	9502      	str	r5, [sp, #8]
 800c332:	784a      	ldrb	r2, [r1, #1]
 800c334:	1c4b      	adds	r3, r1, #1
 800c336:	9303      	str	r3, [sp, #12]
 800c338:	b342      	cbz	r2, 800c38c <__hexnan+0x88>
 800c33a:	4610      	mov	r0, r2
 800c33c:	9105      	str	r1, [sp, #20]
 800c33e:	9204      	str	r2, [sp, #16]
 800c340:	f7ff fd68 	bl	800be14 <__hexdig_fun>
 800c344:	2800      	cmp	r0, #0
 800c346:	d14f      	bne.n	800c3e8 <__hexnan+0xe4>
 800c348:	9a04      	ldr	r2, [sp, #16]
 800c34a:	9905      	ldr	r1, [sp, #20]
 800c34c:	2a20      	cmp	r2, #32
 800c34e:	d818      	bhi.n	800c382 <__hexnan+0x7e>
 800c350:	9b02      	ldr	r3, [sp, #8]
 800c352:	459b      	cmp	fp, r3
 800c354:	dd13      	ble.n	800c37e <__hexnan+0x7a>
 800c356:	454c      	cmp	r4, r9
 800c358:	d206      	bcs.n	800c368 <__hexnan+0x64>
 800c35a:	2d07      	cmp	r5, #7
 800c35c:	dc04      	bgt.n	800c368 <__hexnan+0x64>
 800c35e:	462a      	mov	r2, r5
 800c360:	4649      	mov	r1, r9
 800c362:	4620      	mov	r0, r4
 800c364:	f7ff ffa8 	bl	800c2b8 <L_shift>
 800c368:	4544      	cmp	r4, r8
 800c36a:	d950      	bls.n	800c40e <__hexnan+0x10a>
 800c36c:	2300      	movs	r3, #0
 800c36e:	f1a4 0904 	sub.w	r9, r4, #4
 800c372:	f844 3c04 	str.w	r3, [r4, #-4]
 800c376:	461d      	mov	r5, r3
 800c378:	464c      	mov	r4, r9
 800c37a:	f8cd b008 	str.w	fp, [sp, #8]
 800c37e:	9903      	ldr	r1, [sp, #12]
 800c380:	e7d7      	b.n	800c332 <__hexnan+0x2e>
 800c382:	2a29      	cmp	r2, #41	; 0x29
 800c384:	d156      	bne.n	800c434 <__hexnan+0x130>
 800c386:	3102      	adds	r1, #2
 800c388:	f8ca 1000 	str.w	r1, [sl]
 800c38c:	f1bb 0f00 	cmp.w	fp, #0
 800c390:	d050      	beq.n	800c434 <__hexnan+0x130>
 800c392:	454c      	cmp	r4, r9
 800c394:	d206      	bcs.n	800c3a4 <__hexnan+0xa0>
 800c396:	2d07      	cmp	r5, #7
 800c398:	dc04      	bgt.n	800c3a4 <__hexnan+0xa0>
 800c39a:	462a      	mov	r2, r5
 800c39c:	4649      	mov	r1, r9
 800c39e:	4620      	mov	r0, r4
 800c3a0:	f7ff ff8a 	bl	800c2b8 <L_shift>
 800c3a4:	4544      	cmp	r4, r8
 800c3a6:	d934      	bls.n	800c412 <__hexnan+0x10e>
 800c3a8:	4623      	mov	r3, r4
 800c3aa:	f1a8 0204 	sub.w	r2, r8, #4
 800c3ae:	f853 1b04 	ldr.w	r1, [r3], #4
 800c3b2:	429f      	cmp	r7, r3
 800c3b4:	f842 1f04 	str.w	r1, [r2, #4]!
 800c3b8:	d2f9      	bcs.n	800c3ae <__hexnan+0xaa>
 800c3ba:	1b3b      	subs	r3, r7, r4
 800c3bc:	f023 0303 	bic.w	r3, r3, #3
 800c3c0:	3304      	adds	r3, #4
 800c3c2:	3401      	adds	r4, #1
 800c3c4:	3e03      	subs	r6, #3
 800c3c6:	42b4      	cmp	r4, r6
 800c3c8:	bf88      	it	hi
 800c3ca:	2304      	movhi	r3, #4
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	4443      	add	r3, r8
 800c3d0:	f843 2b04 	str.w	r2, [r3], #4
 800c3d4:	429f      	cmp	r7, r3
 800c3d6:	d2fb      	bcs.n	800c3d0 <__hexnan+0xcc>
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	b91b      	cbnz	r3, 800c3e4 <__hexnan+0xe0>
 800c3dc:	4547      	cmp	r7, r8
 800c3de:	d127      	bne.n	800c430 <__hexnan+0x12c>
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	603b      	str	r3, [r7, #0]
 800c3e4:	2005      	movs	r0, #5
 800c3e6:	e026      	b.n	800c436 <__hexnan+0x132>
 800c3e8:	3501      	adds	r5, #1
 800c3ea:	2d08      	cmp	r5, #8
 800c3ec:	f10b 0b01 	add.w	fp, fp, #1
 800c3f0:	dd06      	ble.n	800c400 <__hexnan+0xfc>
 800c3f2:	4544      	cmp	r4, r8
 800c3f4:	d9c3      	bls.n	800c37e <__hexnan+0x7a>
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	2501      	movs	r5, #1
 800c3fa:	f844 3c04 	str.w	r3, [r4, #-4]
 800c3fe:	3c04      	subs	r4, #4
 800c400:	6822      	ldr	r2, [r4, #0]
 800c402:	f000 000f 	and.w	r0, r0, #15
 800c406:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c40a:	6022      	str	r2, [r4, #0]
 800c40c:	e7b7      	b.n	800c37e <__hexnan+0x7a>
 800c40e:	2508      	movs	r5, #8
 800c410:	e7b5      	b.n	800c37e <__hexnan+0x7a>
 800c412:	9b01      	ldr	r3, [sp, #4]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d0df      	beq.n	800c3d8 <__hexnan+0xd4>
 800c418:	f04f 32ff 	mov.w	r2, #4294967295
 800c41c:	f1c3 0320 	rsb	r3, r3, #32
 800c420:	fa22 f303 	lsr.w	r3, r2, r3
 800c424:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c428:	401a      	ands	r2, r3
 800c42a:	f846 2c04 	str.w	r2, [r6, #-4]
 800c42e:	e7d3      	b.n	800c3d8 <__hexnan+0xd4>
 800c430:	3f04      	subs	r7, #4
 800c432:	e7d1      	b.n	800c3d8 <__hexnan+0xd4>
 800c434:	2004      	movs	r0, #4
 800c436:	b007      	add	sp, #28
 800c438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c43c <_localeconv_r>:
 800c43c:	4800      	ldr	r0, [pc, #0]	; (800c440 <_localeconv_r+0x4>)
 800c43e:	4770      	bx	lr
 800c440:	2000016c 	.word	0x2000016c

0800c444 <__retarget_lock_init_recursive>:
 800c444:	4770      	bx	lr

0800c446 <__retarget_lock_acquire_recursive>:
 800c446:	4770      	bx	lr

0800c448 <__retarget_lock_release_recursive>:
 800c448:	4770      	bx	lr
	...

0800c44c <malloc>:
 800c44c:	4b02      	ldr	r3, [pc, #8]	; (800c458 <malloc+0xc>)
 800c44e:	4601      	mov	r1, r0
 800c450:	6818      	ldr	r0, [r3, #0]
 800c452:	f000 bd43 	b.w	800cedc <_malloc_r>
 800c456:	bf00      	nop
 800c458:	20000014 	.word	0x20000014

0800c45c <__ascii_mbtowc>:
 800c45c:	b082      	sub	sp, #8
 800c45e:	b901      	cbnz	r1, 800c462 <__ascii_mbtowc+0x6>
 800c460:	a901      	add	r1, sp, #4
 800c462:	b142      	cbz	r2, 800c476 <__ascii_mbtowc+0x1a>
 800c464:	b14b      	cbz	r3, 800c47a <__ascii_mbtowc+0x1e>
 800c466:	7813      	ldrb	r3, [r2, #0]
 800c468:	600b      	str	r3, [r1, #0]
 800c46a:	7812      	ldrb	r2, [r2, #0]
 800c46c:	1e10      	subs	r0, r2, #0
 800c46e:	bf18      	it	ne
 800c470:	2001      	movne	r0, #1
 800c472:	b002      	add	sp, #8
 800c474:	4770      	bx	lr
 800c476:	4610      	mov	r0, r2
 800c478:	e7fb      	b.n	800c472 <__ascii_mbtowc+0x16>
 800c47a:	f06f 0001 	mvn.w	r0, #1
 800c47e:	e7f8      	b.n	800c472 <__ascii_mbtowc+0x16>

0800c480 <memchr>:
 800c480:	4603      	mov	r3, r0
 800c482:	b510      	push	{r4, lr}
 800c484:	b2c9      	uxtb	r1, r1
 800c486:	4402      	add	r2, r0
 800c488:	4293      	cmp	r3, r2
 800c48a:	4618      	mov	r0, r3
 800c48c:	d101      	bne.n	800c492 <memchr+0x12>
 800c48e:	2000      	movs	r0, #0
 800c490:	e003      	b.n	800c49a <memchr+0x1a>
 800c492:	7804      	ldrb	r4, [r0, #0]
 800c494:	3301      	adds	r3, #1
 800c496:	428c      	cmp	r4, r1
 800c498:	d1f6      	bne.n	800c488 <memchr+0x8>
 800c49a:	bd10      	pop	{r4, pc}

0800c49c <memcpy>:
 800c49c:	440a      	add	r2, r1
 800c49e:	4291      	cmp	r1, r2
 800c4a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c4a4:	d100      	bne.n	800c4a8 <memcpy+0xc>
 800c4a6:	4770      	bx	lr
 800c4a8:	b510      	push	{r4, lr}
 800c4aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4ae:	4291      	cmp	r1, r2
 800c4b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c4b4:	d1f9      	bne.n	800c4aa <memcpy+0xe>
 800c4b6:	bd10      	pop	{r4, pc}

0800c4b8 <_Balloc>:
 800c4b8:	b570      	push	{r4, r5, r6, lr}
 800c4ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c4bc:	4604      	mov	r4, r0
 800c4be:	460d      	mov	r5, r1
 800c4c0:	b976      	cbnz	r6, 800c4e0 <_Balloc+0x28>
 800c4c2:	2010      	movs	r0, #16
 800c4c4:	f7ff ffc2 	bl	800c44c <malloc>
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	6260      	str	r0, [r4, #36]	; 0x24
 800c4cc:	b920      	cbnz	r0, 800c4d8 <_Balloc+0x20>
 800c4ce:	2166      	movs	r1, #102	; 0x66
 800c4d0:	4b17      	ldr	r3, [pc, #92]	; (800c530 <_Balloc+0x78>)
 800c4d2:	4818      	ldr	r0, [pc, #96]	; (800c534 <_Balloc+0x7c>)
 800c4d4:	f001 f960 	bl	800d798 <__assert_func>
 800c4d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4dc:	6006      	str	r6, [r0, #0]
 800c4de:	60c6      	str	r6, [r0, #12]
 800c4e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c4e2:	68f3      	ldr	r3, [r6, #12]
 800c4e4:	b183      	cbz	r3, 800c508 <_Balloc+0x50>
 800c4e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4e8:	68db      	ldr	r3, [r3, #12]
 800c4ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c4ee:	b9b8      	cbnz	r0, 800c520 <_Balloc+0x68>
 800c4f0:	2101      	movs	r1, #1
 800c4f2:	fa01 f605 	lsl.w	r6, r1, r5
 800c4f6:	1d72      	adds	r2, r6, #5
 800c4f8:	4620      	mov	r0, r4
 800c4fa:	0092      	lsls	r2, r2, #2
 800c4fc:	f000 fc94 	bl	800ce28 <_calloc_r>
 800c500:	b160      	cbz	r0, 800c51c <_Balloc+0x64>
 800c502:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c506:	e00e      	b.n	800c526 <_Balloc+0x6e>
 800c508:	2221      	movs	r2, #33	; 0x21
 800c50a:	2104      	movs	r1, #4
 800c50c:	4620      	mov	r0, r4
 800c50e:	f000 fc8b 	bl	800ce28 <_calloc_r>
 800c512:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c514:	60f0      	str	r0, [r6, #12]
 800c516:	68db      	ldr	r3, [r3, #12]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d1e4      	bne.n	800c4e6 <_Balloc+0x2e>
 800c51c:	2000      	movs	r0, #0
 800c51e:	bd70      	pop	{r4, r5, r6, pc}
 800c520:	6802      	ldr	r2, [r0, #0]
 800c522:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c526:	2300      	movs	r3, #0
 800c528:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c52c:	e7f7      	b.n	800c51e <_Balloc+0x66>
 800c52e:	bf00      	nop
 800c530:	0801acd6 	.word	0x0801acd6
 800c534:	0801ae40 	.word	0x0801ae40

0800c538 <_Bfree>:
 800c538:	b570      	push	{r4, r5, r6, lr}
 800c53a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c53c:	4605      	mov	r5, r0
 800c53e:	460c      	mov	r4, r1
 800c540:	b976      	cbnz	r6, 800c560 <_Bfree+0x28>
 800c542:	2010      	movs	r0, #16
 800c544:	f7ff ff82 	bl	800c44c <malloc>
 800c548:	4602      	mov	r2, r0
 800c54a:	6268      	str	r0, [r5, #36]	; 0x24
 800c54c:	b920      	cbnz	r0, 800c558 <_Bfree+0x20>
 800c54e:	218a      	movs	r1, #138	; 0x8a
 800c550:	4b08      	ldr	r3, [pc, #32]	; (800c574 <_Bfree+0x3c>)
 800c552:	4809      	ldr	r0, [pc, #36]	; (800c578 <_Bfree+0x40>)
 800c554:	f001 f920 	bl	800d798 <__assert_func>
 800c558:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c55c:	6006      	str	r6, [r0, #0]
 800c55e:	60c6      	str	r6, [r0, #12]
 800c560:	b13c      	cbz	r4, 800c572 <_Bfree+0x3a>
 800c562:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c564:	6862      	ldr	r2, [r4, #4]
 800c566:	68db      	ldr	r3, [r3, #12]
 800c568:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c56c:	6021      	str	r1, [r4, #0]
 800c56e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c572:	bd70      	pop	{r4, r5, r6, pc}
 800c574:	0801acd6 	.word	0x0801acd6
 800c578:	0801ae40 	.word	0x0801ae40

0800c57c <__multadd>:
 800c57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c580:	4698      	mov	r8, r3
 800c582:	460c      	mov	r4, r1
 800c584:	2300      	movs	r3, #0
 800c586:	690e      	ldr	r6, [r1, #16]
 800c588:	4607      	mov	r7, r0
 800c58a:	f101 0014 	add.w	r0, r1, #20
 800c58e:	6805      	ldr	r5, [r0, #0]
 800c590:	3301      	adds	r3, #1
 800c592:	b2a9      	uxth	r1, r5
 800c594:	fb02 8101 	mla	r1, r2, r1, r8
 800c598:	0c2d      	lsrs	r5, r5, #16
 800c59a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c59e:	fb02 c505 	mla	r5, r2, r5, ip
 800c5a2:	b289      	uxth	r1, r1
 800c5a4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c5a8:	429e      	cmp	r6, r3
 800c5aa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c5ae:	f840 1b04 	str.w	r1, [r0], #4
 800c5b2:	dcec      	bgt.n	800c58e <__multadd+0x12>
 800c5b4:	f1b8 0f00 	cmp.w	r8, #0
 800c5b8:	d022      	beq.n	800c600 <__multadd+0x84>
 800c5ba:	68a3      	ldr	r3, [r4, #8]
 800c5bc:	42b3      	cmp	r3, r6
 800c5be:	dc19      	bgt.n	800c5f4 <__multadd+0x78>
 800c5c0:	6861      	ldr	r1, [r4, #4]
 800c5c2:	4638      	mov	r0, r7
 800c5c4:	3101      	adds	r1, #1
 800c5c6:	f7ff ff77 	bl	800c4b8 <_Balloc>
 800c5ca:	4605      	mov	r5, r0
 800c5cc:	b928      	cbnz	r0, 800c5da <__multadd+0x5e>
 800c5ce:	4602      	mov	r2, r0
 800c5d0:	21b5      	movs	r1, #181	; 0xb5
 800c5d2:	4b0d      	ldr	r3, [pc, #52]	; (800c608 <__multadd+0x8c>)
 800c5d4:	480d      	ldr	r0, [pc, #52]	; (800c60c <__multadd+0x90>)
 800c5d6:	f001 f8df 	bl	800d798 <__assert_func>
 800c5da:	6922      	ldr	r2, [r4, #16]
 800c5dc:	f104 010c 	add.w	r1, r4, #12
 800c5e0:	3202      	adds	r2, #2
 800c5e2:	0092      	lsls	r2, r2, #2
 800c5e4:	300c      	adds	r0, #12
 800c5e6:	f7ff ff59 	bl	800c49c <memcpy>
 800c5ea:	4621      	mov	r1, r4
 800c5ec:	4638      	mov	r0, r7
 800c5ee:	f7ff ffa3 	bl	800c538 <_Bfree>
 800c5f2:	462c      	mov	r4, r5
 800c5f4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c5f8:	3601      	adds	r6, #1
 800c5fa:	f8c3 8014 	str.w	r8, [r3, #20]
 800c5fe:	6126      	str	r6, [r4, #16]
 800c600:	4620      	mov	r0, r4
 800c602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c606:	bf00      	nop
 800c608:	0801ad4c 	.word	0x0801ad4c
 800c60c:	0801ae40 	.word	0x0801ae40

0800c610 <__s2b>:
 800c610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c614:	4615      	mov	r5, r2
 800c616:	2209      	movs	r2, #9
 800c618:	461f      	mov	r7, r3
 800c61a:	3308      	adds	r3, #8
 800c61c:	460c      	mov	r4, r1
 800c61e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c622:	4606      	mov	r6, r0
 800c624:	2201      	movs	r2, #1
 800c626:	2100      	movs	r1, #0
 800c628:	429a      	cmp	r2, r3
 800c62a:	db09      	blt.n	800c640 <__s2b+0x30>
 800c62c:	4630      	mov	r0, r6
 800c62e:	f7ff ff43 	bl	800c4b8 <_Balloc>
 800c632:	b940      	cbnz	r0, 800c646 <__s2b+0x36>
 800c634:	4602      	mov	r2, r0
 800c636:	21ce      	movs	r1, #206	; 0xce
 800c638:	4b18      	ldr	r3, [pc, #96]	; (800c69c <__s2b+0x8c>)
 800c63a:	4819      	ldr	r0, [pc, #100]	; (800c6a0 <__s2b+0x90>)
 800c63c:	f001 f8ac 	bl	800d798 <__assert_func>
 800c640:	0052      	lsls	r2, r2, #1
 800c642:	3101      	adds	r1, #1
 800c644:	e7f0      	b.n	800c628 <__s2b+0x18>
 800c646:	9b08      	ldr	r3, [sp, #32]
 800c648:	2d09      	cmp	r5, #9
 800c64a:	6143      	str	r3, [r0, #20]
 800c64c:	f04f 0301 	mov.w	r3, #1
 800c650:	6103      	str	r3, [r0, #16]
 800c652:	dd16      	ble.n	800c682 <__s2b+0x72>
 800c654:	f104 0909 	add.w	r9, r4, #9
 800c658:	46c8      	mov	r8, r9
 800c65a:	442c      	add	r4, r5
 800c65c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c660:	4601      	mov	r1, r0
 800c662:	220a      	movs	r2, #10
 800c664:	4630      	mov	r0, r6
 800c666:	3b30      	subs	r3, #48	; 0x30
 800c668:	f7ff ff88 	bl	800c57c <__multadd>
 800c66c:	45a0      	cmp	r8, r4
 800c66e:	d1f5      	bne.n	800c65c <__s2b+0x4c>
 800c670:	f1a5 0408 	sub.w	r4, r5, #8
 800c674:	444c      	add	r4, r9
 800c676:	1b2d      	subs	r5, r5, r4
 800c678:	1963      	adds	r3, r4, r5
 800c67a:	42bb      	cmp	r3, r7
 800c67c:	db04      	blt.n	800c688 <__s2b+0x78>
 800c67e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c682:	2509      	movs	r5, #9
 800c684:	340a      	adds	r4, #10
 800c686:	e7f6      	b.n	800c676 <__s2b+0x66>
 800c688:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c68c:	4601      	mov	r1, r0
 800c68e:	220a      	movs	r2, #10
 800c690:	4630      	mov	r0, r6
 800c692:	3b30      	subs	r3, #48	; 0x30
 800c694:	f7ff ff72 	bl	800c57c <__multadd>
 800c698:	e7ee      	b.n	800c678 <__s2b+0x68>
 800c69a:	bf00      	nop
 800c69c:	0801ad4c 	.word	0x0801ad4c
 800c6a0:	0801ae40 	.word	0x0801ae40

0800c6a4 <__hi0bits>:
 800c6a4:	0c02      	lsrs	r2, r0, #16
 800c6a6:	0412      	lsls	r2, r2, #16
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	b9ca      	cbnz	r2, 800c6e0 <__hi0bits+0x3c>
 800c6ac:	0403      	lsls	r3, r0, #16
 800c6ae:	2010      	movs	r0, #16
 800c6b0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c6b4:	bf04      	itt	eq
 800c6b6:	021b      	lsleq	r3, r3, #8
 800c6b8:	3008      	addeq	r0, #8
 800c6ba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c6be:	bf04      	itt	eq
 800c6c0:	011b      	lsleq	r3, r3, #4
 800c6c2:	3004      	addeq	r0, #4
 800c6c4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c6c8:	bf04      	itt	eq
 800c6ca:	009b      	lsleq	r3, r3, #2
 800c6cc:	3002      	addeq	r0, #2
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	db05      	blt.n	800c6de <__hi0bits+0x3a>
 800c6d2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c6d6:	f100 0001 	add.w	r0, r0, #1
 800c6da:	bf08      	it	eq
 800c6dc:	2020      	moveq	r0, #32
 800c6de:	4770      	bx	lr
 800c6e0:	2000      	movs	r0, #0
 800c6e2:	e7e5      	b.n	800c6b0 <__hi0bits+0xc>

0800c6e4 <__lo0bits>:
 800c6e4:	6803      	ldr	r3, [r0, #0]
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	f013 0007 	ands.w	r0, r3, #7
 800c6ec:	d00b      	beq.n	800c706 <__lo0bits+0x22>
 800c6ee:	07d9      	lsls	r1, r3, #31
 800c6f0:	d422      	bmi.n	800c738 <__lo0bits+0x54>
 800c6f2:	0798      	lsls	r0, r3, #30
 800c6f4:	bf49      	itett	mi
 800c6f6:	085b      	lsrmi	r3, r3, #1
 800c6f8:	089b      	lsrpl	r3, r3, #2
 800c6fa:	2001      	movmi	r0, #1
 800c6fc:	6013      	strmi	r3, [r2, #0]
 800c6fe:	bf5c      	itt	pl
 800c700:	2002      	movpl	r0, #2
 800c702:	6013      	strpl	r3, [r2, #0]
 800c704:	4770      	bx	lr
 800c706:	b299      	uxth	r1, r3
 800c708:	b909      	cbnz	r1, 800c70e <__lo0bits+0x2a>
 800c70a:	2010      	movs	r0, #16
 800c70c:	0c1b      	lsrs	r3, r3, #16
 800c70e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c712:	bf04      	itt	eq
 800c714:	0a1b      	lsreq	r3, r3, #8
 800c716:	3008      	addeq	r0, #8
 800c718:	0719      	lsls	r1, r3, #28
 800c71a:	bf04      	itt	eq
 800c71c:	091b      	lsreq	r3, r3, #4
 800c71e:	3004      	addeq	r0, #4
 800c720:	0799      	lsls	r1, r3, #30
 800c722:	bf04      	itt	eq
 800c724:	089b      	lsreq	r3, r3, #2
 800c726:	3002      	addeq	r0, #2
 800c728:	07d9      	lsls	r1, r3, #31
 800c72a:	d403      	bmi.n	800c734 <__lo0bits+0x50>
 800c72c:	085b      	lsrs	r3, r3, #1
 800c72e:	f100 0001 	add.w	r0, r0, #1
 800c732:	d003      	beq.n	800c73c <__lo0bits+0x58>
 800c734:	6013      	str	r3, [r2, #0]
 800c736:	4770      	bx	lr
 800c738:	2000      	movs	r0, #0
 800c73a:	4770      	bx	lr
 800c73c:	2020      	movs	r0, #32
 800c73e:	4770      	bx	lr

0800c740 <__i2b>:
 800c740:	b510      	push	{r4, lr}
 800c742:	460c      	mov	r4, r1
 800c744:	2101      	movs	r1, #1
 800c746:	f7ff feb7 	bl	800c4b8 <_Balloc>
 800c74a:	4602      	mov	r2, r0
 800c74c:	b928      	cbnz	r0, 800c75a <__i2b+0x1a>
 800c74e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c752:	4b04      	ldr	r3, [pc, #16]	; (800c764 <__i2b+0x24>)
 800c754:	4804      	ldr	r0, [pc, #16]	; (800c768 <__i2b+0x28>)
 800c756:	f001 f81f 	bl	800d798 <__assert_func>
 800c75a:	2301      	movs	r3, #1
 800c75c:	6144      	str	r4, [r0, #20]
 800c75e:	6103      	str	r3, [r0, #16]
 800c760:	bd10      	pop	{r4, pc}
 800c762:	bf00      	nop
 800c764:	0801ad4c 	.word	0x0801ad4c
 800c768:	0801ae40 	.word	0x0801ae40

0800c76c <__multiply>:
 800c76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c770:	4614      	mov	r4, r2
 800c772:	690a      	ldr	r2, [r1, #16]
 800c774:	6923      	ldr	r3, [r4, #16]
 800c776:	460d      	mov	r5, r1
 800c778:	429a      	cmp	r2, r3
 800c77a:	bfbe      	ittt	lt
 800c77c:	460b      	movlt	r3, r1
 800c77e:	4625      	movlt	r5, r4
 800c780:	461c      	movlt	r4, r3
 800c782:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c786:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c78a:	68ab      	ldr	r3, [r5, #8]
 800c78c:	6869      	ldr	r1, [r5, #4]
 800c78e:	eb0a 0709 	add.w	r7, sl, r9
 800c792:	42bb      	cmp	r3, r7
 800c794:	b085      	sub	sp, #20
 800c796:	bfb8      	it	lt
 800c798:	3101      	addlt	r1, #1
 800c79a:	f7ff fe8d 	bl	800c4b8 <_Balloc>
 800c79e:	b930      	cbnz	r0, 800c7ae <__multiply+0x42>
 800c7a0:	4602      	mov	r2, r0
 800c7a2:	f240 115d 	movw	r1, #349	; 0x15d
 800c7a6:	4b41      	ldr	r3, [pc, #260]	; (800c8ac <__multiply+0x140>)
 800c7a8:	4841      	ldr	r0, [pc, #260]	; (800c8b0 <__multiply+0x144>)
 800c7aa:	f000 fff5 	bl	800d798 <__assert_func>
 800c7ae:	f100 0614 	add.w	r6, r0, #20
 800c7b2:	4633      	mov	r3, r6
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c7ba:	4543      	cmp	r3, r8
 800c7bc:	d31e      	bcc.n	800c7fc <__multiply+0x90>
 800c7be:	f105 0c14 	add.w	ip, r5, #20
 800c7c2:	f104 0314 	add.w	r3, r4, #20
 800c7c6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c7ca:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c7ce:	9202      	str	r2, [sp, #8]
 800c7d0:	ebac 0205 	sub.w	r2, ip, r5
 800c7d4:	3a15      	subs	r2, #21
 800c7d6:	f022 0203 	bic.w	r2, r2, #3
 800c7da:	3204      	adds	r2, #4
 800c7dc:	f105 0115 	add.w	r1, r5, #21
 800c7e0:	458c      	cmp	ip, r1
 800c7e2:	bf38      	it	cc
 800c7e4:	2204      	movcc	r2, #4
 800c7e6:	9201      	str	r2, [sp, #4]
 800c7e8:	9a02      	ldr	r2, [sp, #8]
 800c7ea:	9303      	str	r3, [sp, #12]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d808      	bhi.n	800c802 <__multiply+0x96>
 800c7f0:	2f00      	cmp	r7, #0
 800c7f2:	dc55      	bgt.n	800c8a0 <__multiply+0x134>
 800c7f4:	6107      	str	r7, [r0, #16]
 800c7f6:	b005      	add	sp, #20
 800c7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7fc:	f843 2b04 	str.w	r2, [r3], #4
 800c800:	e7db      	b.n	800c7ba <__multiply+0x4e>
 800c802:	f8b3 a000 	ldrh.w	sl, [r3]
 800c806:	f1ba 0f00 	cmp.w	sl, #0
 800c80a:	d020      	beq.n	800c84e <__multiply+0xe2>
 800c80c:	46b1      	mov	r9, r6
 800c80e:	2200      	movs	r2, #0
 800c810:	f105 0e14 	add.w	lr, r5, #20
 800c814:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c818:	f8d9 b000 	ldr.w	fp, [r9]
 800c81c:	b2a1      	uxth	r1, r4
 800c81e:	fa1f fb8b 	uxth.w	fp, fp
 800c822:	fb0a b101 	mla	r1, sl, r1, fp
 800c826:	4411      	add	r1, r2
 800c828:	f8d9 2000 	ldr.w	r2, [r9]
 800c82c:	0c24      	lsrs	r4, r4, #16
 800c82e:	0c12      	lsrs	r2, r2, #16
 800c830:	fb0a 2404 	mla	r4, sl, r4, r2
 800c834:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c838:	b289      	uxth	r1, r1
 800c83a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c83e:	45f4      	cmp	ip, lr
 800c840:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c844:	f849 1b04 	str.w	r1, [r9], #4
 800c848:	d8e4      	bhi.n	800c814 <__multiply+0xa8>
 800c84a:	9901      	ldr	r1, [sp, #4]
 800c84c:	5072      	str	r2, [r6, r1]
 800c84e:	9a03      	ldr	r2, [sp, #12]
 800c850:	3304      	adds	r3, #4
 800c852:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c856:	f1b9 0f00 	cmp.w	r9, #0
 800c85a:	d01f      	beq.n	800c89c <__multiply+0x130>
 800c85c:	46b6      	mov	lr, r6
 800c85e:	f04f 0a00 	mov.w	sl, #0
 800c862:	6834      	ldr	r4, [r6, #0]
 800c864:	f105 0114 	add.w	r1, r5, #20
 800c868:	880a      	ldrh	r2, [r1, #0]
 800c86a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c86e:	b2a4      	uxth	r4, r4
 800c870:	fb09 b202 	mla	r2, r9, r2, fp
 800c874:	4492      	add	sl, r2
 800c876:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c87a:	f84e 4b04 	str.w	r4, [lr], #4
 800c87e:	f851 4b04 	ldr.w	r4, [r1], #4
 800c882:	f8be 2000 	ldrh.w	r2, [lr]
 800c886:	0c24      	lsrs	r4, r4, #16
 800c888:	fb09 2404 	mla	r4, r9, r4, r2
 800c88c:	458c      	cmp	ip, r1
 800c88e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c892:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c896:	d8e7      	bhi.n	800c868 <__multiply+0xfc>
 800c898:	9a01      	ldr	r2, [sp, #4]
 800c89a:	50b4      	str	r4, [r6, r2]
 800c89c:	3604      	adds	r6, #4
 800c89e:	e7a3      	b.n	800c7e8 <__multiply+0x7c>
 800c8a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d1a5      	bne.n	800c7f4 <__multiply+0x88>
 800c8a8:	3f01      	subs	r7, #1
 800c8aa:	e7a1      	b.n	800c7f0 <__multiply+0x84>
 800c8ac:	0801ad4c 	.word	0x0801ad4c
 800c8b0:	0801ae40 	.word	0x0801ae40

0800c8b4 <__pow5mult>:
 800c8b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8b8:	4615      	mov	r5, r2
 800c8ba:	f012 0203 	ands.w	r2, r2, #3
 800c8be:	4606      	mov	r6, r0
 800c8c0:	460f      	mov	r7, r1
 800c8c2:	d007      	beq.n	800c8d4 <__pow5mult+0x20>
 800c8c4:	4c25      	ldr	r4, [pc, #148]	; (800c95c <__pow5mult+0xa8>)
 800c8c6:	3a01      	subs	r2, #1
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c8ce:	f7ff fe55 	bl	800c57c <__multadd>
 800c8d2:	4607      	mov	r7, r0
 800c8d4:	10ad      	asrs	r5, r5, #2
 800c8d6:	d03d      	beq.n	800c954 <__pow5mult+0xa0>
 800c8d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c8da:	b97c      	cbnz	r4, 800c8fc <__pow5mult+0x48>
 800c8dc:	2010      	movs	r0, #16
 800c8de:	f7ff fdb5 	bl	800c44c <malloc>
 800c8e2:	4602      	mov	r2, r0
 800c8e4:	6270      	str	r0, [r6, #36]	; 0x24
 800c8e6:	b928      	cbnz	r0, 800c8f4 <__pow5mult+0x40>
 800c8e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c8ec:	4b1c      	ldr	r3, [pc, #112]	; (800c960 <__pow5mult+0xac>)
 800c8ee:	481d      	ldr	r0, [pc, #116]	; (800c964 <__pow5mult+0xb0>)
 800c8f0:	f000 ff52 	bl	800d798 <__assert_func>
 800c8f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c8f8:	6004      	str	r4, [r0, #0]
 800c8fa:	60c4      	str	r4, [r0, #12]
 800c8fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c900:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c904:	b94c      	cbnz	r4, 800c91a <__pow5mult+0x66>
 800c906:	f240 2171 	movw	r1, #625	; 0x271
 800c90a:	4630      	mov	r0, r6
 800c90c:	f7ff ff18 	bl	800c740 <__i2b>
 800c910:	2300      	movs	r3, #0
 800c912:	4604      	mov	r4, r0
 800c914:	f8c8 0008 	str.w	r0, [r8, #8]
 800c918:	6003      	str	r3, [r0, #0]
 800c91a:	f04f 0900 	mov.w	r9, #0
 800c91e:	07eb      	lsls	r3, r5, #31
 800c920:	d50a      	bpl.n	800c938 <__pow5mult+0x84>
 800c922:	4639      	mov	r1, r7
 800c924:	4622      	mov	r2, r4
 800c926:	4630      	mov	r0, r6
 800c928:	f7ff ff20 	bl	800c76c <__multiply>
 800c92c:	4680      	mov	r8, r0
 800c92e:	4639      	mov	r1, r7
 800c930:	4630      	mov	r0, r6
 800c932:	f7ff fe01 	bl	800c538 <_Bfree>
 800c936:	4647      	mov	r7, r8
 800c938:	106d      	asrs	r5, r5, #1
 800c93a:	d00b      	beq.n	800c954 <__pow5mult+0xa0>
 800c93c:	6820      	ldr	r0, [r4, #0]
 800c93e:	b938      	cbnz	r0, 800c950 <__pow5mult+0x9c>
 800c940:	4622      	mov	r2, r4
 800c942:	4621      	mov	r1, r4
 800c944:	4630      	mov	r0, r6
 800c946:	f7ff ff11 	bl	800c76c <__multiply>
 800c94a:	6020      	str	r0, [r4, #0]
 800c94c:	f8c0 9000 	str.w	r9, [r0]
 800c950:	4604      	mov	r4, r0
 800c952:	e7e4      	b.n	800c91e <__pow5mult+0x6a>
 800c954:	4638      	mov	r0, r7
 800c956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c95a:	bf00      	nop
 800c95c:	0801af90 	.word	0x0801af90
 800c960:	0801acd6 	.word	0x0801acd6
 800c964:	0801ae40 	.word	0x0801ae40

0800c968 <__lshift>:
 800c968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c96c:	460c      	mov	r4, r1
 800c96e:	4607      	mov	r7, r0
 800c970:	4691      	mov	r9, r2
 800c972:	6923      	ldr	r3, [r4, #16]
 800c974:	6849      	ldr	r1, [r1, #4]
 800c976:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c97a:	68a3      	ldr	r3, [r4, #8]
 800c97c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c980:	f108 0601 	add.w	r6, r8, #1
 800c984:	42b3      	cmp	r3, r6
 800c986:	db0b      	blt.n	800c9a0 <__lshift+0x38>
 800c988:	4638      	mov	r0, r7
 800c98a:	f7ff fd95 	bl	800c4b8 <_Balloc>
 800c98e:	4605      	mov	r5, r0
 800c990:	b948      	cbnz	r0, 800c9a6 <__lshift+0x3e>
 800c992:	4602      	mov	r2, r0
 800c994:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c998:	4b27      	ldr	r3, [pc, #156]	; (800ca38 <__lshift+0xd0>)
 800c99a:	4828      	ldr	r0, [pc, #160]	; (800ca3c <__lshift+0xd4>)
 800c99c:	f000 fefc 	bl	800d798 <__assert_func>
 800c9a0:	3101      	adds	r1, #1
 800c9a2:	005b      	lsls	r3, r3, #1
 800c9a4:	e7ee      	b.n	800c984 <__lshift+0x1c>
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	f100 0114 	add.w	r1, r0, #20
 800c9ac:	f100 0210 	add.w	r2, r0, #16
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	4553      	cmp	r3, sl
 800c9b4:	db33      	blt.n	800ca1e <__lshift+0xb6>
 800c9b6:	6920      	ldr	r0, [r4, #16]
 800c9b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c9bc:	f104 0314 	add.w	r3, r4, #20
 800c9c0:	f019 091f 	ands.w	r9, r9, #31
 800c9c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c9c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c9cc:	d02b      	beq.n	800ca26 <__lshift+0xbe>
 800c9ce:	468a      	mov	sl, r1
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	f1c9 0e20 	rsb	lr, r9, #32
 800c9d6:	6818      	ldr	r0, [r3, #0]
 800c9d8:	fa00 f009 	lsl.w	r0, r0, r9
 800c9dc:	4302      	orrs	r2, r0
 800c9de:	f84a 2b04 	str.w	r2, [sl], #4
 800c9e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9e6:	459c      	cmp	ip, r3
 800c9e8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c9ec:	d8f3      	bhi.n	800c9d6 <__lshift+0x6e>
 800c9ee:	ebac 0304 	sub.w	r3, ip, r4
 800c9f2:	3b15      	subs	r3, #21
 800c9f4:	f023 0303 	bic.w	r3, r3, #3
 800c9f8:	3304      	adds	r3, #4
 800c9fa:	f104 0015 	add.w	r0, r4, #21
 800c9fe:	4584      	cmp	ip, r0
 800ca00:	bf38      	it	cc
 800ca02:	2304      	movcc	r3, #4
 800ca04:	50ca      	str	r2, [r1, r3]
 800ca06:	b10a      	cbz	r2, 800ca0c <__lshift+0xa4>
 800ca08:	f108 0602 	add.w	r6, r8, #2
 800ca0c:	3e01      	subs	r6, #1
 800ca0e:	4638      	mov	r0, r7
 800ca10:	4621      	mov	r1, r4
 800ca12:	612e      	str	r6, [r5, #16]
 800ca14:	f7ff fd90 	bl	800c538 <_Bfree>
 800ca18:	4628      	mov	r0, r5
 800ca1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca1e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ca22:	3301      	adds	r3, #1
 800ca24:	e7c5      	b.n	800c9b2 <__lshift+0x4a>
 800ca26:	3904      	subs	r1, #4
 800ca28:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca2c:	459c      	cmp	ip, r3
 800ca2e:	f841 2f04 	str.w	r2, [r1, #4]!
 800ca32:	d8f9      	bhi.n	800ca28 <__lshift+0xc0>
 800ca34:	e7ea      	b.n	800ca0c <__lshift+0xa4>
 800ca36:	bf00      	nop
 800ca38:	0801ad4c 	.word	0x0801ad4c
 800ca3c:	0801ae40 	.word	0x0801ae40

0800ca40 <__mcmp>:
 800ca40:	4603      	mov	r3, r0
 800ca42:	690a      	ldr	r2, [r1, #16]
 800ca44:	6900      	ldr	r0, [r0, #16]
 800ca46:	b530      	push	{r4, r5, lr}
 800ca48:	1a80      	subs	r0, r0, r2
 800ca4a:	d10d      	bne.n	800ca68 <__mcmp+0x28>
 800ca4c:	3314      	adds	r3, #20
 800ca4e:	3114      	adds	r1, #20
 800ca50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ca54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ca58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ca5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ca60:	4295      	cmp	r5, r2
 800ca62:	d002      	beq.n	800ca6a <__mcmp+0x2a>
 800ca64:	d304      	bcc.n	800ca70 <__mcmp+0x30>
 800ca66:	2001      	movs	r0, #1
 800ca68:	bd30      	pop	{r4, r5, pc}
 800ca6a:	42a3      	cmp	r3, r4
 800ca6c:	d3f4      	bcc.n	800ca58 <__mcmp+0x18>
 800ca6e:	e7fb      	b.n	800ca68 <__mcmp+0x28>
 800ca70:	f04f 30ff 	mov.w	r0, #4294967295
 800ca74:	e7f8      	b.n	800ca68 <__mcmp+0x28>
	...

0800ca78 <__mdiff>:
 800ca78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca7c:	460c      	mov	r4, r1
 800ca7e:	4606      	mov	r6, r0
 800ca80:	4611      	mov	r1, r2
 800ca82:	4620      	mov	r0, r4
 800ca84:	4692      	mov	sl, r2
 800ca86:	f7ff ffdb 	bl	800ca40 <__mcmp>
 800ca8a:	1e05      	subs	r5, r0, #0
 800ca8c:	d111      	bne.n	800cab2 <__mdiff+0x3a>
 800ca8e:	4629      	mov	r1, r5
 800ca90:	4630      	mov	r0, r6
 800ca92:	f7ff fd11 	bl	800c4b8 <_Balloc>
 800ca96:	4602      	mov	r2, r0
 800ca98:	b928      	cbnz	r0, 800caa6 <__mdiff+0x2e>
 800ca9a:	f240 2132 	movw	r1, #562	; 0x232
 800ca9e:	4b3c      	ldr	r3, [pc, #240]	; (800cb90 <__mdiff+0x118>)
 800caa0:	483c      	ldr	r0, [pc, #240]	; (800cb94 <__mdiff+0x11c>)
 800caa2:	f000 fe79 	bl	800d798 <__assert_func>
 800caa6:	2301      	movs	r3, #1
 800caa8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800caac:	4610      	mov	r0, r2
 800caae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cab2:	bfa4      	itt	ge
 800cab4:	4653      	movge	r3, sl
 800cab6:	46a2      	movge	sl, r4
 800cab8:	4630      	mov	r0, r6
 800caba:	f8da 1004 	ldr.w	r1, [sl, #4]
 800cabe:	bfa6      	itte	ge
 800cac0:	461c      	movge	r4, r3
 800cac2:	2500      	movge	r5, #0
 800cac4:	2501      	movlt	r5, #1
 800cac6:	f7ff fcf7 	bl	800c4b8 <_Balloc>
 800caca:	4602      	mov	r2, r0
 800cacc:	b918      	cbnz	r0, 800cad6 <__mdiff+0x5e>
 800cace:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cad2:	4b2f      	ldr	r3, [pc, #188]	; (800cb90 <__mdiff+0x118>)
 800cad4:	e7e4      	b.n	800caa0 <__mdiff+0x28>
 800cad6:	f100 0814 	add.w	r8, r0, #20
 800cada:	f8da 7010 	ldr.w	r7, [sl, #16]
 800cade:	60c5      	str	r5, [r0, #12]
 800cae0:	f04f 0c00 	mov.w	ip, #0
 800cae4:	f10a 0514 	add.w	r5, sl, #20
 800cae8:	f10a 0010 	add.w	r0, sl, #16
 800caec:	46c2      	mov	sl, r8
 800caee:	6926      	ldr	r6, [r4, #16]
 800caf0:	f104 0914 	add.w	r9, r4, #20
 800caf4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800caf8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cafc:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800cb00:	f859 3b04 	ldr.w	r3, [r9], #4
 800cb04:	fa1f f18b 	uxth.w	r1, fp
 800cb08:	4461      	add	r1, ip
 800cb0a:	fa1f fc83 	uxth.w	ip, r3
 800cb0e:	0c1b      	lsrs	r3, r3, #16
 800cb10:	eba1 010c 	sub.w	r1, r1, ip
 800cb14:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cb18:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800cb1c:	b289      	uxth	r1, r1
 800cb1e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800cb22:	454e      	cmp	r6, r9
 800cb24:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800cb28:	f84a 3b04 	str.w	r3, [sl], #4
 800cb2c:	d8e6      	bhi.n	800cafc <__mdiff+0x84>
 800cb2e:	1b33      	subs	r3, r6, r4
 800cb30:	3b15      	subs	r3, #21
 800cb32:	f023 0303 	bic.w	r3, r3, #3
 800cb36:	3415      	adds	r4, #21
 800cb38:	3304      	adds	r3, #4
 800cb3a:	42a6      	cmp	r6, r4
 800cb3c:	bf38      	it	cc
 800cb3e:	2304      	movcc	r3, #4
 800cb40:	441d      	add	r5, r3
 800cb42:	4443      	add	r3, r8
 800cb44:	461e      	mov	r6, r3
 800cb46:	462c      	mov	r4, r5
 800cb48:	4574      	cmp	r4, lr
 800cb4a:	d30e      	bcc.n	800cb6a <__mdiff+0xf2>
 800cb4c:	f10e 0103 	add.w	r1, lr, #3
 800cb50:	1b49      	subs	r1, r1, r5
 800cb52:	f021 0103 	bic.w	r1, r1, #3
 800cb56:	3d03      	subs	r5, #3
 800cb58:	45ae      	cmp	lr, r5
 800cb5a:	bf38      	it	cc
 800cb5c:	2100      	movcc	r1, #0
 800cb5e:	4419      	add	r1, r3
 800cb60:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800cb64:	b18b      	cbz	r3, 800cb8a <__mdiff+0x112>
 800cb66:	6117      	str	r7, [r2, #16]
 800cb68:	e7a0      	b.n	800caac <__mdiff+0x34>
 800cb6a:	f854 8b04 	ldr.w	r8, [r4], #4
 800cb6e:	fa1f f188 	uxth.w	r1, r8
 800cb72:	4461      	add	r1, ip
 800cb74:	1408      	asrs	r0, r1, #16
 800cb76:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800cb7a:	b289      	uxth	r1, r1
 800cb7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cb80:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cb84:	f846 1b04 	str.w	r1, [r6], #4
 800cb88:	e7de      	b.n	800cb48 <__mdiff+0xd0>
 800cb8a:	3f01      	subs	r7, #1
 800cb8c:	e7e8      	b.n	800cb60 <__mdiff+0xe8>
 800cb8e:	bf00      	nop
 800cb90:	0801ad4c 	.word	0x0801ad4c
 800cb94:	0801ae40 	.word	0x0801ae40

0800cb98 <__ulp>:
 800cb98:	4b11      	ldr	r3, [pc, #68]	; (800cbe0 <__ulp+0x48>)
 800cb9a:	400b      	ands	r3, r1
 800cb9c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	dd02      	ble.n	800cbaa <__ulp+0x12>
 800cba4:	2000      	movs	r0, #0
 800cba6:	4619      	mov	r1, r3
 800cba8:	4770      	bx	lr
 800cbaa:	425b      	negs	r3, r3
 800cbac:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800cbb0:	f04f 0000 	mov.w	r0, #0
 800cbb4:	f04f 0100 	mov.w	r1, #0
 800cbb8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cbbc:	da04      	bge.n	800cbc8 <__ulp+0x30>
 800cbbe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cbc2:	fa43 f102 	asr.w	r1, r3, r2
 800cbc6:	4770      	bx	lr
 800cbc8:	f1a2 0314 	sub.w	r3, r2, #20
 800cbcc:	2b1e      	cmp	r3, #30
 800cbce:	bfd6      	itet	le
 800cbd0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800cbd4:	2301      	movgt	r3, #1
 800cbd6:	fa22 f303 	lsrle.w	r3, r2, r3
 800cbda:	4618      	mov	r0, r3
 800cbdc:	4770      	bx	lr
 800cbde:	bf00      	nop
 800cbe0:	7ff00000 	.word	0x7ff00000

0800cbe4 <__b2d>:
 800cbe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbe8:	6907      	ldr	r7, [r0, #16]
 800cbea:	f100 0914 	add.w	r9, r0, #20
 800cbee:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800cbf2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800cbf6:	f1a7 0804 	sub.w	r8, r7, #4
 800cbfa:	4630      	mov	r0, r6
 800cbfc:	f7ff fd52 	bl	800c6a4 <__hi0bits>
 800cc00:	f1c0 0320 	rsb	r3, r0, #32
 800cc04:	280a      	cmp	r0, #10
 800cc06:	600b      	str	r3, [r1, #0]
 800cc08:	491f      	ldr	r1, [pc, #124]	; (800cc88 <__b2d+0xa4>)
 800cc0a:	dc17      	bgt.n	800cc3c <__b2d+0x58>
 800cc0c:	45c1      	cmp	r9, r8
 800cc0e:	bf28      	it	cs
 800cc10:	2200      	movcs	r2, #0
 800cc12:	f1c0 0c0b 	rsb	ip, r0, #11
 800cc16:	fa26 f30c 	lsr.w	r3, r6, ip
 800cc1a:	bf38      	it	cc
 800cc1c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800cc20:	ea43 0501 	orr.w	r5, r3, r1
 800cc24:	f100 0315 	add.w	r3, r0, #21
 800cc28:	fa06 f303 	lsl.w	r3, r6, r3
 800cc2c:	fa22 f20c 	lsr.w	r2, r2, ip
 800cc30:	ea43 0402 	orr.w	r4, r3, r2
 800cc34:	4620      	mov	r0, r4
 800cc36:	4629      	mov	r1, r5
 800cc38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc3c:	45c1      	cmp	r9, r8
 800cc3e:	bf2e      	itee	cs
 800cc40:	2200      	movcs	r2, #0
 800cc42:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800cc46:	f1a7 0808 	subcc.w	r8, r7, #8
 800cc4a:	f1b0 030b 	subs.w	r3, r0, #11
 800cc4e:	d016      	beq.n	800cc7e <__b2d+0x9a>
 800cc50:	f1c3 0720 	rsb	r7, r3, #32
 800cc54:	fa22 f107 	lsr.w	r1, r2, r7
 800cc58:	45c8      	cmp	r8, r9
 800cc5a:	fa06 f603 	lsl.w	r6, r6, r3
 800cc5e:	ea46 0601 	orr.w	r6, r6, r1
 800cc62:	bf94      	ite	ls
 800cc64:	2100      	movls	r1, #0
 800cc66:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800cc6a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800cc6e:	fa02 f003 	lsl.w	r0, r2, r3
 800cc72:	40f9      	lsrs	r1, r7
 800cc74:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cc78:	ea40 0401 	orr.w	r4, r0, r1
 800cc7c:	e7da      	b.n	800cc34 <__b2d+0x50>
 800cc7e:	4614      	mov	r4, r2
 800cc80:	ea46 0501 	orr.w	r5, r6, r1
 800cc84:	e7d6      	b.n	800cc34 <__b2d+0x50>
 800cc86:	bf00      	nop
 800cc88:	3ff00000 	.word	0x3ff00000

0800cc8c <__d2b>:
 800cc8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800cc90:	2101      	movs	r1, #1
 800cc92:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800cc96:	4690      	mov	r8, r2
 800cc98:	461d      	mov	r5, r3
 800cc9a:	f7ff fc0d 	bl	800c4b8 <_Balloc>
 800cc9e:	4604      	mov	r4, r0
 800cca0:	b930      	cbnz	r0, 800ccb0 <__d2b+0x24>
 800cca2:	4602      	mov	r2, r0
 800cca4:	f240 310a 	movw	r1, #778	; 0x30a
 800cca8:	4b24      	ldr	r3, [pc, #144]	; (800cd3c <__d2b+0xb0>)
 800ccaa:	4825      	ldr	r0, [pc, #148]	; (800cd40 <__d2b+0xb4>)
 800ccac:	f000 fd74 	bl	800d798 <__assert_func>
 800ccb0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800ccb4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800ccb8:	bb2d      	cbnz	r5, 800cd06 <__d2b+0x7a>
 800ccba:	9301      	str	r3, [sp, #4]
 800ccbc:	f1b8 0300 	subs.w	r3, r8, #0
 800ccc0:	d026      	beq.n	800cd10 <__d2b+0x84>
 800ccc2:	4668      	mov	r0, sp
 800ccc4:	9300      	str	r3, [sp, #0]
 800ccc6:	f7ff fd0d 	bl	800c6e4 <__lo0bits>
 800ccca:	9900      	ldr	r1, [sp, #0]
 800cccc:	b1f0      	cbz	r0, 800cd0c <__d2b+0x80>
 800ccce:	9a01      	ldr	r2, [sp, #4]
 800ccd0:	f1c0 0320 	rsb	r3, r0, #32
 800ccd4:	fa02 f303 	lsl.w	r3, r2, r3
 800ccd8:	430b      	orrs	r3, r1
 800ccda:	40c2      	lsrs	r2, r0
 800ccdc:	6163      	str	r3, [r4, #20]
 800ccde:	9201      	str	r2, [sp, #4]
 800cce0:	9b01      	ldr	r3, [sp, #4]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	bf14      	ite	ne
 800cce6:	2102      	movne	r1, #2
 800cce8:	2101      	moveq	r1, #1
 800ccea:	61a3      	str	r3, [r4, #24]
 800ccec:	6121      	str	r1, [r4, #16]
 800ccee:	b1c5      	cbz	r5, 800cd22 <__d2b+0x96>
 800ccf0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ccf4:	4405      	add	r5, r0
 800ccf6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ccfa:	603d      	str	r5, [r7, #0]
 800ccfc:	6030      	str	r0, [r6, #0]
 800ccfe:	4620      	mov	r0, r4
 800cd00:	b002      	add	sp, #8
 800cd02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cd0a:	e7d6      	b.n	800ccba <__d2b+0x2e>
 800cd0c:	6161      	str	r1, [r4, #20]
 800cd0e:	e7e7      	b.n	800cce0 <__d2b+0x54>
 800cd10:	a801      	add	r0, sp, #4
 800cd12:	f7ff fce7 	bl	800c6e4 <__lo0bits>
 800cd16:	2101      	movs	r1, #1
 800cd18:	9b01      	ldr	r3, [sp, #4]
 800cd1a:	6121      	str	r1, [r4, #16]
 800cd1c:	6163      	str	r3, [r4, #20]
 800cd1e:	3020      	adds	r0, #32
 800cd20:	e7e5      	b.n	800ccee <__d2b+0x62>
 800cd22:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800cd26:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cd2a:	6038      	str	r0, [r7, #0]
 800cd2c:	6918      	ldr	r0, [r3, #16]
 800cd2e:	f7ff fcb9 	bl	800c6a4 <__hi0bits>
 800cd32:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800cd36:	6031      	str	r1, [r6, #0]
 800cd38:	e7e1      	b.n	800ccfe <__d2b+0x72>
 800cd3a:	bf00      	nop
 800cd3c:	0801ad4c 	.word	0x0801ad4c
 800cd40:	0801ae40 	.word	0x0801ae40

0800cd44 <__ratio>:
 800cd44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd48:	4688      	mov	r8, r1
 800cd4a:	4669      	mov	r1, sp
 800cd4c:	4681      	mov	r9, r0
 800cd4e:	f7ff ff49 	bl	800cbe4 <__b2d>
 800cd52:	460f      	mov	r7, r1
 800cd54:	4604      	mov	r4, r0
 800cd56:	460d      	mov	r5, r1
 800cd58:	4640      	mov	r0, r8
 800cd5a:	a901      	add	r1, sp, #4
 800cd5c:	f7ff ff42 	bl	800cbe4 <__b2d>
 800cd60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd64:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cd68:	468b      	mov	fp, r1
 800cd6a:	eba3 0c02 	sub.w	ip, r3, r2
 800cd6e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cd72:	1a9b      	subs	r3, r3, r2
 800cd74:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	bfd5      	itete	le
 800cd7c:	460a      	movle	r2, r1
 800cd7e:	462a      	movgt	r2, r5
 800cd80:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cd84:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cd88:	bfd8      	it	le
 800cd8a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cd8e:	465b      	mov	r3, fp
 800cd90:	4602      	mov	r2, r0
 800cd92:	4639      	mov	r1, r7
 800cd94:	4620      	mov	r0, r4
 800cd96:	f7f3 fd35 	bl	8000804 <__aeabi_ddiv>
 800cd9a:	b003      	add	sp, #12
 800cd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cda0 <__copybits>:
 800cda0:	3901      	subs	r1, #1
 800cda2:	b570      	push	{r4, r5, r6, lr}
 800cda4:	1149      	asrs	r1, r1, #5
 800cda6:	6914      	ldr	r4, [r2, #16]
 800cda8:	3101      	adds	r1, #1
 800cdaa:	f102 0314 	add.w	r3, r2, #20
 800cdae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cdb2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cdb6:	1f05      	subs	r5, r0, #4
 800cdb8:	42a3      	cmp	r3, r4
 800cdba:	d30c      	bcc.n	800cdd6 <__copybits+0x36>
 800cdbc:	1aa3      	subs	r3, r4, r2
 800cdbe:	3b11      	subs	r3, #17
 800cdc0:	f023 0303 	bic.w	r3, r3, #3
 800cdc4:	3211      	adds	r2, #17
 800cdc6:	42a2      	cmp	r2, r4
 800cdc8:	bf88      	it	hi
 800cdca:	2300      	movhi	r3, #0
 800cdcc:	4418      	add	r0, r3
 800cdce:	2300      	movs	r3, #0
 800cdd0:	4288      	cmp	r0, r1
 800cdd2:	d305      	bcc.n	800cde0 <__copybits+0x40>
 800cdd4:	bd70      	pop	{r4, r5, r6, pc}
 800cdd6:	f853 6b04 	ldr.w	r6, [r3], #4
 800cdda:	f845 6f04 	str.w	r6, [r5, #4]!
 800cdde:	e7eb      	b.n	800cdb8 <__copybits+0x18>
 800cde0:	f840 3b04 	str.w	r3, [r0], #4
 800cde4:	e7f4      	b.n	800cdd0 <__copybits+0x30>

0800cde6 <__any_on>:
 800cde6:	f100 0214 	add.w	r2, r0, #20
 800cdea:	6900      	ldr	r0, [r0, #16]
 800cdec:	114b      	asrs	r3, r1, #5
 800cdee:	4298      	cmp	r0, r3
 800cdf0:	b510      	push	{r4, lr}
 800cdf2:	db11      	blt.n	800ce18 <__any_on+0x32>
 800cdf4:	dd0a      	ble.n	800ce0c <__any_on+0x26>
 800cdf6:	f011 011f 	ands.w	r1, r1, #31
 800cdfa:	d007      	beq.n	800ce0c <__any_on+0x26>
 800cdfc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ce00:	fa24 f001 	lsr.w	r0, r4, r1
 800ce04:	fa00 f101 	lsl.w	r1, r0, r1
 800ce08:	428c      	cmp	r4, r1
 800ce0a:	d10b      	bne.n	800ce24 <__any_on+0x3e>
 800ce0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ce10:	4293      	cmp	r3, r2
 800ce12:	d803      	bhi.n	800ce1c <__any_on+0x36>
 800ce14:	2000      	movs	r0, #0
 800ce16:	bd10      	pop	{r4, pc}
 800ce18:	4603      	mov	r3, r0
 800ce1a:	e7f7      	b.n	800ce0c <__any_on+0x26>
 800ce1c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ce20:	2900      	cmp	r1, #0
 800ce22:	d0f5      	beq.n	800ce10 <__any_on+0x2a>
 800ce24:	2001      	movs	r0, #1
 800ce26:	e7f6      	b.n	800ce16 <__any_on+0x30>

0800ce28 <_calloc_r>:
 800ce28:	b538      	push	{r3, r4, r5, lr}
 800ce2a:	fb02 f501 	mul.w	r5, r2, r1
 800ce2e:	4629      	mov	r1, r5
 800ce30:	f000 f854 	bl	800cedc <_malloc_r>
 800ce34:	4604      	mov	r4, r0
 800ce36:	b118      	cbz	r0, 800ce40 <_calloc_r+0x18>
 800ce38:	462a      	mov	r2, r5
 800ce3a:	2100      	movs	r1, #0
 800ce3c:	f7fc fc82 	bl	8009744 <memset>
 800ce40:	4620      	mov	r0, r4
 800ce42:	bd38      	pop	{r3, r4, r5, pc}

0800ce44 <_free_r>:
 800ce44:	b538      	push	{r3, r4, r5, lr}
 800ce46:	4605      	mov	r5, r0
 800ce48:	2900      	cmp	r1, #0
 800ce4a:	d043      	beq.n	800ced4 <_free_r+0x90>
 800ce4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce50:	1f0c      	subs	r4, r1, #4
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	bfb8      	it	lt
 800ce56:	18e4      	addlt	r4, r4, r3
 800ce58:	f000 fe30 	bl	800dabc <__malloc_lock>
 800ce5c:	4a1e      	ldr	r2, [pc, #120]	; (800ced8 <_free_r+0x94>)
 800ce5e:	6813      	ldr	r3, [r2, #0]
 800ce60:	4610      	mov	r0, r2
 800ce62:	b933      	cbnz	r3, 800ce72 <_free_r+0x2e>
 800ce64:	6063      	str	r3, [r4, #4]
 800ce66:	6014      	str	r4, [r2, #0]
 800ce68:	4628      	mov	r0, r5
 800ce6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce6e:	f000 be2b 	b.w	800dac8 <__malloc_unlock>
 800ce72:	42a3      	cmp	r3, r4
 800ce74:	d90a      	bls.n	800ce8c <_free_r+0x48>
 800ce76:	6821      	ldr	r1, [r4, #0]
 800ce78:	1862      	adds	r2, r4, r1
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	bf01      	itttt	eq
 800ce7e:	681a      	ldreq	r2, [r3, #0]
 800ce80:	685b      	ldreq	r3, [r3, #4]
 800ce82:	1852      	addeq	r2, r2, r1
 800ce84:	6022      	streq	r2, [r4, #0]
 800ce86:	6063      	str	r3, [r4, #4]
 800ce88:	6004      	str	r4, [r0, #0]
 800ce8a:	e7ed      	b.n	800ce68 <_free_r+0x24>
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	b10b      	cbz	r3, 800ce96 <_free_r+0x52>
 800ce92:	42a3      	cmp	r3, r4
 800ce94:	d9fa      	bls.n	800ce8c <_free_r+0x48>
 800ce96:	6811      	ldr	r1, [r2, #0]
 800ce98:	1850      	adds	r0, r2, r1
 800ce9a:	42a0      	cmp	r0, r4
 800ce9c:	d10b      	bne.n	800ceb6 <_free_r+0x72>
 800ce9e:	6820      	ldr	r0, [r4, #0]
 800cea0:	4401      	add	r1, r0
 800cea2:	1850      	adds	r0, r2, r1
 800cea4:	4283      	cmp	r3, r0
 800cea6:	6011      	str	r1, [r2, #0]
 800cea8:	d1de      	bne.n	800ce68 <_free_r+0x24>
 800ceaa:	6818      	ldr	r0, [r3, #0]
 800ceac:	685b      	ldr	r3, [r3, #4]
 800ceae:	4401      	add	r1, r0
 800ceb0:	6011      	str	r1, [r2, #0]
 800ceb2:	6053      	str	r3, [r2, #4]
 800ceb4:	e7d8      	b.n	800ce68 <_free_r+0x24>
 800ceb6:	d902      	bls.n	800cebe <_free_r+0x7a>
 800ceb8:	230c      	movs	r3, #12
 800ceba:	602b      	str	r3, [r5, #0]
 800cebc:	e7d4      	b.n	800ce68 <_free_r+0x24>
 800cebe:	6820      	ldr	r0, [r4, #0]
 800cec0:	1821      	adds	r1, r4, r0
 800cec2:	428b      	cmp	r3, r1
 800cec4:	bf01      	itttt	eq
 800cec6:	6819      	ldreq	r1, [r3, #0]
 800cec8:	685b      	ldreq	r3, [r3, #4]
 800ceca:	1809      	addeq	r1, r1, r0
 800cecc:	6021      	streq	r1, [r4, #0]
 800cece:	6063      	str	r3, [r4, #4]
 800ced0:	6054      	str	r4, [r2, #4]
 800ced2:	e7c9      	b.n	800ce68 <_free_r+0x24>
 800ced4:	bd38      	pop	{r3, r4, r5, pc}
 800ced6:	bf00      	nop
 800ced8:	20000218 	.word	0x20000218

0800cedc <_malloc_r>:
 800cedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cede:	1ccd      	adds	r5, r1, #3
 800cee0:	f025 0503 	bic.w	r5, r5, #3
 800cee4:	3508      	adds	r5, #8
 800cee6:	2d0c      	cmp	r5, #12
 800cee8:	bf38      	it	cc
 800ceea:	250c      	movcc	r5, #12
 800ceec:	2d00      	cmp	r5, #0
 800ceee:	4606      	mov	r6, r0
 800cef0:	db01      	blt.n	800cef6 <_malloc_r+0x1a>
 800cef2:	42a9      	cmp	r1, r5
 800cef4:	d903      	bls.n	800cefe <_malloc_r+0x22>
 800cef6:	230c      	movs	r3, #12
 800cef8:	6033      	str	r3, [r6, #0]
 800cefa:	2000      	movs	r0, #0
 800cefc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cefe:	f000 fddd 	bl	800dabc <__malloc_lock>
 800cf02:	4921      	ldr	r1, [pc, #132]	; (800cf88 <_malloc_r+0xac>)
 800cf04:	680a      	ldr	r2, [r1, #0]
 800cf06:	4614      	mov	r4, r2
 800cf08:	b99c      	cbnz	r4, 800cf32 <_malloc_r+0x56>
 800cf0a:	4f20      	ldr	r7, [pc, #128]	; (800cf8c <_malloc_r+0xb0>)
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	b923      	cbnz	r3, 800cf1a <_malloc_r+0x3e>
 800cf10:	4621      	mov	r1, r4
 800cf12:	4630      	mov	r0, r6
 800cf14:	f000 faf6 	bl	800d504 <_sbrk_r>
 800cf18:	6038      	str	r0, [r7, #0]
 800cf1a:	4629      	mov	r1, r5
 800cf1c:	4630      	mov	r0, r6
 800cf1e:	f000 faf1 	bl	800d504 <_sbrk_r>
 800cf22:	1c43      	adds	r3, r0, #1
 800cf24:	d123      	bne.n	800cf6e <_malloc_r+0x92>
 800cf26:	230c      	movs	r3, #12
 800cf28:	4630      	mov	r0, r6
 800cf2a:	6033      	str	r3, [r6, #0]
 800cf2c:	f000 fdcc 	bl	800dac8 <__malloc_unlock>
 800cf30:	e7e3      	b.n	800cefa <_malloc_r+0x1e>
 800cf32:	6823      	ldr	r3, [r4, #0]
 800cf34:	1b5b      	subs	r3, r3, r5
 800cf36:	d417      	bmi.n	800cf68 <_malloc_r+0x8c>
 800cf38:	2b0b      	cmp	r3, #11
 800cf3a:	d903      	bls.n	800cf44 <_malloc_r+0x68>
 800cf3c:	6023      	str	r3, [r4, #0]
 800cf3e:	441c      	add	r4, r3
 800cf40:	6025      	str	r5, [r4, #0]
 800cf42:	e004      	b.n	800cf4e <_malloc_r+0x72>
 800cf44:	6863      	ldr	r3, [r4, #4]
 800cf46:	42a2      	cmp	r2, r4
 800cf48:	bf0c      	ite	eq
 800cf4a:	600b      	streq	r3, [r1, #0]
 800cf4c:	6053      	strne	r3, [r2, #4]
 800cf4e:	4630      	mov	r0, r6
 800cf50:	f000 fdba 	bl	800dac8 <__malloc_unlock>
 800cf54:	f104 000b 	add.w	r0, r4, #11
 800cf58:	1d23      	adds	r3, r4, #4
 800cf5a:	f020 0007 	bic.w	r0, r0, #7
 800cf5e:	1ac2      	subs	r2, r0, r3
 800cf60:	d0cc      	beq.n	800cefc <_malloc_r+0x20>
 800cf62:	1a1b      	subs	r3, r3, r0
 800cf64:	50a3      	str	r3, [r4, r2]
 800cf66:	e7c9      	b.n	800cefc <_malloc_r+0x20>
 800cf68:	4622      	mov	r2, r4
 800cf6a:	6864      	ldr	r4, [r4, #4]
 800cf6c:	e7cc      	b.n	800cf08 <_malloc_r+0x2c>
 800cf6e:	1cc4      	adds	r4, r0, #3
 800cf70:	f024 0403 	bic.w	r4, r4, #3
 800cf74:	42a0      	cmp	r0, r4
 800cf76:	d0e3      	beq.n	800cf40 <_malloc_r+0x64>
 800cf78:	1a21      	subs	r1, r4, r0
 800cf7a:	4630      	mov	r0, r6
 800cf7c:	f000 fac2 	bl	800d504 <_sbrk_r>
 800cf80:	3001      	adds	r0, #1
 800cf82:	d1dd      	bne.n	800cf40 <_malloc_r+0x64>
 800cf84:	e7cf      	b.n	800cf26 <_malloc_r+0x4a>
 800cf86:	bf00      	nop
 800cf88:	20000218 	.word	0x20000218
 800cf8c:	2000021c 	.word	0x2000021c

0800cf90 <__ssputs_r>:
 800cf90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf94:	688e      	ldr	r6, [r1, #8]
 800cf96:	4682      	mov	sl, r0
 800cf98:	429e      	cmp	r6, r3
 800cf9a:	460c      	mov	r4, r1
 800cf9c:	4690      	mov	r8, r2
 800cf9e:	461f      	mov	r7, r3
 800cfa0:	d838      	bhi.n	800d014 <__ssputs_r+0x84>
 800cfa2:	898a      	ldrh	r2, [r1, #12]
 800cfa4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cfa8:	d032      	beq.n	800d010 <__ssputs_r+0x80>
 800cfaa:	6825      	ldr	r5, [r4, #0]
 800cfac:	6909      	ldr	r1, [r1, #16]
 800cfae:	3301      	adds	r3, #1
 800cfb0:	eba5 0901 	sub.w	r9, r5, r1
 800cfb4:	6965      	ldr	r5, [r4, #20]
 800cfb6:	444b      	add	r3, r9
 800cfb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cfbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cfc0:	106d      	asrs	r5, r5, #1
 800cfc2:	429d      	cmp	r5, r3
 800cfc4:	bf38      	it	cc
 800cfc6:	461d      	movcc	r5, r3
 800cfc8:	0553      	lsls	r3, r2, #21
 800cfca:	d531      	bpl.n	800d030 <__ssputs_r+0xa0>
 800cfcc:	4629      	mov	r1, r5
 800cfce:	f7ff ff85 	bl	800cedc <_malloc_r>
 800cfd2:	4606      	mov	r6, r0
 800cfd4:	b950      	cbnz	r0, 800cfec <__ssputs_r+0x5c>
 800cfd6:	230c      	movs	r3, #12
 800cfd8:	f04f 30ff 	mov.w	r0, #4294967295
 800cfdc:	f8ca 3000 	str.w	r3, [sl]
 800cfe0:	89a3      	ldrh	r3, [r4, #12]
 800cfe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfe6:	81a3      	strh	r3, [r4, #12]
 800cfe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfec:	464a      	mov	r2, r9
 800cfee:	6921      	ldr	r1, [r4, #16]
 800cff0:	f7ff fa54 	bl	800c49c <memcpy>
 800cff4:	89a3      	ldrh	r3, [r4, #12]
 800cff6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cffe:	81a3      	strh	r3, [r4, #12]
 800d000:	6126      	str	r6, [r4, #16]
 800d002:	444e      	add	r6, r9
 800d004:	6026      	str	r6, [r4, #0]
 800d006:	463e      	mov	r6, r7
 800d008:	6165      	str	r5, [r4, #20]
 800d00a:	eba5 0509 	sub.w	r5, r5, r9
 800d00e:	60a5      	str	r5, [r4, #8]
 800d010:	42be      	cmp	r6, r7
 800d012:	d900      	bls.n	800d016 <__ssputs_r+0x86>
 800d014:	463e      	mov	r6, r7
 800d016:	4632      	mov	r2, r6
 800d018:	4641      	mov	r1, r8
 800d01a:	6820      	ldr	r0, [r4, #0]
 800d01c:	f000 fd34 	bl	800da88 <memmove>
 800d020:	68a3      	ldr	r3, [r4, #8]
 800d022:	6822      	ldr	r2, [r4, #0]
 800d024:	1b9b      	subs	r3, r3, r6
 800d026:	4432      	add	r2, r6
 800d028:	2000      	movs	r0, #0
 800d02a:	60a3      	str	r3, [r4, #8]
 800d02c:	6022      	str	r2, [r4, #0]
 800d02e:	e7db      	b.n	800cfe8 <__ssputs_r+0x58>
 800d030:	462a      	mov	r2, r5
 800d032:	f000 fd4f 	bl	800dad4 <_realloc_r>
 800d036:	4606      	mov	r6, r0
 800d038:	2800      	cmp	r0, #0
 800d03a:	d1e1      	bne.n	800d000 <__ssputs_r+0x70>
 800d03c:	4650      	mov	r0, sl
 800d03e:	6921      	ldr	r1, [r4, #16]
 800d040:	f7ff ff00 	bl	800ce44 <_free_r>
 800d044:	e7c7      	b.n	800cfd6 <__ssputs_r+0x46>
	...

0800d048 <_svfiprintf_r>:
 800d048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d04c:	4698      	mov	r8, r3
 800d04e:	898b      	ldrh	r3, [r1, #12]
 800d050:	4607      	mov	r7, r0
 800d052:	061b      	lsls	r3, r3, #24
 800d054:	460d      	mov	r5, r1
 800d056:	4614      	mov	r4, r2
 800d058:	b09d      	sub	sp, #116	; 0x74
 800d05a:	d50e      	bpl.n	800d07a <_svfiprintf_r+0x32>
 800d05c:	690b      	ldr	r3, [r1, #16]
 800d05e:	b963      	cbnz	r3, 800d07a <_svfiprintf_r+0x32>
 800d060:	2140      	movs	r1, #64	; 0x40
 800d062:	f7ff ff3b 	bl	800cedc <_malloc_r>
 800d066:	6028      	str	r0, [r5, #0]
 800d068:	6128      	str	r0, [r5, #16]
 800d06a:	b920      	cbnz	r0, 800d076 <_svfiprintf_r+0x2e>
 800d06c:	230c      	movs	r3, #12
 800d06e:	603b      	str	r3, [r7, #0]
 800d070:	f04f 30ff 	mov.w	r0, #4294967295
 800d074:	e0d1      	b.n	800d21a <_svfiprintf_r+0x1d2>
 800d076:	2340      	movs	r3, #64	; 0x40
 800d078:	616b      	str	r3, [r5, #20]
 800d07a:	2300      	movs	r3, #0
 800d07c:	9309      	str	r3, [sp, #36]	; 0x24
 800d07e:	2320      	movs	r3, #32
 800d080:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d084:	2330      	movs	r3, #48	; 0x30
 800d086:	f04f 0901 	mov.w	r9, #1
 800d08a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d08e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d234 <_svfiprintf_r+0x1ec>
 800d092:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d096:	4623      	mov	r3, r4
 800d098:	469a      	mov	sl, r3
 800d09a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d09e:	b10a      	cbz	r2, 800d0a4 <_svfiprintf_r+0x5c>
 800d0a0:	2a25      	cmp	r2, #37	; 0x25
 800d0a2:	d1f9      	bne.n	800d098 <_svfiprintf_r+0x50>
 800d0a4:	ebba 0b04 	subs.w	fp, sl, r4
 800d0a8:	d00b      	beq.n	800d0c2 <_svfiprintf_r+0x7a>
 800d0aa:	465b      	mov	r3, fp
 800d0ac:	4622      	mov	r2, r4
 800d0ae:	4629      	mov	r1, r5
 800d0b0:	4638      	mov	r0, r7
 800d0b2:	f7ff ff6d 	bl	800cf90 <__ssputs_r>
 800d0b6:	3001      	adds	r0, #1
 800d0b8:	f000 80aa 	beq.w	800d210 <_svfiprintf_r+0x1c8>
 800d0bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0be:	445a      	add	r2, fp
 800d0c0:	9209      	str	r2, [sp, #36]	; 0x24
 800d0c2:	f89a 3000 	ldrb.w	r3, [sl]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	f000 80a2 	beq.w	800d210 <_svfiprintf_r+0x1c8>
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	f04f 32ff 	mov.w	r2, #4294967295
 800d0d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0d6:	f10a 0a01 	add.w	sl, sl, #1
 800d0da:	9304      	str	r3, [sp, #16]
 800d0dc:	9307      	str	r3, [sp, #28]
 800d0de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d0e2:	931a      	str	r3, [sp, #104]	; 0x68
 800d0e4:	4654      	mov	r4, sl
 800d0e6:	2205      	movs	r2, #5
 800d0e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0ec:	4851      	ldr	r0, [pc, #324]	; (800d234 <_svfiprintf_r+0x1ec>)
 800d0ee:	f7ff f9c7 	bl	800c480 <memchr>
 800d0f2:	9a04      	ldr	r2, [sp, #16]
 800d0f4:	b9d8      	cbnz	r0, 800d12e <_svfiprintf_r+0xe6>
 800d0f6:	06d0      	lsls	r0, r2, #27
 800d0f8:	bf44      	itt	mi
 800d0fa:	2320      	movmi	r3, #32
 800d0fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d100:	0711      	lsls	r1, r2, #28
 800d102:	bf44      	itt	mi
 800d104:	232b      	movmi	r3, #43	; 0x2b
 800d106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d10a:	f89a 3000 	ldrb.w	r3, [sl]
 800d10e:	2b2a      	cmp	r3, #42	; 0x2a
 800d110:	d015      	beq.n	800d13e <_svfiprintf_r+0xf6>
 800d112:	4654      	mov	r4, sl
 800d114:	2000      	movs	r0, #0
 800d116:	f04f 0c0a 	mov.w	ip, #10
 800d11a:	9a07      	ldr	r2, [sp, #28]
 800d11c:	4621      	mov	r1, r4
 800d11e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d122:	3b30      	subs	r3, #48	; 0x30
 800d124:	2b09      	cmp	r3, #9
 800d126:	d94e      	bls.n	800d1c6 <_svfiprintf_r+0x17e>
 800d128:	b1b0      	cbz	r0, 800d158 <_svfiprintf_r+0x110>
 800d12a:	9207      	str	r2, [sp, #28]
 800d12c:	e014      	b.n	800d158 <_svfiprintf_r+0x110>
 800d12e:	eba0 0308 	sub.w	r3, r0, r8
 800d132:	fa09 f303 	lsl.w	r3, r9, r3
 800d136:	4313      	orrs	r3, r2
 800d138:	46a2      	mov	sl, r4
 800d13a:	9304      	str	r3, [sp, #16]
 800d13c:	e7d2      	b.n	800d0e4 <_svfiprintf_r+0x9c>
 800d13e:	9b03      	ldr	r3, [sp, #12]
 800d140:	1d19      	adds	r1, r3, #4
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	9103      	str	r1, [sp, #12]
 800d146:	2b00      	cmp	r3, #0
 800d148:	bfbb      	ittet	lt
 800d14a:	425b      	neglt	r3, r3
 800d14c:	f042 0202 	orrlt.w	r2, r2, #2
 800d150:	9307      	strge	r3, [sp, #28]
 800d152:	9307      	strlt	r3, [sp, #28]
 800d154:	bfb8      	it	lt
 800d156:	9204      	strlt	r2, [sp, #16]
 800d158:	7823      	ldrb	r3, [r4, #0]
 800d15a:	2b2e      	cmp	r3, #46	; 0x2e
 800d15c:	d10c      	bne.n	800d178 <_svfiprintf_r+0x130>
 800d15e:	7863      	ldrb	r3, [r4, #1]
 800d160:	2b2a      	cmp	r3, #42	; 0x2a
 800d162:	d135      	bne.n	800d1d0 <_svfiprintf_r+0x188>
 800d164:	9b03      	ldr	r3, [sp, #12]
 800d166:	3402      	adds	r4, #2
 800d168:	1d1a      	adds	r2, r3, #4
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	9203      	str	r2, [sp, #12]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	bfb8      	it	lt
 800d172:	f04f 33ff 	movlt.w	r3, #4294967295
 800d176:	9305      	str	r3, [sp, #20]
 800d178:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d244 <_svfiprintf_r+0x1fc>
 800d17c:	2203      	movs	r2, #3
 800d17e:	4650      	mov	r0, sl
 800d180:	7821      	ldrb	r1, [r4, #0]
 800d182:	f7ff f97d 	bl	800c480 <memchr>
 800d186:	b140      	cbz	r0, 800d19a <_svfiprintf_r+0x152>
 800d188:	2340      	movs	r3, #64	; 0x40
 800d18a:	eba0 000a 	sub.w	r0, r0, sl
 800d18e:	fa03 f000 	lsl.w	r0, r3, r0
 800d192:	9b04      	ldr	r3, [sp, #16]
 800d194:	3401      	adds	r4, #1
 800d196:	4303      	orrs	r3, r0
 800d198:	9304      	str	r3, [sp, #16]
 800d19a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d19e:	2206      	movs	r2, #6
 800d1a0:	4825      	ldr	r0, [pc, #148]	; (800d238 <_svfiprintf_r+0x1f0>)
 800d1a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d1a6:	f7ff f96b 	bl	800c480 <memchr>
 800d1aa:	2800      	cmp	r0, #0
 800d1ac:	d038      	beq.n	800d220 <_svfiprintf_r+0x1d8>
 800d1ae:	4b23      	ldr	r3, [pc, #140]	; (800d23c <_svfiprintf_r+0x1f4>)
 800d1b0:	bb1b      	cbnz	r3, 800d1fa <_svfiprintf_r+0x1b2>
 800d1b2:	9b03      	ldr	r3, [sp, #12]
 800d1b4:	3307      	adds	r3, #7
 800d1b6:	f023 0307 	bic.w	r3, r3, #7
 800d1ba:	3308      	adds	r3, #8
 800d1bc:	9303      	str	r3, [sp, #12]
 800d1be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1c0:	4433      	add	r3, r6
 800d1c2:	9309      	str	r3, [sp, #36]	; 0x24
 800d1c4:	e767      	b.n	800d096 <_svfiprintf_r+0x4e>
 800d1c6:	460c      	mov	r4, r1
 800d1c8:	2001      	movs	r0, #1
 800d1ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1ce:	e7a5      	b.n	800d11c <_svfiprintf_r+0xd4>
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	f04f 0c0a 	mov.w	ip, #10
 800d1d6:	4619      	mov	r1, r3
 800d1d8:	3401      	adds	r4, #1
 800d1da:	9305      	str	r3, [sp, #20]
 800d1dc:	4620      	mov	r0, r4
 800d1de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1e2:	3a30      	subs	r2, #48	; 0x30
 800d1e4:	2a09      	cmp	r2, #9
 800d1e6:	d903      	bls.n	800d1f0 <_svfiprintf_r+0x1a8>
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d0c5      	beq.n	800d178 <_svfiprintf_r+0x130>
 800d1ec:	9105      	str	r1, [sp, #20]
 800d1ee:	e7c3      	b.n	800d178 <_svfiprintf_r+0x130>
 800d1f0:	4604      	mov	r4, r0
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1f8:	e7f0      	b.n	800d1dc <_svfiprintf_r+0x194>
 800d1fa:	ab03      	add	r3, sp, #12
 800d1fc:	9300      	str	r3, [sp, #0]
 800d1fe:	462a      	mov	r2, r5
 800d200:	4638      	mov	r0, r7
 800d202:	4b0f      	ldr	r3, [pc, #60]	; (800d240 <_svfiprintf_r+0x1f8>)
 800d204:	a904      	add	r1, sp, #16
 800d206:	f7fc fb43 	bl	8009890 <_printf_float>
 800d20a:	1c42      	adds	r2, r0, #1
 800d20c:	4606      	mov	r6, r0
 800d20e:	d1d6      	bne.n	800d1be <_svfiprintf_r+0x176>
 800d210:	89ab      	ldrh	r3, [r5, #12]
 800d212:	065b      	lsls	r3, r3, #25
 800d214:	f53f af2c 	bmi.w	800d070 <_svfiprintf_r+0x28>
 800d218:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d21a:	b01d      	add	sp, #116	; 0x74
 800d21c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d220:	ab03      	add	r3, sp, #12
 800d222:	9300      	str	r3, [sp, #0]
 800d224:	462a      	mov	r2, r5
 800d226:	4638      	mov	r0, r7
 800d228:	4b05      	ldr	r3, [pc, #20]	; (800d240 <_svfiprintf_r+0x1f8>)
 800d22a:	a904      	add	r1, sp, #16
 800d22c:	f7fc fdcc 	bl	8009dc8 <_printf_i>
 800d230:	e7eb      	b.n	800d20a <_svfiprintf_r+0x1c2>
 800d232:	bf00      	nop
 800d234:	0801af9c 	.word	0x0801af9c
 800d238:	0801afa6 	.word	0x0801afa6
 800d23c:	08009891 	.word	0x08009891
 800d240:	0800cf91 	.word	0x0800cf91
 800d244:	0801afa2 	.word	0x0801afa2

0800d248 <__sfputc_r>:
 800d248:	6893      	ldr	r3, [r2, #8]
 800d24a:	b410      	push	{r4}
 800d24c:	3b01      	subs	r3, #1
 800d24e:	2b00      	cmp	r3, #0
 800d250:	6093      	str	r3, [r2, #8]
 800d252:	da07      	bge.n	800d264 <__sfputc_r+0x1c>
 800d254:	6994      	ldr	r4, [r2, #24]
 800d256:	42a3      	cmp	r3, r4
 800d258:	db01      	blt.n	800d25e <__sfputc_r+0x16>
 800d25a:	290a      	cmp	r1, #10
 800d25c:	d102      	bne.n	800d264 <__sfputc_r+0x1c>
 800d25e:	bc10      	pop	{r4}
 800d260:	f000 b9ba 	b.w	800d5d8 <__swbuf_r>
 800d264:	6813      	ldr	r3, [r2, #0]
 800d266:	1c58      	adds	r0, r3, #1
 800d268:	6010      	str	r0, [r2, #0]
 800d26a:	7019      	strb	r1, [r3, #0]
 800d26c:	4608      	mov	r0, r1
 800d26e:	bc10      	pop	{r4}
 800d270:	4770      	bx	lr

0800d272 <__sfputs_r>:
 800d272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d274:	4606      	mov	r6, r0
 800d276:	460f      	mov	r7, r1
 800d278:	4614      	mov	r4, r2
 800d27a:	18d5      	adds	r5, r2, r3
 800d27c:	42ac      	cmp	r4, r5
 800d27e:	d101      	bne.n	800d284 <__sfputs_r+0x12>
 800d280:	2000      	movs	r0, #0
 800d282:	e007      	b.n	800d294 <__sfputs_r+0x22>
 800d284:	463a      	mov	r2, r7
 800d286:	4630      	mov	r0, r6
 800d288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d28c:	f7ff ffdc 	bl	800d248 <__sfputc_r>
 800d290:	1c43      	adds	r3, r0, #1
 800d292:	d1f3      	bne.n	800d27c <__sfputs_r+0xa>
 800d294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d298 <_vfiprintf_r>:
 800d298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d29c:	460d      	mov	r5, r1
 800d29e:	4614      	mov	r4, r2
 800d2a0:	4698      	mov	r8, r3
 800d2a2:	4606      	mov	r6, r0
 800d2a4:	b09d      	sub	sp, #116	; 0x74
 800d2a6:	b118      	cbz	r0, 800d2b0 <_vfiprintf_r+0x18>
 800d2a8:	6983      	ldr	r3, [r0, #24]
 800d2aa:	b90b      	cbnz	r3, 800d2b0 <_vfiprintf_r+0x18>
 800d2ac:	f7fe fcc2 	bl	800bc34 <__sinit>
 800d2b0:	4b89      	ldr	r3, [pc, #548]	; (800d4d8 <_vfiprintf_r+0x240>)
 800d2b2:	429d      	cmp	r5, r3
 800d2b4:	d11b      	bne.n	800d2ee <_vfiprintf_r+0x56>
 800d2b6:	6875      	ldr	r5, [r6, #4]
 800d2b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2ba:	07d9      	lsls	r1, r3, #31
 800d2bc:	d405      	bmi.n	800d2ca <_vfiprintf_r+0x32>
 800d2be:	89ab      	ldrh	r3, [r5, #12]
 800d2c0:	059a      	lsls	r2, r3, #22
 800d2c2:	d402      	bmi.n	800d2ca <_vfiprintf_r+0x32>
 800d2c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2c6:	f7ff f8be 	bl	800c446 <__retarget_lock_acquire_recursive>
 800d2ca:	89ab      	ldrh	r3, [r5, #12]
 800d2cc:	071b      	lsls	r3, r3, #28
 800d2ce:	d501      	bpl.n	800d2d4 <_vfiprintf_r+0x3c>
 800d2d0:	692b      	ldr	r3, [r5, #16]
 800d2d2:	b9eb      	cbnz	r3, 800d310 <_vfiprintf_r+0x78>
 800d2d4:	4629      	mov	r1, r5
 800d2d6:	4630      	mov	r0, r6
 800d2d8:	f000 f9f0 	bl	800d6bc <__swsetup_r>
 800d2dc:	b1c0      	cbz	r0, 800d310 <_vfiprintf_r+0x78>
 800d2de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2e0:	07dc      	lsls	r4, r3, #31
 800d2e2:	d50e      	bpl.n	800d302 <_vfiprintf_r+0x6a>
 800d2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2e8:	b01d      	add	sp, #116	; 0x74
 800d2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ee:	4b7b      	ldr	r3, [pc, #492]	; (800d4dc <_vfiprintf_r+0x244>)
 800d2f0:	429d      	cmp	r5, r3
 800d2f2:	d101      	bne.n	800d2f8 <_vfiprintf_r+0x60>
 800d2f4:	68b5      	ldr	r5, [r6, #8]
 800d2f6:	e7df      	b.n	800d2b8 <_vfiprintf_r+0x20>
 800d2f8:	4b79      	ldr	r3, [pc, #484]	; (800d4e0 <_vfiprintf_r+0x248>)
 800d2fa:	429d      	cmp	r5, r3
 800d2fc:	bf08      	it	eq
 800d2fe:	68f5      	ldreq	r5, [r6, #12]
 800d300:	e7da      	b.n	800d2b8 <_vfiprintf_r+0x20>
 800d302:	89ab      	ldrh	r3, [r5, #12]
 800d304:	0598      	lsls	r0, r3, #22
 800d306:	d4ed      	bmi.n	800d2e4 <_vfiprintf_r+0x4c>
 800d308:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d30a:	f7ff f89d 	bl	800c448 <__retarget_lock_release_recursive>
 800d30e:	e7e9      	b.n	800d2e4 <_vfiprintf_r+0x4c>
 800d310:	2300      	movs	r3, #0
 800d312:	9309      	str	r3, [sp, #36]	; 0x24
 800d314:	2320      	movs	r3, #32
 800d316:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d31a:	2330      	movs	r3, #48	; 0x30
 800d31c:	f04f 0901 	mov.w	r9, #1
 800d320:	f8cd 800c 	str.w	r8, [sp, #12]
 800d324:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800d4e4 <_vfiprintf_r+0x24c>
 800d328:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d32c:	4623      	mov	r3, r4
 800d32e:	469a      	mov	sl, r3
 800d330:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d334:	b10a      	cbz	r2, 800d33a <_vfiprintf_r+0xa2>
 800d336:	2a25      	cmp	r2, #37	; 0x25
 800d338:	d1f9      	bne.n	800d32e <_vfiprintf_r+0x96>
 800d33a:	ebba 0b04 	subs.w	fp, sl, r4
 800d33e:	d00b      	beq.n	800d358 <_vfiprintf_r+0xc0>
 800d340:	465b      	mov	r3, fp
 800d342:	4622      	mov	r2, r4
 800d344:	4629      	mov	r1, r5
 800d346:	4630      	mov	r0, r6
 800d348:	f7ff ff93 	bl	800d272 <__sfputs_r>
 800d34c:	3001      	adds	r0, #1
 800d34e:	f000 80aa 	beq.w	800d4a6 <_vfiprintf_r+0x20e>
 800d352:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d354:	445a      	add	r2, fp
 800d356:	9209      	str	r2, [sp, #36]	; 0x24
 800d358:	f89a 3000 	ldrb.w	r3, [sl]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	f000 80a2 	beq.w	800d4a6 <_vfiprintf_r+0x20e>
 800d362:	2300      	movs	r3, #0
 800d364:	f04f 32ff 	mov.w	r2, #4294967295
 800d368:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d36c:	f10a 0a01 	add.w	sl, sl, #1
 800d370:	9304      	str	r3, [sp, #16]
 800d372:	9307      	str	r3, [sp, #28]
 800d374:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d378:	931a      	str	r3, [sp, #104]	; 0x68
 800d37a:	4654      	mov	r4, sl
 800d37c:	2205      	movs	r2, #5
 800d37e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d382:	4858      	ldr	r0, [pc, #352]	; (800d4e4 <_vfiprintf_r+0x24c>)
 800d384:	f7ff f87c 	bl	800c480 <memchr>
 800d388:	9a04      	ldr	r2, [sp, #16]
 800d38a:	b9d8      	cbnz	r0, 800d3c4 <_vfiprintf_r+0x12c>
 800d38c:	06d1      	lsls	r1, r2, #27
 800d38e:	bf44      	itt	mi
 800d390:	2320      	movmi	r3, #32
 800d392:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d396:	0713      	lsls	r3, r2, #28
 800d398:	bf44      	itt	mi
 800d39a:	232b      	movmi	r3, #43	; 0x2b
 800d39c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3a0:	f89a 3000 	ldrb.w	r3, [sl]
 800d3a4:	2b2a      	cmp	r3, #42	; 0x2a
 800d3a6:	d015      	beq.n	800d3d4 <_vfiprintf_r+0x13c>
 800d3a8:	4654      	mov	r4, sl
 800d3aa:	2000      	movs	r0, #0
 800d3ac:	f04f 0c0a 	mov.w	ip, #10
 800d3b0:	9a07      	ldr	r2, [sp, #28]
 800d3b2:	4621      	mov	r1, r4
 800d3b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3b8:	3b30      	subs	r3, #48	; 0x30
 800d3ba:	2b09      	cmp	r3, #9
 800d3bc:	d94e      	bls.n	800d45c <_vfiprintf_r+0x1c4>
 800d3be:	b1b0      	cbz	r0, 800d3ee <_vfiprintf_r+0x156>
 800d3c0:	9207      	str	r2, [sp, #28]
 800d3c2:	e014      	b.n	800d3ee <_vfiprintf_r+0x156>
 800d3c4:	eba0 0308 	sub.w	r3, r0, r8
 800d3c8:	fa09 f303 	lsl.w	r3, r9, r3
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	46a2      	mov	sl, r4
 800d3d0:	9304      	str	r3, [sp, #16]
 800d3d2:	e7d2      	b.n	800d37a <_vfiprintf_r+0xe2>
 800d3d4:	9b03      	ldr	r3, [sp, #12]
 800d3d6:	1d19      	adds	r1, r3, #4
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	9103      	str	r1, [sp, #12]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	bfbb      	ittet	lt
 800d3e0:	425b      	neglt	r3, r3
 800d3e2:	f042 0202 	orrlt.w	r2, r2, #2
 800d3e6:	9307      	strge	r3, [sp, #28]
 800d3e8:	9307      	strlt	r3, [sp, #28]
 800d3ea:	bfb8      	it	lt
 800d3ec:	9204      	strlt	r2, [sp, #16]
 800d3ee:	7823      	ldrb	r3, [r4, #0]
 800d3f0:	2b2e      	cmp	r3, #46	; 0x2e
 800d3f2:	d10c      	bne.n	800d40e <_vfiprintf_r+0x176>
 800d3f4:	7863      	ldrb	r3, [r4, #1]
 800d3f6:	2b2a      	cmp	r3, #42	; 0x2a
 800d3f8:	d135      	bne.n	800d466 <_vfiprintf_r+0x1ce>
 800d3fa:	9b03      	ldr	r3, [sp, #12]
 800d3fc:	3402      	adds	r4, #2
 800d3fe:	1d1a      	adds	r2, r3, #4
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	9203      	str	r2, [sp, #12]
 800d404:	2b00      	cmp	r3, #0
 800d406:	bfb8      	it	lt
 800d408:	f04f 33ff 	movlt.w	r3, #4294967295
 800d40c:	9305      	str	r3, [sp, #20]
 800d40e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d4f4 <_vfiprintf_r+0x25c>
 800d412:	2203      	movs	r2, #3
 800d414:	4650      	mov	r0, sl
 800d416:	7821      	ldrb	r1, [r4, #0]
 800d418:	f7ff f832 	bl	800c480 <memchr>
 800d41c:	b140      	cbz	r0, 800d430 <_vfiprintf_r+0x198>
 800d41e:	2340      	movs	r3, #64	; 0x40
 800d420:	eba0 000a 	sub.w	r0, r0, sl
 800d424:	fa03 f000 	lsl.w	r0, r3, r0
 800d428:	9b04      	ldr	r3, [sp, #16]
 800d42a:	3401      	adds	r4, #1
 800d42c:	4303      	orrs	r3, r0
 800d42e:	9304      	str	r3, [sp, #16]
 800d430:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d434:	2206      	movs	r2, #6
 800d436:	482c      	ldr	r0, [pc, #176]	; (800d4e8 <_vfiprintf_r+0x250>)
 800d438:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d43c:	f7ff f820 	bl	800c480 <memchr>
 800d440:	2800      	cmp	r0, #0
 800d442:	d03f      	beq.n	800d4c4 <_vfiprintf_r+0x22c>
 800d444:	4b29      	ldr	r3, [pc, #164]	; (800d4ec <_vfiprintf_r+0x254>)
 800d446:	bb1b      	cbnz	r3, 800d490 <_vfiprintf_r+0x1f8>
 800d448:	9b03      	ldr	r3, [sp, #12]
 800d44a:	3307      	adds	r3, #7
 800d44c:	f023 0307 	bic.w	r3, r3, #7
 800d450:	3308      	adds	r3, #8
 800d452:	9303      	str	r3, [sp, #12]
 800d454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d456:	443b      	add	r3, r7
 800d458:	9309      	str	r3, [sp, #36]	; 0x24
 800d45a:	e767      	b.n	800d32c <_vfiprintf_r+0x94>
 800d45c:	460c      	mov	r4, r1
 800d45e:	2001      	movs	r0, #1
 800d460:	fb0c 3202 	mla	r2, ip, r2, r3
 800d464:	e7a5      	b.n	800d3b2 <_vfiprintf_r+0x11a>
 800d466:	2300      	movs	r3, #0
 800d468:	f04f 0c0a 	mov.w	ip, #10
 800d46c:	4619      	mov	r1, r3
 800d46e:	3401      	adds	r4, #1
 800d470:	9305      	str	r3, [sp, #20]
 800d472:	4620      	mov	r0, r4
 800d474:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d478:	3a30      	subs	r2, #48	; 0x30
 800d47a:	2a09      	cmp	r2, #9
 800d47c:	d903      	bls.n	800d486 <_vfiprintf_r+0x1ee>
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d0c5      	beq.n	800d40e <_vfiprintf_r+0x176>
 800d482:	9105      	str	r1, [sp, #20]
 800d484:	e7c3      	b.n	800d40e <_vfiprintf_r+0x176>
 800d486:	4604      	mov	r4, r0
 800d488:	2301      	movs	r3, #1
 800d48a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d48e:	e7f0      	b.n	800d472 <_vfiprintf_r+0x1da>
 800d490:	ab03      	add	r3, sp, #12
 800d492:	9300      	str	r3, [sp, #0]
 800d494:	462a      	mov	r2, r5
 800d496:	4630      	mov	r0, r6
 800d498:	4b15      	ldr	r3, [pc, #84]	; (800d4f0 <_vfiprintf_r+0x258>)
 800d49a:	a904      	add	r1, sp, #16
 800d49c:	f7fc f9f8 	bl	8009890 <_printf_float>
 800d4a0:	4607      	mov	r7, r0
 800d4a2:	1c78      	adds	r0, r7, #1
 800d4a4:	d1d6      	bne.n	800d454 <_vfiprintf_r+0x1bc>
 800d4a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4a8:	07d9      	lsls	r1, r3, #31
 800d4aa:	d405      	bmi.n	800d4b8 <_vfiprintf_r+0x220>
 800d4ac:	89ab      	ldrh	r3, [r5, #12]
 800d4ae:	059a      	lsls	r2, r3, #22
 800d4b0:	d402      	bmi.n	800d4b8 <_vfiprintf_r+0x220>
 800d4b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4b4:	f7fe ffc8 	bl	800c448 <__retarget_lock_release_recursive>
 800d4b8:	89ab      	ldrh	r3, [r5, #12]
 800d4ba:	065b      	lsls	r3, r3, #25
 800d4bc:	f53f af12 	bmi.w	800d2e4 <_vfiprintf_r+0x4c>
 800d4c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4c2:	e711      	b.n	800d2e8 <_vfiprintf_r+0x50>
 800d4c4:	ab03      	add	r3, sp, #12
 800d4c6:	9300      	str	r3, [sp, #0]
 800d4c8:	462a      	mov	r2, r5
 800d4ca:	4630      	mov	r0, r6
 800d4cc:	4b08      	ldr	r3, [pc, #32]	; (800d4f0 <_vfiprintf_r+0x258>)
 800d4ce:	a904      	add	r1, sp, #16
 800d4d0:	f7fc fc7a 	bl	8009dc8 <_printf_i>
 800d4d4:	e7e4      	b.n	800d4a0 <_vfiprintf_r+0x208>
 800d4d6:	bf00      	nop
 800d4d8:	0801ad80 	.word	0x0801ad80
 800d4dc:	0801ada0 	.word	0x0801ada0
 800d4e0:	0801ad60 	.word	0x0801ad60
 800d4e4:	0801af9c 	.word	0x0801af9c
 800d4e8:	0801afa6 	.word	0x0801afa6
 800d4ec:	08009891 	.word	0x08009891
 800d4f0:	0800d273 	.word	0x0800d273
 800d4f4:	0801afa2 	.word	0x0801afa2

0800d4f8 <nan>:
 800d4f8:	2000      	movs	r0, #0
 800d4fa:	4901      	ldr	r1, [pc, #4]	; (800d500 <nan+0x8>)
 800d4fc:	4770      	bx	lr
 800d4fe:	bf00      	nop
 800d500:	7ff80000 	.word	0x7ff80000

0800d504 <_sbrk_r>:
 800d504:	b538      	push	{r3, r4, r5, lr}
 800d506:	2300      	movs	r3, #0
 800d508:	4d05      	ldr	r5, [pc, #20]	; (800d520 <_sbrk_r+0x1c>)
 800d50a:	4604      	mov	r4, r0
 800d50c:	4608      	mov	r0, r1
 800d50e:	602b      	str	r3, [r5, #0]
 800d510:	f7f4 fd48 	bl	8001fa4 <_sbrk>
 800d514:	1c43      	adds	r3, r0, #1
 800d516:	d102      	bne.n	800d51e <_sbrk_r+0x1a>
 800d518:	682b      	ldr	r3, [r5, #0]
 800d51a:	b103      	cbz	r3, 800d51e <_sbrk_r+0x1a>
 800d51c:	6023      	str	r3, [r4, #0]
 800d51e:	bd38      	pop	{r3, r4, r5, pc}
 800d520:	2000047c 	.word	0x2000047c

0800d524 <nanf>:
 800d524:	4800      	ldr	r0, [pc, #0]	; (800d528 <nanf+0x4>)
 800d526:	4770      	bx	lr
 800d528:	7fc00000 	.word	0x7fc00000

0800d52c <__sread>:
 800d52c:	b510      	push	{r4, lr}
 800d52e:	460c      	mov	r4, r1
 800d530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d534:	f000 faf4 	bl	800db20 <_read_r>
 800d538:	2800      	cmp	r0, #0
 800d53a:	bfab      	itete	ge
 800d53c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d53e:	89a3      	ldrhlt	r3, [r4, #12]
 800d540:	181b      	addge	r3, r3, r0
 800d542:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d546:	bfac      	ite	ge
 800d548:	6563      	strge	r3, [r4, #84]	; 0x54
 800d54a:	81a3      	strhlt	r3, [r4, #12]
 800d54c:	bd10      	pop	{r4, pc}

0800d54e <__swrite>:
 800d54e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d552:	461f      	mov	r7, r3
 800d554:	898b      	ldrh	r3, [r1, #12]
 800d556:	4605      	mov	r5, r0
 800d558:	05db      	lsls	r3, r3, #23
 800d55a:	460c      	mov	r4, r1
 800d55c:	4616      	mov	r6, r2
 800d55e:	d505      	bpl.n	800d56c <__swrite+0x1e>
 800d560:	2302      	movs	r3, #2
 800d562:	2200      	movs	r2, #0
 800d564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d568:	f000 fa18 	bl	800d99c <_lseek_r>
 800d56c:	89a3      	ldrh	r3, [r4, #12]
 800d56e:	4632      	mov	r2, r6
 800d570:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d574:	81a3      	strh	r3, [r4, #12]
 800d576:	4628      	mov	r0, r5
 800d578:	463b      	mov	r3, r7
 800d57a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d57e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d582:	f000 b889 	b.w	800d698 <_write_r>

0800d586 <__sseek>:
 800d586:	b510      	push	{r4, lr}
 800d588:	460c      	mov	r4, r1
 800d58a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d58e:	f000 fa05 	bl	800d99c <_lseek_r>
 800d592:	1c43      	adds	r3, r0, #1
 800d594:	89a3      	ldrh	r3, [r4, #12]
 800d596:	bf15      	itete	ne
 800d598:	6560      	strne	r0, [r4, #84]	; 0x54
 800d59a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d59e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d5a2:	81a3      	strheq	r3, [r4, #12]
 800d5a4:	bf18      	it	ne
 800d5a6:	81a3      	strhne	r3, [r4, #12]
 800d5a8:	bd10      	pop	{r4, pc}

0800d5aa <__sclose>:
 800d5aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5ae:	f000 b911 	b.w	800d7d4 <_close_r>

0800d5b2 <strncmp>:
 800d5b2:	b510      	push	{r4, lr}
 800d5b4:	b16a      	cbz	r2, 800d5d2 <strncmp+0x20>
 800d5b6:	3901      	subs	r1, #1
 800d5b8:	1884      	adds	r4, r0, r2
 800d5ba:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d5be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	d103      	bne.n	800d5ce <strncmp+0x1c>
 800d5c6:	42a0      	cmp	r0, r4
 800d5c8:	d001      	beq.n	800d5ce <strncmp+0x1c>
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d1f5      	bne.n	800d5ba <strncmp+0x8>
 800d5ce:	1a98      	subs	r0, r3, r2
 800d5d0:	bd10      	pop	{r4, pc}
 800d5d2:	4610      	mov	r0, r2
 800d5d4:	e7fc      	b.n	800d5d0 <strncmp+0x1e>
	...

0800d5d8 <__swbuf_r>:
 800d5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5da:	460e      	mov	r6, r1
 800d5dc:	4614      	mov	r4, r2
 800d5de:	4605      	mov	r5, r0
 800d5e0:	b118      	cbz	r0, 800d5ea <__swbuf_r+0x12>
 800d5e2:	6983      	ldr	r3, [r0, #24]
 800d5e4:	b90b      	cbnz	r3, 800d5ea <__swbuf_r+0x12>
 800d5e6:	f7fe fb25 	bl	800bc34 <__sinit>
 800d5ea:	4b21      	ldr	r3, [pc, #132]	; (800d670 <__swbuf_r+0x98>)
 800d5ec:	429c      	cmp	r4, r3
 800d5ee:	d12b      	bne.n	800d648 <__swbuf_r+0x70>
 800d5f0:	686c      	ldr	r4, [r5, #4]
 800d5f2:	69a3      	ldr	r3, [r4, #24]
 800d5f4:	60a3      	str	r3, [r4, #8]
 800d5f6:	89a3      	ldrh	r3, [r4, #12]
 800d5f8:	071a      	lsls	r2, r3, #28
 800d5fa:	d52f      	bpl.n	800d65c <__swbuf_r+0x84>
 800d5fc:	6923      	ldr	r3, [r4, #16]
 800d5fe:	b36b      	cbz	r3, 800d65c <__swbuf_r+0x84>
 800d600:	6923      	ldr	r3, [r4, #16]
 800d602:	6820      	ldr	r0, [r4, #0]
 800d604:	b2f6      	uxtb	r6, r6
 800d606:	1ac0      	subs	r0, r0, r3
 800d608:	6963      	ldr	r3, [r4, #20]
 800d60a:	4637      	mov	r7, r6
 800d60c:	4283      	cmp	r3, r0
 800d60e:	dc04      	bgt.n	800d61a <__swbuf_r+0x42>
 800d610:	4621      	mov	r1, r4
 800d612:	4628      	mov	r0, r5
 800d614:	f000 f974 	bl	800d900 <_fflush_r>
 800d618:	bb30      	cbnz	r0, 800d668 <__swbuf_r+0x90>
 800d61a:	68a3      	ldr	r3, [r4, #8]
 800d61c:	3001      	adds	r0, #1
 800d61e:	3b01      	subs	r3, #1
 800d620:	60a3      	str	r3, [r4, #8]
 800d622:	6823      	ldr	r3, [r4, #0]
 800d624:	1c5a      	adds	r2, r3, #1
 800d626:	6022      	str	r2, [r4, #0]
 800d628:	701e      	strb	r6, [r3, #0]
 800d62a:	6963      	ldr	r3, [r4, #20]
 800d62c:	4283      	cmp	r3, r0
 800d62e:	d004      	beq.n	800d63a <__swbuf_r+0x62>
 800d630:	89a3      	ldrh	r3, [r4, #12]
 800d632:	07db      	lsls	r3, r3, #31
 800d634:	d506      	bpl.n	800d644 <__swbuf_r+0x6c>
 800d636:	2e0a      	cmp	r6, #10
 800d638:	d104      	bne.n	800d644 <__swbuf_r+0x6c>
 800d63a:	4621      	mov	r1, r4
 800d63c:	4628      	mov	r0, r5
 800d63e:	f000 f95f 	bl	800d900 <_fflush_r>
 800d642:	b988      	cbnz	r0, 800d668 <__swbuf_r+0x90>
 800d644:	4638      	mov	r0, r7
 800d646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d648:	4b0a      	ldr	r3, [pc, #40]	; (800d674 <__swbuf_r+0x9c>)
 800d64a:	429c      	cmp	r4, r3
 800d64c:	d101      	bne.n	800d652 <__swbuf_r+0x7a>
 800d64e:	68ac      	ldr	r4, [r5, #8]
 800d650:	e7cf      	b.n	800d5f2 <__swbuf_r+0x1a>
 800d652:	4b09      	ldr	r3, [pc, #36]	; (800d678 <__swbuf_r+0xa0>)
 800d654:	429c      	cmp	r4, r3
 800d656:	bf08      	it	eq
 800d658:	68ec      	ldreq	r4, [r5, #12]
 800d65a:	e7ca      	b.n	800d5f2 <__swbuf_r+0x1a>
 800d65c:	4621      	mov	r1, r4
 800d65e:	4628      	mov	r0, r5
 800d660:	f000 f82c 	bl	800d6bc <__swsetup_r>
 800d664:	2800      	cmp	r0, #0
 800d666:	d0cb      	beq.n	800d600 <__swbuf_r+0x28>
 800d668:	f04f 37ff 	mov.w	r7, #4294967295
 800d66c:	e7ea      	b.n	800d644 <__swbuf_r+0x6c>
 800d66e:	bf00      	nop
 800d670:	0801ad80 	.word	0x0801ad80
 800d674:	0801ada0 	.word	0x0801ada0
 800d678:	0801ad60 	.word	0x0801ad60

0800d67c <__ascii_wctomb>:
 800d67c:	4603      	mov	r3, r0
 800d67e:	4608      	mov	r0, r1
 800d680:	b141      	cbz	r1, 800d694 <__ascii_wctomb+0x18>
 800d682:	2aff      	cmp	r2, #255	; 0xff
 800d684:	d904      	bls.n	800d690 <__ascii_wctomb+0x14>
 800d686:	228a      	movs	r2, #138	; 0x8a
 800d688:	f04f 30ff 	mov.w	r0, #4294967295
 800d68c:	601a      	str	r2, [r3, #0]
 800d68e:	4770      	bx	lr
 800d690:	2001      	movs	r0, #1
 800d692:	700a      	strb	r2, [r1, #0]
 800d694:	4770      	bx	lr
	...

0800d698 <_write_r>:
 800d698:	b538      	push	{r3, r4, r5, lr}
 800d69a:	4604      	mov	r4, r0
 800d69c:	4608      	mov	r0, r1
 800d69e:	4611      	mov	r1, r2
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	4d05      	ldr	r5, [pc, #20]	; (800d6b8 <_write_r+0x20>)
 800d6a4:	602a      	str	r2, [r5, #0]
 800d6a6:	461a      	mov	r2, r3
 800d6a8:	f7f4 fc2f 	bl	8001f0a <_write>
 800d6ac:	1c43      	adds	r3, r0, #1
 800d6ae:	d102      	bne.n	800d6b6 <_write_r+0x1e>
 800d6b0:	682b      	ldr	r3, [r5, #0]
 800d6b2:	b103      	cbz	r3, 800d6b6 <_write_r+0x1e>
 800d6b4:	6023      	str	r3, [r4, #0]
 800d6b6:	bd38      	pop	{r3, r4, r5, pc}
 800d6b8:	2000047c 	.word	0x2000047c

0800d6bc <__swsetup_r>:
 800d6bc:	4b32      	ldr	r3, [pc, #200]	; (800d788 <__swsetup_r+0xcc>)
 800d6be:	b570      	push	{r4, r5, r6, lr}
 800d6c0:	681d      	ldr	r5, [r3, #0]
 800d6c2:	4606      	mov	r6, r0
 800d6c4:	460c      	mov	r4, r1
 800d6c6:	b125      	cbz	r5, 800d6d2 <__swsetup_r+0x16>
 800d6c8:	69ab      	ldr	r3, [r5, #24]
 800d6ca:	b913      	cbnz	r3, 800d6d2 <__swsetup_r+0x16>
 800d6cc:	4628      	mov	r0, r5
 800d6ce:	f7fe fab1 	bl	800bc34 <__sinit>
 800d6d2:	4b2e      	ldr	r3, [pc, #184]	; (800d78c <__swsetup_r+0xd0>)
 800d6d4:	429c      	cmp	r4, r3
 800d6d6:	d10f      	bne.n	800d6f8 <__swsetup_r+0x3c>
 800d6d8:	686c      	ldr	r4, [r5, #4]
 800d6da:	89a3      	ldrh	r3, [r4, #12]
 800d6dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d6e0:	0719      	lsls	r1, r3, #28
 800d6e2:	d42c      	bmi.n	800d73e <__swsetup_r+0x82>
 800d6e4:	06dd      	lsls	r5, r3, #27
 800d6e6:	d411      	bmi.n	800d70c <__swsetup_r+0x50>
 800d6e8:	2309      	movs	r3, #9
 800d6ea:	6033      	str	r3, [r6, #0]
 800d6ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6f4:	81a3      	strh	r3, [r4, #12]
 800d6f6:	e03e      	b.n	800d776 <__swsetup_r+0xba>
 800d6f8:	4b25      	ldr	r3, [pc, #148]	; (800d790 <__swsetup_r+0xd4>)
 800d6fa:	429c      	cmp	r4, r3
 800d6fc:	d101      	bne.n	800d702 <__swsetup_r+0x46>
 800d6fe:	68ac      	ldr	r4, [r5, #8]
 800d700:	e7eb      	b.n	800d6da <__swsetup_r+0x1e>
 800d702:	4b24      	ldr	r3, [pc, #144]	; (800d794 <__swsetup_r+0xd8>)
 800d704:	429c      	cmp	r4, r3
 800d706:	bf08      	it	eq
 800d708:	68ec      	ldreq	r4, [r5, #12]
 800d70a:	e7e6      	b.n	800d6da <__swsetup_r+0x1e>
 800d70c:	0758      	lsls	r0, r3, #29
 800d70e:	d512      	bpl.n	800d736 <__swsetup_r+0x7a>
 800d710:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d712:	b141      	cbz	r1, 800d726 <__swsetup_r+0x6a>
 800d714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d718:	4299      	cmp	r1, r3
 800d71a:	d002      	beq.n	800d722 <__swsetup_r+0x66>
 800d71c:	4630      	mov	r0, r6
 800d71e:	f7ff fb91 	bl	800ce44 <_free_r>
 800d722:	2300      	movs	r3, #0
 800d724:	6363      	str	r3, [r4, #52]	; 0x34
 800d726:	89a3      	ldrh	r3, [r4, #12]
 800d728:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d72c:	81a3      	strh	r3, [r4, #12]
 800d72e:	2300      	movs	r3, #0
 800d730:	6063      	str	r3, [r4, #4]
 800d732:	6923      	ldr	r3, [r4, #16]
 800d734:	6023      	str	r3, [r4, #0]
 800d736:	89a3      	ldrh	r3, [r4, #12]
 800d738:	f043 0308 	orr.w	r3, r3, #8
 800d73c:	81a3      	strh	r3, [r4, #12]
 800d73e:	6923      	ldr	r3, [r4, #16]
 800d740:	b94b      	cbnz	r3, 800d756 <__swsetup_r+0x9a>
 800d742:	89a3      	ldrh	r3, [r4, #12]
 800d744:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d74c:	d003      	beq.n	800d756 <__swsetup_r+0x9a>
 800d74e:	4621      	mov	r1, r4
 800d750:	4630      	mov	r0, r6
 800d752:	f000 f959 	bl	800da08 <__smakebuf_r>
 800d756:	89a0      	ldrh	r0, [r4, #12]
 800d758:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d75c:	f010 0301 	ands.w	r3, r0, #1
 800d760:	d00a      	beq.n	800d778 <__swsetup_r+0xbc>
 800d762:	2300      	movs	r3, #0
 800d764:	60a3      	str	r3, [r4, #8]
 800d766:	6963      	ldr	r3, [r4, #20]
 800d768:	425b      	negs	r3, r3
 800d76a:	61a3      	str	r3, [r4, #24]
 800d76c:	6923      	ldr	r3, [r4, #16]
 800d76e:	b943      	cbnz	r3, 800d782 <__swsetup_r+0xc6>
 800d770:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d774:	d1ba      	bne.n	800d6ec <__swsetup_r+0x30>
 800d776:	bd70      	pop	{r4, r5, r6, pc}
 800d778:	0781      	lsls	r1, r0, #30
 800d77a:	bf58      	it	pl
 800d77c:	6963      	ldrpl	r3, [r4, #20]
 800d77e:	60a3      	str	r3, [r4, #8]
 800d780:	e7f4      	b.n	800d76c <__swsetup_r+0xb0>
 800d782:	2000      	movs	r0, #0
 800d784:	e7f7      	b.n	800d776 <__swsetup_r+0xba>
 800d786:	bf00      	nop
 800d788:	20000014 	.word	0x20000014
 800d78c:	0801ad80 	.word	0x0801ad80
 800d790:	0801ada0 	.word	0x0801ada0
 800d794:	0801ad60 	.word	0x0801ad60

0800d798 <__assert_func>:
 800d798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d79a:	4614      	mov	r4, r2
 800d79c:	461a      	mov	r2, r3
 800d79e:	4b09      	ldr	r3, [pc, #36]	; (800d7c4 <__assert_func+0x2c>)
 800d7a0:	4605      	mov	r5, r0
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	68d8      	ldr	r0, [r3, #12]
 800d7a6:	b14c      	cbz	r4, 800d7bc <__assert_func+0x24>
 800d7a8:	4b07      	ldr	r3, [pc, #28]	; (800d7c8 <__assert_func+0x30>)
 800d7aa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d7ae:	9100      	str	r1, [sp, #0]
 800d7b0:	462b      	mov	r3, r5
 800d7b2:	4906      	ldr	r1, [pc, #24]	; (800d7cc <__assert_func+0x34>)
 800d7b4:	f000 f8e0 	bl	800d978 <fiprintf>
 800d7b8:	f000 f9c4 	bl	800db44 <abort>
 800d7bc:	4b04      	ldr	r3, [pc, #16]	; (800d7d0 <__assert_func+0x38>)
 800d7be:	461c      	mov	r4, r3
 800d7c0:	e7f3      	b.n	800d7aa <__assert_func+0x12>
 800d7c2:	bf00      	nop
 800d7c4:	20000014 	.word	0x20000014
 800d7c8:	0801afad 	.word	0x0801afad
 800d7cc:	0801afba 	.word	0x0801afba
 800d7d0:	0801afe8 	.word	0x0801afe8

0800d7d4 <_close_r>:
 800d7d4:	b538      	push	{r3, r4, r5, lr}
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	4d05      	ldr	r5, [pc, #20]	; (800d7f0 <_close_r+0x1c>)
 800d7da:	4604      	mov	r4, r0
 800d7dc:	4608      	mov	r0, r1
 800d7de:	602b      	str	r3, [r5, #0]
 800d7e0:	f7f4 fbaf 	bl	8001f42 <_close>
 800d7e4:	1c43      	adds	r3, r0, #1
 800d7e6:	d102      	bne.n	800d7ee <_close_r+0x1a>
 800d7e8:	682b      	ldr	r3, [r5, #0]
 800d7ea:	b103      	cbz	r3, 800d7ee <_close_r+0x1a>
 800d7ec:	6023      	str	r3, [r4, #0]
 800d7ee:	bd38      	pop	{r3, r4, r5, pc}
 800d7f0:	2000047c 	.word	0x2000047c

0800d7f4 <__sflush_r>:
 800d7f4:	898a      	ldrh	r2, [r1, #12]
 800d7f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7fa:	4605      	mov	r5, r0
 800d7fc:	0710      	lsls	r0, r2, #28
 800d7fe:	460c      	mov	r4, r1
 800d800:	d458      	bmi.n	800d8b4 <__sflush_r+0xc0>
 800d802:	684b      	ldr	r3, [r1, #4]
 800d804:	2b00      	cmp	r3, #0
 800d806:	dc05      	bgt.n	800d814 <__sflush_r+0x20>
 800d808:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	dc02      	bgt.n	800d814 <__sflush_r+0x20>
 800d80e:	2000      	movs	r0, #0
 800d810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d814:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d816:	2e00      	cmp	r6, #0
 800d818:	d0f9      	beq.n	800d80e <__sflush_r+0x1a>
 800d81a:	2300      	movs	r3, #0
 800d81c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d820:	682f      	ldr	r7, [r5, #0]
 800d822:	602b      	str	r3, [r5, #0]
 800d824:	d032      	beq.n	800d88c <__sflush_r+0x98>
 800d826:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d828:	89a3      	ldrh	r3, [r4, #12]
 800d82a:	075a      	lsls	r2, r3, #29
 800d82c:	d505      	bpl.n	800d83a <__sflush_r+0x46>
 800d82e:	6863      	ldr	r3, [r4, #4]
 800d830:	1ac0      	subs	r0, r0, r3
 800d832:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d834:	b10b      	cbz	r3, 800d83a <__sflush_r+0x46>
 800d836:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d838:	1ac0      	subs	r0, r0, r3
 800d83a:	2300      	movs	r3, #0
 800d83c:	4602      	mov	r2, r0
 800d83e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d840:	4628      	mov	r0, r5
 800d842:	6a21      	ldr	r1, [r4, #32]
 800d844:	47b0      	blx	r6
 800d846:	1c43      	adds	r3, r0, #1
 800d848:	89a3      	ldrh	r3, [r4, #12]
 800d84a:	d106      	bne.n	800d85a <__sflush_r+0x66>
 800d84c:	6829      	ldr	r1, [r5, #0]
 800d84e:	291d      	cmp	r1, #29
 800d850:	d82c      	bhi.n	800d8ac <__sflush_r+0xb8>
 800d852:	4a2a      	ldr	r2, [pc, #168]	; (800d8fc <__sflush_r+0x108>)
 800d854:	40ca      	lsrs	r2, r1
 800d856:	07d6      	lsls	r6, r2, #31
 800d858:	d528      	bpl.n	800d8ac <__sflush_r+0xb8>
 800d85a:	2200      	movs	r2, #0
 800d85c:	6062      	str	r2, [r4, #4]
 800d85e:	6922      	ldr	r2, [r4, #16]
 800d860:	04d9      	lsls	r1, r3, #19
 800d862:	6022      	str	r2, [r4, #0]
 800d864:	d504      	bpl.n	800d870 <__sflush_r+0x7c>
 800d866:	1c42      	adds	r2, r0, #1
 800d868:	d101      	bne.n	800d86e <__sflush_r+0x7a>
 800d86a:	682b      	ldr	r3, [r5, #0]
 800d86c:	b903      	cbnz	r3, 800d870 <__sflush_r+0x7c>
 800d86e:	6560      	str	r0, [r4, #84]	; 0x54
 800d870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d872:	602f      	str	r7, [r5, #0]
 800d874:	2900      	cmp	r1, #0
 800d876:	d0ca      	beq.n	800d80e <__sflush_r+0x1a>
 800d878:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d87c:	4299      	cmp	r1, r3
 800d87e:	d002      	beq.n	800d886 <__sflush_r+0x92>
 800d880:	4628      	mov	r0, r5
 800d882:	f7ff fadf 	bl	800ce44 <_free_r>
 800d886:	2000      	movs	r0, #0
 800d888:	6360      	str	r0, [r4, #52]	; 0x34
 800d88a:	e7c1      	b.n	800d810 <__sflush_r+0x1c>
 800d88c:	6a21      	ldr	r1, [r4, #32]
 800d88e:	2301      	movs	r3, #1
 800d890:	4628      	mov	r0, r5
 800d892:	47b0      	blx	r6
 800d894:	1c41      	adds	r1, r0, #1
 800d896:	d1c7      	bne.n	800d828 <__sflush_r+0x34>
 800d898:	682b      	ldr	r3, [r5, #0]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d0c4      	beq.n	800d828 <__sflush_r+0x34>
 800d89e:	2b1d      	cmp	r3, #29
 800d8a0:	d001      	beq.n	800d8a6 <__sflush_r+0xb2>
 800d8a2:	2b16      	cmp	r3, #22
 800d8a4:	d101      	bne.n	800d8aa <__sflush_r+0xb6>
 800d8a6:	602f      	str	r7, [r5, #0]
 800d8a8:	e7b1      	b.n	800d80e <__sflush_r+0x1a>
 800d8aa:	89a3      	ldrh	r3, [r4, #12]
 800d8ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8b0:	81a3      	strh	r3, [r4, #12]
 800d8b2:	e7ad      	b.n	800d810 <__sflush_r+0x1c>
 800d8b4:	690f      	ldr	r7, [r1, #16]
 800d8b6:	2f00      	cmp	r7, #0
 800d8b8:	d0a9      	beq.n	800d80e <__sflush_r+0x1a>
 800d8ba:	0793      	lsls	r3, r2, #30
 800d8bc:	bf18      	it	ne
 800d8be:	2300      	movne	r3, #0
 800d8c0:	680e      	ldr	r6, [r1, #0]
 800d8c2:	bf08      	it	eq
 800d8c4:	694b      	ldreq	r3, [r1, #20]
 800d8c6:	eba6 0807 	sub.w	r8, r6, r7
 800d8ca:	600f      	str	r7, [r1, #0]
 800d8cc:	608b      	str	r3, [r1, #8]
 800d8ce:	f1b8 0f00 	cmp.w	r8, #0
 800d8d2:	dd9c      	ble.n	800d80e <__sflush_r+0x1a>
 800d8d4:	4643      	mov	r3, r8
 800d8d6:	463a      	mov	r2, r7
 800d8d8:	4628      	mov	r0, r5
 800d8da:	6a21      	ldr	r1, [r4, #32]
 800d8dc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d8de:	47b0      	blx	r6
 800d8e0:	2800      	cmp	r0, #0
 800d8e2:	dc06      	bgt.n	800d8f2 <__sflush_r+0xfe>
 800d8e4:	89a3      	ldrh	r3, [r4, #12]
 800d8e6:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8ee:	81a3      	strh	r3, [r4, #12]
 800d8f0:	e78e      	b.n	800d810 <__sflush_r+0x1c>
 800d8f2:	4407      	add	r7, r0
 800d8f4:	eba8 0800 	sub.w	r8, r8, r0
 800d8f8:	e7e9      	b.n	800d8ce <__sflush_r+0xda>
 800d8fa:	bf00      	nop
 800d8fc:	20400001 	.word	0x20400001

0800d900 <_fflush_r>:
 800d900:	b538      	push	{r3, r4, r5, lr}
 800d902:	690b      	ldr	r3, [r1, #16]
 800d904:	4605      	mov	r5, r0
 800d906:	460c      	mov	r4, r1
 800d908:	b913      	cbnz	r3, 800d910 <_fflush_r+0x10>
 800d90a:	2500      	movs	r5, #0
 800d90c:	4628      	mov	r0, r5
 800d90e:	bd38      	pop	{r3, r4, r5, pc}
 800d910:	b118      	cbz	r0, 800d91a <_fflush_r+0x1a>
 800d912:	6983      	ldr	r3, [r0, #24]
 800d914:	b90b      	cbnz	r3, 800d91a <_fflush_r+0x1a>
 800d916:	f7fe f98d 	bl	800bc34 <__sinit>
 800d91a:	4b14      	ldr	r3, [pc, #80]	; (800d96c <_fflush_r+0x6c>)
 800d91c:	429c      	cmp	r4, r3
 800d91e:	d11b      	bne.n	800d958 <_fflush_r+0x58>
 800d920:	686c      	ldr	r4, [r5, #4]
 800d922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d0ef      	beq.n	800d90a <_fflush_r+0xa>
 800d92a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d92c:	07d0      	lsls	r0, r2, #31
 800d92e:	d404      	bmi.n	800d93a <_fflush_r+0x3a>
 800d930:	0599      	lsls	r1, r3, #22
 800d932:	d402      	bmi.n	800d93a <_fflush_r+0x3a>
 800d934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d936:	f7fe fd86 	bl	800c446 <__retarget_lock_acquire_recursive>
 800d93a:	4628      	mov	r0, r5
 800d93c:	4621      	mov	r1, r4
 800d93e:	f7ff ff59 	bl	800d7f4 <__sflush_r>
 800d942:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d944:	4605      	mov	r5, r0
 800d946:	07da      	lsls	r2, r3, #31
 800d948:	d4e0      	bmi.n	800d90c <_fflush_r+0xc>
 800d94a:	89a3      	ldrh	r3, [r4, #12]
 800d94c:	059b      	lsls	r3, r3, #22
 800d94e:	d4dd      	bmi.n	800d90c <_fflush_r+0xc>
 800d950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d952:	f7fe fd79 	bl	800c448 <__retarget_lock_release_recursive>
 800d956:	e7d9      	b.n	800d90c <_fflush_r+0xc>
 800d958:	4b05      	ldr	r3, [pc, #20]	; (800d970 <_fflush_r+0x70>)
 800d95a:	429c      	cmp	r4, r3
 800d95c:	d101      	bne.n	800d962 <_fflush_r+0x62>
 800d95e:	68ac      	ldr	r4, [r5, #8]
 800d960:	e7df      	b.n	800d922 <_fflush_r+0x22>
 800d962:	4b04      	ldr	r3, [pc, #16]	; (800d974 <_fflush_r+0x74>)
 800d964:	429c      	cmp	r4, r3
 800d966:	bf08      	it	eq
 800d968:	68ec      	ldreq	r4, [r5, #12]
 800d96a:	e7da      	b.n	800d922 <_fflush_r+0x22>
 800d96c:	0801ad80 	.word	0x0801ad80
 800d970:	0801ada0 	.word	0x0801ada0
 800d974:	0801ad60 	.word	0x0801ad60

0800d978 <fiprintf>:
 800d978:	b40e      	push	{r1, r2, r3}
 800d97a:	b503      	push	{r0, r1, lr}
 800d97c:	4601      	mov	r1, r0
 800d97e:	ab03      	add	r3, sp, #12
 800d980:	4805      	ldr	r0, [pc, #20]	; (800d998 <fiprintf+0x20>)
 800d982:	f853 2b04 	ldr.w	r2, [r3], #4
 800d986:	6800      	ldr	r0, [r0, #0]
 800d988:	9301      	str	r3, [sp, #4]
 800d98a:	f7ff fc85 	bl	800d298 <_vfiprintf_r>
 800d98e:	b002      	add	sp, #8
 800d990:	f85d eb04 	ldr.w	lr, [sp], #4
 800d994:	b003      	add	sp, #12
 800d996:	4770      	bx	lr
 800d998:	20000014 	.word	0x20000014

0800d99c <_lseek_r>:
 800d99c:	b538      	push	{r3, r4, r5, lr}
 800d99e:	4604      	mov	r4, r0
 800d9a0:	4608      	mov	r0, r1
 800d9a2:	4611      	mov	r1, r2
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	4d05      	ldr	r5, [pc, #20]	; (800d9bc <_lseek_r+0x20>)
 800d9a8:	602a      	str	r2, [r5, #0]
 800d9aa:	461a      	mov	r2, r3
 800d9ac:	f7f4 faed 	bl	8001f8a <_lseek>
 800d9b0:	1c43      	adds	r3, r0, #1
 800d9b2:	d102      	bne.n	800d9ba <_lseek_r+0x1e>
 800d9b4:	682b      	ldr	r3, [r5, #0]
 800d9b6:	b103      	cbz	r3, 800d9ba <_lseek_r+0x1e>
 800d9b8:	6023      	str	r3, [r4, #0]
 800d9ba:	bd38      	pop	{r3, r4, r5, pc}
 800d9bc:	2000047c 	.word	0x2000047c

0800d9c0 <__swhatbuf_r>:
 800d9c0:	b570      	push	{r4, r5, r6, lr}
 800d9c2:	460e      	mov	r6, r1
 800d9c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9c8:	4614      	mov	r4, r2
 800d9ca:	2900      	cmp	r1, #0
 800d9cc:	461d      	mov	r5, r3
 800d9ce:	b096      	sub	sp, #88	; 0x58
 800d9d0:	da07      	bge.n	800d9e2 <__swhatbuf_r+0x22>
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	602b      	str	r3, [r5, #0]
 800d9d6:	89b3      	ldrh	r3, [r6, #12]
 800d9d8:	061a      	lsls	r2, r3, #24
 800d9da:	d410      	bmi.n	800d9fe <__swhatbuf_r+0x3e>
 800d9dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9e0:	e00e      	b.n	800da00 <__swhatbuf_r+0x40>
 800d9e2:	466a      	mov	r2, sp
 800d9e4:	f000 f8b6 	bl	800db54 <_fstat_r>
 800d9e8:	2800      	cmp	r0, #0
 800d9ea:	dbf2      	blt.n	800d9d2 <__swhatbuf_r+0x12>
 800d9ec:	9a01      	ldr	r2, [sp, #4]
 800d9ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d9f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d9f6:	425a      	negs	r2, r3
 800d9f8:	415a      	adcs	r2, r3
 800d9fa:	602a      	str	r2, [r5, #0]
 800d9fc:	e7ee      	b.n	800d9dc <__swhatbuf_r+0x1c>
 800d9fe:	2340      	movs	r3, #64	; 0x40
 800da00:	2000      	movs	r0, #0
 800da02:	6023      	str	r3, [r4, #0]
 800da04:	b016      	add	sp, #88	; 0x58
 800da06:	bd70      	pop	{r4, r5, r6, pc}

0800da08 <__smakebuf_r>:
 800da08:	898b      	ldrh	r3, [r1, #12]
 800da0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800da0c:	079d      	lsls	r5, r3, #30
 800da0e:	4606      	mov	r6, r0
 800da10:	460c      	mov	r4, r1
 800da12:	d507      	bpl.n	800da24 <__smakebuf_r+0x1c>
 800da14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800da18:	6023      	str	r3, [r4, #0]
 800da1a:	6123      	str	r3, [r4, #16]
 800da1c:	2301      	movs	r3, #1
 800da1e:	6163      	str	r3, [r4, #20]
 800da20:	b002      	add	sp, #8
 800da22:	bd70      	pop	{r4, r5, r6, pc}
 800da24:	466a      	mov	r2, sp
 800da26:	ab01      	add	r3, sp, #4
 800da28:	f7ff ffca 	bl	800d9c0 <__swhatbuf_r>
 800da2c:	9900      	ldr	r1, [sp, #0]
 800da2e:	4605      	mov	r5, r0
 800da30:	4630      	mov	r0, r6
 800da32:	f7ff fa53 	bl	800cedc <_malloc_r>
 800da36:	b948      	cbnz	r0, 800da4c <__smakebuf_r+0x44>
 800da38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da3c:	059a      	lsls	r2, r3, #22
 800da3e:	d4ef      	bmi.n	800da20 <__smakebuf_r+0x18>
 800da40:	f023 0303 	bic.w	r3, r3, #3
 800da44:	f043 0302 	orr.w	r3, r3, #2
 800da48:	81a3      	strh	r3, [r4, #12]
 800da4a:	e7e3      	b.n	800da14 <__smakebuf_r+0xc>
 800da4c:	4b0d      	ldr	r3, [pc, #52]	; (800da84 <__smakebuf_r+0x7c>)
 800da4e:	62b3      	str	r3, [r6, #40]	; 0x28
 800da50:	89a3      	ldrh	r3, [r4, #12]
 800da52:	6020      	str	r0, [r4, #0]
 800da54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da58:	81a3      	strh	r3, [r4, #12]
 800da5a:	9b00      	ldr	r3, [sp, #0]
 800da5c:	6120      	str	r0, [r4, #16]
 800da5e:	6163      	str	r3, [r4, #20]
 800da60:	9b01      	ldr	r3, [sp, #4]
 800da62:	b15b      	cbz	r3, 800da7c <__smakebuf_r+0x74>
 800da64:	4630      	mov	r0, r6
 800da66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da6a:	f000 f885 	bl	800db78 <_isatty_r>
 800da6e:	b128      	cbz	r0, 800da7c <__smakebuf_r+0x74>
 800da70:	89a3      	ldrh	r3, [r4, #12]
 800da72:	f023 0303 	bic.w	r3, r3, #3
 800da76:	f043 0301 	orr.w	r3, r3, #1
 800da7a:	81a3      	strh	r3, [r4, #12]
 800da7c:	89a0      	ldrh	r0, [r4, #12]
 800da7e:	4305      	orrs	r5, r0
 800da80:	81a5      	strh	r5, [r4, #12]
 800da82:	e7cd      	b.n	800da20 <__smakebuf_r+0x18>
 800da84:	0800bbcd 	.word	0x0800bbcd

0800da88 <memmove>:
 800da88:	4288      	cmp	r0, r1
 800da8a:	b510      	push	{r4, lr}
 800da8c:	eb01 0402 	add.w	r4, r1, r2
 800da90:	d902      	bls.n	800da98 <memmove+0x10>
 800da92:	4284      	cmp	r4, r0
 800da94:	4623      	mov	r3, r4
 800da96:	d807      	bhi.n	800daa8 <memmove+0x20>
 800da98:	1e43      	subs	r3, r0, #1
 800da9a:	42a1      	cmp	r1, r4
 800da9c:	d008      	beq.n	800dab0 <memmove+0x28>
 800da9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800daa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800daa6:	e7f8      	b.n	800da9a <memmove+0x12>
 800daa8:	4601      	mov	r1, r0
 800daaa:	4402      	add	r2, r0
 800daac:	428a      	cmp	r2, r1
 800daae:	d100      	bne.n	800dab2 <memmove+0x2a>
 800dab0:	bd10      	pop	{r4, pc}
 800dab2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dab6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800daba:	e7f7      	b.n	800daac <memmove+0x24>

0800dabc <__malloc_lock>:
 800dabc:	4801      	ldr	r0, [pc, #4]	; (800dac4 <__malloc_lock+0x8>)
 800dabe:	f7fe bcc2 	b.w	800c446 <__retarget_lock_acquire_recursive>
 800dac2:	bf00      	nop
 800dac4:	20000474 	.word	0x20000474

0800dac8 <__malloc_unlock>:
 800dac8:	4801      	ldr	r0, [pc, #4]	; (800dad0 <__malloc_unlock+0x8>)
 800daca:	f7fe bcbd 	b.w	800c448 <__retarget_lock_release_recursive>
 800dace:	bf00      	nop
 800dad0:	20000474 	.word	0x20000474

0800dad4 <_realloc_r>:
 800dad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dad6:	4607      	mov	r7, r0
 800dad8:	4614      	mov	r4, r2
 800dada:	460e      	mov	r6, r1
 800dadc:	b921      	cbnz	r1, 800dae8 <_realloc_r+0x14>
 800dade:	4611      	mov	r1, r2
 800dae0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dae4:	f7ff b9fa 	b.w	800cedc <_malloc_r>
 800dae8:	b922      	cbnz	r2, 800daf4 <_realloc_r+0x20>
 800daea:	f7ff f9ab 	bl	800ce44 <_free_r>
 800daee:	4625      	mov	r5, r4
 800daf0:	4628      	mov	r0, r5
 800daf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daf4:	f000 f850 	bl	800db98 <_malloc_usable_size_r>
 800daf8:	42a0      	cmp	r0, r4
 800dafa:	d20f      	bcs.n	800db1c <_realloc_r+0x48>
 800dafc:	4621      	mov	r1, r4
 800dafe:	4638      	mov	r0, r7
 800db00:	f7ff f9ec 	bl	800cedc <_malloc_r>
 800db04:	4605      	mov	r5, r0
 800db06:	2800      	cmp	r0, #0
 800db08:	d0f2      	beq.n	800daf0 <_realloc_r+0x1c>
 800db0a:	4631      	mov	r1, r6
 800db0c:	4622      	mov	r2, r4
 800db0e:	f7fe fcc5 	bl	800c49c <memcpy>
 800db12:	4631      	mov	r1, r6
 800db14:	4638      	mov	r0, r7
 800db16:	f7ff f995 	bl	800ce44 <_free_r>
 800db1a:	e7e9      	b.n	800daf0 <_realloc_r+0x1c>
 800db1c:	4635      	mov	r5, r6
 800db1e:	e7e7      	b.n	800daf0 <_realloc_r+0x1c>

0800db20 <_read_r>:
 800db20:	b538      	push	{r3, r4, r5, lr}
 800db22:	4604      	mov	r4, r0
 800db24:	4608      	mov	r0, r1
 800db26:	4611      	mov	r1, r2
 800db28:	2200      	movs	r2, #0
 800db2a:	4d05      	ldr	r5, [pc, #20]	; (800db40 <_read_r+0x20>)
 800db2c:	602a      	str	r2, [r5, #0]
 800db2e:	461a      	mov	r2, r3
 800db30:	f7f4 f9ce 	bl	8001ed0 <_read>
 800db34:	1c43      	adds	r3, r0, #1
 800db36:	d102      	bne.n	800db3e <_read_r+0x1e>
 800db38:	682b      	ldr	r3, [r5, #0]
 800db3a:	b103      	cbz	r3, 800db3e <_read_r+0x1e>
 800db3c:	6023      	str	r3, [r4, #0]
 800db3e:	bd38      	pop	{r3, r4, r5, pc}
 800db40:	2000047c 	.word	0x2000047c

0800db44 <abort>:
 800db44:	2006      	movs	r0, #6
 800db46:	b508      	push	{r3, lr}
 800db48:	f000 f856 	bl	800dbf8 <raise>
 800db4c:	2001      	movs	r0, #1
 800db4e:	f7f4 f9b5 	bl	8001ebc <_exit>
	...

0800db54 <_fstat_r>:
 800db54:	b538      	push	{r3, r4, r5, lr}
 800db56:	2300      	movs	r3, #0
 800db58:	4d06      	ldr	r5, [pc, #24]	; (800db74 <_fstat_r+0x20>)
 800db5a:	4604      	mov	r4, r0
 800db5c:	4608      	mov	r0, r1
 800db5e:	4611      	mov	r1, r2
 800db60:	602b      	str	r3, [r5, #0]
 800db62:	f7f4 f9f9 	bl	8001f58 <_fstat>
 800db66:	1c43      	adds	r3, r0, #1
 800db68:	d102      	bne.n	800db70 <_fstat_r+0x1c>
 800db6a:	682b      	ldr	r3, [r5, #0]
 800db6c:	b103      	cbz	r3, 800db70 <_fstat_r+0x1c>
 800db6e:	6023      	str	r3, [r4, #0]
 800db70:	bd38      	pop	{r3, r4, r5, pc}
 800db72:	bf00      	nop
 800db74:	2000047c 	.word	0x2000047c

0800db78 <_isatty_r>:
 800db78:	b538      	push	{r3, r4, r5, lr}
 800db7a:	2300      	movs	r3, #0
 800db7c:	4d05      	ldr	r5, [pc, #20]	; (800db94 <_isatty_r+0x1c>)
 800db7e:	4604      	mov	r4, r0
 800db80:	4608      	mov	r0, r1
 800db82:	602b      	str	r3, [r5, #0]
 800db84:	f7f4 f9f7 	bl	8001f76 <_isatty>
 800db88:	1c43      	adds	r3, r0, #1
 800db8a:	d102      	bne.n	800db92 <_isatty_r+0x1a>
 800db8c:	682b      	ldr	r3, [r5, #0]
 800db8e:	b103      	cbz	r3, 800db92 <_isatty_r+0x1a>
 800db90:	6023      	str	r3, [r4, #0]
 800db92:	bd38      	pop	{r3, r4, r5, pc}
 800db94:	2000047c 	.word	0x2000047c

0800db98 <_malloc_usable_size_r>:
 800db98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db9c:	1f18      	subs	r0, r3, #4
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	bfbc      	itt	lt
 800dba2:	580b      	ldrlt	r3, [r1, r0]
 800dba4:	18c0      	addlt	r0, r0, r3
 800dba6:	4770      	bx	lr

0800dba8 <_raise_r>:
 800dba8:	291f      	cmp	r1, #31
 800dbaa:	b538      	push	{r3, r4, r5, lr}
 800dbac:	4604      	mov	r4, r0
 800dbae:	460d      	mov	r5, r1
 800dbb0:	d904      	bls.n	800dbbc <_raise_r+0x14>
 800dbb2:	2316      	movs	r3, #22
 800dbb4:	6003      	str	r3, [r0, #0]
 800dbb6:	f04f 30ff 	mov.w	r0, #4294967295
 800dbba:	bd38      	pop	{r3, r4, r5, pc}
 800dbbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dbbe:	b112      	cbz	r2, 800dbc6 <_raise_r+0x1e>
 800dbc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dbc4:	b94b      	cbnz	r3, 800dbda <_raise_r+0x32>
 800dbc6:	4620      	mov	r0, r4
 800dbc8:	f000 f830 	bl	800dc2c <_getpid_r>
 800dbcc:	462a      	mov	r2, r5
 800dbce:	4601      	mov	r1, r0
 800dbd0:	4620      	mov	r0, r4
 800dbd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbd6:	f000 b817 	b.w	800dc08 <_kill_r>
 800dbda:	2b01      	cmp	r3, #1
 800dbdc:	d00a      	beq.n	800dbf4 <_raise_r+0x4c>
 800dbde:	1c59      	adds	r1, r3, #1
 800dbe0:	d103      	bne.n	800dbea <_raise_r+0x42>
 800dbe2:	2316      	movs	r3, #22
 800dbe4:	6003      	str	r3, [r0, #0]
 800dbe6:	2001      	movs	r0, #1
 800dbe8:	e7e7      	b.n	800dbba <_raise_r+0x12>
 800dbea:	2400      	movs	r4, #0
 800dbec:	4628      	mov	r0, r5
 800dbee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dbf2:	4798      	blx	r3
 800dbf4:	2000      	movs	r0, #0
 800dbf6:	e7e0      	b.n	800dbba <_raise_r+0x12>

0800dbf8 <raise>:
 800dbf8:	4b02      	ldr	r3, [pc, #8]	; (800dc04 <raise+0xc>)
 800dbfa:	4601      	mov	r1, r0
 800dbfc:	6818      	ldr	r0, [r3, #0]
 800dbfe:	f7ff bfd3 	b.w	800dba8 <_raise_r>
 800dc02:	bf00      	nop
 800dc04:	20000014 	.word	0x20000014

0800dc08 <_kill_r>:
 800dc08:	b538      	push	{r3, r4, r5, lr}
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	4d06      	ldr	r5, [pc, #24]	; (800dc28 <_kill_r+0x20>)
 800dc0e:	4604      	mov	r4, r0
 800dc10:	4608      	mov	r0, r1
 800dc12:	4611      	mov	r1, r2
 800dc14:	602b      	str	r3, [r5, #0]
 800dc16:	f7f4 f941 	bl	8001e9c <_kill>
 800dc1a:	1c43      	adds	r3, r0, #1
 800dc1c:	d102      	bne.n	800dc24 <_kill_r+0x1c>
 800dc1e:	682b      	ldr	r3, [r5, #0]
 800dc20:	b103      	cbz	r3, 800dc24 <_kill_r+0x1c>
 800dc22:	6023      	str	r3, [r4, #0]
 800dc24:	bd38      	pop	{r3, r4, r5, pc}
 800dc26:	bf00      	nop
 800dc28:	2000047c 	.word	0x2000047c

0800dc2c <_getpid_r>:
 800dc2c:	f7f4 b92f 	b.w	8001e8e <_getpid>

0800dc30 <_init>:
 800dc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc32:	bf00      	nop
 800dc34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc36:	bc08      	pop	{r3}
 800dc38:	469e      	mov	lr, r3
 800dc3a:	4770      	bx	lr

0800dc3c <_fini>:
 800dc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc3e:	bf00      	nop
 800dc40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc42:	bc08      	pop	{r3}
 800dc44:	469e      	mov	lr, r3
 800dc46:	4770      	bx	lr
